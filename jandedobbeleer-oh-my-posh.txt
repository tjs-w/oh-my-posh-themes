Directory structure:
└── jandedobbeleer-oh-my-posh/
    ├── README.md
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── COPYING
    ├── SECURITY.md
    ├── .all-contributorsrc
    ├── .commitlintrc.yml
    ├── .editorconfig
    ├── .markdownlint.yaml
    ├── .markdownlintignore
    ├── .versionrc.json
    ├── src/
    │   ├── go.mod
    │   ├── go.sum
    │   ├── main.go
    │   ├── main_test.go
    │   ├── metadata.json
    │   ├── .golangci.yml
    │   ├── .goreleaser.yml
    │   ├── cache/
    │   │   ├── cache.go
    │   │   ├── clear.go
    │   │   ├── command.go
    │   │   ├── config.go
    │   │   ├── duration.go
    │   │   ├── duration_test.go
    │   │   ├── file.go
    │   │   ├── path.go
    │   │   ├── template.go
    │   │   └── mock/
    │   │       └── cache.go
    │   ├── cli/
    │   │   ├── args.go
    │   │   ├── auth.go
    │   │   ├── cache.go
    │   │   ├── config.go
    │   │   ├── config_export.go
    │   │   ├── config_export_image.go
    │   │   ├── config_migrate.go
    │   │   ├── config_migrate_glyphs.go
    │   │   ├── debug.go
    │   │   ├── disable.go
    │   │   ├── edit.go
    │   │   ├── enable.go
    │   │   ├── font.go
    │   │   ├── get.go
    │   │   ├── init.go
    │   │   ├── notice.go
    │   │   ├── print.go
    │   │   ├── prompt.go
    │   │   ├── root.go
    │   │   ├── toggle.go
    │   │   ├── upgrade.go
    │   │   ├── version.go
    │   │   ├── auth/
    │   │   │   ├── cli.go
    │   │   │   ├── ytmda.go
    │   │   │   └── ytmda_test.go
    │   │   ├── font/
    │   │   │   ├── cli.go
    │   │   │   ├── download.go
    │   │   │   ├── font.go
    │   │   │   ├── fonts.go
    │   │   │   ├── install.go
    │   │   │   ├── install_darwin.go
    │   │   │   ├── install_unix.go
    │   │   │   └── install_windows.go
    │   │   ├── image/
    │   │   │   ├── image.go
    │   │   │   └── image_test.go
    │   │   ├── progress/
    │   │   │   ├── model.go
    │   │   │   └── reader.go
    │   │   └── upgrade/
    │   │       ├── cli.go
    │   │       ├── cli_test.go
    │   │       ├── config.go
    │   │       ├── install.go
    │   │       ├── install_noop.go
    │   │       ├── install_windows.go
    │   │       ├── notice.go
    │   │       ├── notice_test.go
    │   │       ├── public_key.pem
    │   │       ├── verify.go
    │   │       └── verify_test.go
    │   ├── color/
    │   │   ├── colors.go
    │   │   ├── colors_darwin.go
    │   │   ├── colors_test.go
    │   │   ├── colors_unix.go
    │   │   ├── colors_windows.go
    │   │   ├── cycle.go
    │   │   ├── keywords.go
    │   │   ├── palette.go
    │   │   ├── palette_test.go
    │   │   └── palettes.go
    │   ├── config/
    │   │   ├── backup.go
    │   │   ├── block.go
    │   │   ├── config.go
    │   │   ├── config_test.go
    │   │   ├── default.go
    │   │   ├── download.go
    │   │   ├── load.go
    │   │   ├── migrate.go
    │   │   ├── migrate_glyphs.go
    │   │   ├── migrate_glyphs_test.go
    │   │   ├── migrate_test.go
    │   │   ├── responsive.go
    │   │   ├── responsive_test.go
    │   │   ├── segment.go
    │   │   ├── segment_test.go
    │   │   └── segment_types.go
    │   ├── constants/
    │   │   ├── constants_unix.go
    │   │   ├── constants_windows64.go
    │   │   └── constrants_windows386.go
    │   ├── log/
    │   │   ├── log.go
    │   │   └── print.go
    │   ├── maps/
    │   │   ├── concurrent.go
    │   │   ├── config.go
    │   │   └── simple.go
    │   ├── prompt/
    │   │   ├── debug.go
    │   │   ├── engine.go
    │   │   ├── engine_test.go
    │   │   ├── extra.go
    │   │   ├── preview.go
    │   │   ├── primary.go
    │   │   ├── rprompt.go
    │   │   ├── segments.go
    │   │   ├── segments_test.go
    │   │   └── tooltip.go
    │   ├── properties/
    │   │   ├── map.go
    │   │   ├── map_test.go
    │   │   └── properties.go
    │   ├── regex/
    │   │   ├── regex.go
    │   │   └── regex_test.go
    │   ├── runtime/
    │   │   ├── environment.go
    │   │   ├── networks_windows.go
    │   │   ├── terminal.go
    │   │   ├── terminal_darwin.go
    │   │   ├── terminal_test.go
    │   │   ├── terminal_unix.go
    │   │   ├── terminal_windows.go
    │   │   ├── terminal_windows_nix.go
    │   │   ├── win32_windows.go
    │   │   ├── battery/
    │   │   │   ├── battery.go
    │   │   │   ├── battery_darwin.go
    │   │   │   ├── battery_darwin_test.go
    │   │   │   ├── battery_linux.go
    │   │   │   ├── battery_netbsd.go
    │   │   │   ├── battery_openandfreebsd.go
    │   │   │   ├── battery_openandfreebsd_test.go
    │   │   │   ├── battery_windows.go
    │   │   │   ├── battery_windows_nix.go
    │   │   │   ├── battery_windows_nix_test.go
    │   │   │   ├── errors.go
    │   │   │   └── errors_test.go
    │   │   ├── cmd/
    │   │   │   └── run.go
    │   │   ├── http/
    │   │   │   ├── connection.go
    │   │   │   ├── http.go
    │   │   │   ├── oauth.go
    │   │   │   ├── oauth_test.go
    │   │   │   ├── request.go
    │   │   │   └── request_test.go
    │   │   ├── mock/
    │   │   │   └── environment.go
    │   │   └── path/
    │   │       ├── clean.go
    │   │       ├── home.go
    │   │       └── separator.go
    │   ├── segments/
    │   │   ├── angular.go
    │   │   ├── argocd.go
    │   │   ├── argocd_test.go
    │   │   ├── aurelia.go
    │   │   ├── aws.go
    │   │   ├── aws_test.go
    │   │   ├── az.go
    │   │   ├── az_functions.go
    │   │   ├── az_test.go
    │   │   ├── azd.go
    │   │   ├── azd_test.go
    │   │   ├── base.go
    │   │   ├── battery.go
    │   │   ├── bazel.go
    │   │   ├── bazel_test.go
    │   │   ├── brewfather.go
    │   │   ├── brewfather_test.go
    │   │   ├── buf.go
    │   │   ├── buf_test.go
    │   │   ├── bun.go
    │   │   ├── bun_test.go
    │   │   ├── carbon_intensity.go
    │   │   ├── carbon_intensity_test.go
    │   │   ├── cds.go
    │   │   ├── cds_test.go
    │   │   ├── cf.go
    │   │   ├── cf_target.go
    │   │   ├── cf_target_test.go
    │   │   ├── cf_test.go
    │   │   ├── cmake.go
    │   │   ├── cmake_test.go
    │   │   ├── command.go
    │   │   ├── command_test.go
    │   │   ├── connection.go
    │   │   ├── connection_test.go
    │   │   ├── crystal.go
    │   │   ├── crystal_test.go
    │   │   ├── dart.go
    │   │   ├── dart_test.go
    │   │   ├── deno.go
    │   │   ├── deno_test.go
    │   │   ├── docker.go
    │   │   ├── docker_test.go
    │   │   ├── dotnet.go
    │   │   ├── dotnet_test.go
    │   │   ├── elixir.go
    │   │   ├── elixir_test.go
    │   │   ├── executiontime.go
    │   │   ├── executiontime_test.go
    │   │   ├── firebase.go
    │   │   ├── firebase_test.go
    │   │   ├── flutter.go
    │   │   ├── flutter_test.go
    │   │   ├── fortran.go
    │   │   ├── fortran_test.go
    │   │   ├── fossil.go
    │   │   ├── fossil_test.go
    │   │   ├── gcp.go
    │   │   ├── gcp_test.go
    │   │   ├── git.go
    │   │   ├── git_test.go
    │   │   ├── git_unix.go
    │   │   ├── git_unix_test.go
    │   │   ├── git_windows.go
    │   │   ├── git_windows_test.go
    │   │   ├── gitversion.go
    │   │   ├── gitversion_test.go
    │   │   ├── golang.go
    │   │   ├── golang_test.go
    │   │   ├── haskell.go
    │   │   ├── haskell_test.go
    │   │   ├── helm.go
    │   │   ├── helm_test.go
    │   │   ├── http.go
    │   │   ├── http_test.go
    │   │   ├── ipify.go
    │   │   ├── ipify_test.go
    │   │   ├── java.go
    │   │   ├── java_test.go
    │   │   ├── jujutsu.go
    │   │   ├── jujutsu_test.go
    │   │   ├── julia.go
    │   │   ├── julia_test.go
    │   │   ├── kotlin.go
    │   │   ├── kotlin_test.go
    │   │   ├── kubectl.go
    │   │   ├── kubectl_test.go
    │   │   ├── language.go
    │   │   ├── language_test.go
    │   │   ├── lastfm.go
    │   │   ├── lastfm_test.go
    │   │   ├── lua.go
    │   │   ├── lua_test.go
    │   │   ├── mercurial.go
    │   │   ├── mercurial_test.go
    │   │   ├── mojo.go
    │   │   ├── mojo_test.go
    │   │   ├── mvn.go
    │   │   ├── mvn_test.go
    │   │   ├── nba.go
    │   │   ├── nba_test.go
    │   │   ├── nbgv.go
    │   │   ├── nbgv_test.go
    │   │   ├── nightscout.go
    │   │   ├── nightscout_test.go
    │   │   ├── nim.go
    │   │   ├── nim_test.go
    │   │   ├── nixshell.go
    │   │   ├── nixshell_test.go
    │   │   ├── node.go
    │   │   ├── node_test.go
    │   │   ├── npm.go
    │   │   ├── npm_test.go
    │   │   ├── nx.go
    │   │   ├── ocaml.go
    │   │   ├── ocaml_test.go
    │   │   ├── os.go
    │   │   ├── os_test.go
    │   │   ├── owm.go
    │   │   ├── owm_test.go
    │   │   ├── path.go
    │   │   ├── path_test.go
    │   │   ├── path_unix_test.go
    │   │   ├── path_windows_test.go
    │   │   ├── perl.go
    │   │   ├── perl_test.go
    │   │   ├── php.go
    │   │   ├── php_test.go
    │   │   ├── plastic.go
    │   │   ├── plastic_test.go
    │   │   ├── pnpm.go
    │   │   ├── pnpm_test.go
    │   │   ├── posh_git.go
    │   │   ├── posh_git_test.go
    │   │   ├── project.go
    │   │   ├── project_test.go
    │   │   ├── pulumi.go
    │   │   ├── pulumi_test.go
    │   │   ├── python.go
    │   │   ├── python_test.go
    │   │   ├── quasar.go
    │   │   ├── quasar_test.go
    │   │   ├── r.go
    │   │   ├── r_test.go
    │   │   ├── react.go
    │   │   ├── root.go
    │   │   ├── ruby.go
    │   │   ├── ruby_test.go
    │   │   ├── rust.go
    │   │   ├── rust_test.go
    │   │   ├── sapling.go
    │   │   ├── sapling_test.go
    │   │   ├── scm.go
    │   │   ├── scm_test.go
    │   │   ├── session.go
    │   │   ├── session_test.go
    │   │   ├── shell.go
    │   │   ├── shell_test.go
    │   │   ├── sitecore.go
    │   │   ├── sitecore_test.go
    │   │   ├── spotify.go
    │   │   ├── spotify_darwin.go
    │   │   ├── spotify_darwin_test.go
    │   │   ├── spotify_linux.go
    │   │   ├── spotify_linux_test.go
    │   │   ├── spotify_noop.go
    │   │   ├── spotify_test.go
    │   │   ├── spotify_windows.go
    │   │   ├── spotify_windows_test.go
    │   │   ├── status.go
    │   │   ├── status_test.go
    │   │   ├── strava.go
    │   │   ├── strava_test.go
    │   │   ├── svelte.go
    │   │   ├── svn.go
    │   │   ├── svn_test.go
    │   │   ├── swift.go
    │   │   ├── swift_test.go
    │   │   ├── sysinfo.go
    │   │   ├── sysinfo_test.go
    │   │   ├── talosctl.go
    │   │   ├── talosctl_test.go
    │   │   ├── tauri.go
    │   │   ├── terraform.go
    │   │   ├── terraform_test.go
    │   │   ├── text.go
    │   │   ├── text_test.go
    │   │   ├── time.go
    │   │   ├── time_test.go
    │   │   ├── ui5tooling.go
    │   │   ├── ui5tooling_test.go
    │   │   ├── umbraco.go
    │   │   ├── umbraco_test.go
    │   │   ├── unity.go
    │   │   ├── unity_test.go
    │   │   ├── upgrade.go
    │   │   ├── upgrade_test.go
    │   │   ├── v.go
    │   │   ├── v_test.go
    │   │   ├── vala.go
    │   │   ├── vala_test.go
    │   │   ├── wakatime.go
    │   │   ├── wakatime_test.go
    │   │   ├── winreg.go
    │   │   ├── winreg_test.go
    │   │   ├── withings.go
    │   │   ├── withings_test.go
    │   │   ├── xmake.go
    │   │   ├── xmake_test.go
    │   │   ├── yarn.go
    │   │   ├── yarn_test.go
    │   │   ├── ytm.go
    │   │   ├── ytm_test.go
    │   │   ├── zig.go
    │   │   └── zig_test.go
    │   ├── shell/
    │   │   ├── bash.go
    │   │   ├── bash_test.go
    │   │   ├── cmd.go
    │   │   ├── cmd_test.go
    │   │   ├── code.go
    │   │   ├── constants.go
    │   │   ├── elvish.go
    │   │   ├── elvish_test.go
    │   │   ├── features.go
    │   │   ├── filesystem.go
    │   │   ├── fish.go
    │   │   ├── fish_test.go
    │   │   ├── formats.go
    │   │   ├── init.go
    │   │   ├── nu.go
    │   │   ├── nu_test.go
    │   │   ├── pwsh.go
    │   │   ├── pwsh_test.go
    │   │   ├── xonsh.go
    │   │   ├── xonsh_test.go
    │   │   ├── zsh.go
    │   │   ├── zsh_test.go
    │   │   └── scripts/
    │   │       ├── omp.bash
    │   │       ├── omp.elv
    │   │       ├── omp.fish
    │   │       ├── omp.lua
    │   │       ├── omp.nu
    │   │       ├── omp.ps1
    │   │       ├── omp.xsh
    │   │       └── omp.zsh
    │   ├── template/
    │   │   ├── cache.go
    │   │   ├── compare.go
    │   │   ├── compare_test.go
    │   │   ├── files.go
    │   │   ├── files_test.go
    │   │   ├── func_map.go
    │   │   ├── init.go
    │   │   ├── link.go
    │   │   ├── link_test.go
    │   │   ├── list.go
    │   │   ├── numbers.go
    │   │   ├── numbers_test.go
    │   │   ├── random.go
    │   │   ├── random_test.go
    │   │   ├── reason.go
    │   │   ├── regex.go
    │   │   ├── render_pool.go
    │   │   ├── round.go
    │   │   ├── round_test.go
    │   │   ├── strings.go
    │   │   ├── strings_test.go
    │   │   ├── text.go
    │   │   └── text_test.go
    │   ├── terminal/
    │   │   ├── iterm.go
    │   │   ├── writer.go
    │   │   ├── writer_hyperlink_test.go
    │   │   └── writer_test.go
    │   ├── test/
    │   │   ├── azureProfile.json
    │   │   ├── AzureRmContext.json
    │   │   ├── empty.nuspec
    │   │   ├── go.work
    │   │   ├── invalid.nuspec
    │   │   ├── jandedobbeleer-palette.omp.json
    │   │   ├── jandedobbeleer.omp.json
    │   │   ├── kubectl.yml
    │   │   ├── oh-my-posh.psd1
    │   │   ├── valid.nuspec
    │   │   ├── versions.tf
    │   │   ├── nba/
    │   │   │   ├── schedule.json
    │   │   │   └── score.json
    │   │   ├── signing/
    │   │   │   ├── checksums.txt
    │   │   │   ├── checksums.txt.invalid.sig
    │   │   │   └── checksums.txt.sig
    │   │   └── umbraco/
    │   │       ├── ANonUmbracoProject.csproj
    │   │       ├── MyProject.csproj
    │   │       ├── web.config
    │   │       └── web.old.config
    │   └── winres/
    │       └── winres.json
    ├── themes/
    │   ├── 1_shell.omp.json
    │   ├── agnoster.minimal.omp.json
    │   ├── agnoster.omp.json
    │   ├── agnosterplus.omp.json
    │   ├── aliens.omp.json
    │   ├── amro.omp.json
    │   ├── atomic.omp.json
    │   ├── atomicBit.omp.json
    │   ├── avit.omp.json
    │   ├── blue-owl.omp.json
    │   ├── blueish.omp.json
    │   ├── bubbles.omp.json
    │   ├── bubblesextra.omp.json
    │   ├── bubblesline.omp.json
    │   ├── capr4n.omp.json
    │   ├── catppuccin.omp.json
    │   ├── catppuccin_frappe.omp.json
    │   ├── catppuccin_latte.omp.json
    │   ├── catppuccin_macchiato.omp.json
    │   ├── catppuccin_mocha.omp.json
    │   ├── cert.omp.json
    │   ├── chips.omp.json
    │   ├── cinnamon.omp.json
    │   ├── clean-detailed.omp.json
    │   ├── cloud-context.omp.json
    │   ├── cloud-native-azure.omp.json
    │   ├── cobalt2.omp.json
    │   ├── craver.omp.json
    │   ├── darkblood.omp.json
    │   ├── devious-diamonds.omp.yaml
    │   ├── di4am0nd.omp.json
    │   ├── dracula.omp.json
    │   ├── easy-term.omp.json
    │   ├── emodipt-extend.omp.json
    │   ├── emodipt.omp.json
    │   ├── fish.omp.json
    │   ├── free-ukraine.omp.json
    │   ├── froczh.omp.json
    │   ├── glowsticks.omp.yaml
    │   ├── gmay.omp.json
    │   ├── grandpa-style.omp.json
    │   ├── gruvbox.omp.json
    │   ├── half-life.omp.json
    │   ├── honukai.omp.json
    │   ├── hotstick.minimal.omp.json
    │   ├── hul10.omp.json
    │   ├── hunk.omp.json
    │   ├── huvix.omp.json
    │   ├── if_tea.omp.json
    │   ├── illusi0n.omp.json
    │   ├── iterm2.omp.json
    │   ├── jandedobbeleer.omp.json
    │   ├── jblab_2021.omp.json
    │   ├── jonnychipz.omp.json
    │   ├── json.omp.json
    │   ├── jtracey93.omp.json
    │   ├── jv_sitecorian.omp.json
    │   ├── kali.omp.json
    │   ├── kushal.omp.json
    │   ├── lambda.omp.json
    │   ├── lambdageneration.omp.json
    │   ├── larserikfinholt.omp.json
    │   ├── lightgreen.omp.json
    │   ├── M365Princess.omp.json
    │   ├── marcduiker.omp.json
    │   ├── markbull.omp.json
    │   ├── material.omp.json
    │   ├── microverse-power.omp.json
    │   ├── mojada.omp.json
    │   ├── montys.omp.json
    │   ├── mt.omp.json
    │   ├── multiverse-neon.omp.json
    │   ├── negligible.omp.json
    │   ├── neko.omp.json
    │   ├── night-owl.omp.json
    │   ├── nordtron.omp.json
    │   ├── nu4a.omp.json
    │   ├── onehalf.minimal.omp.json
    │   ├── paradox.omp.json
    │   ├── pararussel.omp.json
    │   ├── patriksvensson.omp.json
    │   ├── peru.omp.json
    │   ├── pixelrobots.omp.json
    │   ├── plague.omp.json
    │   ├── poshmon.omp.json
    │   ├── powerlevel10k_classic.omp.json
    │   ├── powerlevel10k_lean.omp.json
    │   ├── powerlevel10k_modern.omp.json
    │   ├── powerlevel10k_rainbow.omp.json
    │   ├── powerline.omp.json
    │   ├── probua.minimal.omp.json
    │   ├── pure.omp.json
    │   ├── quick-term.omp.json
    │   ├── remk.omp.json
    │   ├── robbyrussell.omp.json
    │   ├── rudolfs-dark.omp.json
    │   ├── rudolfs-light.omp.json
    │   ├── schema.json
    │   ├── sim-web.omp.json
    │   ├── slim.omp.json
    │   ├── slimfat.omp.json
    │   ├── smoothie.omp.json
    │   ├── sonicboom_dark.omp.json
    │   ├── sonicboom_light.omp.json
    │   ├── sorin.omp.json
    │   ├── space.omp.json
    │   ├── spaceship.omp.json
    │   ├── star.omp.json
    │   ├── stelbent-compact.minimal.omp.json
    │   ├── stelbent.minimal.omp.json
    │   ├── takuya.omp.json
    │   ├── the-unnamed.omp.json
    │   ├── thecyberden.omp.json
    │   ├── tiwahu.omp.json
    │   ├── tokyo.omp.json
    │   ├── tokyonight_storm.omp.json
    │   ├── tonybaloney.omp.json
    │   ├── uew.omp.json
    │   ├── unicorn.omp.json
    │   ├── velvet.omp.json
    │   ├── wholespace.omp.json
    │   ├── wopian.omp.json
    │   ├── xtoys.omp.json
    │   ├── ys.omp.json
    │   └── zash.omp.json
    ├── website/
    │   ├── README.md
    │   ├── docusaurus.config.js
    │   ├── export_themes.js
    │   ├── package.json
    │   ├── sidebars.js
    │   ├── staticwebapp.config.json
    │   ├── api/
    │   │   ├── host.json
    │   │   ├── package.json
    │   │   ├── proxies.json
    │   │   ├── .funcignore
    │   │   ├── auth/
    │   │   │   ├── function.json
    │   │   │   └── index.js
    │   │   ├── refresh/
    │   │   │   ├── function.json
    │   │   │   └── index.js
    │   │   └── shared/
    │   │       ├── strava.js
    │   │       └── withings.js
    │   ├── blog/
    │   │   ├── 2022-03-20-whats-new-1.mdx
    │   │   ├── 2022-03-27-whats-new-2.mdx
    │   │   ├── 2022-03-28-idiots-everywhere.md
    │   │   ├── 2022-05-19-whats-new-3.mdx
    │   │   └── 2024-07-22-bash-rprompt.mdx
    │   ├── docs/
    │   │   ├── auth.mdx
    │   │   ├── contributors.md
    │   │   ├── faq.mdx
    │   │   ├── migrating-module.md
    │   │   ├── share-theme.md
    │   │   ├── themes.md
    │   │   ├── configuration/
    │   │   │   ├── block.mdx
    │   │   │   ├── colors.mdx
    │   │   │   ├── debug-prompt.mdx
    │   │   │   ├── example.mdx
    │   │   │   ├── general.mdx
    │   │   │   ├── introduction.md
    │   │   │   ├── line-error.mdx
    │   │   │   ├── secondary-prompt.mdx
    │   │   │   ├── segment.mdx
    │   │   │   ├── templates.mdx
    │   │   │   ├── title.mdx
    │   │   │   ├── tooltips.mdx
    │   │   │   └── transient.mdx
    │   │   ├── contributing/
    │   │   │   ├── git.mdx
    │   │   │   ├── plastic.mdx
    │   │   │   ├── segment.mdx
    │   │   │   └── started.mdx
    │   │   ├── installation/
    │   │   │   ├── customize.mdx
    │   │   │   ├── fonts.mdx
    │   │   │   ├── homebrew.mdx
    │   │   │   ├── linux.mdx
    │   │   │   ├── macos.mdx
    │   │   │   ├── next.mdx
    │   │   │   ├── prompt.mdx
    │   │   │   ├── upgrade.mdx
    │   │   │   └── windows.mdx
    │   │   └── segments/
    │   │       ├── cli/
    │   │       │   ├── angular.mdx
    │   │       │   ├── argocd.mdx
    │   │       │   ├── aurelia.mdx
    │   │       │   ├── bazel.mdx
    │   │       │   ├── buf.mdx
    │   │       │   ├── bun.mdx
    │   │       │   ├── cmake.mdx
    │   │       │   ├── deno.mdx
    │   │       │   ├── docker.mdx
    │   │       │   ├── firebase.mdx
    │   │       │   ├── flutter.mdx
    │   │       │   ├── gitversion.mdx
    │   │       │   ├── helm.mdx
    │   │       │   ├── kubectl.mdx
    │   │       │   ├── mvn.mdx
    │   │       │   ├── nbgv.mdx
    │   │       │   ├── nix-shell.mdx
    │   │       │   ├── npm.mdx
    │   │       │   ├── nx.mdx
    │   │       │   ├── pnpm.mdx
    │   │       │   ├── quasar.mdx
    │   │       │   ├── react.mdx
    │   │       │   ├── svelte.mdx
    │   │       │   ├── talosctl.mdx
    │   │       │   ├── tauri.mdx
    │   │       │   ├── terraform.mdx
    │   │       │   ├── ui5tooling.mdx
    │   │       │   ├── umbraco.mdx
    │   │       │   ├── unity.mdx
    │   │       │   ├── xmake.mdx
    │   │       │   └── yarn.mdx
    │   │       ├── cloud/
    │   │       │   ├── aws.mdx
    │   │       │   ├── az.mdx
    │   │       │   ├── azd.mdx
    │   │       │   ├── azfunc.mdx
    │   │       │   ├── cds.mdx
    │   │       │   ├── cf.mdx
    │   │       │   ├── cftarget.mdx
    │   │       │   ├── gcp.mdx
    │   │       │   ├── pulumi.mdx
    │   │       │   └── sitecore.mdx
    │   │       ├── health/
    │   │       │   ├── nightscout.mdx
    │   │       │   ├── strava.mdx
    │   │       │   └── withings.mdx
    │   │       ├── languages/
    │   │       │   ├── crystal.mdx
    │   │       │   ├── dart.mdx
    │   │       │   ├── dotnet.mdx
    │   │       │   ├── elixir.mdx
    │   │       │   ├── fortran.mdx
    │   │       │   ├── golang.mdx
    │   │       │   ├── haskell.mdx
    │   │       │   ├── java.mdx
    │   │       │   ├── julia.mdx
    │   │       │   ├── kotlin.mdx
    │   │       │   ├── lua.mdx
    │   │       │   ├── mojo.mdx
    │   │       │   ├── nim.mdx
    │   │       │   ├── node.mdx
    │   │       │   ├── ocaml.mdx
    │   │       │   ├── perl.mdx
    │   │       │   ├── php.mdx
    │   │       │   ├── python.mdx
    │   │       │   ├── r.mdx
    │   │       │   ├── ruby.mdx
    │   │       │   ├── rust.mdx
    │   │       │   ├── swift.mdx
    │   │       │   ├── v.mdx
    │   │       │   ├── vala.mdx
    │   │       │   └── zig.mdx
    │   │       ├── music/
    │   │       │   ├── lastfm.mdx
    │   │       │   ├── spotify.mdx
    │   │       │   └── ytm.mdx
    │   │       ├── scm/
    │   │       │   ├── fossil.mdx
    │   │       │   ├── git.mdx
    │   │       │   ├── jujutsu.mdx
    │   │       │   ├── mercurial.mdx
    │   │       │   ├── plastic.mdx
    │   │       │   ├── sapling.mdx
    │   │       │   └── svn.mdx
    │   │       ├── system/
    │   │       │   ├── battery.mdx
    │   │       │   ├── command.mdx
    │   │       │   ├── connection.mdx
    │   │       │   ├── executiontime.mdx
    │   │       │   ├── os.mdx
    │   │       │   ├── path.mdx
    │   │       │   ├── project.mdx
    │   │       │   ├── root.mdx
    │   │       │   ├── session.mdx
    │   │       │   ├── shell.mdx
    │   │       │   ├── status.mdx
    │   │       │   ├── sysinfo.mdx
    │   │       │   ├── text.mdx
    │   │       │   ├── time.mdx
    │   │       │   ├── upgrade.mdx
    │   │       │   └── winreg.mdx
    │   │       └── web/
    │   │           ├── brewfather.mdx
    │   │           ├── carbonintensity.mdx
    │   │           ├── http.mdx
    │   │           ├── ipify.mdx
    │   │           ├── nba.mdx
    │   │           ├── owm.mdx
    │   │           └── wakatime.mdx
    │   ├── plugins/
    │   │   └── appinsights/
    │   │       ├── analytics.js
    │   │       └── index.js
    │   ├── src/
    │   │   ├── components/
    │   │   │   ├── Auth.js
    │   │   │   └── Config.js
    │   │   ├── css/
    │   │   │   ├── custom.css
    │   │   │   └── prism-rose-pine-moon.css
    │   │   └── pages/
    │   │       ├── index.js
    │   │       ├── privacy.mdx
    │   │       └── styles.module.css
    │   └── static/
    │       ├── codepoints.csv
    │       ├── install.ps1
    │       ├── install.sh
    │       ├── .nojekyll
    │       ├── fonts/
    │       │   ├── fonts.zip
    │       │   └── VictorMono.ttf
    │       └── img/
    │           └── themes/
    │               └── .keep
    ├── .config/
    │   └── configuration.winget
    ├── .devcontainer/
    │   ├── config.fish
    │   ├── devcontainer.json
    │   ├── Dockerfile
    │   └── Microsoft.PowerShell_profile.ps1
    └── .github/
        ├── copilot-instructions.md
        ├── dependabot.yml
        ├── FUNDING.yml
        ├── holopin.yml
        ├── PULL_REQUEST_TEMPLATE.md
        ├── stale.yml
        ├── ISSUE_TEMPLATE/
        │   ├── bug.yml
        │   ├── config.yml
        │   ├── docs.yml
        │   ├── enhancement.yml
        │   └── feat.yml
        └── workflows/
            ├── android.yml
            ├── bluesky.yml
            ├── build_code.yml
            ├── close_themes_pr.yml
            ├── code.yml
            ├── commits.yml
            ├── contributors.yml
            ├── dependabot.yml
            ├── discord.yml
            ├── docs.yml
            ├── edit_rights.yml
            ├── gomod.yml
            ├── homebrew.yml
            ├── lock.yml
            ├── markdown.yml
            ├── merge_contributions_pr.yml
            ├── microsoft_store.yml
            ├── release.yml
            ├── winget.yml
            └── composite/
                └── bootstrap-go/
                    └── action.yml

================================================
FILE: README.md
================================================
<!-- markdownlint-disable -->
<p align="center">
  <img
    width="400"
    src="https://raw.githubusercontent.com/jandedobbeleer/oh-my-posh/main/website/static/img/logo.png"
    alt="Oh My Posh logo – Prompt theme engine for any shell"
  />
</p>
<!-- markdownlint-enable -->

![MIT license badge](https://img.shields.io/github/license/JanDeDobbeleer/oh-my-posh.svg)

![Build Status badge](https://img.shields.io/github/actions/workflow/status/jandedobbeleer/oh-my-posh/release.yml?branch=main)

[![Release version number badge][release-badge]][release]

[![Documentation link badge ohmyposh.dev][docs-badge]][docs]

![Number of GitHub Downloads badge](https://img.shields.io/github/downloads/jandedobbeleer/oh-my-posh/total?color=pink&label=GitHub%20Downloads)

<!-- markdownlint-disable -->
<div align="center" markdown="1">
   <sup>Special thanks to:</sup>
   <br>
   <br>
   <a href="https://www.warp.dev/oh-my-posh">
      <img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/c21102f7-bab9-4344-a731-0cf6b341cab2">
   </a>

### [Warp, the intelligent terminal for developers](https://www.warp.dev/oh-my-posh)
[Available for MacOS, Linux, & Windows](https://www.warp.dev/oh-my-posh)<br>

</div>
<hr>
<!-- markdownlint-enable -->

This repo was made with love using GitKraken.

[![GitKraken shield][kraken]][kraken-ref]
<!-- markdownlint-disable first-header-h1 -->

## Join the community

![Mastodon badge](https://img.shields.io/mastodon/follow/110275292073181892?domain=https%3A%2F%2Fhachyderm.io&label=Mastodon&style=social)

![Discord badge](https://img.shields.io/discord/1023597603331526656)

What started as the offspring of [oh-my-posh2](https://github.com/JanDeDobbeleer/oh-my-posh2) for PowerShell
resulted in a cross platform, highly customizable and extensible prompt theme engine. After 4 years of working
on oh-my-posh, a modern and more efficient tool was needed to suit my personal needs.

## :heart: Support :heart:

[![Swag][swag-badge]][swag] - Show your love with a t-shirt!

[![GitHub][github-badge]][github-sponsors] - One time support, or a recurring donation?

[![Ko-Fi][kofi-badge]][kofi] - No coffee, no code.

<!-- markdownlint-disable -->
<a href="https://polar.sh/oh-my-posh">
  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://polar.sh/embed/tiers.svg?org=oh-my-posh&darkmode">
    <img alt="Subscription Tiers on Polar" src="https://polar.sh/embed/tiers.svg?org=oh-my-posh">
  </picture>
</a>
<!-- markdownlint-enable -->

## Features

* Shell and platform agnostic
* Easily configurable
* The **most** configurable prompt utility
* Fast
* Secondary prompt
* Right prompt
* Transient prompt

## Documentation

[![Documentation][docs-badge]][docs]

## Reviews

* [Repo review](https://repo-reviews.github.io//reviews/2023-06-21_TameWizard_JanDeDobbeleer_oh-my-posh) by [TameWizard](https://github.com/TameWizard)

## Thanks

* [Chris Benti](https://github.com/chrisbenti/PS-Config) providing the first influence to start oh-my-posh
* [Keith Dahlby](https://github.com/dahlbyk/posh-git) for creating posh-git and making life more enjoyable
* [Robby Russell](https://github.com/ohmyzsh/ohmyzsh) for creating oh-my-zsh, without him this would probably not be here
* [Janne Mareike Koschinski](https://github.com/justjanne) for providing information on how to get certain information
using Go (and the amazing [README](https://github.com/justjanne/powerline-go))
* [Starship](https://github.com/starship/starship/blob/master/src/init/mod.rs) for doing great things

[kraken]: https://img.shields.io/badge/GitKraken-Legendary%20Git%20Tools-teal?style=plastic&logo=gitkraken
[kraken-ref]: https://www.gitkraken.com/invite/nQmDPR9D
[swag-badge]: https://img.shields.io/badge/Swag-Get%20some!-blue
[swag]: https://swag.ohmyposh.dev
[github-badge]: https://img.shields.io/badge/-Sponsor-fafbfc?logo=GitHub%20Sponsors
[github-sponsors]: https://github.com/sponsors/JanDeDobbeleer
[kofi-badge]: https://img.shields.io/badge/Ko--fi-Buy%20me%20a%20coffee!-%2346b798.svg
[kofi]: https://ko-fi.com/jandedobbeleer
[docs-badge]: https://img.shields.io/badge/Docs-ohmyposh.dev-blue
[docs]: https://ohmyposh.dev
[release-badge]: https://img.shields.io/github/v/release/jandedobbeleer/oh-my-posh?label=Release
[release]: https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest



================================================
FILE: CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement by reaching out
via [email](mailto:abuse@ohmyposh.dev).
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available [in the documentation][version-2].

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder][moz-div].

For answers to common questions about this code of conduct, see the [FAQ][faq].
Translations are available [in the documentation][translations].

[homepage]: https://www.contributor-covenant.org
[moz-div]: https://github.com/mozilla/diversity
[version-2]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html
[faq]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing

Note we have a code of conduct, please follow it in all your interactions with the project.

**Note:** Theme aditions are no longer accepted due to the ever growing set. We do however
accept showcasing your custom theme in the [themes discussion section here][themes-discussion]
or the [themes channel on Discord][discord-link].

Ensure you've read through the [documentation][docs] so you understand the core concepts of the
project. If you're looking to get familiar with go, following the getting started [guide][guide]
can be a good starting point.

## Pull Request Process

1. Ensure any dependencies or build artifacts are removed/ignored before creating a commit.
2. Commits follow the [conventional commits][cc] guidelines.
(You can [look up the supported *types*][cc-types] along with an explanation [in the documentation][cc-types])
3. Update the documentation with details of changes to the functionality, this includes new segments
   or core functionality.
4. Pull Requests are merged once all checks pass and a project maintainer has approved it.

## Codespaces / Devcontainer Development Environment

Arguably the easiest way to contribute anything is to use our prepared development environment.

We have a `.devcontainer/devcontainer.json` file, meaning we are compatible with:

- [![Open in GitHub Codespaces][codespaces-badge]][codespaces-link], or
- the [Visual Studio Code Remote - Containers][devcontainer-ext] extension.

This Linux environment includes all shells supported by oh-my-posh, including Bash, ZSH,
Fish and PowerShell, the latter of which is the default.

### Configuring Devcontainer's Timezone & Theme

1. Open the `.devcontainer/devcontainer.json` file and in the "*build*" section modify:

   - `TZ`: with [your own timezone][timezones]

2. Summon the Command Panel (Ctrl+Shift+P) and select `Codespaces: Rebuild Container`
   to rebuild your devcontainer. (This should take just a few seconds.)

### Recompiling oh-my-posh

The devcontainer definition preinstalls the latest stable oh-my-posh release at build time.

To overwrite the installation's version inside the running devcontainer, you may use the
VSCode *task* `devcontainer: build omp` to rebuild your oh-my-posh with that of
your running repository's state. (You might see a button for this in your statusbar.)

If the compile succeeds, `oh-my-posh --version` should reply:
`development`

Should you somehow mess up your devcontainer's OMP install catastrophically, remember that
if you do `Codespaces: Rebuild Container` again, you'll be back to the latest stable release.

## Local development

Make sure your local go version matches with the pinned version in [go.mod]. You can build
oh-my-posh by navigating the to the `/src` folder and executing the following command.

```bash
go build -v -o /path/to/oh-my-posh(.exe)
```

### Running tests

To execute the tests, run the following command from the `/src` folder.

```bash
go test "./..."
```

[themes-discussion]: [https://github.com/JanDeDobbeleer/oh-my-posh/discussions/categories/themes]
[discord-link]: [https://discord.com/channels/1023597603331526656/1055533233309233252]
[docs]: <https://ohmyposh.dev/docs>
[guide]: <https://ohmyposh.dev/docs/contributing/started>
[cc]: <https://www.conventionalcommits.org/en/v1.0.0/#summary>
[cc-types]: <https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/.commitlintrc.yml#L23-L33>
[codespaces-badge]: <https://github.com/codespaces/badge.svg>
[codespaces-link]: <https://github.com/codespaces/new?hide_repo_select=true&ref=main&repo=175405157>
[devcontainer-ext]: <https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers>
[timezones]: <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>
[go.mod]: src\go.mod



================================================
FILE: COPYING
================================================
Copyright 2022 Jan De Dobbeleer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



================================================
FILE: SECURITY.md
================================================
# Security Policy

## Supported Versions

Only the latest [release][releases] is supported.

## Reporting a Vulnerability

Vulnerabilities can be sent in via [email][email] to avoid publishing in the open.
Oh My Posh does not have a bounty program, neither do we respond to bug bounties.

For valid security concerns, you can expect a response within 48 hours,
and credit is given once an acceptable fix is found and published.

[releases]: https://github.com/JanDeDobbeleer/oh-my-posh/releases
[email]: mailto:security@ohmyposh.dev



================================================
FILE: .all-contributorsrc
================================================
{
  "projectName": "oh-my-posh",
  "projectOwner": "JanDeDobbeleer",
  "repoType": "github",
  "repoHost": "https://github.com",
  "files": [
    "website/docs/contributors.md"
  ],
  "imageSize": 100,
  "commit": true,
  "commitConvention": "angular",
  "contributors": [
    {
      "login": "lnu",
      "name": "Laurent Nullens",
      "avatar_url": "https://avatars.githubusercontent.com/u/1829553?v=4",
      "profile": "https://github.com/lnu",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "TravisTX",
      "name": "Travis Collins",
      "avatar_url": "https://avatars.githubusercontent.com/u/934490?v=4",
      "profile": "https://github.com/TravisTX",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "jos3s",
      "name": "José Ulisses",
      "avatar_url": "https://avatars.githubusercontent.com/u/50359547?v=4",
      "profile": "https://github.com/jos3s",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "nwykes",
      "name": "Nathan Wykes",
      "avatar_url": "https://avatars.githubusercontent.com/u/593993?v=4",
      "profile": "https://github.com/nwykes",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "tillig",
      "name": "Travis Illig",
      "avatar_url": "https://avatars.githubusercontent.com/u/1156571?v=4",
      "profile": "http://www.paraesthesia.com/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "evilz",
      "name": "Vincent B.",
      "avatar_url": "https://avatars.githubusercontent.com/u/2937862?v=4",
      "profile": "http://www.evilznet.com/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "erclu",
      "name": "Luca Ercole",
      "avatar_url": "https://avatars.githubusercontent.com/u/30255227?v=4",
      "profile": "https://erclu.github.io/cv/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "LarsBauer",
      "name": "Lars Bauer",
      "avatar_url": "https://avatars.githubusercontent.com/u/3920045?v=4",
      "profile": "https://larsbauer.xyz/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "RobCannon",
      "name": "Rob Cannon",
      "avatar_url": "https://avatars.githubusercontent.com/u/189862?v=4",
      "profile": "https://github.com/RobCannon",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Vixb1122",
      "name": "Vixb",
      "avatar_url": "https://avatars.githubusercontent.com/u/17810492?v=4",
      "profile": "https://github.com/Vixb1122",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "zeyugao",
      "name": "Elsa Granger",
      "avatar_url": "https://avatars.githubusercontent.com/u/6374697?v=4",
      "profile": "https://github.com/zeyugao",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "softweaprograma",
      "name": "Anthony G",
      "avatar_url": "https://avatars.githubusercontent.com/u/35231092?v=4",
      "profile": "https://github.com/softweaprograma",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "gitolicious",
      "name": "gitolicious",
      "avatar_url": "https://avatars.githubusercontent.com/u/26963495?v=4",
      "profile": "https://github.com/gitolicious",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "irdkwmnsb",
      "name": "Maxim",
      "avatar_url": "https://avatars.githubusercontent.com/u/8657078?v=4",
      "profile": "https://alzhanov.ru/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "PIYUSH194",
      "name": "PIYUSH194",
      "avatar_url": "https://avatars.githubusercontent.com/u/2896456?v=4",
      "profile": "https://github.com/PIYUSH194",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "97krihop",
      "name": "97krihop",
      "avatar_url": "https://avatars.githubusercontent.com/u/24739853?v=4",
      "profile": "https://github.com/97krihop",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "stefanes",
      "name": "Stefan",
      "avatar_url": "https://avatars.githubusercontent.com/u/5484354?v=4",
      "profile": "https://github.com/stefanes",
      "contributions": [
        "design",
        "code"
      ]
    },
    {
      "login": "moritz-meier",
      "name": "Moritz Meier",
      "avatar_url": "https://avatars.githubusercontent.com/u/60762067?v=4",
      "profile": "https://github.com/moritz-meier",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "jetersen",
      "name": "Joseph Petersen",
      "avatar_url": "https://avatars.githubusercontent.com/u/1661688?v=4",
      "profile": "https://github.com/jetersen",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Goliaita",
      "name": "Davide Basile",
      "avatar_url": "https://avatars.githubusercontent.com/u/11245411?v=4",
      "profile": "https://github.com/Goliaita",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "sukso96100",
      "name": "Youngbin Han",
      "avatar_url": "https://avatars.githubusercontent.com/u/1916739?v=4",
      "profile": "http://youngbin.xyz/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "mateusnssn",
      "name": "Mateus Nunes",
      "avatar_url": "https://avatars.githubusercontent.com/u/69170710?v=4",
      "profile": "https://mateusnssp.github.io/mateusnssp/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "PixelRobots",
      "name": "PixelRobots",
      "avatar_url": "https://avatars.githubusercontent.com/u/22979170?v=4",
      "profile": "https://pixelrobots.co.uk/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "RishabhSood",
      "name": "RishabhSood",
      "avatar_url": "https://avatars.githubusercontent.com/u/55499929?v=4",
      "profile": "https://github.com/RishabhSood",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "SagarYadav17",
      "name": "Sagar Yadav",
      "avatar_url": "https://avatars.githubusercontent.com/u/47110215?v=4",
      "profile": "https://github.com/SagarYadav17",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "WolfspiritM",
      "name": "Adrian",
      "avatar_url": "https://avatars.githubusercontent.com/u/5904171?v=4",
      "profile": "https://github.com/WolfspiritM",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "MJECloud",
      "name": "Maurice",
      "avatar_url": "https://avatars.githubusercontent.com/u/22131101?v=4",
      "profile": "https://github.com/MJECloud",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "samuelfahrngruber",
      "name": "samuelfahrngruber",
      "avatar_url": "https://avatars.githubusercontent.com/u/35682879?v=4",
      "profile": "https://github.com/samuelfahrngruber",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "zilmarr",
      "name": "Zilmar de Souza Junior",
      "avatar_url": "https://avatars.githubusercontent.com/u/5557367?v=4",
      "profile": "https://github.com/zilmarr",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "AsafMah",
      "name": "AsafMah",
      "avatar_url": "https://avatars.githubusercontent.com/u/6424271?v=4",
      "profile": "https://github.com/AsafMah",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "cinnamon-msft",
      "name": "Kayla Cinnamon",
      "avatar_url": "https://avatars.githubusercontent.com/u/48369326?v=4",
      "profile": "https://github.com/cinnamon-msft",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "cbargren",
      "name": "Chris Bargren",
      "avatar_url": "https://avatars.githubusercontent.com/u/1050712?v=4",
      "profile": "https://github.com/cbargren",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "tonybaloney",
      "name": "Anthony Shaw",
      "avatar_url": "https://avatars.githubusercontent.com/u/1532417?v=4",
      "profile": "https://tonybaloney.github.io/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "mifieldxu",
      "name": "Mifield",
      "avatar_url": "https://avatars.githubusercontent.com/u/5520179?v=4",
      "profile": "https://github.com/mifieldxu",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "benallred",
      "name": "Ben Allred",
      "avatar_url": "https://avatars.githubusercontent.com/u/3902274?v=4",
      "profile": "https://github.com/benallred",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "riazXrazor",
      "name": "Riaz Laskar",
      "avatar_url": "https://avatars.githubusercontent.com/u/13194363?v=4",
      "profile": "https://riazxrazor.herokuapp.com/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Don-Vito",
      "name": "Don-Vito",
      "avatar_url": "https://avatars.githubusercontent.com/u/4639110?v=4",
      "profile": "https://github.com/Don-Vito",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "FabianEscarate",
      "name": "Fabian Roberto Escarate",
      "avatar_url": "https://avatars.githubusercontent.com/u/19978896?v=4",
      "profile": "https://github.com/FabianEscarate",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "xt0rted",
      "name": "Brian Surowiec",
      "avatar_url": "https://avatars.githubusercontent.com/u/831974?v=4",
      "profile": "https://github.com/xt0rted",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "ojullien",
      "name": "Olivier Jullien",
      "avatar_url": "https://avatars.githubusercontent.com/u/3778194?v=4",
      "profile": "https://twitter.com/OJullien",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "cdonnellytx",
      "name": "Chris Donnelly",
      "avatar_url": "https://avatars.githubusercontent.com/u/183046?v=4",
      "profile": "https://github.com/cdonnellytx",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "KyleCrowley",
      "name": "Kyle Crowley",
      "avatar_url": "https://avatars.githubusercontent.com/u/6757487?v=4",
      "profile": "https://github.com/KyleCrowley",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "gitolicious",
      "name": "gitolicious",
      "avatar_url": "https://avatars.githubusercontent.com/u/26963495?v=4",
      "profile": "https://github.com/gitolicious",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "jeroen7s",
      "name": "Jeroen Evens",
      "avatar_url": "https://avatars.githubusercontent.com/u/10954827?v=4",
      "profile": "https://github.com/jeroen7s",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "equinox",
      "name": "equinox",
      "avatar_url": "https://avatars.githubusercontent.com/u/6139999?v=4",
      "profile": "https://github.com/equinox",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "DamianoPellegrini",
      "name": "Damiano Pellegrini",
      "avatar_url": "https://avatars.githubusercontent.com/u/41305552?v=4",
      "profile": "https://github.com/DamianoPellegrini",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "timon-schelling",
      "name": "Timon Schelling",
      "avatar_url": "https://avatars.githubusercontent.com/u/36821505?v=4",
      "profile": "https://timokrates.de/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "zeyugao",
      "name": "Elsa Granger",
      "avatar_url": "https://avatars.githubusercontent.com/u/6374697?v=4",
      "profile": "https://github.com/zeyugao",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "Daksh777",
      "name": "Daksh P. Jain",
      "avatar_url": "https://avatars.githubusercontent.com/u/43648146?v=4",
      "profile": "https://daksh.eu.org/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "boarder2",
      "name": "Willie Zutz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19351?v=4",
      "profile": "http://bit-shift.com/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "uruz-7",
      "name": "uruz-7",
      "avatar_url": "https://avatars.githubusercontent.com/u/15071454?v=4",
      "profile": "https://github.com/uruz-7",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "beppler",
      "name": "Carlos Alberto Costa Beppler",
      "avatar_url": "https://avatars.githubusercontent.com/u/66092?v=4",
      "profile": "https://github.com/beppler",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "sky96111",
      "name": "sky96111",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412214?v=4",
      "profile": "https://github.com/sky96111",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "jantielens",
      "name": "Jan Tielens",
      "avatar_url": "https://avatars.githubusercontent.com/u/9884103?v=4",
      "profile": "http://j.tlns.be/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "shedric1",
      "name": "shedric1",
      "avatar_url": "https://avatars.githubusercontent.com/u/56672838?v=4",
      "profile": "https://github.com/shedric1",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "sectorogo",
      "name": "sectorogo",
      "avatar_url": "https://avatars.githubusercontent.com/u/32959212?v=4",
      "profile": "https://github.com/sectorogo",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "phil-scott-78",
      "name": "Phil Scott",
      "avatar_url": "https://avatars.githubusercontent.com/u/2447331?v=4",
      "profile": "https://github.com/phil-scott-78",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "suuus",
      "name": "Suus",
      "avatar_url": "https://avatars.githubusercontent.com/u/40822355?v=4",
      "profile": "https://suuu.us/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "wopian",
      "name": "James Harris",
      "avatar_url": "https://avatars.githubusercontent.com/u/3440094?v=4",
      "profile": "https://wopian.me/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "mdlopresti",
      "name": "Michael LoPresti",
      "avatar_url": "https://avatars.githubusercontent.com/u/1293090?v=4",
      "profile": "https://github.com/mdlopresti",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "floh96",
      "name": "Florian Heberl",
      "avatar_url": "https://avatars.githubusercontent.com/u/49693964?v=4",
      "profile": "https://github.com/floh96",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "relativityhd",
      "name": "Tobias Hölzer",
      "avatar_url": "https://avatars.githubusercontent.com/u/37540371?v=4",
      "profile": "http://tobiashoelzer.dynu.net",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "h4iku",
      "name": "Reza Gharibi",
      "avatar_url": "https://avatars.githubusercontent.com/u/3812788?v=4",
      "profile": "https://h4iku.github.io",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "JustinGrote",
      "name": "Justin Grote",
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "profile": "https://justingrote.github.io",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "henry-js",
      "name": "James",
      "avatar_url": "https://avatars.githubusercontent.com/u/79054685?v=4",
      "profile": "https://github.com/henry-js",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "iarejenius",
      "name": "Timothy Wittig",
      "avatar_url": "https://avatars.githubusercontent.com/u/1031515?v=4",
      "profile": "https://wittig.dev",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Descalon",
      "name": "Nico Glas",
      "avatar_url": "https://avatars.githubusercontent.com/u/1098500?v=4",
      "profile": "https://github.com/Descalon",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "hanskokx",
      "name": "Hans Kokx",
      "avatar_url": "https://avatars.githubusercontent.com/u/1911919?v=4",
      "profile": "https://github.com/hanskokx",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "alchatti",
      "name": "Majed Al-Chatti",
      "avatar_url": "https://avatars.githubusercontent.com/u/9209306?v=4",
      "profile": "http://alchatti.com",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "Jan0660",
      "name": "Jan0660",
      "avatar_url": "https://avatars.githubusercontent.com/u/58996212?v=4",
      "profile": "https://jan0660.dev",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "LuiseFreese",
      "name": "Luise Freese",
      "avatar_url": "https://avatars.githubusercontent.com/u/49960482?v=4",
      "profile": "http://www.m365princess.com",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "asherber",
      "name": "Aaron Sherber",
      "avatar_url": "https://avatars.githubusercontent.com/u/5248041?v=4",
      "profile": "https://github.com/asherber",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "SeanKilleen",
      "name": "Sean Killeen",
      "avatar_url": "https://avatars.githubusercontent.com/u/2148318?v=4",
      "profile": "http://SeanKilleen.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "NickCraver",
      "name": "Nick Craver",
      "avatar_url": "https://avatars.githubusercontent.com/u/454813?v=4",
      "profile": "https://nickcraver.com",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "justin-vogt",
      "name": "Justin Vogt",
      "avatar_url": "https://avatars.githubusercontent.com/u/84424169?v=4",
      "profile": "https://github.com/justin-vogt",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "TheOnlyTails",
      "name": "TheOnlyTails",
      "avatar_url": "https://avatars.githubusercontent.com/u/65342367?v=4",
      "profile": "http://theonlytails.com",
      "contributions": [
        "ideas"
      ]
    },
    {
      "login": "bewing",
      "name": "bewing",
      "avatar_url": "https://avatars.githubusercontent.com/u/4759896?v=4",
      "profile": "https://github.com/bewing",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "shawnwildermuth",
      "name": "Shawn Wildermuth",
      "avatar_url": "https://avatars.githubusercontent.com/u/568272?v=4",
      "profile": "http://wildermuth.com",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "onpikono",
      "name": "Ondrej Pinka",
      "avatar_url": "https://avatars.githubusercontent.com/u/25362465?v=4",
      "profile": "https://github.com/onpikono",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "kasuken",
      "name": "Emanuele Bartolesi",
      "avatar_url": "https://avatars.githubusercontent.com/u/2757486?v=4",
      "profile": "https://www.emanuelebartolesi.com",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "qiansen1386",
      "name": "Paris Qian",
      "avatar_url": "https://avatars.githubusercontent.com/u/1759658?v=4",
      "profile": "https://qiansen1386.github.io",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "tjackadams",
      "name": "Thomas Adams",
      "avatar_url": "https://avatars.githubusercontent.com/u/2307314?v=4",
      "profile": "https://blog.itadams.co.uk",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "gschizas",
      "name": "George Schizas",
      "avatar_url": "https://avatars.githubusercontent.com/u/598065?v=4",
      "profile": "http://www.terrasoft.gr/",
      "contributions": [
        "code",
        "design"
      ]
    },
    {
      "login": "denelon",
      "name": "denelon",
      "avatar_url": "https://avatars.githubusercontent.com/u/61799811?v=4",
      "profile": "https://github.com/denelon",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "AbdelrahmanHafez",
      "name": "Hafez",
      "avatar_url": "https://avatars.githubusercontent.com/u/19984935?v=4",
      "profile": "https://github.com/AbdelrahmanHafez",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "TedCrocker",
      "name": "Ted Ballou",
      "avatar_url": "https://avatars.githubusercontent.com/u/382001?v=4",
      "profile": "https://github.com/TedCrocker",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "mikesigs",
      "name": "Mike Sigsworth",
      "avatar_url": "https://avatars.githubusercontent.com/u/811177?v=4",
      "profile": "https://discardchanges.com",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "memcpy-rand-rand-rand",
      "name": "Will",
      "avatar_url": "https://avatars.githubusercontent.com/u/90210865?v=4",
      "profile": "https://github.com/memcpy-rand-rand-rand",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "shanselman",
      "name": "Scott Hanselman",
      "avatar_url": "https://avatars.githubusercontent.com/u/2892?v=4",
      "profile": "http://www.hanselman.com",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "hgreving",
      "name": "Harmjan Greving",
      "avatar_url": "https://avatars.githubusercontent.com/u/23560667?v=4",
      "profile": "https://github.com/hgreving",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Khaos66",
      "name": "Khaos",
      "avatar_url": "https://avatars.githubusercontent.com/u/4013009?v=4",
      "profile": "https://github.com/Khaos66",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "mattwojo",
      "name": "Matt Wojciakowski",
      "avatar_url": "https://avatars.githubusercontent.com/u/7566797?v=4",
      "profile": "http://mattwojo.github.io/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "TheTaylorLee",
      "name": "TheTaylorLee",
      "avatar_url": "https://avatars.githubusercontent.com/u/53202926?v=4",
      "profile": "https://www.powershellgallery.com/profiles/TaylorLee",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "PapiPeppers",
      "name": "Papi Peppers",
      "avatar_url": "https://avatars.githubusercontent.com/u/57047860?v=4",
      "profile": "https://github.com/PapiPeppers",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "erresen",
      "name": "erresen",
      "avatar_url": "https://avatars.githubusercontent.com/u/5566441?v=4",
      "profile": "https://erresen.github.io",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "icy-comet",
      "name": "Aniket Teredesai",
      "avatar_url": "https://avatars.githubusercontent.com/u/50461557?v=4",
      "profile": "https://aniketteredesai.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "sdebruyn",
      "name": "Sam Debruyn",
      "avatar_url": "https://avatars.githubusercontent.com/u/963413?v=4",
      "profile": "https://debruyn.dev",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "larserikfinholt",
      "name": "Lars Erik Finholt",
      "avatar_url": "https://avatars.githubusercontent.com/u/1328417?v=4",
      "profile": "https://github.com/larserikfinholt",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "simorgh1",
      "name": "Bahram Maravandi",
      "avatar_url": "https://avatars.githubusercontent.com/u/5792905?v=4",
      "profile": "https://github.com/simorgh1",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "calebjenkins",
      "name": "Caleb Jenkins",
      "avatar_url": "https://avatars.githubusercontent.com/u/211001?v=4",
      "profile": "http://developingux.com",
      "contributions": [
        "ideas"
      ]
    },
    {
      "login": "FlavienMacquignon",
      "name": "FlavienMacquignon",
      "avatar_url": "https://avatars.githubusercontent.com/u/70152975?v=4",
      "profile": "https://github.com/FlavienMacquignon",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Victoria-DR",
      "name": "Victoria",
      "avatar_url": "https://avatars.githubusercontent.com/u/68347113?v=4",
      "profile": "https://github.com/Victoria-DR",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "UlanaXY",
      "name": "Mikolaj",
      "avatar_url": "https://avatars.githubusercontent.com/u/12629308?v=4",
      "profile": "https://github.com/UlanaXY",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "markbullplus",
      "name": "markbull",
      "avatar_url": "https://avatars.githubusercontent.com/u/88931495?v=4",
      "profile": "https://github.com/markbullplus",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "brian6932",
      "name": "Brian",
      "avatar_url": "https://avatars.githubusercontent.com/u/18603393?v=4",
      "profile": "https://github.com/brian6932",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "patHyatt",
      "name": "Patrick Hyatt",
      "avatar_url": "https://avatars.githubusercontent.com/u/296125?v=4",
      "profile": "http://www.patrickhyatt.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "hezhizhen",
      "name": "Zhizhen He",
      "avatar_url": "https://avatars.githubusercontent.com/u/7611700?v=4",
      "profile": "https://github.com/hezhizhen",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "jedwillick",
      "name": "Jed Willick",
      "avatar_url": "https://avatars.githubusercontent.com/u/85419773?v=4",
      "profile": "https://github.com/jedwillick",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "eltociear",
      "name": "Ikko Ashimine",
      "avatar_url": "https://avatars.githubusercontent.com/u/22633385?v=4",
      "profile": "https://bandism.net/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "CapularisPerpetua",
      "name": "Courtney Caldwell",
      "avatar_url": "https://avatars.githubusercontent.com/u/32304933?v=4",
      "profile": "https://prokopto.dev/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "rfverbruggen",
      "name": "Robbert Verbruggen",
      "avatar_url": "https://avatars.githubusercontent.com/u/2320197?v=4",
      "profile": "https://github.com/rfverbruggen",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Merlin2001",
      "name": "Marcus Mangelsdorf",
      "avatar_url": "https://avatars.githubusercontent.com/u/13134791?v=4",
      "profile": "https://github.com/Merlin2001",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "andresrinivasan",
      "name": "André Srinivasan",
      "avatar_url": "https://avatars.githubusercontent.com/u/134301?v=4",
      "profile": "http://linkedin.com/andresrinivasan",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ehawman-rosenberg",
      "name": "ehawman-rosenberg",
      "avatar_url": "https://avatars.githubusercontent.com/u/81652082?v=4",
      "profile": "https://github.com/ehawman-rosenberg",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "claudiospizzi",
      "name": "Claudio Spizzi",
      "avatar_url": "https://avatars.githubusercontent.com/u/1934246?v=4",
      "profile": "https://spizzi.net/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "estruyf",
      "name": "Elio Struyf",
      "avatar_url": "https://avatars.githubusercontent.com/u/2900833?v=4",
      "profile": "https://www.eliostruyf.com",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "oalders",
      "name": "Olaf Alders",
      "avatar_url": "https://avatars.githubusercontent.com/u/96205?v=4",
      "profile": "https://www.olafalders.com/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "DavidDeSloovere",
      "name": "David De Sloovere",
      "avatar_url": "https://avatars.githubusercontent.com/u/352626?v=4",
      "profile": "https://blog.deltacode.be",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "LensPlaysGames",
      "name": "LensPlaysGames",
      "avatar_url": "https://avatars.githubusercontent.com/u/69637718?v=4",
      "profile": "https://lensor-radii.netlify.app",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "atakiya",
      "name": "Alex 'Avunia' Takiya",
      "avatar_url": "https://avatars.githubusercontent.com/u/6952402?v=4",
      "profile": "https://takiya.eu",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "kenmorse",
      "name": "kenmorse",
      "avatar_url": "https://avatars.githubusercontent.com/u/63734484?v=4",
      "profile": "https://github.com/kenmorse",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "xadozuk",
      "name": "xadozuk",
      "avatar_url": "https://avatars.githubusercontent.com/u/780423?v=4",
      "profile": "https://github.com/xadozuk",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "vedantmgoyal9",
      "name": "Vedant",
      "avatar_url": "https://avatars.githubusercontent.com/u/83997633?v=4",
      "profile": "https://bittu.eu.org",
      "contributions": [
        "design",
        "code"
      ]
    },
    {
      "login": "lewis-yeung",
      "name": "L. Yeung",
      "avatar_url": "https://avatars.githubusercontent.com/u/83903009?v=4",
      "profile": "https://github.com/lewis-yeung",
      "contributions": [
        "code",
        "doc",
        "design"
      ]
    },
    {
      "login": "antoson",
      "name": "Ondrej Antos",
      "avatar_url": "https://avatars.githubusercontent.com/u/36371990?v=4",
      "profile": "https://github.com/antoson",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Bahnschrift",
      "name": "Bahnschrift",
      "avatar_url": "https://avatars.githubusercontent.com/u/31170809?v=4",
      "profile": "https://github.com/Bahnschrift",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "jakeboone02",
      "name": "Jake Boone",
      "avatar_url": "https://avatars.githubusercontent.com/u/366438?v=4",
      "profile": "https://github.com/jakeboone02",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "kapsiR",
      "name": "kapsiR",
      "avatar_url": "https://avatars.githubusercontent.com/u/7165033?v=4",
      "profile": "https://github.com/kapsiR",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "csrakowski",
      "name": "Christiaan Rakowski",
      "avatar_url": "https://avatars.githubusercontent.com/u/1303967?v=4",
      "profile": "https://github.com/csrakowski",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "mosullivan93",
      "name": "Mitchell J. O'Sullivan",
      "avatar_url": "https://avatars.githubusercontent.com/u/7676935?v=4",
      "profile": "https://github.com/mosullivan93",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "felpel",
      "name": "Félix Pelletier",
      "avatar_url": "https://avatars.githubusercontent.com/u/5000004?v=4",
      "profile": "https://github.com/felpel",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ralish",
      "name": "Samuel D. Leslie",
      "avatar_url": "https://avatars.githubusercontent.com/u/3214803?v=4",
      "profile": "https://nexiom.net/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "AjayKMehta",
      "name": "Ajay Mehta",
      "avatar_url": "https://avatars.githubusercontent.com/u/11180071?v=4",
      "profile": "https://github.com/AjayKMehta",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "the-eduardo",
      "name": "the-eduardo",
      "avatar_url": "https://avatars.githubusercontent.com/u/40523695?v=4",
      "profile": "https://github.com/the-eduardo",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "antonpiatek",
      "name": "Anton Piatek",
      "avatar_url": "https://avatars.githubusercontent.com/u/175077?v=4",
      "profile": "https://github.com/antonpiatek",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "prodehghan",
      "name": "Mohammad Dehghan",
      "avatar_url": "https://avatars.githubusercontent.com/u/1384790?v=4",
      "profile": "https://careers.stackoverflow.com/dehghan",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "bhagerty",
      "name": "bhagerty",
      "avatar_url": "https://avatars.githubusercontent.com/u/7828454?v=4",
      "profile": "https://github.com/bhagerty",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "CodyScavenger",
      "name": "Cody Scavenger",
      "avatar_url": "https://avatars.githubusercontent.com/u/94334877?v=4",
      "profile": "https://github.com/CodyScavenger",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "FWest98",
      "name": "Floris Westerman",
      "avatar_url": "https://avatars.githubusercontent.com/u/1918658?v=4",
      "profile": "http://fwest98.nl/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "mjcarman",
      "name": "Michael Carman",
      "avatar_url": "https://avatars.githubusercontent.com/u/121028?v=4",
      "profile": "https://github.com/mjcarman",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "entr0pia",
      "name": "风沐白",
      "avatar_url": "https://avatars.githubusercontent.com/u/30486766?v=4",
      "profile": "https://github.com/entr0pia",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "schallm",
      "name": "Michael T. Schall",
      "avatar_url": "https://avatars.githubusercontent.com/u/331167?v=4",
      "profile": "https://github.com/schallm",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "craiglpeters",
      "name": "Craig Peters",
      "avatar_url": "https://avatars.githubusercontent.com/u/9445180?v=4",
      "profile": "https://github.com/craiglpeters",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "dorian-li",
      "name": "Dongyu Li",
      "avatar_url": "https://avatars.githubusercontent.com/u/49279922?v=4",
      "profile": "https://github.com/dorian-li",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "cyberbliss",
      "name": "Stephen Judd",
      "avatar_url": "https://avatars.githubusercontent.com/u/5401528?v=4",
      "profile": "https://github.com/cyberbliss",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "douugdev",
      "name": "Douglas Silva",
      "avatar_url": "https://avatars.githubusercontent.com/u/59324692?v=4",
      "profile": "https://douug.dev",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "BoseSj",
      "name": "SJ Basak",
      "avatar_url": "https://avatars.githubusercontent.com/u/58129377?v=4",
      "profile": "https://github.com/BoseSj",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "treed",
      "name": "Ted Reed",
      "avatar_url": "https://avatars.githubusercontent.com/u/71910?v=4",
      "profile": "http://tedreed.info",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "asportnoy",
      "name": "Albert Portnoy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14863373?v=4",
      "profile": "http://albertp.dev",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "Lemorz56",
      "name": "Sebastian",
      "avatar_url": "https://avatars.githubusercontent.com/u/1346676?v=4",
      "profile": "https://www.msbrg.net/",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "mirsella",
      "name": "Lucas",
      "avatar_url": "https://avatars.githubusercontent.com/u/45905567?v=4",
      "profile": "https://github.com/mirsella",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "ethansocal",
      "name": "Ethan",
      "avatar_url": "https://avatars.githubusercontent.com/u/79533577?v=4",
      "profile": "https://github.com/ethansocal",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "astronaako",
      "name": "Mohamed Naamy",
      "avatar_url": "https://avatars.githubusercontent.com/u/18577543?v=4",
      "profile": "https://github.com/astronaako",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "bend-n",
      "name": "bendn",
      "avatar_url": "https://avatars.githubusercontent.com/u/70787919?v=4",
      "profile": "http://bend-n.github.io",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "davidanthoff",
      "name": "David Anthoff",
      "avatar_url": "https://avatars.githubusercontent.com/u/1036561?v=4",
      "profile": "http://www.david-anthoff.com",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "jooooel",
      "name": "jooooel",
      "avatar_url": "https://avatars.githubusercontent.com/u/9303280?v=4",
      "profile": "https://github.com/jooooel",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "maxlandon",
      "name": "maxlandon",
      "avatar_url": "https://avatars.githubusercontent.com/u/25826036?v=4",
      "profile": "https://github.com/maxlandon",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "lino-levan",
      "name": "Lino Le Van",
      "avatar_url": "https://avatars.githubusercontent.com/u/11367844?v=4",
      "profile": "https://linolevan.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "dvlprJobayer",
      "name": "Jobayer Ahammed Patwary",
      "avatar_url": "https://avatars.githubusercontent.com/u/76583359?v=4",
      "profile": "https://github.com/dvlprJobayer",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "NoF0rte",
      "name": "NoF0rte",
      "avatar_url": "https://avatars.githubusercontent.com/u/64100993?v=4",
      "profile": "https://github.com/NoF0rte",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "LNKLEO",
      "name": "LNKLEO",
      "avatar_url": "https://avatars.githubusercontent.com/u/10334184?v=4",
      "profile": "https://github.com/LNKLEO",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "kamfaima",
      "name": "kamfaima",
      "avatar_url": "https://avatars.githubusercontent.com/u/23546392?v=4",
      "profile": "https://github.com/kamfaima",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "dhrdlicka",
      "name": "David Hrdlička",
      "avatar_url": "https://avatars.githubusercontent.com/u/13226155?v=4",
      "profile": "https://github.com/dhrdlicka",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "davidcourtney",
      "name": "David Courtney",
      "avatar_url": "https://avatars.githubusercontent.com/u/1019134?v=4",
      "profile": "http://davidcourtney.com",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "Jensdevloo",
      "name": "jensdevloo",
      "avatar_url": "https://avatars.githubusercontent.com/u/2276152?v=4",
      "profile": "https://github.com/Jensdevloo",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "thomasdoerr",
      "name": "Thomas Dörr",
      "avatar_url": "https://avatars.githubusercontent.com/u/6919685?v=4",
      "profile": "https://github.com/thomasdoerr",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "SvenAelterman",
      "name": "Sven Aelterman",
      "avatar_url": "https://avatars.githubusercontent.com/u/17446043?v=4",
      "profile": "https://blog.aelterman.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "CodexLink",
      "name": "Janrey Licas",
      "avatar_url": "https://avatars.githubusercontent.com/u/5953927?v=4",
      "profile": "https://github.com/CodexLink",
      "contributions": [
        "design",
        "doc",
        "code"
      ]
    },
    {
      "login": "padilo",
      "name": "Pablo Díaz-López",
      "avatar_url": "https://avatars.githubusercontent.com/u/783959?v=4",
      "profile": "https://github.com/padilo",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "DarkMagicSource",
      "name": "Caitlyn Williams",
      "avatar_url": "https://avatars.githubusercontent.com/u/35950530?v=4",
      "profile": "https://github.com/DarkMagicSource",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "gork3n",
      "name": "Christopher Henderson",
      "avatar_url": "https://avatars.githubusercontent.com/u/1086155?v=4",
      "profile": "https://github.com/gork3n",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "cabauman",
      "name": "Colt",
      "avatar_url": "https://avatars.githubusercontent.com/u/6819362?v=4",
      "profile": "https://www.coltbauman.com",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "craftzneko",
      "name": "craftzneko",
      "avatar_url": "https://avatars.githubusercontent.com/u/662108?v=4",
      "profile": "https://github.com/craftzneko",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "atlanswer",
      "name": "甘亭",
      "avatar_url": "https://avatars.githubusercontent.com/u/17683244?v=4",
      "profile": "http://waferlab.dev",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Mertsch",
      "name": "Mertsch",
      "avatar_url": "https://avatars.githubusercontent.com/u/9402861?v=4",
      "profile": "https://github.com/Mertsch",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "marc2332",
      "name": "Marc Espín",
      "avatar_url": "https://avatars.githubusercontent.com/u/38158676?v=4",
      "profile": "https://mespin.me/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "ksdpmx",
      "name": "jasonz",
      "avatar_url": "https://avatars.githubusercontent.com/u/3256083?v=4",
      "profile": "https://github.com/ksdpmx",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "bsiegert",
      "name": "Benny Siegert",
      "avatar_url": "https://avatars.githubusercontent.com/u/866330?v=4",
      "profile": "https://bentsukun.ch",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "kema-dev",
      "name": "kema",
      "avatar_url": "https://avatars.githubusercontent.com/u/54537427?v=4",
      "profile": "http://www.kemadev.fr/fr/",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "mavaddat",
      "name": "Mavaddat Javid",
      "avatar_url": "https://avatars.githubusercontent.com/u/5055400?v=4",
      "profile": "http://mavaddat.ca",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "iavael",
      "name": "Iavael",
      "avatar_url": "https://avatars.githubusercontent.com/u/905853?v=4",
      "profile": "https://iavael.name/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Kushal-Chandar",
      "name": "Kushal-Chandar",
      "avatar_url": "https://avatars.githubusercontent.com/u/83660514?v=4",
      "profile": "https://github.com/Kushal-Chandar",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "BigBear0812",
      "name": "Matthew Miller",
      "avatar_url": "https://avatars.githubusercontent.com/u/2429638?v=4",
      "profile": "http://www.project-miller.com/",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "javidcf",
      "name": "Javier Dehesa",
      "avatar_url": "https://avatars.githubusercontent.com/u/1098280?v=4",
      "profile": "https://github.com/javidcf",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "alexvy86",
      "name": "Alex Villarreal",
      "avatar_url": "https://avatars.githubusercontent.com/u/716334?v=4",
      "profile": "https://alex-v.blog/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "krzysdz",
      "name": "krzysdz",
      "avatar_url": "https://avatars.githubusercontent.com/u/12915102?v=4",
      "profile": "https://github.com/krzysdz",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "BasLijten",
      "name": "Bas Lijten",
      "avatar_url": "https://avatars.githubusercontent.com/u/11842067?v=4",
      "profile": "http://blog.baslijten.com",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "ParkerM",
      "name": "Parker Mauney",
      "avatar_url": "https://avatars.githubusercontent.com/u/5124113?v=4",
      "profile": "https://github.com/ParkerM",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "gbrusella",
      "name": "Gonzalo Brusella",
      "avatar_url": "https://avatars.githubusercontent.com/u/115679?v=4",
      "profile": "http://www.brusella.com.ar",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "krokofant",
      "name": "Emil Sundin",
      "avatar_url": "https://avatars.githubusercontent.com/u/5908498?v=4",
      "profile": "https://github.com/krokofant",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "dysuby",
      "name": "dysuby",
      "avatar_url": "https://avatars.githubusercontent.com/u/26317510?v=4",
      "profile": "http://dysuby.github.io",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "dorokhin-bohdan",
      "name": "Bohdan Dorokhin",
      "avatar_url": "https://avatars.githubusercontent.com/u/24988081?v=4",
      "profile": "https://github.com/dorokhin-bohdan",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "CY-Pan",
      "name": "Ad Red",
      "avatar_url": "https://avatars.githubusercontent.com/u/59761962?v=4",
      "profile": "https://github.com/CY-Pan",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "nopeless",
      "name": "nopeless",
      "avatar_url": "https://avatars.githubusercontent.com/u/38830903?v=4",
      "profile": "https://github.com/nopeless",
      "contributions": [
        "code",
        "doc",
        "design"
      ]
    },
    {
      "login": "vinhloc30796",
      "name": "Loc Nguyen",
      "avatar_url": "https://avatars.githubusercontent.com/u/19675202?v=4",
      "profile": "https://linkedin.com/in/vinhloc30796",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Coder-Tavi",
      "name": "Tavi",
      "avatar_url": "https://avatars.githubusercontent.com/u/66774833?v=4",
      "profile": "https://tavis.page",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "NicholasDawson",
      "name": "Nick Dawson",
      "avatar_url": "https://avatars.githubusercontent.com/u/37987430?v=4",
      "profile": "http://ndawson.me",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "jntrnr",
      "name": "JT",
      "avatar_url": "https://avatars.githubusercontent.com/u/547158?v=4",
      "profile": "https://www.jntrnr.com/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "ChandanChainani",
      "name": "ChandanChainani",
      "avatar_url": "https://avatars.githubusercontent.com/u/28807775?v=4",
      "profile": "https://github.com/ChandanChainani",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "jenspinney",
      "name": "Jen Spinney",
      "avatar_url": "https://avatars.githubusercontent.com/u/3200507?v=4",
      "profile": "https://github.com/jenspinney",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "rotu",
      "name": "Dan Rose",
      "avatar_url": "https://avatars.githubusercontent.com/u/119948?v=4",
      "profile": "https://github.com/rotu",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "darthwalsh",
      "name": "Carl Walsh",
      "avatar_url": "https://avatars.githubusercontent.com/u/2829438?v=4",
      "profile": "https://carlwa.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ercpereda",
      "name": "Ernesto R. C. Pereda",
      "avatar_url": "https://avatars.githubusercontent.com/u/13546685?v=4",
      "profile": "https://github.com/ercpereda",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "0Ky",
      "name": "ｃｒｙｐｔｉｘ",
      "avatar_url": "https://avatars.githubusercontent.com/u/16103757?v=4",
      "profile": "https://github.com/0Ky",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ehawman",
      "name": "Evan Hawman",
      "avatar_url": "https://avatars.githubusercontent.com/u/52979227?v=4",
      "profile": "https://github.com/ehawman",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "ZerdoX-x",
      "name": "Mark Lansky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49815452?v=4",
      "profile": "https://zerdox.dev",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "pulsation",
      "name": "pulsation",
      "avatar_url": "https://avatars.githubusercontent.com/u/1838397?v=4",
      "profile": "https://github.com/pulsation",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "oriionn",
      "name": "orionsource",
      "avatar_url": "https://avatars.githubusercontent.com/u/38093786?v=4",
      "profile": "https://oriondev.fr",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "CesarGBkR",
      "name": "Cesar Garduño",
      "avatar_url": "https://avatars.githubusercontent.com/u/99093357?v=4",
      "profile": "https://github.com/CesarGBkR",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Adi-vig",
      "name": "Aditya Sakhare",
      "avatar_url": "https://avatars.githubusercontent.com/u/123308369?v=4",
      "profile": "https://github.com/Adi-vig",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "deepak-dev-96",
      "name": "Deepak Dev",
      "avatar_url": "https://avatars.githubusercontent.com/u/134447761?v=4",
      "profile": "https://github.com/deepak-dev-96",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "warrenbuckley",
      "name": "Warren Buckley",
      "avatar_url": "https://avatars.githubusercontent.com/u/1389894?v=4",
      "profile": "http://creativewebspecialist.co.uk",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "LunarMarathon",
      "name": "LunarMarathon",
      "avatar_url": "https://avatars.githubusercontent.com/u/113847439?v=4",
      "profile": "https://github.com/LunarMarathon",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ginglis13",
      "name": "Gavin Inglis",
      "avatar_url": "https://avatars.githubusercontent.com/u/43075615?v=4",
      "profile": "https://ginglis.me",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "jaliyaudagedara",
      "name": "Jaliya Udagedara",
      "avatar_url": "https://avatars.githubusercontent.com/u/5653381?v=4",
      "profile": "http://jaliyaudagedara.blogspot.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "BPplays",
      "name": "BPplays",
      "avatar_url": "https://avatars.githubusercontent.com/u/58504799?v=4",
      "profile": "https://github.com/BPplays",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "mateusz-bajorek",
      "name": "Mateusz Bajorek",
      "avatar_url": "https://avatars.githubusercontent.com/u/11185738?v=4",
      "profile": "https://github.com/mateusz-bajorek",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "joshbduncan",
      "name": "Josh Duncan",
      "avatar_url": "https://avatars.githubusercontent.com/u/44387852?v=4",
      "profile": "http://joshbduncan.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "princesaini",
      "name": "Prince Saini",
      "avatar_url": "https://avatars.githubusercontent.com/u/25565506?v=4",
      "profile": "https://github.com/princesaini",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "fabriciojlm",
      "name": "fabriciojlm",
      "avatar_url": "https://avatars.githubusercontent.com/u/70244182?v=4",
      "profile": "https://www.linkedin.com/in/fabriciojuliano/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "SriRamanujam",
      "name": "Sri Ramanujam",
      "avatar_url": "https://avatars.githubusercontent.com/u/2983875?v=4",
      "profile": "https://github.com/SriRamanujam",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "Juneezee",
      "name": "Eng Zer Jun",
      "avatar_url": "https://avatars.githubusercontent.com/u/20135478?v=4",
      "profile": "https://github.com/Juneezee",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "AlexJPotter",
      "name": "Alex Potter",
      "avatar_url": "https://avatars.githubusercontent.com/u/14200888?v=4",
      "profile": "https://alexpotter.dev",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "mishmanners",
      "name": "Michelle Mannering",
      "avatar_url": "https://avatars.githubusercontent.com/u/36594527?v=4",
      "profile": "http://mishmanners.info",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "paulomorgado",
      "name": "Paulo Morgado",
      "avatar_url": "https://avatars.githubusercontent.com/u/470455?v=4",
      "profile": "https://github.com/paulomorgado",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "joadoumie",
      "name": "joadoumie",
      "avatar_url": "https://avatars.githubusercontent.com/u/98557455?v=4",
      "profile": "https://github.com/joadoumie",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "flanakin",
      "name": "Michael Flanakin",
      "avatar_url": "https://avatars.githubusercontent.com/u/399533?v=4",
      "profile": "http://about.me/flanakin",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "thiagoszbarros",
      "name": "Thiago Barros",
      "avatar_url": "https://avatars.githubusercontent.com/u/88802518?v=4",
      "profile": "https://www.linkedin.com/in/thiagobarros95/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "TendTo",
      "name": "Tend",
      "avatar_url": "https://avatars.githubusercontent.com/u/65033249?v=4",
      "profile": "https://github.com/TendTo",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "KibbeWater",
      "name": "Snow",
      "avatar_url": "https://avatars.githubusercontent.com/u/35224538?v=4",
      "profile": "https://kibbewater.com",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "randombenj",
      "name": "Benj Fassbind",
      "avatar_url": "https://avatars.githubusercontent.com/u/5184499?v=4",
      "profile": "https://github.com/randombenj",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "liudonghua123",
      "name": "liudonghua",
      "avatar_url": "https://avatars.githubusercontent.com/u/2276718?v=4",
      "profile": "http://blog.liudonghua.top",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Somoy73",
      "name": "Somoy Subandhu",
      "avatar_url": "https://avatars.githubusercontent.com/u/40368688?v=4",
      "profile": "http://somoy.me",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "oleksbabieiev",
      "name": "Oleksandr Babieiev",
      "avatar_url": "https://avatars.githubusercontent.com/u/64398691?v=4",
      "profile": "https://github.com/oleksbabieiev",
      "contributions": [
        "code",
        "doc",
        "design"
      ]
    },
    {
      "login": "mrbeardad",
      "name": "Heache Bear",
      "avatar_url": "https://avatars.githubusercontent.com/u/54128430?v=4",
      "profile": "https://github.com/mrbeardad",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ChrisNSki",
      "name": "Christopher Narowski",
      "avatar_url": "https://avatars.githubusercontent.com/u/125232146?v=4",
      "profile": "http://ensif.com",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "sino1641",
      "name": "Sin",
      "avatar_url": "https://avatars.githubusercontent.com/u/13870295?v=4",
      "profile": "https://github.com/sino1641",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "kkk669",
      "name": "Kenta Kubo",
      "avatar_url": "https://avatars.githubusercontent.com/u/601636?v=4",
      "profile": "https://kebo.xyz",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "mfedatto",
      "name": "MFedatto",
      "avatar_url": "https://avatars.githubusercontent.com/u/5623739?v=4",
      "profile": "http://mfedatto.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "RiikkaDream",
      "name": "Riikka",
      "avatar_url": "https://avatars.githubusercontent.com/u/56921531?v=4",
      "profile": "https://www.linkedin.com/in/riikka-l-861694b2/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "srpmtt",
      "name": "srpmtt",
      "avatar_url": "https://avatars.githubusercontent.com/u/11175503?v=4",
      "profile": "https://github.com/srpmtt",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "Chris-Johnston",
      "name": "Chris Johnston",
      "avatar_url": "https://avatars.githubusercontent.com/u/16418643?v=4",
      "profile": "https://chris-johnston.me",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Daimonion1980",
      "name": "Thomas",
      "avatar_url": "https://avatars.githubusercontent.com/u/12880413?v=4",
      "profile": "https://github.com/Daimonion1980",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "VEERT00X",
      "name": "Veko",
      "avatar_url": "https://avatars.githubusercontent.com/u/72668825?v=4",
      "profile": "https://veert00x.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "lucascosti",
      "name": "Lucas Costi",
      "avatar_url": "https://avatars.githubusercontent.com/u/4434330?v=4",
      "profile": "https://lucascosti.com",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "gergelyk",
      "name": "Grzegorz Krasoń",
      "avatar_url": "https://avatars.githubusercontent.com/u/11185582?v=4",
      "profile": "http://krason.dev/",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "rockyoung",
      "name": "rockyoung",
      "avatar_url": "https://avatars.githubusercontent.com/u/1207971?v=4",
      "profile": "https://github.com/rockyoung",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "shravanasati",
      "name": "Shravan Asati",
      "avatar_url": "https://avatars.githubusercontent.com/u/69118069?v=4",
      "profile": "https://github.com/shravanasati",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "lzecca78",
      "name": "Luca Zecca",
      "avatar_url": "https://avatars.githubusercontent.com/u/3881844?v=4",
      "profile": "https://github.com/lzecca78",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "jreilly-lukava",
      "name": "Joshua Reilly",
      "avatar_url": "https://avatars.githubusercontent.com/u/30353736?v=4",
      "profile": "https://github.com/jreilly-lukava",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "ivan-the-terrible",
      "name": "Ivan",
      "avatar_url": "https://avatars.githubusercontent.com/u/56458442?v=4",
      "profile": "https://ivan-the-terrible.github.io/",
      "contributions": [
        "design",
        "doc",
        "code"
      ]
    },
    {
      "login": "mountcount",
      "name": "mountcount",
      "avatar_url": "https://avatars.githubusercontent.com/u/166301065?v=4",
      "profile": "https://github.com/mountcount",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "Bondrake",
      "name": "Bondrake",
      "avatar_url": "https://avatars.githubusercontent.com/u/11696?v=4",
      "profile": "https://github.com/Bondrake",
      "contributions": [
        "design",
        "code"
      ]
    },
    {
      "login": "R00dRallec",
      "name": "R00dRallec",
      "avatar_url": "https://avatars.githubusercontent.com/u/9081954?v=4",
      "profile": "https://github.com/R00dRallec",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "publicfacingusername",
      "name": "Justin Wolfington",
      "avatar_url": "https://avatars.githubusercontent.com/u/13956145?v=4",
      "profile": "https://github.com/publicfacingusername",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "jtracey93",
      "name": "Jack Tracey",
      "avatar_url": "https://avatars.githubusercontent.com/u/41163455?v=4",
      "profile": "https://bio.link/jacktracey",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "MarkDaveny",
      "name": "MarkDaveny",
      "avatar_url": "https://avatars.githubusercontent.com/u/168091250?v=4",
      "profile": "https://github.com/MarkDaveny",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "tiwahu",
      "name": "Timothy Huber",
      "avatar_url": "https://avatars.githubusercontent.com/u/590564?v=4",
      "profile": "http://www.tiwahu.com/",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "YashJM",
      "name": "Yash Mistry",
      "avatar_url": "https://avatars.githubusercontent.com/u/63824041?v=4",
      "profile": "http://yashjmistry.me",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "jlabonski",
      "name": "Jeffrey Labonski",
      "avatar_url": "https://avatars.githubusercontent.com/u/2981369?v=4",
      "profile": "https://github.com/jlabonski",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "herbygillot",
      "name": "Herby Gillot",
      "avatar_url": "https://avatars.githubusercontent.com/u/618376?v=4",
      "profile": "https://github.com/herbygillot",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "arjan-s",
      "name": "arjan-s",
      "avatar_url": "https://avatars.githubusercontent.com/u/10400299?v=4",
      "profile": "https://github.com/arjan-s",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "0323pin",
      "name": "pin",
      "avatar_url": "https://avatars.githubusercontent.com/u/90570748?v=4",
      "profile": "https://github.com/0323pin",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "FireIsGood",
      "name": "FireIsGood",
      "avatar_url": "https://avatars.githubusercontent.com/u/109556932?v=4",
      "profile": "http://fireis.dev",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "Joxtacy",
      "name": "Jesper Hasselquist",
      "avatar_url": "https://avatars.githubusercontent.com/u/10127673?v=4",
      "profile": "https://github.com/Joxtacy",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "aaronpowell",
      "name": "Aaron Powell",
      "avatar_url": "https://avatars.githubusercontent.com/u/434140?v=4",
      "profile": "https://www.aaron-powell.com",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "Dartypier",
      "name": "Jacopo Zecchi",
      "avatar_url": "https://avatars.githubusercontent.com/u/22201626?v=4",
      "profile": "https://github.com/Dartypier",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "rose-m",
      "name": "Michael Rose",
      "avatar_url": "https://avatars.githubusercontent.com/u/4354632?v=4",
      "profile": "https://github.com/rose-m",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "denehoffman",
      "name": "Nathaniel D. Hoffman",
      "avatar_url": "https://avatars.githubusercontent.com/u/36977879?v=4",
      "profile": "http://denehoffman.com",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "michaelschwobe",
      "name": "Michael Schwobe",
      "avatar_url": "https://avatars.githubusercontent.com/u/926242?v=4",
      "profile": "https://schwobe.dev",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "Nibodhika",
      "name": "Nibodhika",
      "avatar_url": "https://avatars.githubusercontent.com/u/729967?v=4",
      "profile": "https://github.com/Nibodhika",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "sassdawe",
      "name": "David Sass",
      "avatar_url": "https://avatars.githubusercontent.com/u/10754765?v=4",
      "profile": "http://davidsass.io",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "carehart",
      "name": "Charlie Arehart",
      "avatar_url": "https://avatars.githubusercontent.com/u/389746?v=4",
      "profile": "http://www.carehart.org",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "aramikuto",
      "name": "Aleksandr Kondrashov",
      "avatar_url": "https://avatars.githubusercontent.com/u/116561995?v=4",
      "profile": "https://github.com/aramikuto",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "kimsey0",
      "name": "Jacob Bundgaard",
      "avatar_url": "https://avatars.githubusercontent.com/u/984760?v=4",
      "profile": "https://jacobbundgaard.dk",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "ThisaruGuruge",
      "name": "Thisaru Guruge",
      "avatar_url": "https://avatars.githubusercontent.com/u/40016057?v=4",
      "profile": "https://thisaru.me",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "edwin-shdw",
      "name": "Edwin",
      "avatar_url": "https://avatars.githubusercontent.com/u/62764562?v=4",
      "profile": "https://github.com/edwin-shdw",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "jcdickinson",
      "name": "Jonathan Dickinson",
      "avatar_url": "https://avatars.githubusercontent.com/u/522465?v=4",
      "profile": "https://dickinson.id",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "po1o",
      "name": "Polo-François Poli",
      "avatar_url": "https://avatars.githubusercontent.com/u/5702825?v=4",
      "profile": "https://github.com/po1o",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "EDIflyer",
      "name": "EDIflyer",
      "avatar_url": "https://avatars.githubusercontent.com/u/13610277?v=4",
      "profile": "https://github.com/EDIflyer",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "felipebz",
      "name": "Felipe Zorzo",
      "avatar_url": "https://avatars.githubusercontent.com/u/13829?v=4",
      "profile": "https://felipezorzo.com.br",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "DeepSpace2",
      "name": "Adi Vaknin",
      "avatar_url": "https://avatars.githubusercontent.com/u/6841988?v=4",
      "profile": "https://github.com/DeepSpace2",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "EladLeev",
      "name": "Elad Leev",
      "avatar_url": "https://avatars.githubusercontent.com/u/835319?v=4",
      "profile": "https://leevs.dev/",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "Soyvolon",
      "name": "Bounds",
      "avatar_url": "https://avatars.githubusercontent.com/u/16871668?v=4",
      "profile": "https://github.com/Soyvolon",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "Yash-Garg",
      "name": "Yash Garg",
      "avatar_url": "https://avatars.githubusercontent.com/u/33605526?v=4",
      "profile": "http://yashgarg.dev",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "sarpuser",
      "name": "Sarp User",
      "avatar_url": "https://avatars.githubusercontent.com/u/23362324?v=4",
      "profile": "https://github.com/sarpuser",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "clemyan",
      "name": "Clement Yan",
      "avatar_url": "https://avatars.githubusercontent.com/u/41266433?v=4",
      "profile": "https://github.com/clemyan",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "thep0y",
      "name": "thep0y",
      "avatar_url": "https://avatars.githubusercontent.com/u/51874567?v=4",
      "profile": "https://github.com/thep0y",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "ClxUne09",
      "name": "Artin",
      "avatar_url": "https://avatars.githubusercontent.com/u/175628107?v=4",
      "profile": "https://github.com/ClxUne09",
      "contributions": [
        "doc",
        "code"
      ]
    },
    {
      "login": "guspan-tanadi",
      "name": "Guspan Tanadi",
      "avatar_url": "https://avatars.githubusercontent.com/u/36249910?v=4",
      "profile": "https://github.com/guspan-tanadi",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "rocketraman",
      "name": "Raman Gupta",
      "avatar_url": "https://avatars.githubusercontent.com/u/53049?v=4",
      "profile": "http://vivosys.com",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "hsnabszhdn",
      "name": "Hossein Abbasi",
      "avatar_url": "https://avatars.githubusercontent.com/u/16090309?v=4",
      "profile": "https://github.com/hsnabszhdn",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "kizivat",
      "name": "David Kizivat",
      "avatar_url": "https://avatars.githubusercontent.com/u/3535926?v=4",
      "profile": "https://kizivat.eu",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "mgrubb",
      "name": "Michael Grubb",
      "avatar_url": "https://avatars.githubusercontent.com/u/351301?v=4",
      "profile": "https://github.com/mgrubb",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "oliviaBahr",
      "name": "Olivia Bahr",
      "avatar_url": "https://avatars.githubusercontent.com/u/98684296?v=4",
      "profile": "https://github.com/oliviaBahr",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "garysassano",
      "name": "Gary Sassano",
      "avatar_url": "https://avatars.githubusercontent.com/u/10464497?v=4",
      "profile": "https://github.com/garysassano",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "ilaumjd",
      "name": "Ilham AM",
      "avatar_url": "https://avatars.githubusercontent.com/u/16514431?v=4",
      "profile": "https://github.com/ilaumjd",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "trajano",
      "name": "Archimedes Trajano",
      "avatar_url": "https://avatars.githubusercontent.com/u/110627?v=4",
      "profile": "https://trajano.net/",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "devxpain",
      "name": "devxpain",
      "avatar_url": "https://avatars.githubusercontent.com/u/170700110?v=4",
      "profile": "https://github.com/devxpain",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "AntoninRuan",
      "name": "Antonin Ruan",
      "avatar_url": "https://avatars.githubusercontent.com/u/43148004?v=4",
      "profile": "https://www.antonin-ruan.fr",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "00ll00",
      "name": "00ll00",
      "avatar_url": "https://avatars.githubusercontent.com/u/40747228?v=4",
      "profile": "https://github.com/00ll00",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "ernstc",
      "name": "Ernesto Cianciotta",
      "avatar_url": "https://avatars.githubusercontent.com/u/130360?v=4",
      "profile": "https://devnotes.ernstc.net/",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "eelispeltola",
      "name": "Eelis Peltola",
      "avatar_url": "https://avatars.githubusercontent.com/u/15069074?v=4",
      "profile": "https://github.com/eelispeltola",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "vshulcz",
      "name": "Vlad Shulcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/99616188?v=4",
      "profile": "https://github.com/vshulcz",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Silzinc",
      "name": "Silzinc",
      "avatar_url": "https://avatars.githubusercontent.com/u/128738169?v=4",
      "profile": "https://github.com/Silzinc",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "Hampter",
      "name": "Noah Springer",
      "avatar_url": "https://avatars.githubusercontent.com/u/23213489?v=4",
      "profile": "https://github.com/Hampter",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "dusktreader",
      "name": "Tucker Beck",
      "avatar_url": "https://avatars.githubusercontent.com/u/713676?v=4",
      "profile": "https://github.com/dusktreader",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "Pietrucci-Blacher",
      "name": "Sunshio",
      "avatar_url": "https://avatars.githubusercontent.com/u/38607067?v=4",
      "profile": "https://mpb-dev.fr/",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "pashagolub",
      "name": "Pavlo Golub",
      "avatar_url": "https://avatars.githubusercontent.com/u/9463113?v=4",
      "profile": "https://pashagolub.github.io/blog",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "heaths",
      "name": "Heath Stewart",
      "avatar_url": "https://avatars.githubusercontent.com/u/1532486?v=4",
      "profile": "https://heaths.dev",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "HypheX",
      "name": "Xelph",
      "avatar_url": "https://avatars.githubusercontent.com/u/29693543?v=4",
      "profile": "https://xelph.me",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "TristanLeclair",
      "name": "Tristan Leclair-Vani",
      "avatar_url": "https://avatars.githubusercontent.com/u/60434271?v=4",
      "profile": "https://tristanleclair.github.io/personal-website/index.html",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "vil02",
      "name": "Piotr Idzik",
      "avatar_url": "https://avatars.githubusercontent.com/u/65706193?v=4",
      "profile": "https://github.com/vil02",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "wiyco",
      "name": "wiyco",
      "avatar_url": "https://avatars.githubusercontent.com/u/72733890?v=4",
      "profile": "https://wiyco.dev",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "abhro",
      "name": "abhro",
      "avatar_url": "https://avatars.githubusercontent.com/u/5664668?v=4",
      "profile": "https://github.com/abhro",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "spg-iwilson",
      "name": "Ivan Wilson",
      "avatar_url": "https://avatars.githubusercontent.com/u/25376734?v=4",
      "profile": "https://sharepointgurus.net",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "mdanish-kh",
      "name": "Muhammad Danish",
      "avatar_url": "https://avatars.githubusercontent.com/u/88161975?v=4",
      "profile": "https://github.com/mdanish-kh",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "BoscoDomingo",
      "name": "Bosco Domingo",
      "avatar_url": "https://avatars.githubusercontent.com/u/46006784?v=4",
      "profile": "https://dub.sh/boscodomingo",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "Edu4rdSHL",
      "name": "Eduard Tolosa",
      "avatar_url": "https://avatars.githubusercontent.com/u/32582878?v=4",
      "profile": "https://edu4rdshl.dev",
      "contributions": [
        "design",
        "doc"
      ]
    },
    {
      "login": "JamesAndrewJackson13",
      "name": "James Jackson",
      "avatar_url": "https://avatars.githubusercontent.com/u/27647566?v=4",
      "profile": "https://github.com/JamesAndrewJackson13",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "Mr-Vipi",
      "name": "Jul Guga",
      "avatar_url": "https://avatars.githubusercontent.com/u/58825526?v=4",
      "profile": "https://github.com/Mr-Vipi",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "tiaoxizhan",
      "name": "tiaoxizhan",
      "avatar_url": "https://avatars.githubusercontent.com/u/178074436?v=4",
      "profile": "http://txzhan.io",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "chrisant996",
      "name": "Chris Antos",
      "avatar_url": "https://avatars.githubusercontent.com/u/17440311?v=4",
      "profile": "https://github.com/chrisant996",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "rbleattler",
      "name": "Robert Bleattler",
      "avatar_url": "https://avatars.githubusercontent.com/u/40604784?v=4",
      "profile": "https://robertbleattler.com",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "d3v2a",
      "name": "dev2a",
      "avatar_url": "https://avatars.githubusercontent.com/u/1815655?v=4",
      "profile": "https://artis-auxilium.fr/fr",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "luisegarduno",
      "name": "Luis",
      "avatar_url": "https://avatars.githubusercontent.com/u/30121656?v=4",
      "profile": "http://gardunos.tech",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "tleepa",
      "name": "Leepa",
      "avatar_url": "https://avatars.githubusercontent.com/u/7734919?v=4",
      "profile": "https://github.com/tleepa",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "raylu",
      "name": "raylu",
      "avatar_url": "https://avatars.githubusercontent.com/u/90059?v=4",
      "profile": "https://blog.raylu.net",
      "contributions": [
        "code",
        "doc",
        "design"
      ]
    },
    {
      "login": "lechwolowski",
      "name": "Lech Wołowski",
      "avatar_url": "https://avatars.githubusercontent.com/u/33866950?v=4",
      "profile": "https://github.com/lechwolowski",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "OwlBurst",
      "name": "Owl Burst",
      "avatar_url": "https://avatars.githubusercontent.com/u/158167545?v=4",
      "profile": "https://github.com/OwlBurst",
      "contributions": [
        "doc"
      ]
    },
    {
      "login": "RubixDev",
      "name": "Silas Groh",
      "avatar_url": "https://avatars.githubusercontent.com/u/35602040?v=4",
      "profile": "http://rubixdev.de",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "mwiedemeyer",
      "name": "Marco Wiedemeyer",
      "avatar_url": "https://avatars.githubusercontent.com/u/4295189?v=4",
      "profile": "https://mwiede.me/blog",
      "contributions": [
        "code",
        "design",
        "doc"
      ]
    },
    {
      "login": "0-0-1-0-1-0-1-0",
      "name": "0-0-1-0-1-0-1-0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43226073?v=4",
      "profile": "https://github.com/0-0-1-0-1-0-1-0",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "player131007",
      "name": "player131007",
      "avatar_url": "https://avatars.githubusercontent.com/u/77326303?v=4",
      "profile": "https://github.com/player131007",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "kaien07",
      "name": "kaien07",
      "avatar_url": "https://avatars.githubusercontent.com/u/160471571?v=4",
      "profile": "https://github.com/kaien07",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "BusHero",
      "name": "Cervac Petru",
      "avatar_url": "https://avatars.githubusercontent.com/u/24370515?v=4",
      "profile": "https://github.com/BusHero",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "Marukome0743",
      "name": "マルコメ",
      "avatar_url": "https://avatars.githubusercontent.com/u/146040408?v=4",
      "profile": "https://github.com/Marukome0743",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "mreinhardt",
      "name": "Michael Reinhardt",
      "avatar_url": "https://avatars.githubusercontent.com/u/582461?v=4",
      "profile": "https://github.com/mreinhardt",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "AspectBruise09",
      "name": "Artin",
      "avatar_url": "https://avatars.githubusercontent.com/u/141767586?v=4",
      "profile": "https://github.com/AspectBruise09",
      "contributions": [
        "design"
      ]
    },
    {
      "login": "b-simjoo",
      "name": "Behnam Simjoo",
      "avatar_url": "https://avatars.githubusercontent.com/u/117530839?v=4",
      "profile": "http://bsimjoo.pcworms.ir",
      "contributions": [
        "code"
      ]
    },
    {
      "login": "plamendelchev",
      "name": "Plamen Delchev",
      "avatar_url": "https://avatars.githubusercontent.com/u/25668366?v=4",
      "profile": "https://github.com/plamendelchev",
      "contributions": [
        "code",
        "doc"
      ]
    },
    {
      "login": "beaualbritton",
      "name": "beau albritton",
      "avatar_url": "https://avatars.githubusercontent.com/u/112587801?v=4",
      "profile": "https://github.com/beaualbritton",
      "contributions": [
        "code"
      ]
    }
  ],
  "contributorsPerLine": 7,
  "skipCi": true,
  "commitType": "docs"
}



================================================
FILE: .commitlintrc.yml
================================================
---
extends:
  - '@commitlint/config-conventional'
rules:
  body-max-line-length:
    - 2
    - always
    - 200
  type-enum:
    - 2
    - always
    - - chore
      - ci
      - docs
      - feat
      - fix
      - perf
      - refactor
      - revert
      - style
      - test
      - theme



================================================
FILE: .editorconfig
================================================
; EditorConfig to support per-solution formatting.
; http://editorconfig.org/

; This is the default for the codeline.
root = true

; Default
[*]
indent_style = space
trim_trailing_whitespace = true
insert_final_newline = true
end_of_line = lf

; Go Code - match go fmt
[*.go]
indent_style = tab

; TOML - match default for dep
[*.toml]
indent_size = 2

; JavaScript and JS mixes - match eslint, other standards
[*.{js,json,ts,vue}]
indent_size = 2

; Markdown - match markdownlint settings
[*.{md,markdown}]
indent_size = 2
trim_trailing_whitespace = false

; PowerShell - match defaults for New-ModuleManifest and PSScriptAnalyzer Invoke-Formatter
[*.{ps1,psd1,psm1}]
indent_size = 4
charset = utf-8-bom

; Lua
[*.lua]
line_space_after_comment = max(2)
line_space_after_do_statement = max(2)
line_space_after_expression_statement = max(2)
line_space_after_for_statement = max(2)
line_space_after_function_statement = fixed(2)
line_space_after_if_statement = max(2)
line_space_after_local_or_assign_statement = max(2)
line_space_after_repeat_statement = max(2)
line_space_after_while_statement = max(2)
max_line_length = unset
quote_style = single



================================================
FILE: .markdownlint.yaml
================================================
MD024: false
MD014: false
MD038: false
line-length:
  line_length: 120
  code_blocks: false



================================================
FILE: .markdownlintignore
================================================
node_modules/



================================================
FILE: .versionrc.json
================================================
{
  "types": [
    {
      "type": "feat",
      "section": "Features"
    },
    {
      "type": "fix",
      "section": "Bug Fixes"
    },
    {
      "type": "refactor",
      "section": "Refactor"
    },
    {
      "type": "revert",
      "section": "Reverts"
    },
    {
      "type": "theme",
      "section": "Themes"
    },
    {
      "type": "chore",
      "hidden": true
    },
    {
      "type": "ci",
      "hidden": true
    },
    {
      "type": "chore",
      "hidden": true
    },
    {
      "type": "docs",
      "hidden": true
    },
    {
      "type": "perf",
      "hidden": true
    },
    {
      "type": "test",
      "hidden": true
    }
  ]
}



================================================
FILE: src/go.mod
================================================
module github.com/jandedobbeleer/oh-my-posh/src

go 1.24.4

require (
	github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c
	github.com/Masterminds/sprig/v3 v3.3.0
	github.com/alecthomas/assert v1.0.0
	github.com/alecthomas/colour v0.1.0 // indirect
	github.com/alecthomas/repr v0.4.0 // indirect
	github.com/esimov/stackblur-go v1.1.1
	github.com/fogleman/gg v1.3.0
	github.com/google/uuid v1.6.0
	github.com/gookit/color v1.5.4
	github.com/huandu/xstrings v1.5.0 // indirect
	github.com/mitchellh/copystructure v1.2.0 // indirect
	github.com/sergi/go-diff v1.4.0 // indirect
	github.com/shirou/gopsutil/v3 v3.24.5
	github.com/stretchr/objx v0.5.2 // indirect
	github.com/stretchr/testify v1.10.0
	github.com/wayneashleyberry/terminal-dimensions v1.1.0
	golang.org/x/crypto v0.39.0 // indirect
	golang.org/x/image v0.28.0
	golang.org/x/sys v0.33.0
	golang.org/x/text v0.26.0
	gopkg.in/ini.v1 v1.67.0
)

require (
	github.com/ConradIrwin/font v0.2.1
	github.com/charmbracelet/bubbles v0.21.0
	github.com/charmbracelet/bubbletea v1.3.5
	github.com/charmbracelet/lipgloss v1.1.0
	github.com/goccy/go-json v0.10.5
	github.com/gookit/goutil v0.7.0
	github.com/hashicorp/hcl/v2 v2.23.0
	github.com/mattn/go-runewidth v0.0.16
	github.com/pelletier/go-toml/v2 v2.2.4
	github.com/spf13/cobra v1.9.1
	github.com/spf13/pflag v1.0.6
	golang.org/x/mod v0.25.0
	gopkg.in/yaml.v3 v3.0.1
)

require (
	github.com/Masterminds/goutils v1.1.1 // indirect
	github.com/Masterminds/semver/v3 v3.3.1 // indirect
	github.com/davecgh/go-spew v1.1.1 // indirect
	github.com/go-ole/go-ole v1.3.0 // indirect
	github.com/lufia/plan9stats v0.0.0-20250317134145-8bc96cf8fc35 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/mitchellh/reflectwalk v1.0.2 // indirect
	github.com/pmezard/go-difflib v1.0.0 // indirect
	github.com/spf13/cast v1.9.2 // indirect
	github.com/tklauser/go-sysconf v0.3.15 // indirect
	github.com/tklauser/numcpus v0.10.0 // indirect
	github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect
)

require (
	dario.cat/mergo v1.0.2 // indirect
	dmitri.shuralyov.com/font/woff2 v0.0.0-20180220214647-957792cbbdab // indirect
	github.com/agext/levenshtein v1.2.3 // indirect
	github.com/apparentlymart/go-textseg/v15 v15.0.0 // indirect
	github.com/atotto/clipboard v0.1.4 // indirect
	github.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect
	github.com/charmbracelet/colorprofile v0.3.1 // indirect
	github.com/charmbracelet/harmonica v0.2.0 // indirect
	github.com/charmbracelet/x/ansi v0.9.2 // indirect
	github.com/charmbracelet/x/cellbuf v0.0.13 // indirect
	github.com/charmbracelet/x/term v0.2.1 // indirect
	github.com/dsnet/compress v0.0.1 // indirect
	github.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f // indirect
	github.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 // indirect
	github.com/google/go-cmp v0.7.0 // indirect
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/lucasb-eyer/go-colorful v1.2.0 // indirect
	github.com/mattn/go-localereader v0.0.1 // indirect
	github.com/mitchellh/go-wordwrap v1.0.1 // indirect
	github.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6 // indirect
	github.com/muesli/cancelreader v0.2.2 // indirect
	github.com/muesli/termenv v0.16.0 // indirect
	github.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55 // indirect
	github.com/rivo/uniseg v0.4.7 // indirect
	github.com/sahilm/fuzzy v0.1.1 // indirect
	github.com/shoenig/go-m1cpu v0.1.6 // indirect
	github.com/shopspring/decimal v1.4.0 // indirect
	github.com/yusufpapurcu/wmi v1.2.4 // indirect
	github.com/zclconf/go-cty v1.16.3 // indirect
	golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 // indirect
	golang.org/x/sync v0.15.0 // indirect
	golang.org/x/tools v0.34.0 // indirect
)

replace github.com/atotto/clipboard v0.1.4 => github.com/jandedobbeleer/clipboard v0.1.4-1

replace github.com/shirou/gopsutil/v3 v3.23.9 => github.com/jandedobbeleer/gopsutil/v3 v3.23.9-1



================================================
FILE: src/go.sum
================================================
dario.cat/mergo v1.0.2 h1:85+piFYR1tMbRrLcDwR18y4UKJ3aH1Tbzi24VRW1TK8=
dario.cat/mergo v1.0.2/go.mod h1:E/hbnu0NxMFBjpMIE34DRGLWqDy0g5FuKDhCb31ngxA=
dmitri.shuralyov.com/font/woff2 v0.0.0-20180220214647-957792cbbdab h1:Ew70NL+wL6v9looOiJJthlqA41VzoJS+q9AyjHJe6/g=
dmitri.shuralyov.com/font/woff2 v0.0.0-20180220214647-957792cbbdab/go.mod h1:FvHgTMJanm43G7B3MVSjS/jim5ytVqAJNAOpRhnuHJc=
github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c h1:udKWzYgxTojEKWjV8V+WSxDXJ4NFATAsZjh8iIbsQIg=
github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
github.com/ConradIrwin/font v0.2.1 h1:D4tWi7zyRAdVKOtOys5960HnAAfUSRx/syaf+J9JqlI=
github.com/ConradIrwin/font v0.2.1/go.mod h1:krTLO7JWu6g8RMxG8sl+T1Hf8W93XQacBKJmqFZ2MFY=
github.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=
github.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=
github.com/Masterminds/semver/v3 v3.3.1 h1:QtNSWtVZ3nBfk8mAOu/B6v7FMJ+NHTIgUPi7rj+4nv4=
github.com/Masterminds/semver/v3 v3.3.1/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=
github.com/Masterminds/sprig/v3 v3.3.0 h1:mQh0Yrg1XPo6vjYXgtf5OtijNAKJRNcTdOOGZe3tPhs=
github.com/Masterminds/sprig/v3 v3.3.0/go.mod h1:Zy1iXRYNqNLUolqCpL4uhk6SHUMAOSCzdgBfDb35Lz0=
github.com/agext/levenshtein v1.2.3 h1:YB2fHEn0UJagG8T1rrWknE3ZQzWM06O8AMAatNn7lmo=
github.com/agext/levenshtein v1.2.3/go.mod h1:JEDfjyjHDjOF/1e4FlBE/PkbqA9OfWu2ki2W0IB5558=
github.com/alecthomas/assert v1.0.0 h1:3XmGh/PSuLzDbK3W2gUbRXwgW5lqPkuqvRgeQ30FI5o=
github.com/alecthomas/assert v1.0.0/go.mod h1:va/d2JC+M7F6s+80kl/R3G7FUiW6JzUO+hPhLyJ36ZY=
github.com/alecthomas/colour v0.1.0 h1:nOE9rJm6dsZ66RGWYSFrXw461ZIt9A6+nHgL7FRrDUk=
github.com/alecthomas/colour v0.1.0/go.mod h1:QO9JBoKquHd+jz9nshCh40fOfO+JzsoXy8qTHF68zU0=
github.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=
github.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=
github.com/apparentlymart/go-textseg/v15 v15.0.0 h1:uYvfpb3DyLSCGWnctWKGj857c6ew1u1fNQOlOtuGxQY=
github.com/apparentlymart/go-textseg/v15 v15.0.0/go.mod h1:K8XmNZdhEBkdlyDdvbmmsvpAG721bKi0joRfFdHIWJ4=
github.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=
github.com/aymanbagabas/go-osc52/v2 v2.0.1/go.mod h1:uYgXzlJ7ZpABp8OJ+exZzJJhRNQ2ASbcXHWsFqH8hp8=
github.com/aymanbagabas/go-udiff v0.2.0 h1:TK0fH4MteXUDspT88n8CKzvK0X9O2xu9yQjWpi6yML8=
github.com/aymanbagabas/go-udiff v0.2.0/go.mod h1:RE4Ex0qsGkTAJoQdQQCA0uG+nAzJO/pI/QwceO5fgrA=
github.com/charmbracelet/bubbles v0.21.0 h1:9TdC97SdRVg/1aaXNVWfFH3nnLAwOXr8Fn6u6mfQdFs=
github.com/charmbracelet/bubbles v0.21.0/go.mod h1:HF+v6QUR4HkEpz62dx7ym2xc71/KBHg+zKwJtMw+qtg=
github.com/charmbracelet/bubbletea v1.3.5 h1:JAMNLTbqMOhSwoELIr0qyP4VidFq72/6E9j7HHmRKQc=
github.com/charmbracelet/bubbletea v1.3.5/go.mod h1:TkCnmH+aBd4LrXhXcqrKiYwRs7qyQx5rBgH5fVY3v54=
github.com/charmbracelet/colorprofile v0.3.1 h1:k8dTHMd7fgw4bnFd7jXTLZrSU/CQrKnL3m+AxCzDz40=
github.com/charmbracelet/colorprofile v0.3.1/go.mod h1:/GkGusxNs8VB/RSOh3fu0TJmQ4ICMMPApIIVn0KszZ0=
github.com/charmbracelet/harmonica v0.2.0 h1:8NxJWRWg/bzKqqEaaeFNipOu77YR5t8aSwG4pgaUBiQ=
github.com/charmbracelet/harmonica v0.2.0/go.mod h1:KSri/1RMQOZLbw7AHqgcBycp8pgJnQMYYT8QZRqZ1Ao=
github.com/charmbracelet/lipgloss v1.1.0 h1:vYXsiLHVkK7fp74RkV7b2kq9+zDLoEU4MZoFqR/noCY=
github.com/charmbracelet/lipgloss v1.1.0/go.mod h1:/6Q8FR2o+kj8rz4Dq0zQc3vYf7X+B0binUUBwA0aL30=
github.com/charmbracelet/x/ansi v0.9.2 h1:92AGsQmNTRMzuzHEYfCdjQeUzTrgE1vfO5/7fEVoXdY=
github.com/charmbracelet/x/ansi v0.9.2/go.mod h1:3RQDQ6lDnROptfpWuUVIUG64bD2g2BgntdxH0Ya5TeE=
github.com/charmbracelet/x/cellbuf v0.0.13 h1:/KBBKHuVRbq1lYx5BzEHBAFBP8VcQzJejZ/IA3iR28k=
github.com/charmbracelet/x/cellbuf v0.0.13/go.mod h1:xe0nKWGd3eJgtqZRaN9RjMtK7xUYchjzPr7q6kcvCCs=
github.com/charmbracelet/x/exp/golden v0.0.0-20241011142426-46044092ad91 h1:payRxjMjKgx2PaCWLZ4p3ro9y97+TVLZNaRZgJwSVDQ=
github.com/charmbracelet/x/exp/golden v0.0.0-20241011142426-46044092ad91/go.mod h1:wDlXFlCrmJ8J+swcL/MnGUuYnqgQdW9rhSD61oNMb6U=
github.com/charmbracelet/x/term v0.2.1 h1:AQeHeLZ1OqSXhrAWpYUtZyX1T3zVxfpZuEQMIQaGIAQ=
github.com/charmbracelet/x/term v0.2.1/go.mod h1:oQ4enTYFV7QN4m0i9mzHrViD7TQKvNEEkHUMCmsxdUg=
github.com/cpuguy83/go-md2man/v2 v2.0.6/go.mod h1:oOW0eioCTA6cOiMLiUPZOpcVxMig6NIQQ7OS05n1F4g=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/dsnet/compress v0.0.1 h1:PlZu0n3Tuv04TzpfPbrnI0HW/YwodEXDS+oPKahKF0Q=
github.com/dsnet/compress v0.0.1/go.mod h1:Aw8dCMJ7RioblQeTqt88akK31OvO8Dhf5JflhBbQEHo=
github.com/dsnet/golib v0.0.0-20171103203638-1ea166775780/go.mod h1:Lj+Z9rebOhdfkVLjJ8T6VcRQv3SXugXy999NBtR9aFY=
github.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f h1:Y/CXytFA4m6baUTXGLOoWe4PQhGxaX0KpnayAqC48p4=
github.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f/go.mod h1:vw97MGsxSvLiUE2X8qFplwetxpGLQrlU1Q9AUEIzCaM=
github.com/esimov/stackblur-go v1.1.1 h1:jZhuCbyFBp34SxkMwCuuNQ+d42w+CE/WOlcJLOlPEag=
github.com/esimov/stackblur-go v1.1.1/go.mod h1:m0T0MjHYbo4Lib/R33XDUMbLBwyGf1/K48ZdqtXUYDA=
github.com/fogleman/gg v1.3.0 h1:/7zJX8F6AaYQc57WQCyN9cAIz+4bCJGO9B+dyW29am8=
github.com/fogleman/gg v1.3.0/go.mod h1:R/bRT+9gY/C5z7JzPU0zXsXHKM4/ayA+zqcVNZzPa1k=
github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=
github.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=
github.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=
github.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=
github.com/go-test/deep v1.0.3 h1:ZrJSEWsXzPOxaZnFteGEfooLba+ju3FYIbOrS+rQd68=
github.com/go-test/deep v1.0.3/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=
github.com/goccy/go-json v0.10.5 h1:Fq85nIqj+gXn/S5ahsiTlK3TmC85qgirsdTP/+DeaC4=
github.com/goccy/go-json v0.10.5/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
github.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 h1:DACJavvAHhabrF08vX0COfcOBJRhZ8lUbR+ZWIs0Y5g=
github.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=
github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/gookit/color v1.5.4 h1:FZmqs7XOyGgCAxmWyPslpiok1k05wmY3SJTytgvYFs0=
github.com/gookit/color v1.5.4/go.mod h1:pZJOeOS8DM43rXbp4AZo1n9zCU2qjpcRko0b6/QJi9w=
github.com/gookit/goutil v0.7.0 h1:HD4PUDW2LOSKIEBJPFD8PzNGLsL46ztpfXWVU+WtAxk=
github.com/gookit/goutil v0.7.0/go.mod h1:vJS9HXctYTCLtCsZot5L5xF+O1oR17cDYO9R0HxBmnU=
github.com/hashicorp/hcl/v2 v2.23.0 h1:Fphj1/gCylPxHutVSEOf2fBOh1VE4AuLV7+kbJf3qos=
github.com/hashicorp/hcl/v2 v2.23.0/go.mod h1:62ZYHrXgPoX8xBnzl8QzbWq4dyDsDtfCRgIq1rbJEvA=
github.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=
github.com/huandu/xstrings v1.5.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
github.com/jandedobbeleer/clipboard v0.1.4-1 h1:rJehm5W0a3hvjcxyB3snqLBV4yvMBBc12JyMP7ngNQw=
github.com/jandedobbeleer/clipboard v0.1.4-1/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=
github.com/klauspost/compress v1.4.1/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=
github.com/klauspost/cpuid v1.2.0/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=
github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
github.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=
github.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=
github.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=
github.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=
github.com/lufia/plan9stats v0.0.0-20250317134145-8bc96cf8fc35 h1:PpXWgLPs+Fqr325bN2FD2ISlRRztXibcX6e8f5FR5Dc=
github.com/lufia/plan9stats v0.0.0-20250317134145-8bc96cf8fc35/go.mod h1:autxFIvghDt3jPTLoqZ9OZ7s9qTGNAWmYCjVFWPX/zg=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/mattn/go-localereader v0.0.1 h1:ygSAOl7ZXTx4RdPYinUpg6W99U8jWvWi9Ye2JC/oIi4=
github.com/mattn/go-localereader v0.0.1/go.mod h1:8fBrzywKY7BI3czFoHkuzRoWE9C+EiG4R1k4Cjx5p88=
github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=
github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=
github.com/mitchellh/go-wordwrap v1.0.1 h1:TLuKupo69TCn6TQSyGxwI1EblZZEsQ0vMlAFQflz0v0=
github.com/mitchellh/go-wordwrap v1.0.1/go.mod h1:R62XHJLzvMFRBbcrT7m7WgmE1eOyTSsCt+hzestvNj0=
github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=
github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
github.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6 h1:ZK8zHtRHOkbHy6Mmr5D264iyp3TiX5OmNcI5cIARiQI=
github.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6/go.mod h1:CJlz5H+gyd6CUWT45Oy4q24RdLyn7Md9Vj2/ldJBSIo=
github.com/muesli/cancelreader v0.2.2 h1:3I4Kt4BQjOR54NavqnDogx/MIoWBFa0StPA8ELUXHmA=
github.com/muesli/cancelreader v0.2.2/go.mod h1:3XuTXfFS2VjM+HTLZY9Ak0l6eUKfijIfMUZ4EgX0QYo=
github.com/muesli/termenv v0.16.0 h1:S5AlUN9dENB57rsbnkPyfdGuWIlkmzJjbFf0Tf5FWUc=
github.com/muesli/termenv v0.16.0/go.mod h1:ZRfOIKPFDYQoDFF4Olj7/QJbW60Ol/kL1pU3VfY/Cnk=
github.com/pelletier/go-toml/v2 v2.2.4 h1:mye9XuhQ6gvn5h28+VilKrrPoQVanw5PMw/TB0t5Ec4=
github.com/pelletier/go-toml/v2 v2.2.4/go.mod h1:2gIqNv+qfxSVS7cM2xJQKtLSTLUE9V8t9Stt+h56mCY=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55 h1:o4JXh1EVt9k/+g42oCprj/FisM4qX9L3sZB3upGN2ZU=
github.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=
github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
github.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=
github.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=
github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
github.com/sahilm/fuzzy v0.1.1 h1:ceu5RHF8DGgoi+/dR5PsECjCDH1BE3Fnmpo7aVXOdRA=
github.com/sahilm/fuzzy v0.1.1/go.mod h1:VFvziUEIMCrT6A6tw2RFIXPXXmzXbOsSHF0DOI8ZK9Y=
github.com/sergi/go-diff v1.4.0 h1:n/SP9D5ad1fORl+llWyN+D6qoUETXNZARKjyY2/KVCw=
github.com/sergi/go-diff v1.4.0/go.mod h1:A0bzQcvG0E7Rwjx0REVgAGH58e96+X0MeOfepqsbeW4=
github.com/shirou/gopsutil/v3 v3.24.5 h1:i0t8kL+kQTvpAYToeuiVk3TgDeKOFioZO3Ztz/iZ9pI=
github.com/shirou/gopsutil/v3 v3.24.5/go.mod h1:bsoOS1aStSs9ErQ1WWfxllSeS1K5D+U30r2NfcubMVk=
github.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=
github.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=
github.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=
github.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=
github.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=
github.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=
github.com/shurcooL/gofontwoff v0.0.0-20181114050219-180f79e6909d h1:lvCTyBbr36+tqMccdGMwuEU+hjux/zL6xSmf5S9ITaA=
github.com/shurcooL/gofontwoff v0.0.0-20181114050219-180f79e6909d/go.mod h1:05UtEgK5zq39gLST6uB0cf3NEHjETfB4Fgr3Gx5R9Vw=
github.com/spf13/cast v1.9.2 h1:SsGfm7M8QOFtEzumm7UZrZdLLquNdzFYfIbEXntcFbE=
github.com/spf13/cast v1.9.2/go.mod h1:jNfB8QC9IA6ZuY2ZjDp0KtFO2LZZlg4S/7bzP6qqeHo=
github.com/spf13/cobra v1.9.1 h1:CXSaggrXdbHK9CF+8ywj8Amf7PBRmPCOJugH954Nnlo=
github.com/spf13/cobra v1.9.1/go.mod h1:nDyEzZ8ogv936Cinf6g1RU9MRY64Ir93oCnqb9wxYW0=
github.com/spf13/pflag v1.0.6 h1:jFzHGLGAlb3ruxLB8MhbI6A8+AQX/2eW4qeyNZXNp2o=
github.com/spf13/pflag v1.0.6/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=
github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
github.com/tklauser/go-sysconf v0.3.15 h1:VE89k0criAymJ/Os65CSn1IXaol+1wrsFHEB8Ol49K4=
github.com/tklauser/go-sysconf v0.3.15/go.mod h1:Dmjwr6tYFIseJw7a3dRLJfsHAMXZ3nEnL/aZY+0IuI4=
github.com/tklauser/numcpus v0.10.0 h1:18njr6LDBk1zuna922MgdjQuJFjrdppsZG60sHGfjso=
github.com/tklauser/numcpus v0.10.0/go.mod h1:BiTKazU708GQTYF4mB+cmlpT2Is1gLk7XVuEeem8LsQ=
github.com/ulikunitz/xz v0.5.6/go.mod h1:2bypXElzHzzJZwzH67Y6wb67pO62Rzfn7BSiF4ABRW8=
github.com/wayneashleyberry/terminal-dimensions v1.1.0 h1:EB7cIzBdsOzAgmhTUtTTQXBByuPheP/Zv1zL2BRPY6g=
github.com/wayneashleyberry/terminal-dimensions v1.1.0/go.mod h1:2lc/0eWCObmhRczn2SdGSQtgBooLUzIotkkEGXqghyg=
github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e h1:JVG44RsyaB9T2KIHavMF/ppJZNG9ZpyihvCd0w101no=
github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e/go.mod h1:RbqR21r5mrJuqunuUZ/Dhy/avygyECGrLceyNeo4LiM=
github.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=
github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=
github.com/zclconf/go-cty v1.16.3 h1:osr++gw2T61A8KVYHoQiFbFd1Lh3JOCXc/jFLJXKTxk=
github.com/zclconf/go-cty v1.16.3/go.mod h1:VvMs5i0vgZdhYawQNq5kePSpLAoz8u1xvZgrPIxfnZE=
github.com/zclconf/go-cty-debug v0.0.0-20240509010212-0d6042c53940 h1:4r45xpDWB6ZMSMNJFMOjqrGHynW3DIBuR2H9j0ug+Mo=
github.com/zclconf/go-cty-debug v0.0.0-20240509010212-0d6042c53940/go.mod h1:CmBdvvj3nqzfzJ6nTCIwDTPZ56aVGvDrmztiO5g3qrM=
golang.org/x/crypto v0.39.0 h1:SHs+kF4LP+f+p14esP5jAoDpHU8Gu/v9lFRK6IT5imM=
golang.org/x/crypto v0.39.0/go.mod h1:L+Xg3Wf6HoL4Bn4238Z6ft6KfEpN0tJGo53AAPC632U=
golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 h1:1UoZQm6f0P/ZO0w1Ri+f+ifG/gXhegadRdwBIXEFWDo=
golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=
golang.org/x/image v0.28.0 h1:gdem5JW1OLS4FbkWgLO+7ZeFzYtL3xClb97GaUzYMFE=
golang.org/x/image v0.28.0/go.mod h1:GUJYXtnGKEUgggyzh+Vxt+AviiCcyiwpsl8iQ8MvwGY=
golang.org/x/mod v0.25.0 h1:n7a+ZbQKQA/Ysbyb0/6IbB1H/X41mKgbhfv7AfG/44w=
golang.org/x/mod v0.25.0/go.mod h1:IXM97Txy2VM4PJ3gI61r1YEk/gAj6zAHN3AdZt6S9Ww=
golang.org/x/sync v0.15.0 h1:KWH3jNZsfyT6xfAfKiz6MRNmd46ByHDYaZ7KSkCtdW8=
golang.org/x/sync v0.15.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20210809222454-d867a43fc93e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
golang.org/x/term v0.32.0 h1:DR4lr0TjUs3epypdhTOkMmuF5CDFJ/8pOnbzMZPQ7bg=
golang.org/x/term v0.32.0/go.mod h1:uZG1FhGx848Sqfsq4/DlJr3xGGsYMu/L5GW4abiaEPQ=
golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
golang.org/x/text v0.26.0 h1:P42AVeLghgTYr4+xUnTRKDMqpar+PtX7KWuNQL21L8M=
golang.org/x/text v0.26.0/go.mod h1:QK15LZJUUQVJxhz7wXgxSy/CJaTFjd0G+YLonydOVQA=
golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.34.0 h1:qIpSLOxeCYGg9TrcJokLBG4KFA6d795g0xkBkiESGlo=
golang.org/x/tools v0.34.0/go.mod h1:pAP9OwEaY1CAW3HOmg3hLZC5Z0CCmzjAF2UQMSqNARg=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=



================================================
FILE: src/main.go
================================================
package main

import (
	"github.com/jandedobbeleer/oh-my-posh/src/cli"
)

func main() {
	cli.Execute()
}



================================================
FILE: src/main_test.go
================================================
package main

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cli"
	"github.com/jandedobbeleer/oh-my-posh/src/prompt"
)

func BenchmarkInit(b *testing.B) {
	cmd := cli.RootCmd
	// needs to be a non-existing file as we panic otherwise
	cmd.SetArgs([]string{"init", "fish", "--print", "--silent"})
	out := bytes.NewBufferString("")
	cmd.SetOut(out)

	for b.Loop() {
		_ = cmd.Execute()
	}
}

func BenchmarkPrimary(b *testing.B) {
	cmd := cli.RootCmd
	// needs to be a non-existing file as we panic otherwise
	cmd.SetArgs([]string{"print", prompt.PRIMARY, "--pwd", "/Users/jan/Code/oh-my-posh/src", "--shell", "fish", "--silent"})
	out := bytes.NewBufferString("")
	cmd.SetOut(out)

	for b.Loop() {
		_ = cmd.Execute()
	}

	fmt.Println("")
}



================================================
FILE: src/metadata.json
================================================
{
  "Endpoint": "https://weu.codesigning.azure.net",
  "CodeSigningAccountName": "oh-my-posh",
  "CertificateProfileName": "oh-my-posh",
  "ExcludeCredentials": [
    "AzureCliCredential",
    "AzurePowerShellCredential",
    "ManagedIdentityCredential",
    "SharedTokenCacheCredential",
    "VisualStudioCredential",
    "VisualStudioCodeCredential",
    "InteractiveBrowserCredential"
  ]
}



================================================
FILE: src/.golangci.yml
================================================
version: "2"
run:
  allow-parallel-runners: true
linters:
  default: none
  enable:
    - bodyclose
    - copyloopvar
    - dupl
    - errcheck
    - exhaustive
    - goconst
    - gocritic
    - gocyclo
    - goprintffuncname
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - revive
    - rowserrcheck
    - staticcheck
    - unconvert
    - unparam
    - unused
    - whitespace
  settings:
    gocritic:
      enabled-tags:
        - diagnostic
        - opinionated
        - performance
        - style
      disabled-tags:
        - experimental
    lll:
      line-length: 180
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    paths:
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gofmt
    - goimports
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$



================================================
FILE: src/.goreleaser.yml
================================================
# Make sure to check the documentation at https://goreleaser.com
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
version: 2
before:
  hooks:
    - go mod tidy
    - go install github.com/tc-hib/go-winres@latest
    - go-winres make --product-version=git-tag --file-version=git-tag --arch="amd64,386,arm64"
builds:
  -
    binary: "posh-{{ .Os }}-{{ .Arch }}"
    no_unique_dist_dir: true
    flags:
      - -a
    ldflags:
      - -s -w
      - -X github.com/jandedobbeleer/oh-my-posh/src/build.Version={{ .Version }}
      - -X github.com/jandedobbeleer/oh-my-posh/src/build.Date={{ .Date }}
      - -extldflags "-static"
    tags:
      - netgo
      - osusergo
      - static_build
      - timetzdata
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
      - freebsd
    goarch:
      - amd64
      - arm64
      - arm
      - "386"
    ignore:
      - goos: darwin
        goarch: "386"
      - goos: darwin
        goarch: arm
      - goos: windows
        goarch: arm
    hooks:
      post:
        - pwsh -c "if ('{{ .Path }}'.EndsWith('.exe')) { & '{{ .Env.SIGNTOOL }}' sign /v /debug /fd SHA256 /tr 'http://timestamp.acs.microsoft.com' /td SHA256 /dlib '{{ .Env.SIGNTOOLDLIB }}' /dmdf './metadata.json' '{{ .Path }}' }"
archives:
  - id: oh-my-posh
    format: binary
    name_template: "posh-{{ .Os }}-{{ .Arch }}"
checksum:
  name_template: 'checksums.txt'
signs:
  - cmd: pwsh
    args:
      - "-c"
      - "& '{{ .Env.OPENSSL }}' pkeyutl -sign -inkey '{{ .Env.SHA_SIGNING_KEY_LOCATION }}' -out '${artifact}.sig' -rawin -in '${artifact}'"
    artifacts: checksum
changelog:
  disable: true



================================================
FILE: src/cache/cache.go
================================================
package cache

import (
	"fmt"
	"os"
	"time"
)

type Cache interface {
	Init(filePath string, persist bool)
	Close()
	// Gets the value for a given key.
	// Returns the value and a boolean indicating if the key was found.
	// In case the duration expired, the function returns false.
	Get(key string) (string, bool)
	// Sets a value for a given key.
	// The duration indicates how many minutes to cache the value.
	Set(key, value string, duration Duration)
	// Deletes a key from the cache.
	Delete(key string)
}

type Context interface {
	CacheKey() (string, bool)
}

const (
	FileName = "omp.cache"
)

func SessionFileName() (string, error) {
	sessionID := os.Getenv("POSH_SESSION_ID")
	if len(sessionID) == 0 {
		return "", fmt.Errorf("environment variable POSH_SESSION_ID is not set")
	}

	return fmt.Sprintf("%s.%s", FileName, sessionID), nil
}

const (
	TEMPLATECACHE    = "template_cache"
	TOGGLECACHE      = "toggle_cache"
	PROMPTCOUNTCACHE = "prompt_count_cache"
	ENGINECACHE      = "engine_cache"
	FONTLISTCACHE    = "font_list_cache"
)

type Entry struct {
	Value     string `json:"value"`
	Timestamp int64  `json:"timestamp"`
	TTL       int    `json:"ttl"`
}

func (c *Entry) Expired() bool {
	if c.TTL < 0 {
		return false
	}

	return time.Now().Unix() >= (c.Timestamp + int64(c.TTL))
}



================================================
FILE: src/cache/clear.go
================================================
package cache

import (
	"os"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

func Clear(cachePath string, force bool) ([]string, error) {
	// get all files in the cache directory that start with omp.cache and delete them
	files, err := os.ReadDir(cachePath)
	if err != nil {
		return []string{}, err
	}

	var removed []string

	deleteFile := func(file string) {
		path := filepath.Join(cachePath, file)
		if err := os.Remove(path); err == nil {
			removed = append(removed, path)
		}
	}

	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if !strings.HasPrefix(file.Name(), FileName) && !strings.HasPrefix(file.Name(), "init.") {
			continue
		}

		if force {
			deleteFile(file.Name())
			continue
		}

		// don't delete the system cache file unless forced
		if file.Name() == FileName {
			continue
		}

		info, err := file.Info()
		if err != nil {
			continue
		}

		if info.ModTime().AddDate(0, 0, 7).After(info.ModTime()) {
			continue
		}

		deleteFile(file.Name())
	}

	deletedLogs := deleteLogs(force)
	if len(deletedLogs) > 0 {
		removed = append(removed, deletedLogs...)
	}

	return removed, nil
}

func deleteLogs(force bool) []string {
	var removed []string

	home, err := os.UserHomeDir()
	if err != nil {
		log.Error(err)
		return removed
	}

	logPath := filepath.Join(home, ".oh-my-posh")

	deleteFile := func(file string) {
		path := filepath.Join(logPath, file)
		if err := os.Remove(path); err == nil {
			removed = append(removed, path)
		}
	}

	logFiles, err := os.ReadDir(logPath)
	if err != nil {
		log.Error(err)
		return removed
	}

	for _, file := range logFiles {
		if file.IsDir() || !strings.HasSuffix(file.Name(), ".log") {
			continue
		}

		if force {
			deleteFile(file.Name())
			continue
		}

		info, err := file.Info()
		if err != nil {
			continue
		}

		if info.ModTime().AddDate(0, 0, 7).After(info.ModTime()) {
			continue
		}

		deleteFile(file.Name())
	}

	return removed
}



================================================
FILE: src/cache/command.go
================================================
package cache

import (
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
)

type Command struct {
	Commands *maps.Concurrent
}

func (c *Command) Set(command, path string) {
	c.Commands.Set(command, path)
}

func (c *Command) Get(command string) (string, bool) {
	cacheCommand, found := c.Commands.Get(command)
	if !found {
		return "", false
	}
	command, ok := cacheCommand.(string)
	return command, ok
}



================================================
FILE: src/cache/config.go
================================================
package cache

type Config struct {
	Duration Duration `json:"duration,omitempty" toml:"duration,omitempty" yaml:"duration,omitempty"`
	Strategy Strategy `json:"strategy,omitempty" toml:"strategy,omitempty" yaml:"strategy,omitempty"`
}

type Strategy string

const (
	Folder  Strategy = "folder"
	Session Strategy = "session"
)



================================================
FILE: src/cache/duration.go
================================================
package cache

import (
	"time"
)

type Duration string

const (
	INFINITE = Duration("infinite")
	NONE     = Duration("none")
	ONEWEEK  = Duration("168h")
	ONEDAY   = Duration("24h")
	TWOYEARS = Duration("17520h")
)

func (d Duration) Seconds() int {
	if d == NONE {
		return 0
	}

	if d == INFINITE {
		return -1
	}

	duration, err := time.ParseDuration(string(d))
	if err != nil {
		return 0
	}

	return int(duration.Seconds())
}

func (d Duration) IsEmpty() bool {
	return len(d) == 0
}

func ToDuration(seconds int) Duration {
	if seconds == 0 {
		return ""
	}

	if seconds == -1 {
		return INFINITE
	}

	duration := time.Duration(seconds) * time.Second
	return Duration(duration.String())
}



================================================
FILE: src/cache/duration_test.go
================================================
package cache

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSeconds(t *testing.T) {
	cases := []struct {
		Case     string
		Duration Duration
		Expected int
	}{
		{
			Case:     "2 seconds",
			Duration: "2s",
			Expected: 2,
		},
		{
			Case:     "1 minute",
			Duration: "1m",
			Expected: 60,
		},
		{
			Case:     "2 hours",
			Duration: "2h",
			Expected: 7200,
		},
		{
			Case:     "2 days",
			Duration: "48h",
			Expected: 172800,
		},
		{
			Case:     "invalid",
			Duration: "foo",
			Expected: 0,
		},
		{
			Case:     "1 fortnight",
			Duration: "1fortnight",
			Expected: 0,
		},
		{
			Case:     "infinite",
			Duration: "infinite",
			Expected: -1,
		},
	}
	for _, tc := range cases {
		got := tc.Duration.Seconds()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/cache/file.go
================================================
package cache

import (
	"encoding/json"
	"os"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
)

type File struct {
	cache         *maps.Concurrent
	cacheFilePath string
	dirty         bool
	persist       bool
}

func (fc *File) Init(cacheFilePath string, persist bool) {
	defer log.Trace(time.Now(), cacheFilePath)

	fc.cache = maps.NewConcurrent()
	fc.cacheFilePath = cacheFilePath
	fc.persist = persist

	log.Debug("loading cache file:", fc.cacheFilePath)

	content, err := os.ReadFile(fc.cacheFilePath)
	if err != nil {
		// set to dirty so we create it on close
		fc.dirty = true
		log.Error(err)
		return
	}

	var list map[string]*Entry
	if err := json.Unmarshal(content, &list); err != nil {
		return
	}

	for key, co := range list {
		if co.Expired() {
			log.Debug("skipping expired cache key:", key)
			continue
		}

		log.Debug("loading cache key:", key)
		fc.cache.Set(key, co)
	}
}

func (fc *File) Close() {
	if fc == nil || !fc.persist || !fc.dirty {
		log.Debug("not persisting cache")
		return
	}

	cache := fc.cache.ToSimple()

	if dump, err := json.MarshalIndent(cache, "", "    "); err == nil {
		_ = os.WriteFile(fc.cacheFilePath, dump, 0o644)
	}
}

// returns the value for the given key as long as
// the duration is not expired
func (fc *File) Get(key string) (string, bool) {
	if fc == nil {
		log.Debug("cache is nil, returning empty value for key:", key)
		return "", false
	}

	val, found := fc.cache.Get(key)
	if !found {
		log.Debug("cache key not found:", key)
		return "", false
	}

	if co, ok := val.(*Entry); ok {
		log.Debug("getting cache key:", key, "with value:", co.Value)
		return co.Value, true
	}

	log.Debug("unable to parse cache key:", key)
	return "", false
}

// sets the value for the given key with a duration
func (fc *File) Set(key, value string, duration Duration) {
	if fc == nil {
		log.Debug("cache is nil, not setting value for key:", key)
		return
	}

	seconds := duration.Seconds()

	if seconds == 0 {
		return
	}

	log.Debug("setting cache key:", key, "with duration:", string(duration))

	fc.cache.Set(key, &Entry{
		Value:     value,
		Timestamp: time.Now().Unix(),
		TTL:       seconds,
	})

	fc.dirty = true
}

// delete the key from the cache
func (fc *File) Delete(key string) {
	if fc == nil {
		log.Debug("cache is nil, not deleting key:", key)
		return
	}

	log.Debug("deleting cache key:", key)
	fc.cache.Delete(key)
	fc.dirty = true
}



================================================
FILE: src/cache/path.go
================================================
package cache

import (
	"os"
	"path/filepath"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

func Path() string {
	defer log.Trace(time.Now())

	returnOrBuildCachePath := func(input string) (string, bool) {
		// validate root path
		if _, err := os.Stat(input); err != nil {
			return "", false
		}

		// validate oh-my-posh folder, if non existent, create it
		cachePath := filepath.Join(input, "oh-my-posh")
		if _, err := os.Stat(cachePath); err == nil {
			return cachePath, true
		}

		if err := os.Mkdir(cachePath, 0o755); err != nil {
			return "", false
		}

		return cachePath, true
	}

	// allow the user to set the cache path using OMP_CACHE_DIR
	if cachePath, OK := returnOrBuildCachePath(os.Getenv("OMP_CACHE_DIR")); OK {
		return cachePath
	}

	// WINDOWS cache folder, should not exist elsewhere
	if cachePath, OK := returnOrBuildCachePath(os.Getenv("LOCALAPPDATA")); OK {
		return cachePath
	}

	// get XDG_CACHE_HOME if present
	if cachePath, OK := returnOrBuildCachePath(os.Getenv("XDG_CACHE_HOME")); OK {
		return cachePath
	}

	// try to create the cache folder in the user's home directory if non-existent
	dotCache := filepath.Join(path.Home(), ".cache")
	if _, err := os.Stat(dotCache); err != nil {
		_ = os.Mkdir(dotCache, 0o755)
	}

	// HOME cache folder
	if cachePath, OK := returnOrBuildCachePath(dotCache); OK {
		return cachePath
	}

	return path.Home()
}



================================================
FILE: src/cache/template.go
================================================
package cache

import (
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
)

type Template struct {
	SegmentsCache maps.Simple
	Segments      *maps.Concurrent
	Var           maps.Simple
	PWD           string
	Folder        string
	PSWD          string
	UserName      string
	HostName      string
	ShellVersion  string
	Shell         string
	AbsolutePWD   string
	OS            string
	Version       string
	PromptCount   int
	SHLVL         int
	Jobs          int
	Code          int
	WSL           bool
	Root          bool
}

func (t *Template) AddSegmentData(key string, value any) {
	t.Segments.Set(key, value)
}

func (t *Template) RemoveSegmentData(key string) {
	t.Segments.Delete(key)
}



================================================
FILE: src/cache/mock/cache.go
================================================
package mock

import (
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	mock "github.com/stretchr/testify/mock"
)

type Cache struct {
	mock.Mock
}

func (_m *Cache) Init(filePath string, persist bool) {
	_m.Called(filePath, persist)
}

func (_m *Cache) Close() {
	_m.Called()
}

func (_m *Cache) Get(key string) (string, bool) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// set provides a mock function with given fields: key, value, ttl
func (_m *Cache) Set(key, value string, duration cache.Duration) {
	_m.Called(key, value, duration)
}

func (_m *Cache) Delete(key string) {
	_m.Called(key)
}



================================================
FILE: src/cli/args.go
================================================
package cli

import "github.com/spf13/cobra"

func NoArgsOrOneValidArg(cmd *cobra.Command, args []string) error {
	if len(args) == 0 {
		return nil
	}
	if err := cobra.ExactArgs(1)(cmd, args); err != nil {
		return err
	}
	return cobra.OnlyValidArgs(cmd, args)
}



================================================
FILE: src/cli/auth.go
================================================
package cli

import (
	"github.com/jandedobbeleer/oh-my-posh/src/cli/auth"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	"github.com/spf13/cobra"
)

var authCmd = &cobra.Command{
	Use:   "auth [ytmda]",
	Short: "Authenticate against a service",
	Long: `Authenticate against a service.

Available services:

- ytmda: YouTube Music Desktop App (YTMDA) API`,
	ValidArgs: []string{
		"ytmda",
	},
	Args: NoArgsOrOneValidArg,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}

		flags := &runtime.Flags{
			Shell:     shellName,
			SaveCache: true,
		}

		env := &runtime.Terminal{}
		env.Init(flags)
		defer env.Close()

		switch args[0] {
		case "ytmda":
			authenticator := auth.NewYtmda(env)
			if err := auth.Run(authenticator); err != nil {
				log.Error(err)
				exitcode = 70
			}
		default:
			_ = cmd.Help()
		}
	},
}

func init() {
	RootCmd.AddCommand(authCmd)
}



================================================
FILE: src/cli/cache.go
================================================
package cli

import (
	"fmt"
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"

	"github.com/spf13/cobra"
)

// getCmd represents the get command
var getCache = &cobra.Command{
	Use:   "cache [path|clear|edit]",
	Short: "Interact with the oh-my-posh cache",
	Long: `Interact with the oh-my-posh cache.

You can do the following:

- path: list cache path
- clear: remove all cache values
- edit: edit cache values`,
	ValidArgs: []string{
		"path",
		"clear",
		"edit",
	},
	Args: NoArgsOrOneValidArg,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}

		switch args[0] {
		case "path":
			fmt.Println(cache.Path())
		case "clear":
			deletedFiles, err := cache.Clear(cache.Path(), true)
			if err != nil {
				fmt.Println(err)
				return
			}

			for _, file := range deletedFiles {
				fmt.Println("removed cache file:", file)
			}
		case "edit":
			cacheFilePath := filepath.Join(cache.Path(), cache.FileName)
			exitcode = editFileWithEditor(cacheFilePath)
		}
	},
}

func init() {
	RootCmd.AddCommand(getCache)
}



================================================
FILE: src/cli/config.go
================================================
package cli

import (
	"fmt"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/config"

	"github.com/spf13/cobra"
)

// configCmd represents the config command
var configCmd = &cobra.Command{
	Use:   "config edit",
	Short: "Interact with the config",
	Long: `Interact with the config.

You can export, migrate or edit the config (via the editor specified in the environment variable "EDITOR").`,
	ValidArgs: []string{
		"export",
		"migrate",
		"edit",
		"get",
	},
	Args: NoArgsOrOneValidArg,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}
		switch args[0] {
		case "edit":
			path := config.Path((configFlag))
			exitcode = editFileWithEditor(path)
		case "get":
			// only here for backwards compatibility
			fmt.Print(time.Now().UnixNano() / 1000000)
		default:
			_ = cmd.Help()
		}
	},
}

func init() {
	RootCmd.AddCommand(configCmd)
}



================================================
FILE: src/cli/config_export.go
================================================
package cli

import (
	"errors"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	"github.com/spf13/cobra"
)

var output string

// exportCmd represents the export command
var exportCmd = &cobra.Command{
	Use:   "export",
	Short: "Export your config",
	Long: `Export your config.

You can choose to print the output to stdout, or export your config in the format of your choice.

Example usage:

> oh-my-posh config export --config ~/myconfig.omp.json --format toml

Exports the config file "~/myconfig.omp.json" in TOML format and prints the result to stdout.

> oh-my-posh config export --output ~/new_config.omp.json

Exports the current config to "~/new_config.omp.json" (in JSON format).`,
	Args: cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		if len(output) == 0 && len(format) == 0 {
			// usage error
			fmt.Println("neither output path nor export format is specified")
			exitcode = 2
			return
		}

		configFile := config.Path(configFlag)
		cfg, _ := config.Load(configFile, shell.GENERIC, false)

		validateExportFormat := func() error {
			format = strings.ToLower(format)
			switch format {
			case "json", "jsonc":
				format = config.JSON
			case "toml", "tml":
				format = config.TOML
			case "yaml", "yml":
				format = config.YAML
			default:
				formats := []string{"json", "jsonc", "toml", "tml", "yaml", "yml"}
				// usage error
				fmt.Printf("export format must be one of these: %s\n", strings.Join(formats, ", "))
				exitcode = 2
				return errors.New("invalide export format")
			}

			return nil
		}

		if len(format) != 0 {
			if err := validateExportFormat(); err != nil {
				return
			}
		}

		if len(output) == 0 {
			fmt.Print(cfg.Export(format))
			return
		}

		cfg.Output = cleanOutputPath(output)

		if len(format) == 0 {
			format = strings.TrimPrefix(filepath.Ext(output), ".")
			if err := validateExportFormat(); err != nil {
				return
			}
		}

		cfg.Write(format)
	},
}

func cleanOutputPath(output string) string {
	output = path.ReplaceTildePrefixWithHomeDir(output)

	if !filepath.IsAbs(output) {
		if absPath, err := filepath.Abs(output); err == nil {
			output = absPath
		}
	}

	return filepath.Clean(output)
}

func init() {
	exportCmd.Flags().StringVarP(&format, "format", "f", "json", "config format to migrate to")
	exportCmd.Flags().StringVarP(&output, "output", "o", "", "config file to export to")
	configCmd.AddCommand(exportCmd)
}



================================================
FILE: src/cli/config_export_image.go
================================================
package cli

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/cli/image"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/prompt"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"

	"github.com/spf13/cobra"
)

var (
	author string
	// cursorPadding int
	// rPromptOffset int
	bgColor     string
	outputImage string
)

// imageCmd represents the image command
var imageCmd = &cobra.Command{
	Use:   "image",
	Short: "Export your config to an image",
	Long: `Export your config to an image.

You can tweak the output by using additional flags:

- author: displays the author below the prompt
- cursor-padding: the padding of the prompt cursor
- rprompt-offset: the offset of the right prompt
- background-color: the background color of the image

Example usage:

> oh-my-posh config export image --config ~/myconfig.omp.json

Exports the config to an image file called myconfig.png in the current working directory.

> oh-my-posh config export image --config ~/myconfig.omp.json --output ~/mytheme.png

Exports the config to an image file ~/mytheme.png.

> oh-my-posh config export image --config ~/myconfig.omp.json --author "John Doe"

Exports the config to an image file using customized output options.`,
	Args: cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		configFile := config.Path(configFlag)
		cfg, _ := config.Load(configFile, shell.GENERIC, false)

		flags := &runtime.Flags{
			Config:        configFile,
			Shell:         shell.GENERIC,
			TerminalWidth: 150,
		}

		env := &runtime.Terminal{}
		env.Init(flags)

		template.Init(env, cfg.Var, cfg.Maps)

		defer func() {
			template.SaveCache()
			env.Close()
		}()

		// set sane defaults for things we don't print
		cfg.ConsoleTitleTemplate = ""
		cfg.PWD = ""

		terminal.Init(shell.GENERIC)
		terminal.BackgroundColor = cfg.TerminalBackground.ResolveTemplate()
		terminal.Colors = cfg.MakeColors(env)

		eng := &prompt.Engine{
			Config: cfg,
			Env:    env,
		}

		primaryPrompt := eng.Primary()

		imageCreator := &image.Renderer{
			AnsiString: primaryPrompt,
			Author:     author,
			BgColor:    bgColor,
		}

		if outputImage != "" {
			imageCreator.Path = cleanOutputPath(outputImage)
		}

		err := imageCreator.Init(env)
		if err != nil {
			fmt.Print(err.Error())
			return
		}

		err = imageCreator.SavePNG()
		if err != nil {
			fmt.Print(err.Error())
		}
	},
}

func init() {
	imageCmd.Flags().StringVar(&author, "author", "", "config author")
	imageCmd.Flags().StringVar(&bgColor, "background-color", "", "image background color")
	imageCmd.Flags().StringVarP(&outputImage, "output", "o", "", "image file (.png) to export to")
	exportCmd.AddCommand(imageCmd)
}



================================================
FILE: src/cli/config_migrate.go
================================================
package cli

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	"github.com/spf13/cobra"
)

var (
	write  bool
	format string
)

// migrateCmd represents the migrate command
var migrateCmd = &cobra.Command{
	Use:   "migrate",
	Short: "Migrate your config",
	Long: `Migrate your config.

You can choose to print the output to stdout, or migrate your config in the format of your choice.

Example usage

> oh-my-posh config migrate --config ~/myconfig.omp.json

Migrates the ~/myconfig.omp.json config file and prints the result to stdout.

> oh-my-posh config migrate --config ~/myconfig.omp.json --format toml

Migrates the ~/myconfig.omp.json config file to TOML and prints the result to stdout.

> oh-my-posh config migrate --config ~/myconfig.omp.json --format toml --write

Migrates the ~/myconfig.omp.json config file to TOML and writes the result to your config file.

A backup of the current config can be found at ~/myconfig.omp.json.bak.`,
	Args: cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		configFile := config.Path(configFlag)
		cfg, _ := config.Load(configFile, shell.GENERIC, true)

		flags := &runtime.Flags{
			Config:  configFile,
			Migrate: true,
		}

		env := &runtime.Terminal{}
		env.Init(flags)
		defer env.Close()

		if write {
			cfg.BackupAndMigrate()
			return
		}
		cfg.Migrate()
		fmt.Print(cfg.Export(format))
	},
}

func init() {
	migrateCmd.Flags().BoolVarP(&write, "write", "w", false, "write the migrated config back to the config file")
	migrateCmd.Flags().StringVarP(&format, "format", "f", "json", "the config format to migrate to")
	configCmd.AddCommand(migrateCmd)
}



================================================
FILE: src/cli/config_migrate_glyphs.go
================================================
package cli

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	"github.com/spf13/cobra"
)

// migrateGlyphsCmd represents the glyphs command
var migrateGlyphsCmd = &cobra.Command{
	Use:   "glyphs",
	Short: "Migrate the nerd font glyphs in your config",
	Long: `Migrate the nerd font glyphs in your config.

You can choose to print the output to stdout, or migrate your config in the format of your choice.

Example usage

> oh-my-posh config migrate glyphs --config ~/myconfig.omp.json

Migrates the ~/myconfig.omp.json config file's glyphs and prints the result to stdout.

> oh-my-posh config migrate glyphs --config ~/myconfig.omp.json --format toml

Migrates the ~/myconfig.omp.json config file's glyphs and prints the result to stdout in a TOML format.

> oh-my-posh config migrate glyphs --config ~/myconfig.omp.json --format toml --write

Migrates the ~/myconfig.omp.json config file's glyphs and writes the result to your config file in a TOML format.

A backup of the current config can be found at ~/myconfig.omp.json.bak.`,
	Args: cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		configFile := config.Path(configFlag)
		cfg, _ := config.Load(configFile, shell.GENERIC, false)

		flags := &runtime.Flags{
			Config: configFile,
		}

		env := &runtime.Terminal{}
		env.Init(flags)
		defer env.Close()

		cfg.MigrateGlyphs = true
		if len(format) == 0 {
			format = cfg.Format
		}

		if write {
			cfg.Backup()
			cfg.Write(format)
			return
		}

		fmt.Print(cfg.Export(format))
	},
}

func init() {
	migrateGlyphsCmd.Flags().BoolVarP(&write, "write", "w", false, "write the migrated config back to the config file")
	migrateGlyphsCmd.Flags().StringVarP(&format, "format", "f", "", "the config format to migrate to")
	migrateCmd.AddCommand(migrateGlyphsCmd)
}



================================================
FILE: src/cli/debug.go
================================================
package cli

import (
	"fmt"
	"os"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/prompt"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"

	"github.com/spf13/cobra"
)

// debugCmd represents the debug command
var debugCmd = createDebugCmd()

func init() {
	RootCmd.AddCommand(debugCmd)
}

func createDebugCmd() *cobra.Command {
	debugCmd := &cobra.Command{
		Use:   "debug",
		Short: "Print the prompt in debug mode",
		Long:  "Print the prompt in debug mode.",
		Run: func(_ *cobra.Command, _ []string) {
			startTime := time.Now()

			log.Enable(plain)

			sh := os.Getenv("POSH_SHELL")

			configFile := config.Path(configFlag)
			cfg, _ := config.Load(configFile, sh, false)

			flags := &runtime.Flags{
				Config: configFile,
				Debug:  true,
				PWD:    pwd,
				Shell:  sh,
				Plain:  plain,
			}

			env := &runtime.Terminal{}
			env.Init(flags)

			template.Init(env, cfg.Var, cfg.Maps)

			defer func() {
				template.SaveCache()
				env.Close()
			}()

			terminal.Init(shell.GENERIC)
			terminal.BackgroundColor = cfg.TerminalBackground.ResolveTemplate()
			terminal.Colors = cfg.MakeColors(env)
			terminal.Plain = plain

			eng := &prompt.Engine{
				Config: cfg,
				Env:    env,
				Plain:  plain,
			}

			fmt.Print(eng.PrintDebug(startTime, build.Version))
		},
	}

	debugCmd.Flags().StringVar(&pwd, "pwd", "", "current working directory")
	debugCmd.Flags().BoolVarP(&plain, "plain", "p", false, "plain text output (no ANSI)")

	// Deprecated flags, should be kept to avoid breaking CLI integration.
	debugCmd.Flags().StringVar(&shellName, "shell", "", "the shell to print for")

	// Hide flags that are deprecated or for internal use only.
	_ = debugCmd.Flags().MarkHidden("shell")

	return debugCmd
}



================================================
FILE: src/cli/disable.go
================================================
package cli

import (
	"fmt"

	"github.com/spf13/cobra"
)

// disableCmd represents the disable command
var disableCmd = &cobra.Command{
	Use:       fmt.Sprintf(toggleUse, "disable"),
	Short:     "Disable a feature",
	Long:      fmt.Sprintf(toggleLong, "Disable"),
	ValidArgs: toggleArgs,
	Args:      NoArgsOrOneValidArg,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}
		toggleFeature(cmd, args[0], false)
	},
}

func init() {
	RootCmd.AddCommand(disableCmd)
}



================================================
FILE: src/cli/edit.go
================================================
package cli

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
)

func editFileWithEditor(file string) int {
	editor := strings.TrimSpace(os.Getenv("EDITOR"))
	if len(editor) == 0 {
		fmt.Println(`no editor specified in the environment variable "EDITOR"`)
		return 1
	}

	editor = strings.TrimSpace(editor)
	args := strings.Split(editor, " ")

	editor = args[0]
	args = append(args[1:], file)

	cmd := exec.Command(editor, args...)

	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		fmt.Println(err.Error())
		return 1
	}

	return 0
}



================================================
FILE: src/cli/enable.go
================================================
package cli

import (
	"fmt"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	"github.com/spf13/cobra"
)

var (
	toggleHelpText = `%s one of the following features:
`
	toggleArgs = []string{
		config.UPGRADENOTICE,
		config.AUTOUPGRADE,
	}
	toggleUse  = fmt.Sprintf("%%s [%s]", strings.Join(toggleArgs, "|"))
	toggleLong = strings.Join(append([]string{toggleHelpText}, toggleArgs...), "\n- ")
)

// enableCmd represents the enable command
var enableCmd = &cobra.Command{
	Use:       fmt.Sprintf(toggleUse, "enable"),
	Short:     "Enable a feature",
	Long:      fmt.Sprintf(toggleLong, "Enable"),
	ValidArgs: toggleArgs,
	Args:      NoArgsOrOneValidArg,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}
		toggleFeature(cmd, args[0], true)
	},
}

func init() {
	RootCmd.AddCommand(enableCmd)
}

func toggleFeature(cmd *cobra.Command, feature string, enable bool) {
	flags := &runtime.Flags{
		Shell:     shellName,
		SaveCache: true,
	}

	env := &runtime.Terminal{}
	env.Init(flags)
	defer env.Close()

	if len(feature) == 0 {
		_ = cmd.Help()
		return
	}

	if enable {
		env.Cache().Set(feature, "true", cache.INFINITE)
		return
	}

	env.Cache().Delete(feature)
}



================================================
FILE: src/cli/font.go
================================================
package cli

import (
	"fmt"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/cli/font"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"

	"github.com/spf13/cobra"
)

var (
	zipFolder string

	fontCmd = &cobra.Command{
		Use:   "font [install|configure]",
		Short: "Manage fonts",
		Long: `Manage fonts.

This command is used to install fonts and configure the font in your terminal.

  - install: oh-my-posh font install 3270`,
		ValidArgs: []string{
			"install",
			"configure",
		},
		Run: func(cmd *cobra.Command, args []string) {
			if len(args) == 0 {
				_ = cmd.Help()
				return
			}
			switch args[0] {
			case "install":
				var fontName string
				if len(args) > 1 {
					fontName = args[1]
				}

				flags := &runtime.Flags{
					SaveCache: true,
				}

				env := &runtime.Terminal{}
				env.Init(flags)
				defer env.Close()

				terminal.Init(env.Shell())

				if !strings.HasPrefix(zipFolder, "/") {
					zipFolder += "/"
				}

				if err := font.Run(fontName, env.Cache(), env.Root(), zipFolder); err != nil {
					log.Error(err)
					exitcode = 70
				}

				return
			case "configure":
				fmt.Println("not implemented")
			default:
				_ = cmd.Help()
			}
		},
	}
)

func init() {
	fontCmd.Flags().StringVar(&zipFolder, "zip-folder", "", "the folder inside the zip file to install fonts from")
	RootCmd.AddCommand(fontCmd)
}



================================================
FILE: src/cli/get.go
================================================
package cli

import (
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	color2 "github.com/gookit/color"
	"github.com/spf13/cobra"
)

// getCmd represents the get command
var getCmd = &cobra.Command{
	Use:   "get [shell|millis|accent|toggles|width|uuid]",
	Short: "Get a value from oh-my-posh",
	Long: `Get a value from oh-my-posh.

This command is used to get the value of the following variables:

- shell
- millis
- accent
- toggles
- width
- uuid`,
	ValidArgs: []string{
		"millis",
		"shell",
		"accent",
		"toggles",
		"width",
		"uuid",
	},
	Args: NoArgsOrOneValidArg,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}

		if args[0] == "millis" {
			fmt.Print(time.Now().UnixNano() / 1000000)
			return
		}

		flags := &runtime.Flags{
			Shell: shellName,
		}

		env := &runtime.Terminal{}
		env.Init(flags)
		defer env.Close()

		switch args[0] {
		case "shell":
			fmt.Print(env.Shell())
		case "accent":
			rgb, err := color.GetAccentColor(env)
			if err != nil {
				fmt.Println("error getting accent color:", err.Error())
				return
			}
			accent := color2.RGB(rgb.R, rgb.G, rgb.B)
			fmt.Print("#" + accent.Hex())
		case "toggles":
			togglesCache, _ := env.Session().Get(cache.TOGGLECACHE)
			var toggles []string
			if len(togglesCache) != 0 {
				toggles = strings.Split(togglesCache, ",")
			}
			if len(toggles) == 0 {
				fmt.Println("No segments are toggled off")
				return
			}
			fmt.Println("Toggled off segments:")
			for _, toggle := range toggles {
				fmt.Println("- " + toggle)
			}
		case "width":
			width, err := env.TerminalWidth()
			if err != nil {
				fmt.Println("error getting terminal width:", err.Error())
				return
			}
			fmt.Print(width)
		case "uuid":
			fmt.Print(uuid.NewString())
		default:
			_ = cmd.Help()
		}
	},
}

func init() {
	RootCmd.AddCommand(getCmd)
	getCmd.Flags().StringVar(&shellName, "shell", "", "the shell to print for")
}



================================================
FILE: src/cli/init.go
================================================
package cli

import (
	"fmt"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/spf13/cobra"
)

var (
	printOutput bool
	strict      bool
	debug       bool

	supportedShells = []string{
		"bash",
		"zsh",
		"fish",
		"powershell",
		"pwsh",
		"cmd",
		"nu",
		"elvish",
		"xonsh",
	}

	initCmd = createInitCmd()
)

func init() {
	RootCmd.AddCommand(initCmd)
}

func createInitCmd() *cobra.Command {
	initCmd := &cobra.Command{
		Use:   "init [bash|zsh|fish|powershell|pwsh|cmd|nu|elvish|xonsh]",
		Short: "Initialize your shell and config",
		Long: `Initialize your shell and config.

See the documentation to initialize your shell: https://ohmyposh.dev/docs/installation/prompt.`,
		ValidArgs: supportedShells,
		Args:      NoArgsOrOneValidArg,
		Run: func(cmd *cobra.Command, args []string) {
			if len(args) == 0 {
				_ = cmd.Help()
				return
			}

			runInit(args[0])
		},
	}

	initCmd.Flags().BoolVarP(&printOutput, "print", "p", false, "print the init script")
	initCmd.Flags().BoolVarP(&strict, "strict", "s", false, "run in strict mode")
	initCmd.Flags().BoolVar(&debug, "debug", false, "enable/disable debug mode")
	initCmd.Flags().BoolVar(&eval, "eval", false, "output the prompt for eval")

	_ = initCmd.MarkPersistentFlagRequired("config")

	return initCmd
}

func runInit(sh string) {
	var startTime time.Time

	if debug {
		startTime = time.Now()
		log.Enable(plain)
	}

	configFile := config.Path(configFlag)
	cfg, hash := config.Load(configFile, sh, false)

	flags := &runtime.Flags{
		Shell:     sh,
		Config:    configFile,
		Strict:    strict,
		Debug:     debug,
		SaveCache: true,
		Init:      true,
		Eval:      eval,
	}

	env := &runtime.Terminal{}
	env.Init(flags)

	template.Init(env, cfg.Var, cfg.Maps)

	defer func() {
		template.SaveCache()
		env.Close()
	}()

	feats := cfg.Features(env)
	flags.ConfigHash = fmt.Sprintf("%s.%s", hash, feats.Hash())

	var output string

	switch {
	case printOutput, debug:
		output = shell.PrintInit(env, feats, &startTime)
	default:
		output = shell.Init(env, feats)
	}

	if silent {
		return
	}

	fmt.Print(output)
}



================================================
FILE: src/cli/notice.go
================================================
package cli

import (
	"fmt"
	"os"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/spf13/cobra"
)

// noticeCmd represents the notice command
var noticeCmd = &cobra.Command{
	Use:   "notice",
	Short: "Print the upgrade notice when a new version is available.",
	Long:  "Print the upgrade notice when a new version is available.",
	Args:  cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		flags := &runtime.Flags{
			SaveCache: true,
		}

		env := &runtime.Terminal{}
		env.Init(flags)
		defer env.Close()

		sh := os.Getenv("POSH_SHELL")
		configFile := config.Path(configFlag)
		cfg, _ := config.Load(configFile, sh, false)
		cfg.Upgrade.Cache = env.Cache()

		if notice, hasNotice := cfg.Upgrade.Notice(); hasNotice {
			fmt.Println(notice)
		}
	},
}

func init() {
	RootCmd.AddCommand(noticeCmd)
}



================================================
FILE: src/cli/print.go
================================================
package cli

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/prompt"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/spf13/cobra"
)

var (
	pwd           string
	pswd          string
	status        int
	pipestatus    string
	timing        float64
	stackCount    int
	terminalWidth int
	eval          bool
	cleared       bool
	jobCount      int
	saveCache     bool

	command      string
	shellVersion string
	plain        bool
	noStatus     bool
	column       int
	escape       bool
)

// printCmd represents the print command
var printCmd = createPrintCmd()

func init() {
	RootCmd.AddCommand(printCmd)
}

func createPrintCmd() *cobra.Command {
	printCmd := &cobra.Command{
		Use:   "print [debug|primary|secondary|transient|right|tooltip|valid|error|preview]",
		Short: "Print the prompt/context",
		Long:  "Print one of the prompts based on the location/use-case.",
		ValidArgs: []string{
			prompt.DEBUG,
			prompt.PRIMARY,
			prompt.SECONDARY,
			prompt.TRANSIENT,
			prompt.RIGHT,
			prompt.TOOLTIP,
			prompt.VALID,
			prompt.ERROR,
			prompt.PREVIEW,
		},
		Args: NoArgsOrOneValidArg,
		Run: func(cmd *cobra.Command, args []string) {
			if len(args) == 0 {
				_ = cmd.Help()
				return
			}

			flags := &runtime.Flags{
				Config:        configFlag,
				PWD:           pwd,
				PSWD:          pswd,
				ErrorCode:     status,
				PipeStatus:    pipestatus,
				ExecutionTime: timing,
				StackCount:    stackCount,
				TerminalWidth: terminalWidth,
				Eval:          eval,
				Shell:         shellName,
				ShellVersion:  shellVersion,
				Plain:         plain,
				Type:          args[0],
				Cleared:       cleared,
				NoExitCode:    noStatus,
				Column:        column,
				JobCount:      jobCount,
				IsPrimary:     args[0] == prompt.PRIMARY,
				SaveCache:     saveCache,
				Escape:        escape,
				Force:         force,
			}

			eng := prompt.New(flags)

			defer func() {
				template.SaveCache()
				eng.Env.Close()
			}()

			switch args[0] {
			case prompt.DEBUG:
				fmt.Print(eng.ExtraPrompt(prompt.Debug))
			case prompt.PRIMARY:
				fmt.Print(eng.Primary())
			case prompt.SECONDARY:
				fmt.Print(eng.ExtraPrompt(prompt.Secondary))
			case prompt.TRANSIENT:
				fmt.Print(eng.ExtraPrompt(prompt.Transient))
			case prompt.RIGHT:
				fmt.Print(eng.RPrompt())
			case prompt.TOOLTIP:
				fmt.Print(eng.Tooltip(command))
			case prompt.VALID:
				fmt.Print(eng.ExtraPrompt(prompt.Valid))
			case prompt.ERROR:
				fmt.Print(eng.ExtraPrompt(prompt.Error))
			case prompt.PREVIEW:
				fmt.Print(eng.Preview())
			default:
				_ = cmd.Help()
			}
		},
	}

	printCmd.Flags().StringVar(&pwd, "pwd", "", "current working directory")
	printCmd.Flags().StringVar(&pswd, "pswd", "", "current working directory (according to pwsh)")
	printCmd.Flags().StringVar(&shellName, "shell", "", "the shell to print for")
	printCmd.Flags().StringVar(&shellVersion, "shell-version", "", "the shell version")
	printCmd.Flags().IntVar(&status, "status", 0, "last known status code")
	printCmd.Flags().BoolVar(&noStatus, "no-status", false, "no valid status code (cancelled or no command yet)")
	printCmd.Flags().StringVar(&pipestatus, "pipestatus", "", "the PIPESTATUS array")
	printCmd.Flags().Float64Var(&timing, "execution-time", 0, "timing of the last command")
	printCmd.Flags().IntVarP(&stackCount, "stack-count", "s", 0, "number of locations on the stack")
	printCmd.Flags().IntVarP(&terminalWidth, "terminal-width", "w", 0, "width of the terminal")
	printCmd.Flags().StringVar(&command, "command", "", "tooltip command")
	printCmd.Flags().BoolVarP(&plain, "plain", "p", false, "plain text output (no ANSI)")
	printCmd.Flags().BoolVar(&cleared, "cleared", false, "do we have a clear terminal or not")
	printCmd.Flags().BoolVar(&eval, "eval", false, "output the prompt for eval")
	printCmd.Flags().IntVar(&column, "column", 0, "the column position of the cursor")
	printCmd.Flags().IntVar(&jobCount, "job-count", 0, "number of background jobs")
	printCmd.Flags().BoolVar(&saveCache, "save-cache", false, "save updated cache to file")
	printCmd.Flags().BoolVar(&escape, "escape", true, "escape the ANSI sequences for the shell")
	printCmd.Flags().BoolVarP(&force, "force", "f", false, "force rendering the segments")

	// Hide flags that are for internal use only.
	_ = printCmd.Flags().MarkHidden("save-cache")

	return printCmd
}



================================================
FILE: src/cli/prompt.go
================================================
package cli

import (
	"github.com/spf13/cobra"
)

// promptCmd represents the prompt command
var promptCmd = &cobra.Command{
	Use:    "prompt",
	Short:  "Set up the prompt for your shell (deprecated)",
	Long:   `Set up the prompt for your shell. (deprecated)`,
	Hidden: true,
	Args:   cobra.NoArgs,
	Run: func(cmd *cobra.Command, _ []string) {
		_ = cmd.Help()
	},
}

func init() {
	// legacy support
	promptCmd.AddCommand(createInitCmd())
	promptCmd.AddCommand(createDebugCmd())
	promptCmd.AddCommand(createPrintCmd())
	RootCmd.AddCommand(promptCmd)
}



================================================
FILE: src/cli/root.go
================================================
package cli

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/spf13/cobra"
)

var (
	configFlag   string
	shellName    string
	printVersion bool
	trace        bool
	exitcode     int

	// for internal use only
	silent bool

	// deprecated
	initialize bool
)

var RootCmd = &cobra.Command{
	Use:   "oh-my-posh",
	Short: "oh-my-posh is a tool to render your prompt",
	Long: `oh-my-posh is a cross platform tool to render your prompt.
It can use the same configuration everywhere to offer a consistent
experience, regardless of where you are. For a detailed guide
on getting started, have a look at the docs at https://ohmyposh.dev`,
	Run: func(cmd *cobra.Command, _ []string) {
		if initialize {
			runInit(strings.ToLower(shellName))
			return
		}
		if printVersion {
			fmt.Println(build.Version)
			return
		}

		_ = cmd.Help()
	},
	PersistentPreRun: func(_ *cobra.Command, _ []string) {
		traceEnv := os.Getenv("POSH_TRACE")
		if len(traceEnv) == 0 {
			return
		}

		trace = true

		log.Enable(true)

		log.Debug("oh-my-posh version", build.Version)
	},
	PersistentPostRun: func(cmd *cobra.Command, args []string) {
		defer func() {
			if exitcode != 0 {
				os.Exit(exitcode)
			}
		}()

		if !trace {
			return
		}

		timestamp := time.Now().Format("20060102T150405.000")
		cli := append([]string{cmd.Name()}, args...)
		filename := fmt.Sprintf("%s-%s.log", timestamp, strings.Join(cli, "-"))

		home, err := os.UserHomeDir()
		if err != nil {
			return
		}

		logPath := filepath.Join(home, ".oh-my-posh")
		err = os.MkdirAll(logPath, 0755)
		if err != nil {
			return
		}

		err = os.WriteFile(filepath.Join(logPath, filename), []byte(log.String()), 0644)
		if err != nil {
			return
		}
	},
}

func Execute() {
	if err := RootCmd.Execute(); err != nil {
		// software error
		os.Exit(70)
	}
}

func init() {
	RootCmd.PersistentFlags().StringVarP(&configFlag, "config", "c", "", "config file path")
	RootCmd.PersistentFlags().BoolVar(&silent, "silent", false, "do not print anything")
	RootCmd.Flags().BoolVar(&printVersion, "version", false, "print the version number and exit")

	// Deprecated flags, should be kept to avoid breaking CLI integration.
	RootCmd.Flags().BoolVarP(&initialize, "init", "i", false, "init")
	RootCmd.Flags().StringVarP(&shellName, "shell", "s", "", "shell")

	// Hide flags that are deprecated or for internal use only.
	_ = RootCmd.PersistentFlags().MarkHidden("silent")

	// Disable completions
	RootCmd.CompletionOptions.DisableDefaultCmd = true
}



================================================
FILE: src/cli/toggle.go
================================================
package cli

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/spf13/cobra"
)

// toggleCmd represents the toggle command
var toggleCmd = &cobra.Command{
	Use:   "toggle",
	Short: "Toggle a segment on/off",
	Long:  "Toggle a segment on/off on the fly.",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			_ = cmd.Help()
			return
		}

		flags := &runtime.Flags{
			SaveCache: true,
		}

		env := &runtime.Terminal{}
		env.Init(flags)
		defer env.Close()

		togglesCache, _ := env.Session().Get(cache.TOGGLECACHE)
		var toggles []string
		if len(togglesCache) != 0 {
			toggles = strings.Split(togglesCache, ",")
		}
		segment := args[0]

		newToggles := []string{}
		var match bool
		for _, toggle := range toggles {
			if toggle == segment {
				match = true
				continue
			}
			newToggles = append(newToggles, toggle)
		}

		if !match {
			newToggles = append(newToggles, segment)
		}

		env.Session().Set(cache.TOGGLECACHE, strings.Join(newToggles, ","), cache.ONEDAY)
	},
}

func init() {
	RootCmd.AddCommand(toggleCmd)
}



================================================
FILE: src/cli/upgrade.go
================================================
package cli

import (
	"fmt"
	"os"
	stdruntime "runtime"
	"slices"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/upgrade"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
	"github.com/spf13/cobra"
)

var (
	force bool
)

// upgradeCmd represents the upgrade command
var upgradeCmd = &cobra.Command{
	Use:   "upgrade",
	Short: "Upgrade when a new version is available.",
	Long:  "Upgrade when a new version is available.",
	Args:  cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		var startTime time.Time

		if debug {
			startTime = time.Now()
			log.Enable(plain)
		}

		supportedPlatforms := []string{
			runtime.WINDOWS,
			runtime.DARWIN,
			runtime.LINUX,
		}

		if !slices.Contains(supportedPlatforms, stdruntime.GOOS) {
			log.Debug("unsupported platform")
			return
		}

		sh := os.Getenv("POSH_SHELL")

		env := &runtime.Terminal{}
		env.Init(&runtime.Flags{
			Debug:     debug,
			SaveCache: true,
		})

		terminal.Init(sh)
		fmt.Print(terminal.StartProgress())

		configFile := config.Path(configFlag)
		cfg, _ := config.Load(configFile, sh, false)
		cfg.Upgrade.Cache = env.Cache()

		defer func() {
			fmt.Print(terminal.StopProgress())

			// always reset the cache key so we respect the interval no matter what the outcome
			env.Cache().Set(upgrade.CACHEKEY, "", cfg.Upgrade.Interval)

			env.Close()

			if !debug {
				return
			}

			var builder strings.Builder

			builder.WriteString(fmt.Sprintf("%s %s\n", log.Text("Upgrade duration:").Green().Bold().Plain(), time.Since(startTime)))

			builder.WriteString(log.Text("\nLogs:\n\n").Green().Bold().Plain().String())
			builder.WriteString(env.Logs())

			fmt.Println(builder.String())
		}()

		latest, err := cfg.Upgrade.FetchLatest()
		if err != nil {
			log.Debug("failed to get latest version")
			log.Error(err)
			fmt.Printf("\n  ❌ %s\n\n", err)

			exitcode = 1
			return
		}

		if force {
			log.Debug("forced upgrade")
			exitcode = executeUpgrade(cfg.Upgrade)
			return
		}

		if upgrade.IsMajorUpgrade(build.Version, latest) {
			log.Debug("major upgrade available")
			message := fmt.Sprintf("\n  🚨 major upgrade available: v%s -> v%s, use oh-my-posh upgrade --force to upgrade\n\n", build.Version, latest)
			fmt.Print(message)
			return
		}

		if build.Version != latest {
			exitcode = executeUpgrade(cfg.Upgrade)
			return
		}
	},
}

func executeUpgrade(cfg *upgrade.Config) int {
	err := upgrade.Run(cfg)
	if err == nil {
		return 0
	}

	log.Debug("failed to upgrade")
	log.Error(err)

	return 1
}

func init() {
	upgradeCmd.Flags().BoolVarP(&force, "force", "f", false, "force the upgrade even if the version is up to date")
	upgradeCmd.Flags().BoolVar(&debug, "debug", false, "enable/disable debug mode")
	RootCmd.AddCommand(upgradeCmd)
}



================================================
FILE: src/cli/version.go
================================================
package cli

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/spf13/cobra"
)

var (
	verbose bool
)

// versionCmd represents the version command
var versionCmd = &cobra.Command{
	Use:   "version",
	Short: "Print the version",
	Long:  "Print the version number of oh-my-posh.",
	Args:  cobra.NoArgs,
	Run: func(_ *cobra.Command, _ []string) {
		if !verbose {
			fmt.Println(build.Version)
			return
		}
		fmt.Println("Version: ", build.Version)
		fmt.Println("Date:    ", build.Date)
	},
}

func init() {
	versionCmd.Flags().BoolVarP(&verbose, "verbose", "v", false, "write verbose output")
	RootCmd.AddCommand(versionCmd)
}



================================================
FILE: src/cli/auth/cli.go
================================================
package auth

import (
	"fmt"

	"github.com/charmbracelet/bubbles/spinner"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

var (
	program   *tea.Program
	textStyle = lipgloss.NewStyle().Margin(1, 0, 2, 2)
)

type stateMsg state

type state int

const (
	code state = iota
	token
	done
)

func setState(message state) {
	if program == nil {
		return
	}

	program.Send(stateMsg(message))
}

type model struct {
	env     runtime.Environment
	err     error
	spinner *spinner.Model
	status  func(error) string
	code    string
	state   state
}

func (m *model) Init() tea.Cmd {
	s := spinner.New()
	s.Spinner = spinner.Globe
	s.Style = lipgloss.NewStyle().Foreground(lipgloss.Color("170"))
	m.spinner = &s

	return m.spinner.Tick
}

func (m *model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case stateMsg:
		m.state = state(msg)
		if m.state == done {
			return m, tea.Quit
		}

		return m, nil

	default:
		s, cmd := m.spinner.Update(msg)
		m.spinner = &s
		return m, cmd
	}
}

func (m *model) View() string {
	var message string

	switch m.state {
	case code:
		message = fmt.Sprintf("%s Fetching code for authentication", m.spinner.View())
	case token:
		message = fmt.Sprintf("%s Fetching token with code: %s", m.spinner.View(), m.code)
	case done:
		message = m.status(m.err)
	}

	return textStyle.Render(message)
}

func Run(m tea.Model) error {
	program = tea.NewProgram(m)
	resultModel, _ := program.Run()

	programModel, OK := resultModel.(*model)
	if !OK {
		log.Debug("failed to cast model")
		return nil
	}

	return programModel.err
}



================================================
FILE: src/cli/auth/ytmda.go
================================================
package auth

import (
	"encoding/json"
	"errors"
	"fmt"
	"net"
	httplib "net/http"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

const (
	YTMDABASEURL = "http://localhost:9863/api/v1"
	YTMDATOKEN   = "ytmda_token"

	tokenURL = YTMDABASEURL + "/auth/request"
	codeURL  = YTMDABASEURL + "/auth/requestcode"
)

func NewYtmda(env runtime.Environment) *Ytmda {
	return &Ytmda{
		model: model{
			env: env,
		},
	}
}

type Ytmda struct {
	model
	lastState state
}

func (y *Ytmda) Init() tea.Cmd {
	y.model.status = y.status
	cmd := y.model.Init()
	go y.Authenticate()
	return cmd
}

func (y *Ytmda) Authenticate() {
	setState(code)
	y.lastState = code

	code, err := y.requestCode()
	if err != nil {
		y.err = err
		setState(done)
		return
	}

	y.code = code
	setState(token)
	y.lastState = token

	token, err := y.requestToken(code)
	if err != nil {
		y.err = err
		setState(done)
		return
	}

	if len(token) == 0 {
		y.err = fmt.Errorf("received empty token")
		setState(done)
		return
	}

	y.env.Cache().Set(YTMDATOKEN, token, cache.INFINITE)

	setState(done)
}

func (y *Ytmda) requestCode() (string, error) {
	body := fmt.Sprintf(`{"appId": "ohmyposh", "appName": "oh-my-posh", "appVersion": "%s"}`, strings.TrimPrefix(build.Version, "v"))

	type codeResponse struct {
		Code string `json:"code"`
	}

	result, err := ytmdaRequest[codeResponse](httplib.MethodPost, codeURL, body, y.env)

	return result.Code, err
}

func (y *Ytmda) requestToken(code string) (string, error) {
	body := fmt.Sprintf(`{"appId": "ohmyposh", "code": "%s"}`, code)

	type tokenResponse struct {
		Token string `json:"token"`
	}

	result, err := ytmdaRequest[tokenResponse](httplib.MethodPost, tokenURL, body, y.env)

	return result.Token, err
}

func ytmdaRequest[a any](method, url, body string, env runtime.Environment, requestModifiers ...http.RequestModifier) (a, error) {
	if requestModifiers == nil {
		requestModifiers = []http.RequestModifier{}
	}

	modifyRequest := func(request *httplib.Request) {
		request.Method = method
		request.Header.Set("Content-Type", "application/json")
	}

	requestModifiers = append(requestModifiers, modifyRequest)

	var result a

	response, err := env.HTTPRequest(url, strings.NewReader(body), 50000, requestModifiers...)
	if err != nil {
		return result, err
	}

	err = json.Unmarshal(response, &result)
	return result, err
}

func (y *Ytmda) status(err error) string {
	// get the status code from the error if available
	if err == nil {
		return "Successfully authenticated with YouTube Music Desktop App"
	}

	var netErr net.Error
	if errors.As(err, &netErr) && netErr.Timeout() {
		return "There was a timeout while trying to connect to the YouTube Music Desktop App Companion API. Please try again"
	}

	httpErr, ok := err.(*http.Error)
	if !ok {
		// if the error is not an http.Error, the service isn't running
		return "YouTube Music Desktop App is not running, please start the Companion API"
	}

	if httpErr.StatusCode != httplib.StatusForbidden {
		return err.Error()
	}

	if y.lastState == token {
		return "Failed to request token with code. Please press Allow in the pop-up window"
	}

	return "Please enable companion authorization in the YouTube Music Desktop App settings"
}



================================================
FILE: src/cli/auth/ytmda_test.go
================================================
package auth

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	runtime_ "github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestYtdma_Authenticate(t *testing.T) {
	testCases := []struct {
		name                 string
		requestCodeResponse  string
		requestCodeError     error
		requestTokenResponse string
		requestTokenError    error
		expectedError        error
		expectedToken        string
		shouldSetToken       bool
	}{
		{
			name:                 "successful authentication",
			requestCodeResponse:  `{"code":"test-code-123"}`,
			requestCodeError:     nil,
			requestTokenResponse: `{"token":"test-token-456"}`,
			requestTokenError:    nil,
			expectedError:        nil,
			expectedToken:        "test-token-456",
			shouldSetToken:       true,
		},
		{
			name:                 "request code fails",
			requestCodeResponse:  "",
			requestCodeError:     errors.New("failed to request code"),
			requestTokenResponse: "",
			requestTokenError:    nil,
			expectedError:        errors.New("failed to request code"),
			expectedToken:        "",
			shouldSetToken:       false,
		},
		{
			name:                 "request token fails",
			requestCodeResponse:  `{"code":"test-code-123"}`,
			requestCodeError:     nil,
			requestTokenResponse: "",
			requestTokenError:    errors.New("failed to request token"),
			expectedError:        errors.New("failed to request token"),
			expectedToken:        "",
			shouldSetToken:       false,
		},
		{
			name:                 "invalid code response JSON",
			requestCodeResponse:  `{"invalid":"json"}`,
			requestCodeError:     nil,
			requestTokenResponse: "",
			requestTokenError:    nil,
			expectedError:        errors.New("unexpected end of JSON input"),
			expectedToken:        "",
			shouldSetToken:       false,
		},
		{
			name:                 "invalid token response JSON",
			requestCodeResponse:  `{"code":"test-code-123"}`,
			requestCodeError:     nil,
			requestTokenResponse: `{"invalid":"json"}`,
			requestTokenError:    nil,
			expectedError:        errors.New("received empty token"),
			expectedToken:        "",
			shouldSetToken:       false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			env := &runtime_.Environment{}
			mockCache := &cache_.Cache{}
			env.On("Cache").Return(mockCache)

			env.On("HTTPRequest", codeURL).Return([]byte(tc.requestCodeResponse), tc.requestCodeError)
			env.On("HTTPRequest", tokenURL).Return([]byte(tc.requestTokenResponse), tc.requestTokenError)

			if tc.shouldSetToken {
				mockCache.On("Set", YTMDATOKEN, tc.expectedToken, cache.INFINITE).Once()
			}

			ytmda := &Ytmda{
				model: model{
					env: env,
				},
			}

			ytmda.Authenticate()

			if tc.expectedError != nil {
				require.NotNil(t, ytmda.err)
				assert.Equal(t, tc.expectedError.Error(), ytmda.err.Error())
			} else {
				assert.Nil(t, ytmda.err)
			}

			mockCache.AssertExpectations(t)
		})
	}
}



================================================
FILE: src/cli/font/cli.go
================================================
package font

import (
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/charmbracelet/bubbles/list"
	progress_ "github.com/charmbracelet/bubbles/progress"
	"github.com/charmbracelet/bubbles/spinner"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/progress"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

var (
	program *tea.Program
	cache   cache_.Cache
)

const listHeight = 14

var (
	itemStyle         = lipgloss.NewStyle().PaddingLeft(3)
	selectedItemStyle = lipgloss.NewStyle().PaddingLeft(2).Foreground(lipgloss.Color("170"))
	paginationStyle   = list.DefaultStyles().PaginationStyle.PaddingLeft(3)
	helpStyle         = lipgloss.NewStyle().PaddingLeft(3).PaddingBottom(1)
	textStyle         = lipgloss.NewStyle().Margin(1, 0, 2, 2)
)

type loadMsg []*Asset

type zipMsg []byte

type successMsg []string

type errMsg error

type state int

type itemDelegate struct{}

func (d itemDelegate) Height() int                             { return 1 }
func (d itemDelegate) Spacing() int                            { return 0 }
func (d itemDelegate) Update(_ tea.Msg, _ *list.Model) tea.Cmd { return nil }
func (d itemDelegate) Render(w io.Writer, m list.Model, index int, listItem list.Item) { //nolint: gocritic
	i, ok := listItem.(*Asset)
	if !ok {
		return
	}

	fn := itemStyle.Render
	if index == m.Index() {
		fn = func(s ...string) string {
			return selectedItemStyle.Render("•" + strings.Join(s, " "))
		}
	}

	fmt.Fprint(w, fn(i.Name))
}

const (
	getFonts state = iota
	selectFont
	downloadFont
	unzipFont
	installFont
	quit
	done
)

type main struct {
	err      error
	list     *list.Model
	spinner  *spinner.Model
	progress *progress.Model
	Asset
	families []string
	state    state
	system   bool
}

func (m *main) buildFontList(nerdFonts []*Asset) {
	var items []list.Item
	for _, font := range nerdFonts {
		items = append(items, font)
	}

	const defaultWidth = 20

	l := list.New(items, itemDelegate{}, defaultWidth, listHeight)
	l.Title = "Select font"
	l.SetShowStatusBar(false)
	l.SetFilteringEnabled(false)
	l.Styles.PaginationStyle = paginationStyle
	l.Styles.HelpStyle = helpStyle

	m.list = &l
}

func getFontsList() {
	fonts, err := Fonts()
	if err != nil {
		program.Send(errMsg(err))
		return
	}

	program.Send(loadMsg(fonts))
}

func downloadFontZip(location string) {
	zipFile, err := Download(location)
	if err != nil {
		program.Send(errMsg(err))
		return
	}

	program.Send(zipMsg(zipFile))
}

func installLocalFontZIP(m *main) {
	data, err := os.ReadFile(m.URL)
	if err != nil {
		program.Send(errMsg(err))
		return
	}

	installFontZIP(data, m)
}

func installFontZIP(zipFile []byte, m *main) {
	families, err := InstallZIP(zipFile, m)
	if err != nil {
		program.Send(errMsg(err))
		return
	}

	program.Send(successMsg(families))
}

func (m *main) Init() tea.Cmd {
	isLocalZipFile := func() bool {
		return !strings.HasPrefix(m.URL, "https") && strings.HasSuffix(m.URL, ".zip")
	}

	resolveFontZipURL := func() error {
		if strings.HasPrefix(m.URL, "https") {
			return nil
		}

		fonts, err := Fonts()
		if err != nil {
			return err
		}

		var fontAsset *Asset
		for _, font := range fonts {
			if !strings.EqualFold(m.URL, font.Name) {
				continue
			}

			fontAsset = font
			break
		}

		if fontAsset == nil {
			return fmt.Errorf("no matching font found")
		}

		m.Asset = *fontAsset

		return nil
	}

	m.progress = progress.NewModel()

	s := spinner.New()
	m.spinner = &s

	if len(m.URL) != 0 && !isLocalZipFile() {
		m.state = downloadFont

		if err := resolveFontZipURL(); err != nil {
			m.err = err
			return tea.Quit
		}

		defer func() {
			go downloadFontZip(m.URL)
		}()

		m.spinner.Spinner = spinner.Globe
		return m.spinner.Tick
	}

	defer func() {
		if isLocalZipFile() {
			go installLocalFontZIP(m)
			return
		}

		go getFontsList()
	}()

	m.spinner.Spinner = spinner.Dot
	m.spinner.Style = lipgloss.NewStyle().Foreground(lipgloss.Color("170"))
	m.state = getFonts

	if isLocalZipFile() {
		m.state = unzipFont
	}

	return m.spinner.Tick
}

func (m *main) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case loadMsg:
		m.state = selectFont
		m.buildFontList(msg)
		return m, nil

	case tea.WindowSizeMsg:
		if m.list == nil {
			return m, nil
		}
		m.list.SetWidth(msg.Width)
		return m, nil

	case tea.KeyMsg:
		switch keypress := msg.String(); keypress {
		case "ctrl+c", "q", "esc":
			m.state = quit
			return m, tea.Quit

		case "enter":
			if len(m.URL) != 0 || m.list == nil || m.list.SelectedItem() == nil {
				return m, nil
			}

			var font *Asset
			var ok bool

			if font, ok = m.list.SelectedItem().(*Asset); !ok {
				m.err = fmt.Errorf("no font selected")
				return m, tea.Quit
			}

			m.state = downloadFont
			m.Asset = *font

			defer func() {
				go downloadFontZip(font.URL)
			}()

			m.spinner.Spinner = spinner.Globe
			return m, m.spinner.Tick

		case "up", "k":
			if m.list != nil {
				if m.list.Index() == 0 {
					m.list.Select(len(m.list.Items()) - 1)
				} else {
					m.list.Select(m.list.Index() - 1)
				}
			}
			return m, nil

		case "down", "j":
			if m.list != nil {
				if m.list.Index() == len(m.list.Items())-1 {
					m.list.Select(0)
				} else {
					m.list.Select(m.list.Index() + 1)
				}
			}
			return m, nil
		}

	case progress.Message:
		return m, m.progress.SetPercent(float64(msg))

	case progress_.FrameMsg:
		return m, m.progress.Update(msg)

	case zipMsg:
		m.state = installFont
		defer func() {
			go installFontZIP(msg, m)
		}()
		m.spinner.Spinner = spinner.Dot
		return m, m.spinner.Tick

	case successMsg:
		m.state = done
		m.families = msg
		return m, tea.Quit

	case errMsg:
		m.err = msg
		return m, tea.Quit

	default:
		s, cmd := m.spinner.Update(msg)
		m.spinner = &s
		return m, cmd
	}

	if m.list == nil {
		return m, nil
	}

	lst, cmd := m.list.Update(msg)
	m.list = &lst
	return m, cmd
}

func (m *main) View() string {
	if m.err != nil {
		return textStyle.Render(m.err.Error())
	}

	switch m.state {
	case getFonts:
		return textStyle.Render(fmt.Sprintf("%s Downloading font list%s", m.spinner.View(), terminal.StartProgress()))
	case selectFont:
		return fmt.Sprintf("\n%s%s", m.list.View(), terminal.StopProgress())
	case downloadFont:
		return textStyle.Render(fmt.Sprintf("Downloading %s...\n%s", m.Name, m.progress.View()))
	case unzipFont:
		return textStyle.Render(fmt.Sprintf("%s Extracting %s", m.spinner.View(), m.Name))
	case installFont:
		return textStyle.Render(fmt.Sprintf("%s Installing %s", m.spinner.View(), m.Name))
	case quit:
		return textStyle.Render(fmt.Sprintf("No need to install a new font? That's cool.%s", terminal.StopProgress()))
	case done:
		if len(m.families) == 0 {
			return textStyle.Render(fmt.Sprintf("No matching font families were installed. Try setting --zip-folder to the correct folder when using CascadiaCode (MS) or a custom font zip file. %s", terminal.StopProgress())) //nolint: lll
		}

		var builder strings.Builder

		builder.WriteString(fmt.Sprintf("Successfully installed %s 🚀\n\n%s", m.Name, terminal.StopProgress()))
		builder.WriteString("The following font families are now available for configuration:\n\n")

		for i, family := range m.families {
			builder.WriteString(fmt.Sprintf("  • %s", family))

			if i < len(m.families)-1 {
				builder.WriteString("\n")
			}
		}

		return textStyle.Render(builder.String())
	}

	return ""
}

func SetCache(c cache_.Cache) {
	cache = c
}

func Run(font string, ch cache_.Cache, root bool, zipFolder string) error {
	main := &main{
		system: root,
		Asset: Asset{
			Name:   font,
			URL:    font,
			Folder: zipFolder,
		},
	}

	SetCache(ch)

	program = tea.NewProgram(main)
	_, err := program.Run()
	return err
}



================================================
FILE: src/cli/font/download.go
================================================
package font

import (
	"context"
	"errors"
	"fmt"
	"io"
	httplib "net/http"
	"net/url"
	"os"
	"path"
	"path/filepath"

	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/progress"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

func Download(fontURL string) ([]byte, error) {
	if zipPath, OK := cache.Get(fontURL); OK {
		if b, err := os.ReadFile(zipPath); err == nil {
			return b, nil
		}
	}

	// validate if we have a local file
	u, err := url.Parse(fontURL)
	if err != nil || u.Scheme != "https" {
		return nil, errors.New("font path must be a valid URL")
	}

	var b []byte
	if b, err = getRemoteFile(fontURL); err != nil {
		return nil, err
	}

	if !isZipFile(b) {
		return nil, fmt.Errorf("%s is not a valid zip file", fontURL)
	}

	fileName := path.Base(fontURL)

	zipPath := filepath.Join(os.TempDir(), fileName)
	tempFile, err := os.Create(zipPath)
	defer func() {
		_ = tempFile.Close()
	}()

	if err != nil {
		return b, nil
	}

	_, err = tempFile.Write(b)
	if err != nil {
		return b, nil
	}

	cache.Set(fontURL, zipPath, cache_.ONEDAY)

	return b, nil
}

func isZipFile(data []byte) bool {
	contentType := httplib.DetectContentType(data)
	return contentType == "application/zip"
}

func getRemoteFile(location string) (data []byte, err error) {
	req, err := httplib.NewRequestWithContext(context.Background(), "GET", location, nil)
	if err != nil {
		return nil, err
	}

	resp, err := http.HTTPClient.Do(req)
	if err != nil {
		return
	}

	defer resp.Body.Close()

	if resp.StatusCode != httplib.StatusOK {
		return data, fmt.Errorf("failed to download zip file: %s\n→ %s", resp.Status, location)
	}

	reader := progress.NewReader(resp.Body, resp.ContentLength, program)

	data, err = io.ReadAll(reader)
	if err != nil {
		return
	}

	return
}



================================================
FILE: src/cli/font/font.go
================================================
// Derived from https://github.com/Crosse/font-install
// Copyright 2020 Seth Wright <seth@crosse.org>
package font

import (
	"bytes"
	"fmt"
	"path"
	"strings"

	"github.com/ConradIrwin/font/sfnt"
)

// Font describes a font file and the various metadata associated with it.
type Font struct {
	Name     string
	Family   string
	FileName string
	Metadata map[sfnt.NameID]string
	Data     []byte
}

// fontExtensions is a list of file extensions that denote fonts.
// Only files ending with these extensions will be installed.
var fontExtensions = map[string]bool{
	".otf": true,
	".ttf": true,
}

// newFont creates a newFont Font struct.
// fileName is the font's file name, and data is a byte slice containing the font file data.
// It returns a FontData struct describing the font, or an error.
func newFont(fileName string, data []byte) (*Font, error) {
	if _, ok := fontExtensions[strings.ToLower(path.Ext(fileName))]; !ok {
		return nil, fmt.Errorf("not a font: %v", fileName)
	}

	font := &Font{
		FileName: fileName,
		Metadata: make(map[sfnt.NameID]string),
		Data:     data,
	}

	fontData, err := sfnt.Parse(bytes.NewReader(font.Data))
	if err != nil {
		return nil, err
	}

	if !fontData.HasTable(sfnt.TagName) {
		return nil, fmt.Errorf("font %v has no name table", fileName)
	}

	nameTable, err := fontData.NameTable()
	if err != nil {
		return nil, err
	}

	for _, nameEntry := range nameTable.List() {
		font.Metadata[nameEntry.NameID] = nameEntry.String()
	}

	font.Name = font.Metadata[sfnt.NameFull]
	font.Family = font.Metadata[sfnt.NamePreferredFamily]

	if len(font.Family) == 0 {
		if v, ok := font.Metadata[sfnt.NameFontFamily]; ok {
			font.Family = v
		}
	}

	if len(font.Name) == 0 {
		font.Name = fileName
	}

	return font, nil
}



================================================
FILE: src/cli/font/fonts.go
================================================
package font

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	httplib "net/http"
	"sort"
	"strings"
	"time"

	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

const (
	CascadiaCodeMS = "CascadiaCode (MS)"
)

type release struct {
	Assets []*Asset `json:"assets"`
}

type Asset struct {
	Name   string `json:"name"`
	URL    string `json:"browser_download_url"`
	State  string `json:"state"`
	Folder string `json:"folder"`
}

func (a Asset) FilterValue() string { return a.Name }

func Fonts() ([]*Asset, error) {
	if assets, err := getCachedFontData(); err == nil {
		return assets, nil
	}

	assets, err := fetchFontAssets("ryanoasis/nerd-fonts")
	if err != nil {
		return nil, err
	}

	cascadiaCode, err := CascadiaCode()
	if err == nil {
		assets = append(assets, cascadiaCode)
	}

	sort.Slice(assets, func(i, j int) bool { return assets[i].Name < assets[j].Name })

	setCachedFontData(assets)

	return assets, nil
}

func getCachedFontData() ([]*Asset, error) {
	if cache == nil {
		return nil, errors.New("environment not set")
	}

	list, OK := cache.Get(cache_.FONTLISTCACHE)
	if !OK {
		return nil, errors.New("cache not found")
	}

	assets := make([]*Asset, 0)
	err := json.Unmarshal([]byte(list), &assets)
	if err != nil {
		return nil, err
	}

	return assets, nil
}

func setCachedFontData(assets []*Asset) {
	if cache == nil {
		return
	}

	data, err := json.Marshal(assets)
	if err != nil {
		return
	}

	cache.Set(cache_.FONTLISTCACHE, string(data), cache_.ONEDAY)
}

func CascadiaCode() (*Asset, error) {
	assets, err := fetchFontAssets("microsoft/cascadia-code")
	if err != nil || len(assets) != 1 {
		return nil, errors.New("no assets found")
	}

	return &Asset{
		Name:   CascadiaCodeMS,
		URL:    assets[0].URL,
		Folder: "ttf/",
	}, nil
}

func fetchFontAssets(repo string) ([]*Asset, error) {
	ctx, cancelF := context.WithTimeout(context.Background(), time.Second*time.Duration(20))
	defer cancelF()

	repoURL := "https://api.github.com/repos/" + repo + "/releases/latest"
	req, err := httplib.NewRequestWithContext(ctx, "GET", repoURL, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Accept", "application/vnd.github.v3+json")
	response, err := http.HTTPClient.Do(req)
	if err != nil || response.StatusCode != httplib.StatusOK {
		return nil, fmt.Errorf("failed to get %s release", repo)
	}

	defer response.Body.Close()

	var release release
	err = json.NewDecoder(response.Body).Decode(&release)
	if err != nil {
		return nil, errors.New("failed to parse nerd fonts release")
	}

	var fonts []*Asset
	for _, asset := range release.Assets {
		if asset.State == "uploaded" && strings.HasSuffix(asset.Name, ".zip") {
			asset.Name = strings.TrimSuffix(asset.Name, ".zip")
			fonts = append(fonts, asset)
		}
	}

	return fonts, nil
}



================================================
FILE: src/cli/font/install.go
================================================
// Derived from https://github.com/Crosse/font-install
// Copyright 2020 Seth Wright <seth@crosse.org>
package font

import (
	"archive/zip"
	"bytes"
	"io"
	"path"
	stdruntime "runtime"
	"slices"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/cmd"
)

func contains[S ~[]E, E comparable](s S, e E) bool {
	return slices.Contains(s, e)
}

func InstallZIP(data []byte, m *main) ([]string, error) {
	var families []string
	bytesReader := bytes.NewReader(data)

	zipReader, err := zip.NewReader(bytesReader, int64(bytesReader.Len()))
	if err != nil {
		return families, err
	}

	fonts := make(map[string]*Font)

	for _, file := range zipReader.File {
		// prevent zipslip attacks
		// https://security.snyk.io/research/zip-slip-vulnerability
		// skip folders
		if strings.Contains(file.Name, "..") || strings.HasSuffix(file.Name, "/") {
			continue
		}

		fontFileName := path.Base(file.Name)
		fontRelativeFileName := strings.TrimPrefix(file.Name, m.Folder)

		// do not install fonts that are not in the specified installation folder
		if fontFileName != fontRelativeFileName {
			continue
		}

		fontReader, err := file.Open()
		if err != nil {
			continue
		}

		defer fontReader.Close()

		fontBytes, err := io.ReadAll(fontReader)
		if err != nil {
			continue
		}

		font, err := newFont(fontFileName, fontBytes)
		if err != nil {
			continue
		}

		if _, found := fonts[font.Name]; !found {
			fonts[font.Name] = font
			continue
		}

		// prefer .ttf files over other file types when we have a duplicate
		first := strings.ToLower(path.Ext(fonts[font.Name].FileName))
		second := strings.ToLower(path.Ext(font.FileName))
		if first != second && second == ".ttf" {
			fonts[font.Name] = font
		}
	}

	for _, font := range fonts {
		if err = install(font, m.system); err != nil {
			log.Error(err)
			continue
		}

		if found := contains(families, font.Family); !found {
			families = append(families, font.Family)
		}
	}

	// Update the font cache when installing fonts on Linux
	if stdruntime.GOOS == runtime.LINUX || stdruntime.GOOS == runtime.DARWIN {
		_, _ = cmd.Run("fc-cache", "-f")
	}

	slices.Sort(families)

	return families, nil
}



================================================
FILE: src/cli/font/install_darwin.go
================================================
// Derived from https://github.com/Crosse/font-install
// Copyright 2020 Seth Wright <seth@crosse.org>
package font

import (
	"os"
	"path"
)

var FontsDir = path.Join(os.Getenv("HOME"), "Library", "Fonts")

func install(font *Font, _ bool) error {
	// On darwin/OSX, the user's fonts directory is ~/Library/Fonts,
	// and fonts should be installed directly into that path;
	// i.e., not in subfolders.
	fullPath := path.Join(FontsDir, path.Base(font.FileName))

	if err := os.MkdirAll(path.Dir(fullPath), 0700); err != nil {
		return err
	}

	return os.WriteFile(fullPath, font.Data, 0644)
}



================================================
FILE: src/cli/font/install_unix.go
================================================
//go:build !windows && !darwin

// Derived from https://github.com/Crosse/font-install
// Copyright 2020 Seth Wright <seth@crosse.org>
package font

import (
	"os"
	"path"
	"strings"
)

var (
	fontsDir       = path.Join(os.Getenv("HOME"), "/.local/share/fonts")
	systemFontsDir = "/usr/share/fonts"
)

func install(font *Font, _ bool) error {
	// If we're running as root, install the font system-wide.
	targetDir := fontsDir
	if os.Geteuid() == 0 {
		targetDir = systemFontsDir
	}

	// On Linux, fontconfig can understand subdirectories. So, to keep the
	// font directory clean, install all font files for a particular font
	// family into a subdirectory named after the family (with hyphens instead
	// of spaces).
	fullPath := path.Join(targetDir,
		strings.ToLower(strings.ReplaceAll(font.Family, " ", "-")),
		path.Base(font.FileName))

	if err := os.MkdirAll(path.Dir(fullPath), 0700); err != nil {
		return err
	}

	return os.WriteFile(fullPath, font.Data, 0644)
}



================================================
FILE: src/cli/font/install_windows.go
================================================
package font

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"syscall"
	"unsafe"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"golang.org/x/sys/windows/registry"
)

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-addfontresourcea

const (
	WM_FONTCHANGE  = 0x001D //nolint:revive
	HWND_BROADCAST = 0xFFFF //nolint:revive
)

func install(font *Font, admin bool) error {
	// To install a font on Windows:
	//  - Copy the file to the fonts directory
	//  - Add registry entry
	//  - Call AddFontResourceW to set the font
	fontsDir := filepath.Join(os.Getenv("WINDIR"), "Fonts")
	if !admin {
		fontsDir = filepath.Join(os.Getenv("USERPROFILE"), "AppData", "Local", "Microsoft", "Windows", "Fonts")
	}

	log.Debugf("installing font %s to %s", font.FileName, fontsDir)

	// check if the Fonts folder exists, if not, create it
	if _, err := os.Stat(fontsDir); os.IsNotExist(err) {
		if err = os.MkdirAll(fontsDir, 0755); err != nil {
			return fmt.Errorf("unable to create fonts directory: %s", err.Error())
		}
	}

	log.Debug("fonts directory exists, proceeding with installation")

	fullPath := filepath.Join(fontsDir, font.FileName)
	// validate if the font is already installed, remove it in case it is
	if _, err := os.Stat(fullPath); err == nil {
		log.Debugf("font %s already exists, removing it", fullPath)
		if err = os.Remove(fullPath); err != nil {
			return fmt.Errorf("unable to remove existing font file: %s", err.Error())
		}
	}

	log.Debugf("writing font file to %s", fullPath)

	err := os.WriteFile(fullPath, font.Data, 0644)
	if err != nil {
		return fmt.Errorf("unable to write font file: %s", err.Error())
	}

	log.Debug("font file written successfully, proceeding with registry entry")

	// Add registry entry
	var reg = registry.LOCAL_MACHINE
	var regValue = font.FileName
	if !admin {
		reg = registry.CURRENT_USER
		regValue = fullPath
	}

	log.Debugf("opening registry key %s for writing", registryKeyString(reg))

	k, err := registry.OpenKey(reg, `SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts`, registry.WRITE)
	if err != nil {
		log.Error(err)
		// If this fails, remove the font file as well.
		if nexterr := os.Remove(fullPath); nexterr != nil {
			log.Error(nexterr)
			return errors.New("unable to delete font file after registry key open error")
		}

		return fmt.Errorf("unable to open registry key: %s", registryKeyString(reg))
	}

	defer k.Close()

	fontName := fmt.Sprintf("%v (TrueType)", font.Name)
	var alreadyInstalled, newFontType bool

	log.Debugf("validating if font %s is already installed", fontName)

	// check if we already had this key set
	oldFullPath, _, err := k.GetStringValue(fontName)
	if err == nil {
		log.Debugf("font %s is already installed with path %s", fontName, oldFullPath)
		alreadyInstalled = true
		newFontType = oldFullPath != fullPath
	}

	if !alreadyInstalled {
		log.Debug("font is not registered, adding to registry")
		if err := k.SetStringValue(fontName, fullPath); err != nil {
			return err
		}
		log.Debug("font registry entry added successfully")
	}

	// do not call AddFontResourceW if the font was already installed
	if alreadyInstalled && !newFontType {
		log.Debugf("font %s is already installed, skipping AddFontResourceW", fontName)
		return nil
	}

	gdi32 := syscall.NewLazyDLL("gdi32.dll")
	addFontResourceW := gdi32.NewProc("AddFontResourceW")

	// remove the old font resource in case we have a new font type with the same name
	if newFontType {
		log.Debug("removing old font resource before adding new one")
		fontPtr, err := syscall.UTF16PtrFromString(oldFullPath)
		if err == nil {
			removeFontResourceW := gdi32.NewProc("RemoveFontResourceW")
			_, _, _ = removeFontResourceW.Call(uintptr(unsafe.Pointer(fontPtr)))
		}
	}

	if err = k.SetStringValue(fontName, regValue); err != nil {
		log.Error(err)
		// If this fails, remove the font file as well.
		if nexterr := os.Remove(fullPath); nexterr != nil {
			return errors.New("unable to delete font file after registry key set error")
		}

		return fmt.Errorf("unable to set registry value: %s", err.Error())
	}

	fontPtr, err := syscall.UTF16PtrFromString(fullPath)
	if err != nil {
		return err
	}

	ret, _, _ := addFontResourceW.Call(uintptr(unsafe.Pointer(fontPtr)))
	if ret == 0 {
		return errors.New("unable to add font resource using AddFontResourceW")
	}

	log.Debug("font resource added successfully")

	return nil
}

func registryKeyString(key registry.Key) string {
	switch key { //nolint:exhaustive
	case registry.CURRENT_USER:
		return "HKEY_CURRENT_USER"
	case registry.LOCAL_MACHINE:
		return "HKEY_LOCAL_MACHINE"
	default:
		return fmt.Sprintf("Unknown registry key: %d", key)
	}
}



================================================
FILE: src/cli/image/image.go
================================================
// Copyright © 2020 The Homeport Team
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// https://github.com/homeport/termshot

package image

import (
	"archive/zip"
	"bytes"
	"fmt"
	"image"
	"io"
	"math"
	stdOS "os"
	"path/filepath"
	"slices"
	"strconv"
	"strings"
	"unicode/utf8"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	font_ "github.com/jandedobbeleer/oh-my-posh/src/cli/font"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"

	"github.com/esimov/stackblur-go"
	"github.com/fogleman/gg"
	"golang.org/x/image/font"
	"golang.org/x/image/font/opentype"
)

type ConnectionError struct {
	reason string
}

func (f *ConnectionError) Error() string {
	return f.reason
}

const (
	red    = "#ED655A"
	yellow = "#E1C04C"
	green  = "#71BD47"

	// known ansi sequences

	fg                  = "FG"
	bg                  = "BG"
	bc                  = "BC" // for base 16 colors
	str                 = "STR"
	url                 = "URL"
	invertedColor       = "inverted"
	invertedColorSingle = "invertedsingle"
	fullColor           = "full"
	foreground          = "foreground"
	background          = "background"
	reset               = "reset"
	bold                = "bold"
	boldReset           = "boldr"
	italic              = "italic"
	italicReset         = "italicr"
	underline           = "underline"
	underlineReset      = "underliner"
	overline            = "overline"
	overlineReset       = "overliner"
	strikethrough       = "strikethrough"
	strikethroughReset  = "strikethroughr"
	backgroundReset     = "backgroundr"
	color16             = "color16"
	left                = "left"
	lineChange          = "linechange"
	consoleTitle        = "title"
	link                = "link"
)

type RGB struct {
	r int
	g int
	b int
}

func NewRGBColor(ansiColor string) *RGB {
	colors := strings.Split(ansiColor, ";")
	b, _ := strconv.Atoi(colors[2])
	g, _ := strconv.Atoi(colors[1])
	r, _ := strconv.Atoi(colors[0])
	return &RGB{
		r: r,
		g: g,
		b: b,
	}
}

type Renderer struct {
	italic                 font.Face
	bold                   font.Face
	regular                font.Face
	defaultForegroundColor *RGB
	ansiSequenceRegexMap   map[string]string
	foregroundColor        *RGB
	backgroundColor        *RGB
	defaultBackgroundColor *RGB
	Path                   string
	AnsiString             string
	Author                 string
	shadowBaseColor        string
	style                  string
	BgColor                string
	shadowOffsetX          float64
	padding                float64
	margin                 float64
	factor                 float64
	shadowOffsetY          float64
	rows                   int
	lineSpacing            float64
	RPromptOffset          int
	CursorPadding          int
	columns                int
	shadowRadius           uint8
}

func (ir *Renderer) Init(env runtime.Environment) error {
	ir.setOutputPath(env.Flags().Config)

	ir.cleanContent()

	font_.SetCache(env.Cache())

	if err := ir.loadFonts(); err != nil {
		return &ConnectionError{reason: err.Error()}
	}

	ir.defaultForegroundColor = &RGB{255, 255, 255}
	ir.defaultBackgroundColor = &RGB{21, 21, 21}

	ir.factor = 2.0
	ir.columns = 80
	ir.rows = 25

	ir.margin = ir.factor * 48
	ir.padding = ir.factor * 24

	ir.shadowBaseColor = "#10101066"
	ir.shadowRadius = uint8(math.Min(ir.factor*16, 255))
	ir.shadowOffsetX = ir.factor * 16
	ir.shadowOffsetY = ir.factor * 16

	ir.lineSpacing = 1.2

	ir.ansiSequenceRegexMap = map[string]string{
		invertedColor:       `^(?P<STR>(\x1b\[38;2;(?P<BG>(\d+;?){3});49m){1}(\x1b\[7m))`,
		invertedColorSingle: `^(?P<STR>\x1b\[(?P<BG>\d{2,3});49m\x1b\[7m)`,
		fullColor:           `^(?P<STR>(\x1b\[48;2;(?P<BG>(\d+;?){3})m)(\x1b\[38;2;(?P<FG>(\d+;?){3})m))`,
		foreground:          `^(?P<STR>(\x1b\[38;2;(?P<FG>(\d+;?){3})m))`,
		background:          `^(?P<STR>(\x1b\[48;2;(?P<BG>(\d+;?){3})m))`,
		reset:               `^(?P<STR>\x1b\[0m)`,
		bold:                `^(?P<STR>\x1b\[1m)`,
		boldReset:           `^(?P<STR>\x1b\[22m)`,
		italic:              `^(?P<STR>\x1b\[3m)`,
		italicReset:         `^(?P<STR>\x1b\[23m)`,
		underline:           `^(?P<STR>\x1b\[4m)`,
		underlineReset:      `^(?P<STR>\x1b\[24m)`,
		overline:            `^(?P<STR>\x1b\[53m)`,
		overlineReset:       `^(?P<STR>\x1b\[55m)`,
		strikethrough:       `^(?P<STR>\x1b\[9m)`,
		strikethroughReset:  `^(?P<STR>\x1b\[29m)`,
		backgroundReset:     `^(?P<STR>\x1b\[49m)`,
		color16:             `^(?P<STR>\x1b\[(?P<BC>[349][0-7]|10[0-7]|39)m)`,
		left:                `^(?P<STR>\x1b\[(\d{1,3})D)`,
		lineChange:          `^(?P<STR>\x1b\[(\d)[FB])`,
		consoleTitle:        `^(?P<STR>\x1b\]0;(.+)\007)`,
		link:                fmt.Sprintf(`^%s`, regex.LINK),
	}

	return nil
}

func (ir *Renderer) setOutputPath(config string) {
	if len(ir.Path) != 0 {
		return
	}

	if len(config) == 0 {
		ir.Path = "prompt.png"
		return
	}

	config = filepath.Base(config)

	match := regex.FindNamedRegexMatch(`(\.?)(?P<STR>.*)\.(json|yaml|yml|toml|jsonc)`, config)
	path := strings.TrimRight(match[str], ".omp")

	if len(path) == 0 {
		path = "prompt"
	}

	ir.Path = fmt.Sprintf("%s.png", path)
}

func (ir *Renderer) loadFonts() error {
	var data []byte

	fontCachePath := filepath.Join(cache.Path(), "Hack.zip")
	if _, err := stdOS.Stat(fontCachePath); err == nil {
		data, _ = stdOS.ReadFile(fontCachePath)
	}

	// Download font if not cached
	if data == nil {
		url := "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip"
		var err error

		data, err = font_.Download(url)
		if err != nil {
			return err
		}

		err = stdOS.WriteFile(fontCachePath, data, 0644)
		if err != nil {
			return err
		}
	}

	bytesReader := bytes.NewReader(data)
	zipReader, err := zip.NewReader(bytesReader, int64(bytesReader.Len()))
	if err != nil {
		return err
	}

	fontFaceOptions := &opentype.FaceOptions{Size: 2.0 * 12, DPI: 144}

	parseFont := func(file *zip.File) (font.Face, error) {
		rc, err := file.Open()
		if err != nil {
			return nil, err
		}

		defer rc.Close()

		data, err := io.ReadAll(rc)
		if err != nil {
			return nil, err
		}

		font, err := opentype.Parse(data)
		if err != nil {
			return nil, err
		}

		fontFace, err := opentype.NewFace(font, fontFaceOptions)
		if err != nil {
			return nil, err
		}
		return fontFace, nil
	}

	for _, file := range zipReader.File {
		switch file.Name {
		case "HackNerdFont-Regular.ttf":
			if regular, err := parseFont(file); err == nil {
				ir.regular = regular
			}
		case "HackNerdFont-Bold.ttf":
			if bold, err := parseFont(file); err == nil {
				ir.bold = bold
			}
		case "HackNerdFont-Italic.ttf":
			if italic, err := parseFont(file); err == nil {
				ir.italic = italic
			}
		}
	}

	return nil
}

func (ir *Renderer) fontHeight() float64 {
	return float64(ir.regular.Metrics().Height >> 6)
}

type RuneRange struct {
	Start rune
	End   rune
}

// If we're a Nerd Font code point, treat as double width
var doubleWidthRunes = []RuneRange{
	// Seti-UI + Custom range
	{Start: '\ue5fa', End: '\ue6b1'},
	// Devicons
	{Start: '\ue700', End: '\ue7c5'},
	// Font Awesome
	{Start: '\uf000', End: '\uf2e0'},
	// Font Awesome Extension
	{Start: '\ue200', End: '\ue2a9'},
	// Material Design Icons
	{Start: '\U000f0001', End: '\U000f1af0'},
	// Weather
	{Start: '\ue300', End: '\ue3e3'},
	// Octicons
	{Start: '\uf400', End: '\uf532'},
	{Start: '\u2665', End: '\u2665'},
	{Start: '\u26A1', End: '\u26A1'},
	// Powerline Extra Symbols (intentionally excluding single width bubbles (e0b4-e0b7) and pixelated (e0c4-e0c7))
	{Start: '\ue0a3', End: '\ue0a3'},
	{Start: '\ue0b4', End: '\ue0c8'},
	{Start: '\ue0ca', End: '\ue0ca'},
	{Start: '\ue0cc', End: '\ue0d4'},
	// IEC Power Symbols
	{Start: '\u23fb', End: '\u23fe'},
	{Start: '\u2b58', End: '\u2b58'},
	// Font Logos
	{Start: '\uf300', End: '\uf372'},
	// Pomicons
	{Start: '\ue000', End: '\ue00a'},
	// Codicons
	{Start: '\uea60', End: '\uebeb'},
}

// This is getting how many additional characters of width to allocate when drawing
// e.g. for characters that are 2 or more wide. A standard character will return 0
// Nerd Font glyphs will return 1, since most are double width
func (ir *Renderer) runeAdditionalWidth(r rune) int {
	// exclude the round leading diamond
	singles := []rune{'\ue0b6', '\ue0ba', '\ue0bc'}
	if slices.Contains(singles, r) {
		return 0
	}

	for _, runeRange := range doubleWidthRunes {
		if runeRange.Start <= r && r <= runeRange.End {
			return 1
		}
	}
	return 0
}

func (ir *Renderer) cleanContent() {
	// clean abundance of empty lines
	ir.AnsiString = strings.Trim(ir.AnsiString, "\n")
	ir.AnsiString = "\n" + ir.AnsiString

	// clean string before render
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\x1b[m", "\x1b[0m")
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\x1b[K", "")
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\x1b[0J", "")
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\x1b[27m", "")
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\x1b8", "")
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\u2800", " ")

	// cursor indication
	saveCursorAnsi := "\x1b7"
	if !strings.Contains(ir.AnsiString, saveCursorAnsi) {
		ir.AnsiString += "_"
	}
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, saveCursorAnsi, "_")

	// replace rprompt with padding and mark right aligned blocks with a pointer
	ir.AnsiString = strings.ReplaceAll(ir.AnsiString, "\x1b[1000C", strings.Repeat(" ", ir.RPromptOffset))

	// add watermarks
	ir.AnsiString += "\n\n\x1b[1mohmyposh.dev\x1b[22m"
	if len(ir.Author) > 0 {
		createdBy := fmt.Sprintf(" by \x1b[1m%s\x1b[22m", ir.Author)
		ir.AnsiString += createdBy
	}
}

func (ir *Renderer) measureContent() (width, height float64) {
	linewidth := 145
	linewidth += ir.additionalWidth()

	tmpDrawer := &font.Drawer{Face: ir.regular}
	advance := tmpDrawer.MeasureString(strings.Repeat(" ", linewidth))
	width = float64(advance >> 6)
	// height, lines times font height and line spacing
	height = float64(len(strings.Split(ir.AnsiString, "\n"))) * ir.fontHeight() * ir.lineSpacing
	return width, height
}

/*
additionalWidth returns the number of additional characters of width to allocate when drawing
for characters that are 2 wide. A standard character will return 0
Nerd Font glyphs will return 1, since most are double width
*/
func (ir *Renderer) additionalWidth() int {
	longest := 0
	var longestLine string
	for line := range strings.SplitSeq(ir.AnsiString, "\n") {
		length := ir.lenWithoutANSI(line)
		if length > longest {
			longestLine = line
			longest = length
		}
	}

	var additionalWidth int
	for _, rune := range longestLine {
		additionalWidth += ir.runeAdditionalWidth(rune)
	}

	return additionalWidth
}

func (ir *Renderer) lenWithoutANSI(text string) int {
	if len(text) == 0 {
		return 0
	}
	// replace hyperlinks(file/http/https)
	regexStr := ir.ansiSequenceRegexMap[link]
	matches := regex.FindAllNamedRegexMatch(regexStr, text)
	for _, match := range matches {
		text = strings.ReplaceAll(text, match[str], match[url])
	}
	// replace console title
	regexStr = ir.ansiSequenceRegexMap[consoleTitle]
	matches = regex.FindAllNamedRegexMatch(regexStr, text)
	for _, match := range matches {
		text = strings.ReplaceAll(text, match[str], "")
	}
	stripped := regex.ReplaceAllString(terminal.AnsiRegex, text, "")
	length := utf8.RuneCountInString(stripped)
	for _, rune := range stripped {
		length += ir.runeAdditionalWidth(rune)
	}
	return length
}

func (ir *Renderer) SavePNG() error {
	var f = func(value float64) float64 { return ir.factor * value }

	var (
		corner   = f(6)
		radius   = f(9)
		distance = f(25)
	)

	contentWidth, contentHeight := ir.measureContent()

	// Make sure the output window is big enough in case no content or very few
	// content will be rendered
	contentWidth = math.Max(contentWidth, 3*distance+3*radius)

	marginX, marginY := ir.margin, ir.margin
	paddingX, paddingY := ir.padding, ir.padding

	xOffset := marginX
	yOffset := marginY
	titleOffset := f(40)

	width := contentWidth + 2*marginX + 2*paddingX
	height := contentHeight + 2*marginY + 2*paddingY + titleOffset

	dc := gg.NewContext(int(width), int(height))

	xOffset -= ir.shadowOffsetX / 2
	yOffset -= ir.shadowOffsetY / 2

	bc := gg.NewContext(int(width), int(height))
	bc.DrawRoundedRectangle(xOffset+ir.shadowOffsetX, yOffset+ir.shadowOffsetY, width-2*marginX, height-2*marginY, corner)
	bc.SetHexColor(ir.shadowBaseColor)
	bc.Fill()

	dst := image.NewNRGBA(bc.Image().Bounds())

	// var done = make(chan struct{}, ir.shadowRadius)
	err := stackblur.Process(
		dst,
		bc.Image(),
		uint32(ir.shadowRadius),
	)

	if err != nil {
		return err
	}

	// <-done
	dc.DrawImage(dst, 0, 0)

	// Draw rounded rectangle with outline and three button to produce the
	// impression of a window with controls and a content area
	dc.DrawRoundedRectangle(xOffset, yOffset, width-2*marginX, height-2*marginY, corner)
	dc.SetHexColor(ir.BgColor)
	dc.Fill()

	dc.DrawRoundedRectangle(xOffset, yOffset, width-2*marginX, height-2*marginY, corner)
	dc.SetHexColor("#404040")
	dc.SetLineWidth(f(1))
	dc.Stroke()

	for i, color := range []string{red, yellow, green} {
		dc.DrawCircle(xOffset+paddingX+float64(i)*distance+f(4), yOffset+paddingY+f(4), radius)
		dc.SetHexColor(color)
		dc.Fill()
	}

	// Apply the actual text into the prepared content area of the window
	var x, y = xOffset + paddingX, yOffset + paddingY + titleOffset + ir.fontHeight()

	for len(ir.AnsiString) != 0 {
		if !ir.shouldPrint() {
			continue
		}
		runes := []rune(ir.AnsiString)
		if len(runes) == 0 {
			continue
		}
		str := string(runes[0:1])
		ir.AnsiString = string(runes[1:])
		switch ir.style {
		case bold:
			dc.SetFontFace(ir.bold)
		case italic:
			dc.SetFontFace(ir.italic)
		default:
			dc.SetFontFace(ir.regular)
		}

		w, h := dc.MeasureString(str)
		// The gg library unfortunately returns a single character width for *all* glyphs in a font.
		// So if we know the glyph to occupy n additional characters in width, allocate that area
		// e.g. this will double the space for Nerd Fonts, but some could even be 3 or 4 wide
		// If there's 0 additional characters of width (the common case), this won't add anything
		w += (w * float64(ir.runeAdditionalWidth(runes[0])))

		if ir.backgroundColor != nil {
			dc.SetRGB255(ir.backgroundColor.r, ir.backgroundColor.g, ir.backgroundColor.b)
			// The background for a character needs love to align to the font we're using
			// Not all fonts are rendered the same height or starting position,
			// so we're shifting the background rectangles vertically to correct
			dc.DrawRectangle(x, y-h+3, w, h+9)
			dc.Fill()
		}
		if ir.foregroundColor != nil {
			dc.SetRGB255(ir.foregroundColor.r, ir.foregroundColor.g, ir.foregroundColor.b)
		} else {
			dc.SetRGB255(ir.defaultForegroundColor.r, ir.defaultForegroundColor.g, ir.defaultForegroundColor.b)
		}

		if str == "\n" {
			x = xOffset + paddingX
			y += h * ir.lineSpacing
			continue
		}

		dc.DrawString(str, x, y)

		if ir.style == underline {
			dc.DrawLine(x, y+f(4), x+w, y+f(4))
			dc.SetLineWidth(f(1))
			dc.Stroke()
		}

		if ir.style == overline {
			dc.DrawLine(x, y-f(22), x+w, y-f(22))
			dc.SetLineWidth(f(1))
			dc.Stroke()
		}

		x += w
	}

	return dc.SavePNG(ir.Path)
}

func (ir *Renderer) shouldPrint() bool {
	for sequence, re := range ir.ansiSequenceRegexMap {
		match := regex.FindNamedRegexMatch(re, ir.AnsiString)
		if len(match) == 0 {
			continue
		}
		ir.AnsiString = strings.TrimPrefix(ir.AnsiString, match[str])
		switch sequence {
		case invertedColor:
			ir.foregroundColor = ir.defaultBackgroundColor
			ir.backgroundColor = NewRGBColor(match[bg])
			return false
		case invertedColorSingle:
			ir.foregroundColor = ir.defaultBackgroundColor
			bgColor, _ := strconv.Atoi(match[bg])
			bgColor += 10
			ir.setBase16Color(fmt.Sprint(bgColor))
			return false
		case fullColor:
			ir.foregroundColor = NewRGBColor(match[fg])
			ir.backgroundColor = NewRGBColor(match[bg])
			return false
		case foreground:
			ir.foregroundColor = NewRGBColor(match[fg])
			return false
		case background:
			ir.backgroundColor = NewRGBColor(match[bg])
			return false
		case reset:
			ir.foregroundColor = ir.defaultForegroundColor
			ir.backgroundColor = nil
			return false
		case backgroundReset:
			ir.backgroundColor = nil
			return false
		case bold, italic, underline, overline:
			ir.style = sequence
			return false
		case boldReset, italicReset, underlineReset, overlineReset:
			ir.style = ""
			return false
		case strikethrough, strikethroughReset, left, lineChange, consoleTitle:
			return false
		case color16:
			ir.setBase16Color(match[bc])
			return false
		case link:
			ir.AnsiString = match[url] + ir.AnsiString
		}
	}
	return true
}

func (ir *Renderer) setBase16Color(colorStr string) {
	tempColor := ir.defaultForegroundColor
	colorInt, err := strconv.Atoi(colorStr)
	if err != nil {
		ir.foregroundColor = tempColor
	}
	switch colorInt {
	case 30, 40: // Black
		tempColor = &RGB{1, 1, 1}
	case 31, 41: // Red
		tempColor = &RGB{222, 56, 43}
	case 32, 42: // Green
		tempColor = &RGB{57, 181, 74}
	case 33, 43: // Yellow
		tempColor = &RGB{255, 199, 6}
	case 34, 44: // Blue
		tempColor = &RGB{0, 111, 184}
	case 35, 45: // Magenta
		tempColor = &RGB{118, 38, 113}
	case 36, 46: // Cyan
		tempColor = &RGB{44, 181, 233}
	case 37, 47: // White
		tempColor = &RGB{204, 204, 204}
	case 90, 100: // Bright Black (Gray)
		tempColor = &RGB{128, 128, 128}
	case 91, 101: // Bright Red
		tempColor = &RGB{255, 0, 0}
	case 92, 102: // Bright Green
		tempColor = &RGB{0, 255, 0}
	case 93, 103: // Bright Yellow
		tempColor = &RGB{255, 255, 0}
	case 94, 104: // Bright Blue
		tempColor = &RGB{0, 0, 255}
	case 95, 105: // Bright Magenta
		tempColor = &RGB{255, 0, 255}
	case 96, 106: // Bright Cyan
		tempColor = &RGB{101, 194, 205}
	case 97, 107: // Bright White
		tempColor = &RGB{255, 255, 255}
	}
	if colorInt < 40 || (colorInt >= 90 && colorInt < 100) {
		ir.foregroundColor = tempColor
		return
	}
	ir.backgroundColor = tempColor
}



================================================
FILE: src/cli/image/image_test.go
================================================
package image

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSetOutputPath(t *testing.T) {
	cases := []struct {
		Case     string
		Config   string
		Path     string
		Expected string
	}{
		{Case: "default config", Expected: "prompt.png"},
		{Case: "hidden file", Config: ".posh.omp.json", Expected: "posh.png"},
		{Case: "hidden file toml", Config: ".posh.omp.toml", Expected: "posh.png"},
		{Case: "hidden file yaml", Config: ".posh.omp.yaml", Expected: "posh.png"},
		{Case: "hidden file yml", Config: ".posh.omp.yml", Expected: "posh.png"},
		{Case: "path provided", Path: "mytheme.png", Expected: "mytheme.png"},
		{Case: "relative, no omp", Config: "~/jandedobbeleer.json", Expected: "jandedobbeleer.png"},
		{Case: "relative path", Config: "~/jandedobbeleer.omp.json", Expected: "jandedobbeleer.png"},
		{Case: "invalid config name", Config: "~/jandedobbeleer.omp.foo", Expected: "prompt.png"},
	}

	for _, tc := range cases {
		image := &Renderer{
			Path: tc.Path,
		}

		image.setOutputPath(tc.Config)

		assert.Equal(t, tc.Expected, image.Path, tc.Case)
	}
}



================================================
FILE: src/cli/progress/model.go
================================================
package progress

import (
	"github.com/charmbracelet/bubbles/progress"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

type Message float64

func NewModel() *Model {
	p := progress.New(progress.WithScaledGradient("#800080", "#ffc0cb"))
	return &Model{Model: p}
}

type Model struct {
	progress.Model
}

func (m *Model) Update(msg tea.Msg) tea.Cmd {
	model, cmd := m.Model.Update(msg)
	m.Model = model.(progress.Model)

	return cmd
}

func (m *Model) View() string {
	return m.Model.View() + terminal.SetProgress(int(m.Percent()*100))
}



================================================
FILE: src/cli/progress/reader.go
================================================
package progress

import (
	"io"

	tea "github.com/charmbracelet/bubbletea"
)

func NewReader(reader io.Reader, total int64, program *tea.Program) *Reader {
	return &Reader{
		Reader:  reader,
		program: program,
		total:   total,
	}
}

type Reader struct {
	io.Reader

	program *tea.Program
	total   int64
	current int64
}

func (r *Reader) Read(p []byte) (int, error) {
	n, err := r.Reader.Read(p)
	r.current += int64(n)
	percent := float64(r.current) / float64(r.total)

	if r.program != nil {
		r.program.Send(Message(percent))
	}

	return n, err
}



================================================
FILE: src/cli/upgrade/cli.go
================================================
package upgrade

import (
	"fmt"
	"strings"

	progress_ "github.com/charmbracelet/bubbles/progress"
	"github.com/charmbracelet/bubbles/spinner"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/progress"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

var (
	program   *tea.Program
	textStyle = lipgloss.NewStyle().Margin(1, 0, 2, 2)
)

type resultMsg string

type stateMsg state

type state int

const (
	validating state = iota
	downloading
	verifying
	installing
)

func setState(message state) {
	if program == nil {
		return
	}

	program.Send(stateMsg(message))
}

type model struct {
	error    error
	config   *Config
	spinner  *spinner.Model
	progress *progress.Model
	message  string
	state    state
}

func initialModel(cfg *Config) *model {
	s := spinner.New()
	s.Spinner = spinner.Dot
	s.Style = lipgloss.NewStyle().Foreground(lipgloss.Color("170"))

	p := progress.NewModel()

	return &model{spinner: &s, config: cfg, progress: p}
}

func (m *model) Init() tea.Cmd {
	go m.start()

	return m.spinner.Tick
}

func (m *model) start() {
	if err := install(m.config); err != nil {
		m.error = err
		log.Debug("failed to install")
		program.Send(resultMsg(fmt.Sprintf(" ❌ upgrade failed: %v", err)))
		return
	}

	current := fmt.Sprintf("v%s", build.Version)
	message := fmt.Sprintf("🚀 Upgraded from %s to %s", current, m.config.Latest)

	if current != m.config.Latest {
		log.Debug("new version installed, user needs to restart shell")
		message += ", restart your shell to take full advantage of the new functionality"
	}

	program.Send(resultMsg(message))
}

func (m *model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "q", "esc", "ctrl+c":
			return m, tea.Quit
		default:
			return m, nil
		}

	case resultMsg:
		m.message = string(msg)
		return m, tea.Quit

	case stateMsg:
		m.state = state(msg)
		return m, nil

	case progress.Message:
		return m, m.progress.SetPercent(float64(msg))

	case progress_.FrameMsg:
		return m, m.progress.Update(msg)

	default:
		s, cmd := m.spinner.Update(msg)
		m.spinner = &s
		return m, cmd
	}
}

func (m *model) View() string {
	if len(m.message) > 0 {
		return textStyle.Render(m.message)
	}

	var message string
	m.spinner.Spinner = spinner.Dot

	switch m.state {
	case validating:
		message = "Validating current installation"
	case downloading:
		message = fmt.Sprintf("Downloading %s from %s...\n%s", m.config.Latest, m.config.Source.String(), m.progress.View())
		return textStyle.Render(message)
	case verifying:
		m.spinner.Spinner = spinner.Moon
		message = "Verifying download"
	case installing:
		m.spinner.Spinner = spinner.Jump
		message = "Installing"
	}

	return textStyle.Render(fmt.Sprintf("%s %s", m.spinner.View(), message))
}

func Run(cfg *Config) error {
	program = tea.NewProgram(initialModel(cfg))
	resultModel, _ := program.Run()

	programModel, OK := resultModel.(*model)
	if !OK {
		log.Debug("failed to cast model")
		return nil
	}

	return programModel.error
}

func IsMajorUpgrade(current, latest string) bool {
	if len(current) == 0 {
		return false
	}

	getMajorNumber := func(version string) string {
		return strings.Split(version, ".")[0]
	}

	return getMajorNumber(current) != getMajorNumber(latest)
}



================================================
FILE: src/cli/upgrade/cli_test.go
================================================
package upgrade

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestIsMajorUpgrade(t *testing.T) {
	cases := []struct {
		Case           string
		CurrentVersion string
		LatestVersion  string
		Expected       bool
	}{
		{Case: "Same version", Expected: false, CurrentVersion: "v3.0.0", LatestVersion: "v3.0.0"},
		{Case: "Breaking change", Expected: true, CurrentVersion: "v3.0.0", LatestVersion: "v4.0.0"},
		{Case: "Empty version, mostly development build", Expected: false, LatestVersion: "v4.0.0"},
	}

	for _, tc := range cases {
		canUpgrade := IsMajorUpgrade(tc.CurrentVersion, tc.LatestVersion)
		assert.Equal(t, tc.Expected, canUpgrade, tc.Case)
	}
}



================================================
FILE: src/cli/upgrade/config.go
================================================
package upgrade

import (
	"context"
	"fmt"
	"io"
	httplib "net/http"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/progress"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

type Config struct {
	Cache         cache.Cache    `json:"-" toml:"-" yaml:"-"`
	Source        Source         `json:"source" toml:"source" yaml:"source"`
	Interval      cache.Duration `json:"interval" toml:"interval" yaml:"interval"`
	Latest        string         `json:"-" toml:"-" yaml:"-"`
	Auto          bool           `json:"auto" toml:"auto" yaml:"auto"`
	DisplayNotice bool           `json:"notice" toml:"notice" yaml:"notice"`
	Force         bool           `json:"-" toml:"-" yaml:"-"`
}

type Source string

const (
	GitHub Source = "github"
	CDN    Source = "cdn"
)

func (s Source) String() string {
	switch s {
	case GitHub:
		return "github.com"
	case CDN:
		return "cdn.ohmyposh.dev"
	default:
		return "Unknown"
	}
}

func (cfg *Config) FetchLatest() (string, error) {
	cfg.Latest = "latest"
	v, err := cfg.DownloadAsset("version.txt")
	if err != nil {
		log.Debugf("failed to get latest version for source: %s", cfg.Source)
		return "", err
	}

	version := strings.TrimSpace(string(v))
	cfg.Latest = version

	version = strings.TrimPrefix(version, "v")
	log.Debugf("latest version: %s", version)

	return version, err
}

func (cfg *Config) DownloadAsset(asset string) ([]byte, error) {
	if len(cfg.Source) == 0 {
		log.Debug("no source specified, defaulting to github")
		cfg.Source = GitHub
	}

	switch cfg.Source {
	case GitHub:
		var url string

		switch cfg.Latest {
		case "latest":
			url = fmt.Sprintf("https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/%s", asset)
		default:
			url = fmt.Sprintf("https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/%s/%s", cfg.Latest, asset)
		}

		return cfg.Download(url)
	case CDN:
		fallthrough
	default:
		url := fmt.Sprintf("https://cdn.ohmyposh.dev/releases/%s/%s", cfg.Latest, asset)
		return cfg.Download(url)
	}
}

func (cfg *Config) Download(url string) ([]byte, error) {
	req, err := httplib.NewRequestWithContext(context.Background(), "GET", url, nil)
	if err != nil {
		log.Debugf("failed to create request for url: %s", url)
		return nil, err
	}

	req.Header.Add("User-Agent", "oh-my-posh")
	req.Header.Add("Cache-Control", "max-age=0")

	resp, err := http.HTTPClient.Do(req)
	if err != nil {
		log.Debugf("failed to execute HTTP request: %s", url)
		return nil, err
	}

	if resp.StatusCode != httplib.StatusOK {
		return nil, fmt.Errorf("failed to download asset: %s", url)
	}

	defer resp.Body.Close()

	reader := progress.NewReader(resp.Body, resp.ContentLength, program)

	data, err := io.ReadAll(reader)
	if err != nil {
		log.Debugf("failed to read response body: %s", url)
		return nil, err
	}

	return data, nil
}



================================================
FILE: src/cli/upgrade/install.go
================================================
package upgrade

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

func install(cfg *Config) error {
	setState(validating)

	executable, err := os.Executable()
	if err != nil {
		log.Debug("failed to get executable path")
		return err
	}

	targetDir := filepath.Dir(executable)
	fileName := filepath.Base(executable)

	newPath := filepath.Join(targetDir, fmt.Sprintf(".%s.new", fileName))
	fp, err := os.OpenFile(newPath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0775)
	if err != nil {
		log.Error(err)
		return errors.New("we do not have permissions to update")
	}

	setState(downloading)

	data, err := downloadAndVerify(cfg)
	if err != nil {
		log.Debug("failed to download and verify")
		return err
	}

	setState(installing)

	_, err = io.Copy(fp, bytes.NewReader(data))
	// windows will have a lock when we do not close the file
	fp.Close()

	if err != nil {
		log.Debug("failed to copy data to new file")
		return err
	}

	oldPath := filepath.Join(targetDir, fmt.Sprintf(".%s.old", fileName))

	_ = os.Remove(oldPath)

	err = os.Rename(executable, oldPath)
	if err != nil {
		log.Debug("failed to rename old file")
		return err
	}

	err = os.Rename(newPath, executable)

	if err != nil {
		log.Debug("failed to rename new file, rolling back")
		// rollback
		rerr := os.Rename(oldPath, executable)
		if rerr != nil {
			log.Debug("failed to rollback old file")
			return rerr
		}

		return err
	}

	removeErr := os.Remove(oldPath)

	// hide the old executable if we can't remove it
	if removeErr != nil {
		log.Error(removeErr)
		// hide the old executable
		_ = hideFile(oldPath)
	}

	return nil
}



================================================
FILE: src/cli/upgrade/install_noop.go
================================================
//go:build !windows

package upgrade

func hideFile(_ string) error {
	return nil
}



================================================
FILE: src/cli/upgrade/install_windows.go
================================================
package upgrade

import (
	"syscall"
	"unsafe"
)

func hideFile(path string) error {
	kernel32 := syscall.NewLazyDLL("kernel32.dll")
	setFileAttributes := kernel32.NewProc("SetFileAttributesW")

	ptr, err := syscall.UTF16PtrFromString(path)
	if err != nil {
		return err
	}

	r1, _, err := setFileAttributes.Call(uintptr(unsafe.Pointer(ptr)), 2)

	if r1 == 0 {
		return err
	}

	return nil
}



================================================
FILE: src/cli/upgrade/notice.go
================================================
package upgrade

import (
	"fmt"
	"os"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

const (
	CACHEKEY = "upgrade_check"

	upgradeNotice = `
A new release of Oh My Posh is available: v%s → v%s
To upgrade, run: 'oh-my-posh upgrade%s'

To enable automated upgrades, run: 'oh-my-posh enable upgrade'.
`
)

// Returns the upgrade notice if a new version is available
// that should be displayed to the user.
//
// The upgrade check is only performed every other week.
func (cfg *Config) Notice() (string, bool) {
	// never validate when we install using the Windows Store
	if os.Getenv("POSH_INSTALLER") == "ws" {
		log.Debug("skipping upgrade check because we are using the Windows Store")
		return "", false
	}

	if !http.IsConnected() {
		return "", false
	}

	latest, err := cfg.FetchLatest()
	if err != nil {
		return "", false
	}

	if latest == build.Version {
		return "", false
	}

	var forceUpdate string
	if IsMajorUpgrade(build.Version, latest) {
		forceUpdate = " --force"
	}

	return fmt.Sprintf(upgradeNotice, build.Version, latest, forceUpdate), true
}



================================================
FILE: src/cli/upgrade/notice_test.go
================================================
package upgrade

import (
	"os"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

func TestCanUpgrade(t *testing.T) {
	ugc := &Config{}
	latest, _ := ugc.FetchLatest()

	cases := []struct {
		Case           string
		CurrentVersion string
		Installer      string
		Expected       bool
		Cache          bool
	}{
		{Case: "Up to date", CurrentVersion: latest},
		{Case: "Outdated Linux", Expected: true, CurrentVersion: "3.0.0"},
		{Case: "Outdated Darwin", Expected: true, CurrentVersion: "3.0.0"},
		{Case: "Cached", Cache: true, CurrentVersion: latest},
		{Case: "Windows Store", Installer: "ws"},
	}

	for _, tc := range cases {
		build.Version = tc.CurrentVersion
		c := &cache_.Cache{}
		c.On("Get", CACHEKEY).Return("", tc.Cache)
		c.On("Set", testify_.Anything, testify_.Anything, testify_.Anything)
		ugc.Cache = c

		if len(tc.Installer) > 0 {
			os.Setenv("POSH_INSTALLER", tc.Installer)
		}

		_, canUpgrade := ugc.Notice()
		assert.Equal(t, tc.Expected, canUpgrade, tc.Case)

		os.Setenv("POSH_INSTALLER", "")
	}
}



================================================
FILE: src/cli/upgrade/public_key.pem
================================================
-----BEGIN PUBLIC KEY-----
MCowBQYDK2VwAyEA98lHhNau5x0JtjSuwiWLuC2yKO6NA6/0bH2gE8tAq4c=
-----END PUBLIC KEY-----



================================================
FILE: src/cli/upgrade/verify.go
================================================
package upgrade

import (
	"crypto/ed25519"
	"crypto/sha256"
	"crypto/x509"
	_ "embed"
	"encoding/pem"
	"fmt"
	stdruntime "runtime"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

// This is based on the following key generation and validation.
// Generate a private key:
// openssl genpkey -algorithm Ed25519 -out private_key.pem
// Extract the public key:
// openssl pkey -in private_key.pem -pubout -out public_key.pem
// Sign the checksums.txt file:
// openssl pkeyutl -sign -inkey private_key.pem -out checksums.txt.sig -rawin -in checksums.txt
// Verify the signature:
// openssl pkeyutl -verify -pubin -inkey public_key.pem -sigfile checksums.txt.sig -rawin -in checksums.txt
// The public key is embedded in the binary.
// The private key is used to sign the checksums.txt file.
// The signature is embedded in the release.
// The checksums.txt file contains the checksums of the release assets.
// All checks are done in memory.
// Only then the binary is written to disk.

//go:embed public_key.pem
var publicKey []byte

func downloadAndVerify(cfg *Config) ([]byte, error) {
	extension := ""
	if stdruntime.GOOS == runtime.WINDOWS {
		extension = ".exe"
	}

	asset := fmt.Sprintf("posh-%s-%s%s", stdruntime.GOOS, stdruntime.GOARCH, extension)

	log.Debug("downloading asset:", asset)

	data, err := cfg.DownloadAsset(asset)
	if err != nil {
		log.Debug("failed to download asset")
		return nil, err
	}

	setState(verifying)

	err = verify(cfg, asset, data)
	if err != nil {
		log.Debug("failed to verify asset")
		return nil, err
	}

	return data, nil
}

func verify(cfg *Config, asset string, binary []byte) error {
	checksums, err := cfg.DownloadAsset("checksums.txt")
	if err != nil {
		log.Debug("failed to download checksums")
		return err
	}

	signature, err := cfg.DownloadAsset("checksums.txt.sig")
	if err != nil {
		log.Debug("failed to download checksums signature")
		return err
	}

	OK := validateSignature(checksums, signature)
	if !OK {
		log.Debug("failed to verify checksums signature")
		return fmt.Errorf("failed to verify checksums signature")
	}

	return validateChecksum(asset, checksums, binary)
}

func validateSignature(data, signature []byte) bool {
	ed25519PublicKey, err := loadPublicKey()
	if err != nil {
		log.Debug("failed to load public key")
		log.Error(err)
		return false
	}

	return ed25519.Verify(*ed25519PublicKey, data, signature)
}

func loadPublicKey() (*ed25519.PublicKey, error) {
	block, _ := pem.Decode(publicKey)
	if block == nil {
		log.Debug("failed to decode PEM block")
		return nil, fmt.Errorf("error parsing PEM block: key not found")
	}

	pubKey, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		log.Debug("failed to parse public key")
		return nil, fmt.Errorf("error parsing public key: %v", err)
	}

	ed25519PubKey, ok := pubKey.(ed25519.PublicKey)
	if !ok {
		log.Debug("failed to convert public key to ed25519")
		return nil, fmt.Errorf("invalid public key format: %v", err)
	}

	return &ed25519PubKey, nil
}

func validateChecksum(asset string, sha256sums, binary []byte) error {
	var assetChecksum string
	checksums := strings.SplitSeq(string(sha256sums), "\n")

	for line := range checksums {
		if !strings.HasSuffix(line, asset) {
			continue
		}

		assetChecksum = strings.Fields(line)[0]
		break
	}

	if len(assetChecksum) == 0 {
		log.Debug("failed to find checksum for asset")
		return fmt.Errorf("failed to find checksum for asset")
	}

	// calculate the checksum of the binary
	binaryChecksum := fmt.Sprintf("%x", sha256.Sum256(binary))

	if assetChecksum != binaryChecksum {
		log.Debugf("checksum mismatch, expected: %s, got: %s", assetChecksum, binaryChecksum)
		return fmt.Errorf("checksum mismatch")
	}

	return nil
}



================================================
FILE: src/cli/upgrade/verify_test.go
================================================
package upgrade

import (
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestVerify(t *testing.T) {
	checksum, err := os.ReadFile("../../test/signing/checksums.txt")
	assert.NoError(t, err)

	signature, err := os.ReadFile("../../test/signing/checksums.txt.sig")
	assert.NoError(t, err)

	OK := validateSignature(checksum, signature)
	assert.True(t, OK)
}

func TestVerifyFail(t *testing.T) {
	checksum, err := os.ReadFile("../../test/signing/checksums.txt")
	assert.NoError(t, err)

	signature, err := os.ReadFile("../../test/signing/checksums.txt.invalid.sig")
	assert.NoError(t, err)

	OK := validateSignature(checksum, signature)
	assert.False(t, OK)
}



================================================
FILE: src/color/colors.go
================================================
package color

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/gookit/color"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

var TrueColor = true

// String is the interface that wraps ToColor method.
//
// ToColor gets the ANSI color code for a given color string.
// This can include a valid hex color in the format `#FFFFFF`,
// but also a name of one of the first 16 ANSI colors like `lightBlue`.
type String interface {
	ToAnsi(colorString Ansi, isBackground bool) Ansi
	Resolve(colorString Ansi) (Ansi, error)
}

type Set struct {
	Background Ansi `json:"background" toml:"background" yaml:"background"`
	Foreground Ansi `json:"foreground" toml:"foreground" yaml:"foreground"`
}

func (c *Set) String() string {
	return fmt.Sprintf("%s|%s", c.Foreground, c.Background)
}

func (c *Set) ParseString(colors string) {
	parts := strings.Split(colors, "|")
	if len(parts) != 2 {
		return
	}

	c.Foreground = Ansi(parts[0])
	c.Background = Ansi(parts[1])
}

type History []*Set

func (c *History) Len() int {
	return len(*c)
}

func (c *History) Add(background, foreground Ansi) {
	colors := &Set{
		Foreground: foreground,
		Background: background,
	}

	if c.Len() == 0 {
		*c = append(*c, colors)
		return
	}

	last := (*c)[c.Len()-1]
	// never add the same colors twice
	if last.Foreground == colors.Foreground && last.Background == colors.Background {
		return
	}

	*c = append(*c, colors)
}

func (c *History) Pop() {
	if c.Len() == 0 {
		return
	}

	*c = (*c)[:c.Len()-1]
}

func (c *History) Background() Ansi {
	if c.Len() == 0 {
		return emptyColor
	}

	return (*c)[c.Len()-1].Background
}

func (c *History) Foreground() Ansi {
	if c.Len() == 0 {
		return emptyColor
	}

	return (*c)[c.Len()-1].Foreground
}

// Ansi is an ANSI color code ready to be printed to the console.
// Example: "38;2;255;255;255", "48;2;255;255;255", "31", "95".
type Ansi string

const (
	emptyColor = Ansi("")
)

func (c Ansi) IsEmpty() bool {
	return c == emptyColor
}

func (c Ansi) IsTransparent() bool {
	return c == Transparent
}

func (c Ansi) IsClear() bool {
	return c == Transparent || c == emptyColor
}

func (c Ansi) ToForeground() Ansi {
	colorString := c.String()
	if strings.HasPrefix(colorString, "38;") {
		return Ansi(strings.Replace(colorString, "38;", "48;", 1))
	}
	return c
}

func (c Ansi) ResolveTemplate() Ansi {
	if c.IsEmpty() {
		return c
	}

	if c.IsTransparent() {
		return emptyColor
	}

	tmpl := &template.Text{
		Template: string(c),
		Context:  nil,
	}

	text, err := tmpl.Render()
	if err != nil {
		return Transparent
	}

	return Ansi(text)
}

func (c Ansi) String() string {
	return string(c)
}

func MakeColors(palette Palette, cacheEnabled bool, accentColor Ansi, env runtime.Environment) (colors String) {
	defaultColors := &Defaults{}
	defaultColors.SetAccentColor(env, accentColor)
	colors = defaultColors

	if palette != nil {
		colors = &PaletteColors{ansiColors: colors, palette: palette}
	}

	if cacheEnabled {
		colors = &Cached{ansiColors: colors}
	}

	return
}

func (d *Defaults) SetAccentColor(env runtime.Environment, defaultColor Ansi) {
	defer log.Trace(time.Now())

	// get accent color from session cache first
	if accent, OK := env.Session().Get("accent_color"); OK {
		accentColors := &Set{}
		accentColors.ParseString(accent)
		d.accent = accentColors
		return
	}

	rgb, err := GetAccentColor(env)
	if err != nil {
		d.accent = &Set{
			Foreground: d.ToAnsi(defaultColor, false),
			Background: d.ToAnsi(defaultColor, true),
		}

		return
	}

	if len(defaultColor) == 0 {
		return
	}

	foreground := color.RGB(rgb.R, rgb.G, rgb.B, false)
	background := color.RGB(rgb.R, rgb.G, rgb.B, true)

	d.accent = &Set{
		Foreground: Ansi(foreground.String()),
		Background: Ansi(background.String()),
	}

	env.Session().Set("accent_color", d.accent.String(), cache.INFINITE)
}

type RGB struct {
	R, G, B uint8
}

// Defaults is the default AnsiColors implementation.
type Defaults struct {
	accent *Set
}

var (
	// Map for color names and their respective foreground [0] or background [1] color codes
	ansiColorCodes = map[Ansi][2]Ansi{
		"black":        {"30", "40"},
		"red":          {"31", "41"},
		"green":        {"32", "42"},
		"yellow":       {"33", "43"},
		"blue":         {"34", "44"},
		"magenta":      {"35", "45"},
		"cyan":         {"36", "46"},
		"white":        {"37", "47"},
		"default":      {"39", "49"},
		"darkGray":     {"90", "100"},
		"lightRed":     {"91", "101"},
		"lightGreen":   {"92", "102"},
		"lightYellow":  {"93", "103"},
		"lightBlue":    {"94", "104"},
		"lightMagenta": {"95", "105"},
		"lightCyan":    {"96", "106"},
		"lightWhite":   {"97", "107"},
	}
)

const (
	foregroundIndex = 0
	backgroundIndex = 1
)

func (d *Defaults) ToAnsi(ansiColor Ansi, isBackground bool) Ansi {
	if len(ansiColor) == 0 {
		return emptyColor
	}

	if ansiColor.IsTransparent() {
		return ansiColor
	}

	if ansiColor == Accent {
		if d.accent == nil {
			return emptyColor
		}

		if isBackground {
			return d.accent.Background
		}

		return d.accent.Foreground
	}

	colorFromName, err := getAnsiColorFromName(ansiColor, isBackground)
	if err == nil {
		return colorFromName
	}

	colorString := ansiColor.String()

	if !strings.HasPrefix(colorString, "#") {
		val, err := strconv.ParseUint(colorString, 10, 64)
		if err != nil || val > 255 {
			return emptyColor
		}

		c256 := color.C256(uint8(val), isBackground)
		return Ansi(c256.String())
	}

	style := color.HEX(colorString, isBackground)
	if !style.IsEmpty() {
		if TrueColor {
			return Ansi(style.String())
		}

		return Ansi(style.C256().String())
	}

	if colorInt, err := strconv.ParseInt(colorString, 10, 8); err == nil {
		c := color.C256(uint8(colorInt), isBackground)

		return Ansi(c.String())
	}

	return emptyColor
}

func (d *Defaults) Resolve(colorString Ansi) (Ansi, error) {
	return colorString, nil
}

// getAnsiColorFromName returns the color code for a given color name if the name is
// known ANSI color name.
func getAnsiColorFromName(colorValue Ansi, isBackground bool) (Ansi, error) {
	if colorCodes, found := ansiColorCodes[colorValue]; found {
		if isBackground {
			return colorCodes[backgroundIndex], nil
		}

		return colorCodes[foregroundIndex], nil
	}

	return "", fmt.Errorf("color name %s does not exist", colorValue)
}

func IsAnsiColorName(colorValue Ansi) bool {
	_, ok := ansiColorCodes[colorValue]
	return ok
}

// PaletteColors is the AnsiColors Decorator that uses the Palette to do named color
// lookups before ANSI color code generation.
type PaletteColors struct {
	ansiColors String
	palette    Palette
}

func (p *PaletteColors) ToAnsi(colorString Ansi, isBackground bool) Ansi {
	paletteColor, err := p.palette.ResolveColor(colorString)
	if err != nil {
		return emptyColor
	}

	ansiColor := p.ansiColors.ToAnsi(paletteColor, isBackground)

	return ansiColor
}

func (p *PaletteColors) Resolve(colorString Ansi) (Ansi, error) {
	return p.palette.ResolveColor(colorString)
}

// Cached is the AnsiColors Decorator that does simple color lookup caching.
// ToColor calls are cheap, but not free, and having a simple cache in
// has measurable positive effect on performance.
type Cached struct {
	ansiColors String
	colorCache map[cachedColorKey]Ansi
}

type cachedColorKey struct {
	colorString  Ansi
	isBackground bool
}

func (c *Cached) ToAnsi(colorString Ansi, isBackground bool) Ansi {
	if c.colorCache == nil {
		c.colorCache = make(map[cachedColorKey]Ansi)
	}
	key := cachedColorKey{colorString, isBackground}
	if ansiColor, hit := c.colorCache[key]; hit {
		return ansiColor
	}
	ansiColor := c.ansiColors.ToAnsi(colorString, isBackground)
	c.colorCache[key] = ansiColor
	return ansiColor
}

func (c *Cached) Resolve(colorString Ansi) (Ansi, error) {
	return c.ansiColors.Resolve(colorString)
}



================================================
FILE: src/color/colors_darwin.go
================================================
package color

import (
	"errors"
	"strconv"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

func GetAccentColor(env runtime.Environment) (*RGB, error) {
	output, err := env.RunCommand("defaults", "read", "-g", "AppleAccentColor")
	if err != nil {
		log.Error(err)
		return nil, errors.New("unable to read accent color")
	}

	index, err := strconv.Atoi(output)
	if err != nil {
		log.Error(err)
		return nil, errors.New("unable to parse accent color index")
	}

	var accentColors = map[int]RGB{
		-1: {152, 152, 152}, // Graphite
		0:  {224, 55, 62},   // Red
		1:  {247, 130, 25},  // Orange
		2:  {255, 199, 38},  // Yellow
		3:  {96, 186, 70},   // Green
		4:  {0, 122, 255},   // Blue
		5:  {149, 61, 150},  // Purple
		6:  {247, 79, 159},  // Pink
	}

	color, exists := accentColors[index]
	if !exists {
		color = accentColors[6] // Default to graphite (white)
	}

	return &color, nil
}



================================================
FILE: src/color/colors_test.go
================================================
package color

import (
	"errors"
	"testing"

	"github.com/alecthomas/assert"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

func TestGetAnsiFromColorString(t *testing.T) {
	cases := []struct {
		Case       string
		Expected   Ansi
		Color      Ansi
		Background bool
		Color256   bool
	}{
		{Case: "256 color", Expected: Ansi("38;5;99"), Color: "99", Background: false},
		{Case: "256 color", Expected: Ansi("38;5;122"), Color: "122", Background: false},
		{Case: "Invalid background", Expected: emptyColor, Color: "invalid", Background: true},
		{Case: "Invalid background", Expected: emptyColor, Color: "invalid", Background: false},
		{Case: "Hex foreground", Expected: Ansi("38;2;170;187;204"), Color: "#AABBCC", Background: false},
		{Case: "Hex background", Expected: Ansi("48;2;170;187;204"), Color: "#AABBCC", Background: true},
		{Case: "Base 8 foreground", Expected: Ansi("31"), Color: "red", Background: false},
		{Case: "Base 8 background", Expected: Ansi("41"), Color: "red", Background: true},
		{Case: "Base 16 foreground", Expected: Ansi("91"), Color: "lightRed", Background: false},
		{Case: "Base 16 background", Expected: Ansi("101"), Color: "lightRed", Background: true},
		{Case: "Non true color TERM", Expected: Ansi("38;5;146"), Color: "#AABBCC", Color256: true},
	}
	for _, tc := range cases {
		ansiColors := &Defaults{}
		TrueColor = !tc.Color256
		ansiColor := ansiColors.ToAnsi(tc.Color, tc.Background)
		assert.Equal(t, tc.Expected, ansiColor, tc.Case)
	}
}

func TestMakeColors(t *testing.T) {
	env := &mock.Environment{}

	c := &cache_.Cache{}
	c.On("Get", "accent_color").Return("", true)
	env.On("Session").Return(c)

	env.On("WindowsRegistryKeyValue", `HKEY_CURRENT_USER\Software\Microsoft\Windows\DWM\ColorizationColor`).Return(&runtime.WindowsRegistryValue{}, errors.New("err"))
	colors := MakeColors(nil, false, "", env)
	assert.IsType(t, &Defaults{}, colors)

	colors = MakeColors(nil, true, "", env)
	assert.IsType(t, &Cached{}, colors)
	assert.IsType(t, &Defaults{}, colors.(*Cached).ansiColors)

	colors = MakeColors(testPalette, false, "", env)
	assert.IsType(t, &PaletteColors{}, colors)
	assert.IsType(t, &Defaults{}, colors.(*PaletteColors).ansiColors)

	colors = MakeColors(testPalette, true, "", env)
	assert.IsType(t, &Cached{}, colors)
	assert.IsType(t, &PaletteColors{}, colors.(*Cached).ansiColors)
	assert.IsType(t, &Defaults{}, colors.(*Cached).ansiColors.(*PaletteColors).ansiColors)
}

func TestAnsiRender(t *testing.T) {
	cases := []struct {
		Case     string
		Expected Ansi
		Term     string
	}{
		{Case: "Inside vscode", Expected: "#123456", Term: "vscode"},
		{Case: "Outside vscode", Expected: "", Term: "windowsterminal"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", "TERM_PROGRAM").Return(tc.Term)
		env.On("Shell").Return("foo")

		template.Cache = new(cache.Template)
		template.Init(env, nil, nil)

		ansi := Ansi("{{ if eq \"vscode\" .Env.TERM_PROGRAM }}#123456{{end}}")
		got := ansi.ResolveTemplate()

		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/color/colors_unix.go
================================================
//go:build !windows && !darwin

package color

import "github.com/jandedobbeleer/oh-my-posh/src/runtime"

func GetAccentColor(_ runtime.Environment) (*RGB, error) {
	return nil, &runtime.NotImplemented{}
}



================================================
FILE: src/color/colors_windows.go
================================================
package color

import (
	"errors"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

func GetAccentColor(env runtime.Environment) (*RGB, error) {
	defer log.Trace(time.Now())

	if env == nil {
		return nil, errors.New("unable to get color without environment")
	}

	// see https://stackoverflow.com/questions/3560890/vista-7-how-to-get-glass-color
	value, err := env.WindowsRegistryKeyValue(`HKEY_CURRENT_USER\Software\Microsoft\Windows\DWM\ColorizationColor`)
	if err != nil || value.ValueType != runtime.DWORD {
		return nil, err
	}

	return &RGB{
		R: byte(value.DWord >> 16),
		G: byte(value.DWord >> 8),
		B: byte(value.DWord),
	}, nil
}



================================================
FILE: src/color/cycle.go
================================================
package color

type Cycle []*Set

func (c Cycle) Loop() (*Set, Cycle) {
	if len(c) == 0 {
		return nil, c
	}
	return c[0], append(c[1:], c[0])
}



================================================
FILE: src/color/keywords.go
================================================
package color

const (
	// Transparent implies a transparent color
	Transparent Ansi = "transparent"
	// Accent is the OS accent color
	Accent Ansi = "accent"
	// ParentBackground takes the previous segment's background color
	ParentBackground Ansi = "parentBackground"
	// ParentForeground takes the previous segment's color
	ParentForeground Ansi = "parentForeground"
	// Background takes the current segment's background color
	Background Ansi = "background"
	// Foreground takes the current segment's foreground color
	Foreground Ansi = "foreground"
)

func (color Ansi) isKeyword() bool {
	switch color { //nolint: exhaustive
	case Transparent, ParentBackground, ParentForeground, Background, Foreground:
		return true
	default:
		return false
	}
}

func (color Ansi) Resolve(current *Set, parents []*Set) Ansi {
	resolveParentColor := func(keyword Ansi) Ansi {
		for _, parentColor := range parents {
			if parentColor == nil {
				return Transparent
			}

			switch keyword { //nolint: exhaustive
			case ParentBackground:
				keyword = parentColor.Background
			case ParentForeground:
				keyword = parentColor.Foreground
			default:
				if len(keyword) == 0 {
					return Transparent
				}
				return keyword
			}
		}

		if len(keyword) == 0 {
			return Transparent
		}

		return keyword
	}

	resolveKeyword := func(keyword Ansi) Ansi {
		switch {
		case keyword == Background && current != nil:
			return current.Background
		case keyword == Foreground && current != nil:
			return current.Foreground
		case (keyword == ParentBackground || keyword == ParentForeground) && parents != nil:
			return resolveParentColor(keyword)
		default:
			return Transparent
		}
	}

	for color.isKeyword() {
		resolved := resolveKeyword(color)
		if resolved == color {
			break
		}

		color = resolved
	}

	return color
}



================================================
FILE: src/color/palette.go
================================================
package color

import (
	"fmt"
	"sort"
	"strings"
)

type Palette map[Ansi]Ansi

const (
	paletteKeyPrefix         = "p:"
	paletteKeyError          = "palette: requested color %s does not exist in palette of colors %s"
	paletteMaxRecursionDepth = 3 // allows 3 or less recursive resolutions
	paletteRecursiveKeyError = "palette: recursive resolution of color %s returned palette reference %s and reached recursion depth %d"
)

// ResolveColor gets a color value from the palette using given colorName.
// If colorName is not a palette reference, it is returned as is.
func (p Palette) ResolveColor(colorName Ansi) (Ansi, error) {
	return p.resolveColor(colorName, 1, &colorName)
}

// originalColorName is a pointer to save allocations
func (p Palette) resolveColor(colorName Ansi, depth int, originalColorName *Ansi) (Ansi, error) {
	key, ok := asPaletteKey(colorName)
	// colorName is not a palette key, return it as is
	if !ok {
		return colorName, nil
	}

	color, ok := p[key]
	if !ok {
		return "", &PaletteKeyError{Key: key, palette: p}
	}

	if _, isKey := isPaletteKey(color); isKey {
		if depth > paletteMaxRecursionDepth {
			return "", &PaletteRecursiveKeyError{Key: *originalColorName, Value: color, depth: depth}
		}

		return p.resolveColor(color, depth+1, originalColorName)
	}

	return color, nil
}

func asPaletteKey(colorName Ansi) (Ansi, bool) {
	prefix, isKey := isPaletteKey(colorName)
	if !isKey {
		return "", false
	}

	key := strings.TrimPrefix(colorName.String(), prefix.String())

	return Ansi(key), true
}

func isPaletteKey(colorName Ansi) (Ansi, bool) {
	return paletteKeyPrefix, strings.HasPrefix(colorName.String(), paletteKeyPrefix)
}

// PaletteKeyError records the missing Palette key.
type PaletteKeyError struct {
	palette Palette
	Key     Ansi
}

func (p *PaletteKeyError) Error() string {
	keys := make([]string, 0, len(p.palette))
	for key := range p.palette {
		keys = append(keys, key.String())
	}
	sort.Strings(keys)
	allColors := strings.Join(keys, ",")
	errorStr := fmt.Sprintf(paletteKeyError, p.Key, allColors)
	return errorStr
}

// PaletteRecursiveKeyError records the Palette key and resolved color value (which
// is also a Palette key)
type PaletteRecursiveKeyError struct {
	Key   Ansi
	Value Ansi
	depth int
}

func (p *PaletteRecursiveKeyError) Error() string {
	errorStr := fmt.Sprintf(paletteRecursiveKeyError, p.Key, p.Value, p.depth)
	return errorStr
}

// MaybeResolveColor wraps resolveColor and silences possible errors, returning
// Transparent color by default, as a Block does not know how to handle color errors.
func (p Palette) MaybeResolveColor(colorName Ansi) Ansi {
	color, err := p.ResolveColor(colorName)
	if err != nil {
		return ""
	}

	return color
}



================================================
FILE: src/color/palette_test.go
================================================
package color

import (
	"testing"

	"github.com/alecthomas/assert"
)

var (
	testPalette = Palette{
		"red":   "#FF0000",
		"green": "#00FF00",
		"blue":  "#0000FF",
		"white": "#FFFFFF",
		"black": "#000000",
	}
)

type TestPaletteRequest struct {
	Case          string
	Request       Ansi
	Expected      Ansi
	ExpectedError bool
}

func TestPaletteShouldResolveColorFromTestPalette(t *testing.T) {
	cases := []TestPaletteRequest{
		{Case: "Palette red", Request: "p:red", Expected: "#FF0000"},
		{Case: "Palette green", Request: "p:green", Expected: "#00FF00"},
		{Case: "Palette blue", Request: "p:blue", Expected: "#0000FF"},
		{Case: "Palette white", Request: "p:white", Expected: "#FFFFFF"},
		{Case: "Palette black", Request: "p:black", Expected: "#000000"},
	}

	for _, tc := range cases {
		testPaletteRequest(t, tc)
	}
}

func testPaletteRequest(t *testing.T, tc TestPaletteRequest) {
	actual, err := testPalette.ResolveColor(tc.Request)

	if !tc.ExpectedError {
		assert.Nil(t, err, tc.Case)
		assert.Equal(t, tc.Expected, actual, "expected different color value")
	} else {
		assert.NotNil(t, err, tc.Case)
		assert.Equal(t, string(tc.Expected), err.Error())
	}
}

func TestPaletteShouldIgnoreNonPaletteColors(t *testing.T) {
	cases := []TestPaletteRequest{
		{Case: "Deep puprple", Request: "#1F1137", Expected: "#1F1137"},
		{Case: "Light red", Request: "#D55252", Expected: "#D55252"},
		{Case: "ANSI black", Request: "black", Expected: "black"},
		{Case: "Foreground", Request: "foreground", Expected: "foreground"},
	}

	for _, tc := range cases {
		testPaletteRequest(t, tc)
	}
}

func TestPaletteShouldReturnErrorOnMissingColor(t *testing.T) {
	cases := []TestPaletteRequest{
		{
			Case:          "Palette deep purple",
			Request:       "p:deep-purple",
			ExpectedError: true,
			Expected:      "palette: requested color deep-purple does not exist in palette of colors black,blue,green,red,white",
		},
		{
			Case:          "Palette cyan",
			Request:       "p:cyan",
			ExpectedError: true,
			Expected:      "palette: requested color cyan does not exist in palette of colors black,blue,green,red,white",
		},
		{
			Case:          "Palette foreground",
			Request:       "p:foreground",
			ExpectedError: true,
			Expected:      "palette: requested color foreground does not exist in palette of colors black,blue,green,red,white",
		},
	}

	for _, tc := range cases {
		testPaletteRequest(t, tc)
	}
}

func TestPaletteShouldHandleMixedCases(t *testing.T) {
	cases := []TestPaletteRequest{
		{Case: "Palette red", Request: "p:red", Expected: "#FF0000"},
		{Case: "ANSI black", Request: "black", Expected: "black"},
		{Case: "Cyan", Request: "#05E6FA", Expected: "#05E6FA"},
		{Case: "Palette black", Request: "p:black", Expected: "#000000"},
		{Case: "Palette pink", Request: "p:pink", ExpectedError: true, Expected: "palette: requested color pink does not exist in palette of colors black,blue,green,red,white"},
	}

	for _, tc := range cases {
		testPaletteRequest(t, tc)
	}
}

func TestPaletteShouldUseEmptyColorByDefault(t *testing.T) {
	cases := []TestPaletteRequest{
		{Case: "Palette magenta", Request: "p:magenta", Expected: ""},
		{Case: "Palette gray", Request: "p:gray", Expected: ""},
		{Case: "Palette rose", Request: "p:rose", Expected: ""},
	}

	for _, tc := range cases {
		actual := testPalette.MaybeResolveColor(tc.Request)

		assert.Equal(t, tc.Expected, actual, "expected different color value")
	}
}

func TestPaletteShouldResolveRecursiveReference(t *testing.T) {
	tp := Palette{
		"light-blue": "#CAF0F8",
		"dark-blue":  "#023E8A",
		"foreground": "p:light-blue",
		"background": "p:dark-blue",
		"text":       "p:foreground",
		"icon":       "p:background",
		"void":       "p:void", // infinite recursion - error
		"1":          "white",
		"2":          "p:1",
		"3":          "p:2",
		"4":          "p:3", // 3 recursive lookups - allowed
		"5":          "p:4", // 4 recursive lookups - error
	}

	cases := []TestPaletteRequest{
		{
			Case:     "Palette light-blue",
			Request:  "p:light-blue",
			Expected: "#CAF0F8",
		},
		{
			Case:     "Palette foreground",
			Request:  "p:foreground",
			Expected: "#CAF0F8",
		},
		{
			Case:     "Palette background",
			Request:  "p:background",
			Expected: "#023E8A",
		},
		{
			Case:     "Palette text (2 recursive lookups)",
			Request:  "p:text",
			Expected: "#CAF0F8",
		},
		{
			Case:     "Palette icon (2 recursive lookups)",
			Request:  "p:icon",
			Expected: "#023E8A",
		},
		{
			Case:          "Palette void (infinite recursion)",
			Request:       "p:void",
			ExpectedError: true,
			Expected:      "palette: recursive resolution of color p:void returned palette reference p:void and reached recursion depth 4",
		},
		{
			Case:     "Palette p:4 (3 recursive lookups)",
			Request:  "p:4",
			Expected: "white",
		},
		{
			Case:          "Palette p:5 (4 recursive lookups)",
			Request:       "p:5",
			ExpectedError: true,
			Expected:      "palette: recursive resolution of color p:5 returned palette reference p:1 and reached recursion depth 4",
		},
	}

	for _, tc := range cases {
		actual, err := tp.ResolveColor(tc.Request)

		if !tc.ExpectedError {
			assert.Nil(t, err, "expected no error")
			assert.Equal(t, tc.Expected, actual, "expected different color value")
		} else {
			assert.NotNil(t, err, "expected error")
			assert.Equal(t, string(tc.Expected), err.Error())
		}
	}
}

func TestPaletteShouldHandleEmptyKey(t *testing.T) {
	tp := Palette{
		"": "#000000",
	}

	actual, err := tp.ResolveColor("p:")

	assert.Nil(t, err, "expected no error")
	assert.Equal(t, Ansi("#000000"), actual, "expected different color value")
}

func BenchmarkPaletteMixedCaseResolution(b *testing.B) {
	for b.Loop() {
		benchmarkPaletteMixedCaseResolution()
	}
}

func benchmarkPaletteMixedCaseResolution() {
	cases := []TestPaletteRequest{
		{Case: "Palette red", Request: "p:red", Expected: "#FF0000"},
		{Case: "ANSI black", Request: "black", Expected: "black"},
		{Case: "Cyan", Request: "#05E6FA", Expected: "#05E6FA"},
		{Case: "Palette black", Request: "p:black", Expected: "#000000"},
		{Case: "Palette pink", Request: "p:pink", ExpectedError: true, Expected: "palette: requested color pink does not exist in palette of colors black,blue,green,red,white"},
		{Case: "Palette blue", Request: "p:blue", Expected: "#0000FF"},
		// repeating the same set to have longer benchmarks
		{Case: "Palette red", Request: "p:red", Expected: "#FF0000"},
		{Case: "ANSI black", Request: "black", Expected: "black"},
		{Case: "Cyan", Request: "#05E6FA", Expected: "#05E6FA"},
		{Case: "Palette black", Request: "p:black", Expected: "#000000"},
		{Case: "Palette pink", Request: "p:pink", ExpectedError: true, Expected: "palette: requested color pink does not exist in palette of colors black,blue,green,red,white"},
		{Case: "Palette blue", Request: "p:blue", Expected: "#0000FF"},
	}

	for _, tc := range cases {
		// both value and error values are irrelevant, but such assignment calms down
		// golangci-lint "return value of `testPalette.ResolveColor` is not checked" error
		_, _ = testPalette.ResolveColor(tc.Request)
	}
}



================================================
FILE: src/color/palettes.go
================================================
package color

type Palettes struct {
	List     map[string]Palette `json:"list,omitempty" toml:"list,omitempty" yaml:"list,omitempty"`
	Template string             `json:"template,omitempty" toml:"template,omitempty" yaml:"template,omitempty"`
}



================================================
FILE: src/config/backup.go
================================================
package config

import (
	"bytes"
	"io"
	"os"
	"strings"

	json "github.com/goccy/go-json"
	toml "github.com/pelletier/go-toml/v2"
	yaml "gopkg.in/yaml.v3"
)

func (cfg *Config) Backup() {
	dst := cfg.origin + ".bak"
	source, err := os.Open(cfg.origin)
	if err != nil {
		return
	}
	defer source.Close()
	destination, err := os.Create(dst)
	if err != nil {
		return
	}
	defer destination.Close()
	_, err = io.Copy(destination, source)
	if err != nil {
		return
	}
}

func (cfg *Config) Export(format string) string {
	if len(format) != 0 {
		cfg.Format = format
	}

	var result bytes.Buffer

	switch cfg.Format {
	case YAML:
		prefix := "# yaml-language-server: $schema=https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json\n\n"
		yamlEncoder := yaml.NewEncoder(&result)

		err := yamlEncoder.Encode(cfg)
		if err != nil {
			return ""
		}

		return prefix + result.String()
	case JSON:
		jsonEncoder := json.NewEncoder(&result)
		jsonEncoder.SetEscapeHTML(false)
		jsonEncoder.SetIndent("", "  ")
		_ = jsonEncoder.Encode(cfg)
		prefix := "{\n  \"$schema\": \"https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json\","
		data := strings.Replace(result.String(), "{", prefix, 1)
		return escapeGlyphs(data, cfg.MigrateGlyphs)
	case TOML:
		tomlEncoder := toml.NewEncoder(&result)
		tomlEncoder.SetIndentTables(true)

		err := tomlEncoder.Encode(cfg)
		if err != nil {
			return ""
		}

		return result.String()
	}

	// unsupported format
	return ""
}

func (cfg *Config) BackupAndMigrate() {
	cfg.Backup()
	cfg.Migrate()
	cfg.Write(cfg.Format)
}

func (cfg *Config) Write(format string) {
	content := cfg.Export(format)
	if len(content) == 0 {
		// we are unable to perform the export
		return
	}

	destination := cfg.Output
	if len(destination) == 0 {
		destination = cfg.origin
	}

	f, err := os.OpenFile(destination, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return
	}

	defer func() {
		_ = f.Close()
	}()

	_, err = f.WriteString(content)
	if err != nil {
		return
	}
}



================================================
FILE: src/config/block.go
================================================
package config

// BlockType type of block
type BlockType string

// BlockAlignment aligment of a Block
type BlockAlignment string

// Overflow defines how to handle a right block that overflows with the previous block
type Overflow string

const (
	// Prompt writes one or more Segments
	Prompt BlockType = "prompt"
	// RPrompt is a right aligned prompt
	RPrompt BlockType = "rprompt"
	// Left aligns left
	Left BlockAlignment = "left"
	// Right aligns right
	Right BlockAlignment = "right"
	// Break adds a line break
	Break Overflow = "break"
	// Hide hides the block
	Hide Overflow = "hide"
)

// Block defines a part of the prompt with optional segments
type Block struct {
	Type            BlockType      `json:"type,omitempty" toml:"type,omitempty" yaml:"type,omitempty"`
	Alignment       BlockAlignment `json:"alignment,omitempty" toml:"alignment,omitempty" yaml:"alignment,omitempty"`
	Filler          string         `json:"filler,omitempty" toml:"filler,omitempty" yaml:"filler,omitempty"`
	Overflow        Overflow       `json:"overflow,omitempty" toml:"overflow,omitempty" yaml:"overflow,omitempty"`
	LeadingDiamond  string         `json:"leading_diamond,omitempty" toml:"leading_diamond,omitempty" yaml:"leading_diamond,omitempty"`
	TrailingDiamond string         `json:"trailing_diamond,omitempty" toml:"trailing_diamond,omitempty" yaml:"trailing_diamond,omitempty"`
	Segments        []*Segment     `json:"segments,omitempty" toml:"segments,omitempty" yaml:"segments,omitempty"`
	MaxWidth        int            `json:"max_width,omitempty" toml:"max_width,omitempty" yaml:"max_width,omitempty"`
	MinWidth        int            `json:"min_width,omitempty" toml:"min_width,omitempty" yaml:"min_width,omitempty"`
	Newline         bool           `json:"newline,omitempty" toml:"newline,omitempty" yaml:"newline,omitempty"`
	Force           bool           `json:"force,omitempty" toml:"force,omitempty" yaml:"force,omitempty"`
}



================================================
FILE: src/config/config.go
================================================
package config

import (
	"slices"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/cli/upgrade"
	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/segments"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

const (
	JSON string = "json"
	YAML string = "yaml"
	TOML string = "toml"

	AUTOUPGRADE   = "upgrade"
	UPGRADENOTICE = "notice"

	Version = 3
)

type Action string

func (a Action) IsDefault() bool {
	return a != Prepend && a != Extend
}

const (
	Prepend Action = "prepend"
	Extend  Action = "extend"
)

// Config holds all the theme for rendering the prompt
type Config struct {
	Palette                 color.Palette   `json:"palette,omitempty" toml:"palette,omitempty" yaml:"palette,omitempty"`
	DebugPrompt             *Segment        `json:"debug_prompt,omitempty" toml:"debug_prompt,omitempty" yaml:"debug_prompt,omitempty"`
	Var                     map[string]any  `json:"var,omitempty" toml:"var,omitempty" yaml:"var,omitempty"`
	Palettes                *color.Palettes `json:"palettes,omitempty" toml:"palettes,omitempty" yaml:"palettes,omitempty"`
	ValidLine               *Segment        `json:"valid_line,omitempty" toml:"valid_line,omitempty" yaml:"valid_line,omitempty"`
	SecondaryPrompt         *Segment        `json:"secondary_prompt,omitempty" toml:"secondary_prompt,omitempty" yaml:"secondary_prompt,omitempty"`
	TransientPrompt         *Segment        `json:"transient_prompt,omitempty" toml:"transient_prompt,omitempty" yaml:"transient_prompt,omitempty"`
	ErrorLine               *Segment        `json:"error_line,omitempty" toml:"error_line,omitempty" yaml:"error_line,omitempty"`
	Maps                    *maps.Config    `json:"maps,omitempty" toml:"maps,omitempty" yaml:"maps,omitempty"`
	Upgrade                 *upgrade.Config `json:"upgrade,omitempty" toml:"upgrade,omitempty" yaml:"upgrade,omitempty"`
	Format                  string          `json:"-" toml:"-" yaml:"-"`
	AccentColor             color.Ansi      `json:"accent_color,omitempty" toml:"accent_color,omitempty" yaml:"accent_color,omitempty"`
	Output                  string          `json:"-" toml:"-" yaml:"-"`
	ConsoleTitleTemplate    string          `json:"console_title_template,omitempty" toml:"console_title_template,omitempty" yaml:"console_title_template,omitempty"`
	PWD                     string          `json:"pwd,omitempty" toml:"pwd,omitempty" yaml:"pwd,omitempty"`
	origin                  string
	TerminalBackground      color.Ansi             `json:"terminal_background,omitempty" toml:"terminal_background,omitempty" yaml:"terminal_background,omitempty"`
	Tooltips                []*Segment             `json:"tooltips,omitempty" toml:"tooltips,omitempty" yaml:"tooltips,omitempty"`
	ToolTipsAction          Action                 `json:"tooltips_action,omitempty" toml:"tooltips_action,omitempty" yaml:"tooltips_action,omitempty"`
	Blocks                  []*Block               `json:"blocks,omitempty" toml:"blocks,omitempty" yaml:"blocks,omitempty"`
	ITermFeatures           terminal.ITermFeatures `json:"iterm_features,omitempty" toml:"iterm_features,omitempty" yaml:"iterm_features,omitempty"`
	Cycle                   color.Cycle            `json:"cycle,omitempty" toml:"cycle,omitempty" yaml:"cycle,omitempty"`
	Version                 int                    `json:"version" toml:"version" yaml:"version"`
	AutoUpgrade             bool                   `json:"-" toml:"-" yaml:"-"`
	ShellIntegration        bool                   `json:"shell_integration,omitempty" toml:"shell_integration,omitempty" yaml:"shell_integration,omitempty"`
	MigrateGlyphs           bool                   `json:"-" toml:"-" yaml:"-"`
	PatchPwshBleed          bool                   `json:"patch_pwsh_bleed,omitempty" toml:"patch_pwsh_bleed,omitempty" yaml:"patch_pwsh_bleed,omitempty"`
	EnableCursorPositioning bool                   `json:"enable_cursor_positioning,omitempty" toml:"enable_cursor_positioning,omitempty" yaml:"enable_cursor_positioning,omitempty"`
	Async                   bool                   `json:"async,omitempty" toml:"async,omitempty" yaml:"async,omitempty"`
	FinalSpace              bool                   `json:"final_space,omitempty" toml:"final_space,omitempty" yaml:"final_space,omitempty"`
	UpgradeNotice           bool                   `json:"-" toml:"-" yaml:"-"`
	updated                 bool
}

func (cfg *Config) MakeColors(env runtime.Environment) color.String {
	cacheDisabled := env.Getenv("OMP_CACHE_DISABLED") == "1"
	return color.MakeColors(cfg.getPalette(), !cacheDisabled, cfg.AccentColor, env)
}

func (cfg *Config) getPalette() color.Palette {
	if cfg.Palettes == nil {
		return cfg.Palette
	}

	tmpl := &template.Text{
		Template: cfg.Palettes.Template,
	}

	key, err := tmpl.Render()
	if err != nil {
		return cfg.Palette
	}

	palette, ok := cfg.Palettes.List[key]
	if !ok {
		return cfg.Palette
	}

	for key, color := range cfg.Palette {
		if _, ok := palette[key]; ok {
			continue
		}

		palette[key] = color
	}

	return palette
}

func (cfg *Config) Features(env runtime.Environment) shell.Features {
	var feats shell.Features

	asyncShells := []string{shell.BASH, shell.ZSH, shell.FISH, shell.PWSH, shell.PWSH5}

	if cfg.Async && slices.Contains(asyncShells, env.Shell()) {
		log.Debug("async enabled")
		feats = append(feats, shell.Async)
	}

	if cfg.TransientPrompt != nil {
		log.Debug("transient prompt enabled")
		feats = append(feats, shell.Transient)
	}

	if cfg.ShellIntegration {
		log.Debug("shell integration enabled")
		feats = append(feats, shell.FTCSMarks)
	}

	// do not enable upgrade features when async is enabled
	if !slices.Contains(feats, shell.Async) {
		feats = append(feats, cfg.upgradeFeatures(env)...)
	}

	if cfg.ErrorLine != nil || cfg.ValidLine != nil {
		log.Debug("error or valid line enabled")
		feats = append(feats, shell.LineError)
	}

	if len(cfg.Tooltips) > 0 {
		log.Debug("tooltips enabled")
		feats = append(feats, shell.Tooltips)
	}

	if env.Shell() == shell.FISH && cfg.ITermFeatures != nil && cfg.ITermFeatures.Contains(terminal.PromptMark) {
		log.Debug("prompt mark enabled")
		feats = append(feats, shell.PromptMark)
	}

	for i, block := range cfg.Blocks {
		if (i == 0 && block.Newline) && cfg.EnableCursorPositioning {
			log.Debug("cursor positioning enabled")
			feats = append(feats, shell.CursorPositioning)
		}

		if block.Type == RPrompt {
			log.Debug("rprompt enabled")
			feats = append(feats, shell.RPrompt)
		}

		for _, segment := range block.Segments {
			if segment.Type == AZ {
				source := segment.Properties.GetString(segments.Source, segments.FirstMatch)
				if strings.Contains(source, segments.Pwsh) {
					log.Debug("azure enabled")
					feats = append(feats, shell.Azure)
				}
			}

			if segment.Type == GIT {
				source := segment.Properties.GetString(segments.Source, segments.Cli)
				if source == segments.Pwsh {
					log.Debug("posh-git enabled")
					feats = append(feats, shell.PoshGit)
				}
			}
		}
	}

	return feats
}

func (cfg *Config) upgradeFeatures(env runtime.Environment) shell.Features {
	feats := shell.Features{}

	if _, OK := env.Cache().Get(upgrade.CACHEKEY); OK && !cfg.Upgrade.Force {
		log.Debug("upgrade cache key found and not forced, skipping upgrade")
		return feats
	}

	autoUpgrade := cfg.Upgrade.Auto
	if _, OK := env.Cache().Get(AUTOUPGRADE); OK {
		log.Debug("auto upgrade key found")
		autoUpgrade = true
	}

	upgradeNotice := cfg.Upgrade.DisplayNotice
	if _, OK := env.Cache().Get(UPGRADENOTICE); OK {
		log.Debug("upgrade notice key found")
		upgradeNotice = true
	}

	if upgradeNotice && !autoUpgrade {
		log.Debug("notice enabled, no auto upgrade")
		feats = append(feats, shell.Notice)
	}

	if autoUpgrade {
		log.Debug("auto upgrade enabled")
		feats = append(feats, shell.Upgrade)
	}

	return feats
}



================================================
FILE: src/config/config_test.go
================================================
package config

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/upgrade"
	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
	mock_ "github.com/stretchr/testify/mock"
)

func TestGetPalette(t *testing.T) {
	palette := color.Palette{
		"red":  "#ff0000",
		"blue": "#0000ff",
	}

	cases := []struct {
		Palettes        *color.Palettes
		Palette         color.Palette
		ExpectedPalette color.Palette
		Case            string
	}{
		{
			Case: "match",
			Palettes: &color.Palettes{
				Template: "{{ .Shell }}",
				List: map[string]color.Palette{
					"bash": palette,
					"zsh": {
						"red":  "#ff0001",
						"blue": "#0000fb",
					},
				},
			},
			ExpectedPalette: palette,
		},
		{
			Case: "no match, no fallback",
			Palettes: &color.Palettes{
				Template: "{{ .Shell }}",
				List: map[string]color.Palette{
					"fish": palette,
					"zsh": {
						"red":  "#ff0001",
						"blue": "#0000fb",
					},
				},
			},
			ExpectedPalette: nil,
		},
		{
			Case: "no match, default",
			Palettes: &color.Palettes{
				Template: "{{ .Shell }}",
				List: map[string]color.Palette{
					"zsh": {
						"red":  "#ff0001",
						"blue": "#0000fb",
					},
				},
			},
			Palette:         palette,
			ExpectedPalette: palette,
		},
		{
			Case:            "no palettes",
			ExpectedPalette: nil,
		},
		{
			Case: "match, with override",
			Palettes: &color.Palettes{
				Template: "{{ .Shell }}",
				List: map[string]color.Palette{
					"bash": {
						"red":    "#ff0001",
						"yellow": "#ffff00",
					},
				},
			},
			Palette: palette,
			ExpectedPalette: color.Palette{
				"red":    "#ff0001",
				"blue":   "#0000ff",
				"yellow": "#ffff00",
			},
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		env.On("Shell").Return("bash")

		template.Cache = &cache.Template{
			Shell: "bash",
		}
		template.Init(env, nil, nil)

		cfg := &Config{
			Palette:  tc.Palette,
			Palettes: tc.Palettes,
		}

		got := cfg.getPalette()
		assert.Equal(t, tc.ExpectedPalette, got, tc.Case)
	}
}
func TestUpgradeFeatures(t *testing.T) {
	cases := []struct {
		Case                  string
		ExpectedFeats         shell.Features
		UpgradeCacheKeyExists bool
		AutoUpgrade           bool
		Force                 bool
		DisplayNotice         bool
		AutoUpgradeKey        bool
		NoticeKey             bool
	}{
		{
			Case:                  "cache exists, no force",
			UpgradeCacheKeyExists: true,
			ExpectedFeats:         shell.Features{},
		},
		{
			Case:          "auto upgrade enabled",
			AutoUpgrade:   true,
			ExpectedFeats: shell.Features{shell.Upgrade},
		},
		{
			Case:           "auto upgrade via cache",
			AutoUpgradeKey: true,
			ExpectedFeats:  shell.Features{shell.Upgrade},
		},
		{
			Case:          "notice enabled, no auto upgrade",
			DisplayNotice: true,
			ExpectedFeats: shell.Features{shell.Notice},
		},
		{
			Case:          "notice via cache, no auto upgrade",
			NoticeKey:     true,
			ExpectedFeats: shell.Features{shell.Notice},
		},
		{
			Case:                  "force upgrade ignores cache",
			UpgradeCacheKeyExists: true,
			Force:                 true,
			AutoUpgrade:           true,
			ExpectedFeats:         shell.Features{shell.Upgrade},
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		c := &cache_.Cache{}
		env.On("Cache").Return(c)

		if tc.UpgradeCacheKeyExists {
			c.On("Get", upgrade.CACHEKEY).Return("", true)
		} else {
			c.On("Get", upgrade.CACHEKEY).Return("", false)
		}

		c.On("Set", upgrade.CACHEKEY, "", mock_.Anything).Return()

		if tc.AutoUpgradeKey {
			c.On("Get", AUTOUPGRADE).Return("", true)
		} else {
			c.On("Get", AUTOUPGRADE).Return("", false)
		}

		if tc.NoticeKey {
			c.On("Get", UPGRADENOTICE).Return("", true)
		} else {
			c.On("Get", UPGRADENOTICE).Return("", false)
		}

		cfg := &Config{
			Upgrade: &upgrade.Config{
				Auto:          tc.AutoUpgrade,
				Force:         tc.Force,
				DisplayNotice: tc.DisplayNotice,
			},
		}

		got := cfg.upgradeFeatures(env)
		assert.Equal(t, tc.ExpectedFeats, got, tc.Case)
	}
}



================================================
FILE: src/config/default.go
================================================
package config

import (
	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/segments"
)

func Default(warning bool) *Config {
	exitBackgroundTemplate := "{{ if gt .Code 0 }}p:red{{ end }}"
	exitTemplate := " {{ if gt .Code 0 }}\uf00d{{ else }}\uf00c{{ end }} "

	if warning {
		exitBackgroundTemplate = "p:red"
		exitTemplate = " CONFIG ERROR "
	}

	cfg := &Config{
		Version:    3,
		FinalSpace: true,
		Blocks: []*Block{
			{
				Type:      Prompt,
				Alignment: Left,
				Segments: []*Segment{
					{
						Type:            SESSION,
						Style:           Diamond,
						LeadingDiamond:  "\ue0b6",
						TrailingDiamond: "\ue0b0",
						Foreground:      "p:black",
						Background:      "p:yellow",
						Template:        " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }} ",
					},
					{
						Type:            PATH,
						Style:           Powerline,
						PowerlineSymbol: "\ue0b0",
						Foreground:      "p:white",
						Background:      "p:orange",
						Properties: properties.Map{
							properties.Style: "folder",
						},
						Template: " \uea83 {{ path .Path .Location }} ",
					},
					{
						Type:            GIT,
						Style:           Powerline,
						PowerlineSymbol: "\ue0b0",
						Foreground:      "p:black",
						Background:      "p:green",
						BackgroundTemplates: []string{
							"{{ if or (.Working.Changed) (.Staging.Changed) }}p:yellow{{ end }}",
							"{{ if and (gt .Ahead 0) (gt .Behind 0) }}p:red{{ end }}",
							"{{ if gt .Ahead 0 }}#49416D{{ end }}",
							"{{ if gt .Behind 0 }}#7A306C{{ end }}",
						},
						ForegroundTemplates: []string{
							"{{ if or (.Working.Changed) (.Staging.Changed) }}p:black{{ end }}",
							"{{ if and (gt .Ahead 0) (gt .Behind 0) }}p:white{{ end }}",
							"{{ if gt .Ahead 0 }}p:white{{ end }}",
						},
						Properties: properties.Map{
							segments.BranchTemplate:    "{{ trunc 25 .Branch }}",
							segments.FetchStatus:       true,
							segments.FetchUpstreamIcon: true,
						},
						Template: " {{ if .UpstreamURL }}{{ url .UpstreamIcon .UpstreamURL }} {{ end }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }} ", //nolint:lll
					},
					{
						Type:            ROOT,
						Style:           Powerline,
						PowerlineSymbol: "\ue0b0",
						Foreground:      "p:white",
						Background:      "p:yellow",
						Template:        " \uf0e7 ",
					},
					{
						Type:            STATUS,
						Style:           Diamond,
						LeadingDiamond:  "<transparent,background>\ue0b0</>",
						TrailingDiamond: "\ue0b4",
						Foreground:      "p:white",
						Background:      "p:blue",
						BackgroundTemplates: []string{
							exitBackgroundTemplate,
						},
						Properties: properties.Map{
							properties.AlwaysEnabled: true,
						},
						Template: exitTemplate,
					},
				},
			},
			{
				Type: RPrompt,
				Segments: []*Segment{
					{
						Type:       NODE,
						Style:      Plain,
						Foreground: "p:green",
						Background: "transparent",
						Template:   "\ue718 ",
						Properties: properties.Map{
							segments.HomeEnabled:         false,
							segments.FetchPackageManager: false,
							segments.DisplayMode:         "files",
						},
					},
					{
						Type:       GOLANG,
						Style:      Plain,
						Foreground: "p:blue",
						Background: "transparent",
						Template:   "\ue626 ",
						Properties: properties.Map{
							properties.FetchVersion: false,
						},
					},
					{
						Type:       PYTHON,
						Style:      Plain,
						Foreground: "p:yellow",
						Background: "transparent",
						Template:   "\ue235 ",
						Properties: properties.Map{
							properties.FetchVersion:  false,
							segments.DisplayMode:     "files",
							segments.FetchVirtualEnv: false,
						},
					},
					{
						Type:       SHELL,
						Style:      Plain,
						Foreground: "p:white",
						Background: "transparent",
						Template:   "in <p:blue><b>{{ .Name }}</b></> ",
					},
					{
						Type:       TIME,
						Style:      Plain,
						Foreground: "p:white",
						Background: "transparent",
						Template:   "at <p:blue><b>{{ .CurrentDate | date \"15:04:05\" }}</b></>",
					},
				},
			},
		},
		ConsoleTitleTemplate: "{{ .Shell }} in {{ .Folder }}",
		Palette: color.Palette{
			"black":  "#262B44",
			"blue":   "#4B95E9",
			"green":  "#59C9A5",
			"orange": "#F07623",
			"red":    "#D81E5B",
			"white":  "#E0DEF4",
			"yellow": "#F3AE35",
		},
		SecondaryPrompt: &Segment{
			Foreground: "p:black",
			Background: "transparent",
			Template:   "<p:yellow,transparent>\ue0b6</><,p:yellow> > </><p:yellow,transparent>\ue0b0</> ",
		},
		TransientPrompt: &Segment{
			Foreground: "p:black",
			Background: "transparent",
			Template:   "<p:yellow,transparent>\ue0b6</><,p:yellow> {{ .Folder }} </><p:yellow,transparent>\ue0b0</> ",
		},
		Tooltips: []*Segment{
			{
				Type:            AWS,
				Style:           Diamond,
				LeadingDiamond:  "\ue0b0",
				TrailingDiamond: "\ue0b4",
				Foreground:      "p:white",
				Background:      "p:orange",
				Template:        " \ue7ad {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} ",
				Properties: properties.Map{
					properties.DisplayDefault: true,
				},
				Tips: []string{"aws"},
			},
			{
				Type:            AZ,
				Style:           Diamond,
				LeadingDiamond:  "\ue0b0",
				TrailingDiamond: "\ue0b4",
				Foreground:      "p:white",
				Background:      "p:blue",
				Template:        " \uebd8 {{ .Name }} ",
				Properties: properties.Map{
					properties.DisplayDefault: true,
				},
				Tips: []string{"az"},
			},
		},
	}

	return cfg
}



================================================
FILE: src/config/download.go
================================================
package config

import (
	"context"
	"fmt"
	"io"
	httplib "net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

func Download(cachePath, url string) (string, error) {
	defer log.Trace(time.Now(), cachePath, url)

	// some users use the blob url, we need to convert it to the raw url
	themeBlob := "https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/themes/"
	url = strings.Replace(url, themeBlob, "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/", 1)

	configPath, shouldUpdate := shouldUpdate(cachePath, url)
	if !shouldUpdate {
		return configPath, nil
	}

	log.Debug("downloading config from ", url, " to ", configPath)

	ctx, cncl := context.WithTimeout(context.Background(), time.Second*time.Duration(5))
	defer cncl()

	request, err := httplib.NewRequestWithContext(ctx, httplib.MethodGet, url, nil)
	if err != nil {
		log.Error(err)
		return "", err
	}

	response, err := http.HTTPClient.Do(request)
	if err != nil {
		log.Error(err)
		return "", err
	}

	defer response.Body.Close()

	if response.StatusCode != httplib.StatusOK {
		err := fmt.Errorf("unexpected status code: %d", response.StatusCode)
		log.Error(err)
		return "", err
	}

	if len(configPath) == 0 {
		configPath = formatConfigPath(url, response.Header.Get("Etag"), cachePath)
		log.Debug("config path not set yet, using ", configPath)
	}

	out, err := os.Create(configPath)
	if err != nil {
		log.Error(err)
		return "", err
	}

	defer out.Close()

	_, err = io.Copy(out, response.Body)
	if err != nil {
		log.Error(err)
		return "", err
	}

	log.Debug("config updated to ", configPath)

	return configPath, nil
}

func shouldUpdate(cachePath, url string) (string, bool) {
	defer log.Trace(time.Now(), cachePath, url)

	ctx, cncl := context.WithTimeout(context.Background(), time.Second*time.Duration(5))
	defer cncl()

	request, err := httplib.NewRequestWithContext(ctx, httplib.MethodHead, url, nil)
	if err != nil {
		log.Error(err)
		return "", true
	}

	response, err := http.HTTPClient.Do(request)
	if err != nil {
		log.Error(err)
		return "", true
	}

	defer response.Body.Close()

	etag := response.Header.Get("Etag")
	if len(etag) == 0 {
		log.Debug("no etag found, updating config")
		return "", true
	}

	configPath := formatConfigPath(url, etag, cachePath)

	_, err = os.Stat(configPath)
	if err != nil {
		log.Debug("configfile ", configPath, " doest not exist, updating config")
		return configPath, true
	}

	log.Debug("config found at", configPath, " skipping update")
	return configPath, false
}

func formatConfigPath(url, etag, cachePath string) string {
	ext := filepath.Ext(url)
	etag = strings.TrimLeft(etag, `W/`)
	etag = strings.Trim(etag, `"`)
	filename := fmt.Sprintf("config.%s.omp%s", etag, ext)
	return filepath.Join(cachePath, filename)
}



================================================
FILE: src/config/load.go
================================================
package config

import (
	"bytes"
	"fmt"
	"hash/fnv"
	"os"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/gookit/goutil/jsonutil"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/upgrade"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	json "github.com/goccy/go-json"
	toml "github.com/pelletier/go-toml/v2"
	yaml "gopkg.in/yaml.v3"
)

// Load returns the default configuration including possible user overrides
func Load(configFile, sh string, migrate bool) (*Config, string) {
	defer log.Trace(time.Now())

	cfg, hash := loadConfig(configFile)

	// only migrate automatically when the switch isn't set
	if !migrate && cfg.Version < Version {
		cfg.BackupAndMigrate()
	}

	if cfg.Upgrade == nil {
		cfg.Upgrade = &upgrade.Config{
			Source:        upgrade.CDN,
			DisplayNotice: cfg.UpgradeNotice,
			Auto:          cfg.AutoUpgrade,
			Interval:      cache.ONEWEEK,
		}
	}

	if cfg.Upgrade.Interval.IsEmpty() {
		cfg.Upgrade.Interval = cache.ONEWEEK
	}

	if !cfg.ShellIntegration {
		return cfg, hash
	}

	// bash  - ok
	// fish  - ok
	// pwsh  - ok
	// zsh   - ok
	// cmd   - ok, as of v1.4.25 (chrisant996/clink#457, fixed in chrisant996/clink@8a5d7ea)
	// nu    - built-in (and bugged) feature - nushell/nushell#5585, https://www.nushell.sh/blog/2022-08-16-nushell-0_67.html#shell-integration-fdncred-and-tyriar
	// elv   - broken OSC sequences
	// xonsh - broken OSC sequences
	switch sh {
	case shell.ELVISH, shell.XONSH, shell.NU:
		cfg.ShellIntegration = false
	}

	return cfg, hash
}

func Path(config string) string {
	defer log.Trace(time.Now())

	// if the config flag is set, we'll use that over POSH_THEME
	// in our internal shell logic, we'll always use the POSH_THEME
	// due to not using --config to set the configuration
	hasConfig := len(config) > 0

	if poshTheme := os.Getenv("POSH_THEME"); len(poshTheme) > 0 && !hasConfig {
		log.Debug("config set using POSH_THEME:", poshTheme)
		return poshTheme
	}

	if len(config) == 0 {
		return ""
	}

	if strings.HasPrefix(config, "https://") {
		filePath, err := Download(cache.Path(), config)
		if err != nil {
			log.Error(err)
			return ""
		}

		return filePath
	}

	isCygwin := func() bool {
		return runtime.GOOS == "windows" && len(os.Getenv("OSTYPE")) > 0
	}

	// Cygwin path always needs the full path as we're on Windows but not really.
	// Doing filepath actions will convert it to a Windows path and break the init script.
	if isCygwin() {
		log.Debug("cygwin detected, using full path for config")
		return config
	}

	configFile := path.ReplaceTildePrefixWithHomeDir(config)

	abs, err := filepath.Abs(configFile)
	if err != nil {
		log.Error(err)
		return filepath.Clean(configFile)
	}

	return abs
}

func loadConfig(configFile string) (*Config, string) {
	defer log.Trace(time.Now())

	const defaultHash = "default"

	if len(configFile) == 0 {
		log.Debug("no config file specified, using default")
		return Default(false), defaultHash
	}

	var cfg Config
	cfg.origin = configFile
	cfg.Format = strings.TrimPrefix(filepath.Ext(configFile), ".")

	data, err := os.ReadFile(configFile)
	if err != nil {
		log.Error(err)
		return Default(true), defaultHash
	}

	switch cfg.Format {
	case "yml", "yaml":
		cfg.Format = YAML
		err = yaml.Unmarshal(data, &cfg)
	case "jsonc", "json":
		cfg.Format = JSON

		str := jsonutil.StripComments(string(data))
		data = []byte(str)

		decoder := json.NewDecoder(bytes.NewReader(data))
		err = decoder.Decode(&cfg)
	case "toml", "tml":
		cfg.Format = TOML
		err = toml.Unmarshal(data, &cfg)
	default:
		err = fmt.Errorf("unsupported config file format: %s", cfg.Format)
	}

	if err != nil {
		log.Error(err)
		return Default(true), defaultHash
	}

	// Calculate FNV-1a hash of the raw config data
	data = append(data, []byte(configFile)...) // Include the file path in the hash to enable file modification detection
	hasher := fnv.New64a()
	hasher.Write(data)
	hash := strconv.FormatUint(hasher.Sum64(), 16)

	return &cfg, hash
}



================================================
FILE: src/config/migrate.go
================================================
package config

import (
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

const (
	includeFolders = properties.Property("include_folders")
	excludeFolders = properties.Property("exclude_folders")
	cacheTimeout   = properties.Property("cache_timeout")
)

func (cfg *Config) Migrate() {
	for _, block := range cfg.Blocks {
		for _, segment := range block.Segments {
			segment.migrate(cfg.Version)
		}
	}

	cfg.updated = true
	cfg.Version = Version
}

func (segment *Segment) migrate(version int) {
	// configs older than 2 are no longer supported
	if version != 2 {
		return
	}

	if segment.Properties == nil {
		segment.Properties = properties.Map{}
	}

	// Cache settings, the default is now 24h so we have to respect this being disabled previously
	if !segment.Properties.GetBool("cache_version", false) {
		segment.Properties[properties.CacheDuration] = cache.NONE
	}
	delete(segment.Properties, "cache_version")

	segment.IncludeFolders = segment.migrateFolders(includeFolders)
	segment.ExcludeFolders = segment.migrateFolders(excludeFolders)

	switch segment.Type { //nolint:exhaustive
	case UPGRADE:
		segment.timeoutToDuration()
	default:
		segment.timeoutToCache()
	}
}

func (segment *Segment) hasProperty(property properties.Property) bool {
	for key := range segment.Properties {
		if key == property {
			return true
		}
	}
	return false
}

func (segment *Segment) timeoutToCache() {
	if !segment.hasProperty(cacheTimeout) {
		return
	}

	timeout := segment.Properties.GetInt(cacheTimeout, 0)
	delete(segment.Properties, cacheTimeout)

	if timeout == 0 {
		return
	}

	segment.Cache = &cache.Config{
		Duration: cache.ToDuration(timeout * 60),
		Strategy: cache.Folder,
	}
}

func (segment *Segment) timeoutToDuration() {
	timeout := segment.Properties.GetInt(cacheTimeout, 0)
	delete(segment.Properties, cacheTimeout)

	if timeout == 0 {
		return
	}

	segment.Properties[properties.CacheDuration] = cache.ToDuration(timeout * 60)
}

func (segment *Segment) migrateFolders(property properties.Property) []string {
	if !segment.hasProperty(property) {
		return []string{}
	}

	array := segment.Properties.GetStringArray(property, []string{})
	delete(segment.Properties, property)

	return array
}



================================================
FILE: src/config/migrate_glyphs.go
================================================
package config

import (
	"context"
	"fmt"
	"io"
	httplib "net/http"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

type ConnectionError struct {
	reason string
}

func (f *ConnectionError) Error() string {
	return f.reason
}

type codePoints map[uint64]uint64

func getGlyphCodePoints() (codePoints, error) {
	var codePoints = make(codePoints)

	ctx, cncl := context.WithTimeout(context.Background(), time.Millisecond*time.Duration(5000))
	defer cncl()

	request, err := httplib.NewRequestWithContext(ctx, httplib.MethodGet, "https://ohmyposh.dev/codepoints.csv", nil)
	if err != nil {
		return codePoints, &ConnectionError{reason: err.Error()}
	}

	response, err := http.HTTPClient.Do(request)
	if err != nil {
		return codePoints, err
	}

	defer response.Body.Close()

	bytes, err := io.ReadAll(response.Body)
	if err != nil {
		return codePoints, err
	}

	lines := strings.SplitSeq(string(bytes), "\n")

	for line := range lines {
		fields := strings.Split(line, ",")
		if len(fields) < 2 {
			continue
		}

		oldGlyph, err := strconv.ParseUint(fields[0], 16, 32)
		if err != nil {
			continue
		}

		newGlyph, err := strconv.ParseUint(fields[1], 16, 32)
		if err != nil {
			continue
		}

		codePoints[oldGlyph] = newGlyph
	}

	return codePoints, nil
}

func escapeGlyphs(s string, migrate bool) string {
	shouldExclude := func(r rune) bool {
		if r < 0x1000 { // Basic Multilingual Plane
			return true
		}
		if r > 0x1F600 && r < 0x1F64F { // Emoticons
			return true
		}
		if r > 0x1F300 && r < 0x1F5FF { // Misc Symbols and Pictographs
			return true
		}
		if r > 0x1F680 && r < 0x1F6FF { // Transport and Map
			return true
		}
		if r > 0x2600 && r < 0x26FF { // Misc symbols
			return true
		}
		if r > 0x2700 && r < 0x27BF { // Dingbats
			return true
		}
		if r > 0xFE00 && r < 0xFE0F { // Variation Selectors
			return true
		}
		if r > 0x1F900 && r < 0x1F9FF { // Supplemental Symbols and Pictographs
			return true
		}
		if r > 0x1F1E6 && r < 0x1F1FF { // Flags
			return true
		}
		return false
	}

	var cp codePoints
	var err error
	if migrate {
		cp, err = getGlyphCodePoints()
		if err != nil {
			migrate = false
		}
	}

	var builder strings.Builder
	for _, r := range s {
		// exclude regular characters and emojis
		if shouldExclude(r) {
			builder.WriteRune(r)
			continue
		}

		if migrate {
			if val, OK := cp[uint64(r)]; OK {
				r = rune(val)
			}
		}

		if r > 0x10000 {
			// calculate surrogate pairs
			one := 0xd800 + (((r - 0x10000) >> 10) & 0x3ff)
			two := 0xdc00 + ((r - 0x10000) & 0x3ff)
			quoted := fmt.Sprintf("\\u%04x\\u%04x", one, two)
			builder.WriteString(quoted)
			continue
		}

		quoted := fmt.Sprintf("\\u%04x", r)
		builder.WriteString(quoted)
	}
	return builder.String()
}



================================================
FILE: src/config/migrate_glyphs_test.go
================================================
package config

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetCodePoints(t *testing.T) {
	codepoints, err := getGlyphCodePoints()
	if connectionError, ok := err.(*ConnectionError); ok {
		t.Log(connectionError.Error())
		return
	}
	assert.Equal(t, 1939, len(codepoints))
}

func TestEscapeGlyphs(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "󰉋", Expected: "\\udb80\\ude4b"},
		{Input: "a", Expected: "a"},
		{Input: "\ue0b4", Expected: "\\ue0b4"},
		{Input: "\ufd03", Expected: "\\ufd03"},
		{Input: "}", Expected: "}"},
		{Input: "🏚", Expected: "🏚"},
		{Input: "\U000F011B", Expected: "\\udb80\\udd1b"},
		{Input: "󰄛", Expected: "\\udb80\\udd1b"},
	}
	for _, tc := range cases {
		assert.Equal(t, tc.Expected, escapeGlyphs(tc.Input, false), tc.Input)
	}
}



================================================
FILE: src/config/migrate_test.go
================================================
package config

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"

	"github.com/stretchr/testify/assert"
)

func TestTimeoutToCache(t *testing.T) {
	cases := []struct {
		Expected *cache.Config
		Case     string
		Timeout  int
	}{
		{Case: "No timeout set"},
		{Case: "Timeout set to 0", Timeout: 0},
		{Case: "Timeout set to 10", Timeout: 10, Expected: &cache.Config{Duration: "10m0s", Strategy: cache.Folder}},
	}

	for _, tc := range cases {
		segment := &Segment{
			Properties: properties.Map{
				cacheTimeout: tc.Timeout,
			},
		}

		segment.timeoutToCache()
		assert.Equal(t, tc.Expected, segment.Cache, tc.Case)
	}
}

func TestMigrateFolders(t *testing.T) {
	cases := []struct {
		Case    string
		Folders []string
	}{
		{Case: "No folders set"},
		{Case: "Empty folders", Folders: []string{}},
		{Case: "Folders set", Folders: []string{"/super/secret/project"}},
	}

	for _, tc := range cases {
		segment := &Segment{
			Properties: properties.Map{
				excludeFolders: tc.Folders,
			},
		}

		got := segment.migrateFolders(excludeFolders)
		assert.Equal(t, tc.Folders, got, tc.Case)
	}
}



================================================
FILE: src/config/responsive.go
================================================
package config

import "github.com/jandedobbeleer/oh-my-posh/src/runtime"

func shouldHideForWidth(env runtime.Environment, minWidth, maxWidth int) bool {
	if maxWidth == 0 && minWidth == 0 {
		return false
	}
	width, err := env.TerminalWidth()
	if err != nil {
		return false
	}
	if minWidth > 0 && maxWidth > 0 {
		return width < minWidth || width > maxWidth
	}
	if maxWidth > 0 && width > maxWidth {
		return true
	}
	if minWidth > 0 && width < minWidth {
		return true
	}
	return false
}



================================================
FILE: src/config/responsive_test.go
================================================
package config

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestShouldHideForWidth(t *testing.T) {
	cases := []struct {
		Error    error
		Case     string
		MinWidth int
		MaxWidth int
		Width    int
		Expected bool
	}{
		{Case: "No settings"},
		{Case: "Min cols - hide", MinWidth: 10, Width: 9, Expected: true},
		{Case: "Min cols - show", MinWidth: 10, Width: 20, Expected: false},
		{Case: "Max cols - hide", MaxWidth: 10, Width: 11, Expected: true},
		{Case: "Max cols - show", MaxWidth: 10, Width: 8, Expected: false},
		{Case: "Min & Max cols - hide", MinWidth: 10, MaxWidth: 20, Width: 21, Expected: true},
		{Case: "Min & Max cols - hide 2", MinWidth: 10, MaxWidth: 20, Width: 8, Expected: true},
		{Case: "Min & Max cols - show", MinWidth: 10, MaxWidth: 20, Width: 11, Expected: false},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("TerminalWidth").Return(tc.Width, tc.Error)
		got := shouldHideForWidth(env, tc.MinWidth, tc.MaxWidth)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/config/segment.go
================================================
package config

import (
	"encoding/json"
	"fmt"
	"slices"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	c "golang.org/x/text/cases"
	"golang.org/x/text/language"
)

// SegmentStyle the style of segment, for more information, see the constants
type SegmentStyle string

func (s *SegmentStyle) resolve(context any) SegmentStyle {
	txtTemplate := &template.Text{
		Context: context,
	}

	txtTemplate.Template = string(*s)
	value, err := txtTemplate.Render()

	// default to Plain
	if err != nil || len(value) == 0 {
		return Plain
	}

	return SegmentStyle(value)
}

type Segment struct {
	writer                 SegmentWriter
	env                    runtime.Environment
	Properties             properties.Map `json:"properties,omitempty" toml:"properties,omitempty" yaml:"properties,omitempty"`
	Cache                  *cache.Config  `json:"cache,omitempty" toml:"cache,omitempty" yaml:"cache,omitempty"`
	Alias                  string         `json:"alias,omitempty" toml:"alias,omitempty" yaml:"alias,omitempty"`
	styleCache             SegmentStyle
	name                   string
	LeadingDiamond         string         `json:"leading_diamond,omitempty" toml:"leading_diamond,omitempty" yaml:"leading_diamond,omitempty"`
	TrailingDiamond        string         `json:"trailing_diamond,omitempty" toml:"trailing_diamond,omitempty" yaml:"trailing_diamond,omitempty"`
	Template               string         `json:"template,omitempty" toml:"template,omitempty" yaml:"template,omitempty"`
	Foreground             color.Ansi     `json:"foreground,omitempty" toml:"foreground,omitempty" yaml:"foreground,omitempty"`
	TemplatesLogic         template.Logic `json:"templates_logic,omitempty" toml:"templates_logic,omitempty" yaml:"templates_logic,omitempty"`
	PowerlineSymbol        string         `json:"powerline_symbol,omitempty" toml:"powerline_symbol,omitempty" yaml:"powerline_symbol,omitempty"`
	Background             color.Ansi     `json:"background,omitempty" toml:"background,omitempty" yaml:"background,omitempty"`
	Filler                 string         `json:"filler,omitempty" toml:"filler,omitempty" yaml:"filler,omitempty"`
	Type                   SegmentType    `json:"type,omitempty" toml:"type,omitempty" yaml:"type,omitempty"`
	Style                  SegmentStyle   `json:"style,omitempty" toml:"style,omitempty" yaml:"style,omitempty"`
	LeadingPowerlineSymbol string         `json:"leading_powerline_symbol,omitempty" toml:"leading_powerline_symbol,omitempty" yaml:"leading_powerline_symbol,omitempty"`
	ForegroundTemplates    template.List  `json:"foreground_templates,omitempty" toml:"foreground_templates,omitempty" yaml:"foreground_templates,omitempty"`
	Tips                   []string       `json:"tips,omitempty" toml:"tips,omitempty" yaml:"tips,omitempty"`
	BackgroundTemplates    template.List  `json:"background_templates,omitempty" toml:"background_templates,omitempty" yaml:"background_templates,omitempty"`
	Templates              template.List  `json:"templates,omitempty" toml:"templates,omitempty" yaml:"templates,omitempty"`
	ExcludeFolders         []string       `json:"exclude_folders,omitempty" toml:"exclude_folders,omitempty" yaml:"exclude_folders,omitempty"`
	IncludeFolders         []string       `json:"include_folders,omitempty" toml:"include_folders,omitempty" yaml:"include_folders,omitempty"`
	Needs                  []string       `json:"-" toml:"-" yaml:"-"`
	MinWidth               int            `json:"min_width,omitempty" toml:"min_width,omitempty" yaml:"min_width,omitempty"`
	MaxWidth               int            `json:"max_width,omitempty" toml:"max_width,omitempty" yaml:"max_width,omitempty"`
	Timeout                time.Duration  `json:"timeout,omitempty" toml:"timeout,omitempty" yaml:"timeout,omitempty"`
	Duration               time.Duration  `json:"-" toml:"-" yaml:"-"`
	NameLength             int            `json:"-" toml:"-" yaml:"-"`
	Interactive            bool           `json:"interactive,omitempty" toml:"interactive,omitempty" yaml:"interactive,omitempty"`
	Enabled                bool           `json:"-" toml:"-" yaml:"-"`
	Newline                bool           `json:"newline,omitempty" toml:"newline,omitempty" yaml:"newline,omitempty"`
	InvertPowerline        bool           `json:"invert_powerline,omitempty" toml:"invert_powerline,omitempty" yaml:"invert_powerline,omitempty"`
	Force                  bool           `json:"force,omitempty" toml:"force,omitempty" yaml:"force,omitempty"`
	restored               bool           `json:"-" toml:"-" yaml:"-"`
}

func (segment *Segment) Name() string {
	if len(segment.name) != 0 {
		return segment.name
	}

	name := segment.Alias
	if len(name) == 0 {
		name = c.Title(language.English).String(string(segment.Type))
	}

	segment.name = name
	return name
}

func (segment *Segment) Execute(env runtime.Environment) {
	// segment timings for debug purposes
	var start time.Time
	if env.Flags().Debug {
		start = time.Now()
		segment.NameLength = len(segment.Name())
		defer func() {
			segment.Duration = time.Since(start)
		}()
	}

	defer segment.evaluateNeeds()

	err := segment.MapSegmentWithWriter(env)
	if err != nil || !segment.shouldIncludeFolder() {
		return
	}

	log.Debugf("segment: %s", segment.Name())

	if segment.isToggled() {
		return
	}

	if segment.restoreCache() {
		return
	}

	if shouldHideForWidth(segment.env, segment.MinWidth, segment.MaxWidth) {
		return
	}

	if segment.Timeout == 0 {
		segment.Enabled = segment.writer.Enabled()
	} else {
		done := make(chan bool)
		go func() {
			segment.Enabled = segment.writer.Enabled()
			done <- true
		}()

		select {
		case <-done:
			// Completed before timeout
		case <-time.After(segment.Timeout * time.Millisecond):
			log.Debugf("timeout after %dms for segment: %s", segment.Timeout, segment.Name())
			return
		}
	}

	if segment.Enabled {
		template.Cache.AddSegmentData(segment.Name(), segment.writer)
	}
}

func (segment *Segment) Render(index int, force bool) bool {
	if !segment.Enabled && !force {
		return false
	}

	if force {
		segment.Force = true
	}

	segment.writer.SetIndex(index)

	text := segment.string()
	segment.Enabled = segment.Force || len(strings.ReplaceAll(text, " ", "")) > 0

	if !segment.Enabled {
		template.Cache.RemoveSegmentData(segment.Name())
		return false
	}

	segment.SetText(text)
	segment.setCache()

	// We do this to make `.Text` available for a cross-segment reference in an extra prompt.
	template.Cache.AddSegmentData(segment.Name(), segment.writer)

	return true
}

func (segment *Segment) Text() string {
	return segment.writer.Text()
}

func (segment *Segment) SetText(text string) {
	segment.writer.SetText(text)
}

func (segment *Segment) ResolveForeground() color.Ansi {
	if len(segment.ForegroundTemplates) != 0 {
		match := segment.ForegroundTemplates.FirstMatch(segment.writer, segment.Foreground.String())
		segment.Foreground = color.Ansi(match)
	}

	return segment.Foreground
}

func (segment *Segment) ResolveBackground() color.Ansi {
	if len(segment.BackgroundTemplates) != 0 {
		match := segment.BackgroundTemplates.FirstMatch(segment.writer, segment.Background.String())
		segment.Background = color.Ansi(match)
	}

	return segment.Background
}

func (segment *Segment) ResolveStyle() SegmentStyle {
	if len(segment.styleCache) != 0 {
		return segment.styleCache
	}

	segment.styleCache = segment.Style.resolve(segment.writer)

	return segment.styleCache
}

func (segment *Segment) IsPowerline() bool {
	style := segment.ResolveStyle()
	return style == Powerline || style == Accordion
}

func (segment *Segment) HasEmptyDiamondAtEnd() bool {
	if segment.ResolveStyle() != Diamond {
		return false
	}

	return len(segment.TrailingDiamond) == 0
}

func (segment *Segment) hasCache() bool {
	return segment.Cache != nil && !segment.Cache.Duration.IsEmpty()
}

func (segment *Segment) isToggled() bool {
	toggles, OK := segment.env.Session().Get(cache.TOGGLECACHE)
	if !OK || len(toggles) == 0 {
		log.Debug("no toggles found")
		return false
	}

	list := strings.SplitSeq(toggles, ",")
	for toggle := range list {
		if SegmentType(toggle) == segment.Type || toggle == segment.Alias {
			log.Debugf("segment toggled off: %s", segment.Name())
			return true
		}
	}

	return false
}

func (segment *Segment) restoreCache() bool {
	if !segment.hasCache() {
		return false
	}

	cacheKey := segment.cacheKey()
	data, OK := segment.env.Session().Get(cacheKey)
	if !OK {
		log.Debugf("no cache found for segment: %s, key: %s", segment.Name(), cacheKey)
		return false
	}

	err := json.Unmarshal([]byte(data), &segment.writer)
	if err != nil {
		log.Error(err)
	}

	segment.Enabled = true
	template.Cache.AddSegmentData(segment.Name(), segment.writer)

	log.Debug("restored segment from cache: ", segment.Name())

	segment.restored = true

	return true
}

func (segment *Segment) setCache() {
	if segment.restored || !segment.hasCache() {
		return
	}

	data, err := json.Marshal(segment.writer)
	if err != nil {
		log.Error(err)
		return
	}

	segment.env.Session().Set(segment.cacheKey(), string(data), segment.Cache.Duration)
}

func (segment *Segment) cacheKey() string {
	format := "segment_cache_%s"
	switch segment.Cache.Strategy {
	case cache.Session:
		return fmt.Sprintf(format, segment.Name())
	case cache.Folder:
		fallthrough
	default:
		return fmt.Sprintf(format, strings.Join([]string{segment.Name(), segment.folderKey()}, "_"))
	}
}

func (segment *Segment) folderKey() string {
	ctx, ok := segment.writer.(cache.Context)
	if !ok {
		return segment.env.Pwd()
	}

	if key, OK := ctx.CacheKey(); OK {
		return key
	}

	return segment.env.Pwd()
}

func (segment *Segment) string() string {
	result := segment.Templates.Resolve(segment.writer, "", segment.TemplatesLogic)
	if len(result) != 0 {
		return result
	}

	if len(segment.Template) == 0 {
		segment.Template = segment.writer.Template()
	}

	tmpl := &template.Text{
		Template: segment.Template,
		Context:  segment.writer,
	}

	text, err := tmpl.Render()
	if err != nil {
		return err.Error()
	}

	return text
}

func (segment *Segment) shouldIncludeFolder() bool {
	if segment.env == nil {
		return true
	}

	cwdIncluded := segment.cwdIncluded()
	cwdExcluded := segment.cwdExcluded()

	return cwdIncluded && !cwdExcluded
}

func (segment *Segment) cwdIncluded() bool {
	if len(segment.IncludeFolders) == 0 {
		return true
	}

	return segment.env.DirMatchesOneOf(segment.env.Pwd(), segment.IncludeFolders)
}

func (segment *Segment) cwdExcluded() bool {
	return segment.env.DirMatchesOneOf(segment.env.Pwd(), segment.ExcludeFolders)
}

func (segment *Segment) evaluateNeeds() {
	value := segment.Template

	if len(segment.ForegroundTemplates) != 0 {
		value += strings.Join(segment.ForegroundTemplates, "")
	}

	if len(segment.BackgroundTemplates) != 0 {
		value += strings.Join(segment.BackgroundTemplates, "")
	}

	if len(segment.Templates) != 0 {
		value += strings.Join(segment.Templates, "")
	}

	if !strings.Contains(value, ".Segments.") {
		return
	}

	matches := regex.FindAllNamedRegexMatch(`\.Segments\.(?P<NAME>[a-zA-Z0-9]+)`, value)
	for _, name := range matches {
		segmentName := name["NAME"]

		if len(name) == 0 || slices.Contains(segment.Needs, segmentName) {
			continue
		}

		segment.Needs = append(segment.Needs, segmentName)
	}
}



================================================
FILE: src/config/segment_test.go
================================================
package config

import (
	"encoding/json"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/segments"

	"github.com/stretchr/testify/assert"
)

const (
	cwd = "Projects/oh-my-posh"
)

func TestMapSegmentWriterCanMap(t *testing.T) {
	sc := &Segment{
		Type: SESSION,
	}
	env := new(mock.Environment)
	err := sc.MapSegmentWithWriter(env)
	assert.NoError(t, err)
	assert.NotNil(t, sc.writer)
}

func TestMapSegmentWriterCannotMap(t *testing.T) {
	sc := &Segment{
		Type: "nilwriter",
	}
	env := new(mock.Environment)
	err := sc.MapSegmentWithWriter(env)
	assert.Error(t, err)
}

func TestParseTestConfig(t *testing.T) {
	segmentJSON :=
		`
		{
			"type": "path",
			"style": "powerline",
			"powerline_symbol": "\uE0B0",
			"foreground": "#ffffff",
			"background": "#61AFEF",
			"properties": {
				"style": "folder"
			},
			"exclude_folders": [
				"/super/secret/project"
			]
		}
		`
	segment := &Segment{}
	err := json.Unmarshal([]byte(segmentJSON), segment)
	assert.NoError(t, err)
}

func TestShouldIncludeFolder(t *testing.T) {
	cases := []struct {
		Case     string
		Included bool
		Excluded bool
		Expected bool
	}{
		{Case: "Include", Included: true, Excluded: false, Expected: true},
		{Case: "Exclude", Included: false, Excluded: true, Expected: false},
		{Case: "Include & Exclude", Included: true, Excluded: true, Expected: false},
		{Case: "!Include & !Exclude", Included: false, Excluded: false, Expected: false},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return(runtime.LINUX)
		env.On("Home").Return("")
		env.On("Pwd").Return(cwd)
		env.On("DirMatchesOneOf", cwd, []string{"Projects/oh-my-posh"}).Return(tc.Included)
		env.On("DirMatchesOneOf", cwd, []string{"Projects/nope"}).Return(tc.Excluded)
		segment := &Segment{
			IncludeFolders: []string{"Projects/oh-my-posh"},
			ExcludeFolders: []string{"Projects/nope"},
			env:            env,
		}
		got := segment.shouldIncludeFolder()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestGetColors(t *testing.T) {
	cases := []struct {
		Case       string
		Expected   color.Ansi
		Default    color.Ansi
		Region     string
		Profile    string
		Templates  []string
		Background bool
	}{
		{Case: "No template - foreground", Expected: "color", Background: false, Default: "color"},
		{Case: "No template - background", Expected: "color", Background: true, Default: "color"},
		{Case: "Nil template", Expected: "color", Default: "color", Templates: nil},
		{
			Case:     "Template - default",
			Expected: "color",
			Default:  "color",
			Templates: []string{
				"{{if contains \"john\" .Profile}}color2{{end}}",
			},
			Profile: "doe",
		},
		{
			Case:     "Template - override",
			Expected: "color2",
			Default:  "color",
			Templates: []string{
				"{{if contains \"john\" .Profile}}color2{{end}}",
			},
			Profile: "john",
		},
		{
			Case:     "Template - override multiple",
			Expected: "color3",
			Default:  "color",
			Templates: []string{
				"{{if contains \"doe\" .Profile}}color2{{end}}",
				"{{if contains \"john\" .Profile}}color3{{end}}",
			},
			Profile: "john",
		},
		{
			Case:     "Template - override multiple no match",
			Expected: "color",
			Default:  "color",
			Templates: []string{
				"{{if contains \"doe\" .Profile}}color2{{end}}",
				"{{if contains \"philip\" .Profile}}color3{{end}}",
			},
			Profile: "john",
		},
	}
	for _, tc := range cases {
		segment := &Segment{
			writer: &segments.Aws{
				Profile: tc.Profile,
				Region:  tc.Region,
			},
		}

		if tc.Background {
			segment.Background = tc.Default
			segment.BackgroundTemplates = tc.Templates
			bgColor := segment.ResolveBackground()
			assert.Equal(t, tc.Expected, bgColor, tc.Case)
			continue
		}

		segment.Foreground = tc.Default
		segment.ForegroundTemplates = tc.Templates
		fgColor := segment.ResolveForeground()
		assert.Equal(t, tc.Expected, fgColor, tc.Case)
	}
}

func TestEvaluateNeeds(t *testing.T) {
	cases := []struct {
		Segment *Segment
		Case    string
		Needs   []string
	}{
		{
			Case: "No needs",
			Segment: &Segment{
				Template: "foo",
			},
		},
		{
			Case: "Template needs",
			Segment: &Segment{
				Template: "{{ .Segments.Git.URL }}",
			},
			Needs: []string{"Git"},
		},
		{
			Case: "Template & Foreground needs",
			Segment: &Segment{
				Template:            "{{ .Segments.Git.URL }}",
				ForegroundTemplates: []string{"foo", "{{ .Segments.Os.Icon }}"},
			},
			Needs: []string{"Git", "Os"},
		},
		{
			Case: "Template & Foreground & Background needs",
			Segment: &Segment{
				Template:            "{{ .Segments.Git.URL }}",
				ForegroundTemplates: []string{"foo", "{{ .Segments.Os.Icon }}"},
				BackgroundTemplates: []string{"bar", "{{ .Segments.Exit.Icon }}"},
			},
			Needs: []string{"Git", "Os", "Exit"},
		},
	}
	for _, tc := range cases {
		tc.Segment.evaluateNeeds()
		assert.Equal(t, tc.Needs, tc.Segment.Needs, tc.Case)
	}
}



================================================
FILE: src/config/segment_types.go
================================================
package config

import (
	"errors"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/segments"
)

// SegmentType the type of segment, for more information, see the constants
type SegmentType string

// SegmentWriter is the interface used to define what and if to write to the prompt
type SegmentWriter interface {
	Enabled() bool
	Template() string
	SetText(text string)
	SetIndex(index int)
	Text() string
	Init(props properties.Properties, env runtime.Environment)
}

const (
	// Plain writes it without ornaments
	Plain SegmentStyle = "plain"
	// Powerline writes it Powerline style
	Powerline SegmentStyle = "powerline"
	// Accordion writes it Powerline style but collapses the segment when disabled instead of hiding
	Accordion SegmentStyle = "accordion"
	// Diamond writes the prompt shaped with a leading and trailing symbol
	Diamond SegmentStyle = "diamond"
	// ANGULAR writes which angular cli version us currently active
	ANGULAR SegmentType = "angular"
	// ARGOCD writes the current argocd context
	ARGOCD SegmentType = "argocd"
	// AURELIA writes which aurelia version is currently referenced in package.json
	AURELIA SegmentType = "aurelia"
	// AWS writes the active aws context
	AWS SegmentType = "aws"
	// AZ writes the Azure subscription info we're currently in
	AZ SegmentType = "az"
	// AZD writes the Azure Developer CLI environment info we're current in
	AZD SegmentType = "azd"
	// AZFUNC writes current AZ func version
	AZFUNC SegmentType = "azfunc"
	// BATTERY writes the battery percentage
	BATTERY SegmentType = "battery"
	// BAZEL writes the bazel version
	BAZEL SegmentType = "bazel"
	// Brewfather segment
	BREWFATHER SegmentType = "brewfather"
	// Buf segment writes the active buf version
	BUF SegmentType = "buf"
	// BUN writes the active bun version
	BUN SegmentType = "bun"
	// CARBONINTENSITY writes the actual and forecast carbon intensity in gCO2/kWh
	CARBONINTENSITY SegmentType = "carbonintensity"
	// cds (SAP CAP) version
	CDS SegmentType = "cds"
	// Cloud Foundry segment
	CF SegmentType = "cf"
	// Cloud Foundry logged in target
	CFTARGET SegmentType = "cftarget"
	// CMAKE writes the active cmake version
	CMAKE SegmentType = "cmake"
	// CMD writes the output of a shell command
	CMD SegmentType = "command"
	// CONNECTION writes a connection's information
	CONNECTION SegmentType = "connection"
	// CRYSTAL writes the active crystal version
	CRYSTAL SegmentType = "crystal"
	// DART writes the active dart version
	DART SegmentType = "dart"
	// DENO writes the active deno version
	DENO SegmentType = "deno"
	// DOCKER writes the docker context
	DOCKER SegmentType = "docker"
	// DOTNET writes which dotnet version is currently active
	DOTNET SegmentType = "dotnet"
	// ELIXIR writes the elixir version
	ELIXIR SegmentType = "elixir"
	// EXECUTIONTIME writes the execution time of the last run command
	EXECUTIONTIME SegmentType = "executiontime"
	// EXIT writes the last exit code
	EXIT SegmentType = "exit"
	// FIREBASE writes the active firebase project
	FIREBASE SegmentType = "firebase"
	// FLUTTER writes the flutter version
	FLUTTER SegmentType = "flutter"
	// FORTRAN writes the gfortran version
	FORTRAN SegmentType = "fortran"
	// FOSSIL writes the fossil status
	FOSSIL SegmentType = "fossil"
	// GCP writes the active GCP context
	GCP SegmentType = "gcp"
	// GIT represents the git status and information
	GIT SegmentType = "git"
	// GITVERSION represents the gitversion information
	GITVERSION SegmentType = "gitversion"
	// GOLANG writes which go version is currently active
	GOLANG SegmentType = "go"
	// HASKELL segment
	HASKELL SegmentType = "haskell"
	// HELM segment
	HELM SegmentType = "helm"
	// IPIFY segment
	IPIFY SegmentType = "ipify"
	// JAVA writes the active java version
	JAVA SegmentType = "java"
	// API writes the output of a custom JSON API
	HTTP SegmentType = "http"
	// JUJUTSU writes Jujutsu source control information
	JUJUTSU SegmentType = "jujutsu"
	// JULIA writes which julia version is currently active
	JULIA SegmentType = "julia"
	// KOTLIN writes the active kotlin version
	KOTLIN SegmentType = "kotlin"
	// KUBECTL writes the Kubernetes context we're currently in
	KUBECTL SegmentType = "kubectl"
	// LASTFM writes the lastfm status
	LASTFM SegmentType = "lastfm"
	// LUA writes the active lua version
	LUA SegmentType = "lua"
	// MERCURIAL writes Mercurial source control information
	MERCURIAL SegmentType = "mercurial"
	// MOJO writes the active version of Mojo and the name of the Magic virtual env
	MOJO SegmentType = "mojo"
	// MVN writes the active maven version
	MVN SegmentType = "mvn"
	// NBA writes NBA game data
	NBA SegmentType = "nba"
	// NBGV writes the nbgv version information
	NBGV SegmentType = "nbgv"
	// NIGHTSCOUT is an open source diabetes system
	NIGHTSCOUT SegmentType = "nightscout"
	// NIM writes the active nim version
	NIM SegmentType = "nim"
	// NIXSHELL writes the active nix shell details
	NIXSHELL SegmentType = "nix-shell"
	// NODE writes which node version is currently active
	NODE SegmentType = "node"
	// npm version
	NPM SegmentType = "npm"
	// NX writes which Nx version us currently active
	NX SegmentType = "nx"
	// OCAML writes the active Ocaml version
	OCAML SegmentType = "ocaml"
	// OS write os specific icon
	OS SegmentType = "os"
	// OWM writes the weather coming from openweatherdata
	OWM SegmentType = "owm"
	// PATH represents the current path segment
	PATH SegmentType = "path"
	// PERL writes which perl version is currently active
	PERL SegmentType = "perl"
	// PHP writes which php version is currently active
	PHP SegmentType = "php"
	// PLASTIC represents the plastic scm status and information
	PLASTIC SegmentType = "plastic"
	// pnpm version
	PNPM SegmentType = "pnpm"
	// Project version
	PROJECT SegmentType = "project"
	// PULUMI writes the pulumi user, store and stack
	PULUMI SegmentType = "pulumi"
	// PYTHON writes the virtual env name
	PYTHON SegmentType = "python"
	// QUASAR writes the QUASAR version and context
	QUASAR SegmentType = "quasar"
	// R version
	R SegmentType = "r"
	// REACT writes the current react version
	REACT SegmentType = "react"
	// ROOT writes root symbol
	ROOT SegmentType = "root"
	// RUBY writes which ruby version is currently active
	RUBY SegmentType = "ruby"
	// RUST writes the cargo version information if cargo.toml is present
	RUST SegmentType = "rust"
	// SAPLING represents the sapling segment
	SAPLING SegmentType = "sapling"
	// SESSION represents the user info segment
	SESSION SegmentType = "session"
	// SHELL writes which shell we're currently in
	SHELL SegmentType = "shell"
	// SITECORE displays the current context for the Sitecore CLI
	SITECORE SegmentType = "sitecore"
	// SPOTIFY writes the SPOTIFY status for Mac
	SPOTIFY SegmentType = "spotify"
	// STATUS writes the last know command status
	STATUS SegmentType = "status"
	// STRAVA is a sports activity tracker
	STRAVA SegmentType = "strava"
	// Svelte segment
	SVELTE SegmentType = "svelte"
	// Subversion segment
	SVN SegmentType = "svn"
	// SWIFT writes the active swift version
	SWIFT SegmentType = "swift"
	// SYSTEMINFO writes system information (memory, cpu, load)
	SYSTEMINFO SegmentType = "sysinfo"
	// TALOSCTL writes the talosctl context
	TALOSCTL SegmentType = "talosctl"
	// Tauri Segment
	TAURI SegmentType = "tauri"
	// TERRAFORM writes the terraform workspace we're currently in
	TERRAFORM SegmentType = "terraform"
	// TEXT writes a text
	TEXT SegmentType = "text"
	// TIME writes the current timestamp
	TIME SegmentType = "time"
	// UI5 Tooling segment
	UI5TOOLING SegmentType = "ui5tooling"
	// UMBRACO writes the Umbraco version if Umbraco is present
	UMBRACO SegmentType = "umbraco"
	// UNITY writes which Unity version is currently active
	UNITY SegmentType = "unity"
	// UPGRADE lets you know if you can upgrade Oh My Posh
	UPGRADE SegmentType = "upgrade"
	// V writes the active vlang version
	V SegmentType = "v"
	// VALA writes the active vala version
	VALA SegmentType = "vala"
	// WAKATIME writes tracked time spend in dev editors
	WAKATIME SegmentType = "wakatime"
	// WINREG queries the Windows registry.
	WINREG SegmentType = "winreg"
	// WITHINGS queries the Withings API.
	WITHINGS SegmentType = "withings"
	// XMAKE write the xmake version if xmake.lua is present
	XMAKE SegmentType = "xmake"
	// yarn version
	YARN SegmentType = "yarn"
	// YTM writes YouTube Music information and status
	YTM SegmentType = "ytm"
	// ZIG writes the active zig version
	ZIG SegmentType = "zig"
)

// Segments contains all available prompt segment writers.
// Consumers of the library can also add their own segment writer.
var Segments = map[SegmentType]func() SegmentWriter{
	ANGULAR:         func() SegmentWriter { return &segments.Angular{} },
	ARGOCD:          func() SegmentWriter { return &segments.Argocd{} },
	AURELIA:         func() SegmentWriter { return &segments.Aurelia{} },
	AWS:             func() SegmentWriter { return &segments.Aws{} },
	AZ:              func() SegmentWriter { return &segments.Az{} },
	AZD:             func() SegmentWriter { return &segments.Azd{} },
	AZFUNC:          func() SegmentWriter { return &segments.AzFunc{} },
	BATTERY:         func() SegmentWriter { return &segments.Battery{} },
	BAZEL:           func() SegmentWriter { return &segments.Bazel{} },
	BREWFATHER:      func() SegmentWriter { return &segments.Brewfather{} },
	BUF:             func() SegmentWriter { return &segments.Buf{} },
	BUN:             func() SegmentWriter { return &segments.Bun{} },
	CARBONINTENSITY: func() SegmentWriter { return &segments.CarbonIntensity{} },
	CDS:             func() SegmentWriter { return &segments.Cds{} },
	CF:              func() SegmentWriter { return &segments.Cf{} },
	CFTARGET:        func() SegmentWriter { return &segments.CfTarget{} },
	CMAKE:           func() SegmentWriter { return &segments.Cmake{} },
	CMD:             func() SegmentWriter { return &segments.Cmd{} },
	CONNECTION:      func() SegmentWriter { return &segments.Connection{} },
	CRYSTAL:         func() SegmentWriter { return &segments.Crystal{} },
	DART:            func() SegmentWriter { return &segments.Dart{} },
	DENO:            func() SegmentWriter { return &segments.Deno{} },
	DOCKER:          func() SegmentWriter { return &segments.Docker{} },
	DOTNET:          func() SegmentWriter { return &segments.Dotnet{} },
	ELIXIR:          func() SegmentWriter { return &segments.Elixir{} },
	EXECUTIONTIME:   func() SegmentWriter { return &segments.Executiontime{} },
	EXIT:            func() SegmentWriter { return &segments.Status{} },
	FIREBASE:        func() SegmentWriter { return &segments.Firebase{} },
	FLUTTER:         func() SegmentWriter { return &segments.Flutter{} },
	FORTRAN:         func() SegmentWriter { return &segments.Fortran{} },
	FOSSIL:          func() SegmentWriter { return &segments.Fossil{} },
	GCP:             func() SegmentWriter { return &segments.Gcp{} },
	GIT:             func() SegmentWriter { return &segments.Git{} },
	GITVERSION:      func() SegmentWriter { return &segments.GitVersion{} },
	GOLANG:          func() SegmentWriter { return &segments.Golang{} },
	HASKELL:         func() SegmentWriter { return &segments.Haskell{} },
	HELM:            func() SegmentWriter { return &segments.Helm{} },
	IPIFY:           func() SegmentWriter { return &segments.IPify{} },
	JAVA:            func() SegmentWriter { return &segments.Java{} },
	HTTP:            func() SegmentWriter { return &segments.HTTP{} },
	JUJUTSU:         func() SegmentWriter { return &segments.Jujutsu{} },
	JULIA:           func() SegmentWriter { return &segments.Julia{} },
	KOTLIN:          func() SegmentWriter { return &segments.Kotlin{} },
	KUBECTL:         func() SegmentWriter { return &segments.Kubectl{} },
	LASTFM:          func() SegmentWriter { return &segments.LastFM{} },
	LUA:             func() SegmentWriter { return &segments.Lua{} },
	MERCURIAL:       func() SegmentWriter { return &segments.Mercurial{} },
	MOJO:            func() SegmentWriter { return &segments.Mojo{} },
	MVN:             func() SegmentWriter { return &segments.Mvn{} },
	NBA:             func() SegmentWriter { return &segments.Nba{} },
	NBGV:            func() SegmentWriter { return &segments.Nbgv{} },
	NIGHTSCOUT:      func() SegmentWriter { return &segments.Nightscout{} },
	NIXSHELL:        func() SegmentWriter { return &segments.NixShell{} },
	NIM:             func() SegmentWriter { return &segments.Nim{} },
	NODE:            func() SegmentWriter { return &segments.Node{} },
	NPM:             func() SegmentWriter { return &segments.Npm{} },
	NX:              func() SegmentWriter { return &segments.Nx{} },
	OCAML:           func() SegmentWriter { return &segments.OCaml{} },
	OS:              func() SegmentWriter { return &segments.Os{} },
	OWM:             func() SegmentWriter { return &segments.Owm{} },
	PATH:            func() SegmentWriter { return &segments.Path{} },
	PERL:            func() SegmentWriter { return &segments.Perl{} },
	PHP:             func() SegmentWriter { return &segments.Php{} },
	PLASTIC:         func() SegmentWriter { return &segments.Plastic{} },
	PNPM:            func() SegmentWriter { return &segments.Pnpm{} },
	PROJECT:         func() SegmentWriter { return &segments.Project{} },
	PULUMI:          func() SegmentWriter { return &segments.Pulumi{} },
	PYTHON:          func() SegmentWriter { return &segments.Python{} },
	QUASAR:          func() SegmentWriter { return &segments.Quasar{} },
	R:               func() SegmentWriter { return &segments.R{} },
	REACT:           func() SegmentWriter { return &segments.React{} },
	ROOT:            func() SegmentWriter { return &segments.Root{} },
	RUBY:            func() SegmentWriter { return &segments.Ruby{} },
	RUST:            func() SegmentWriter { return &segments.Rust{} },
	SAPLING:         func() SegmentWriter { return &segments.Sapling{} },
	SESSION:         func() SegmentWriter { return &segments.Session{} },
	SHELL:           func() SegmentWriter { return &segments.Shell{} },
	SITECORE:        func() SegmentWriter { return &segments.Sitecore{} },
	SPOTIFY:         func() SegmentWriter { return &segments.Spotify{} },
	STATUS:          func() SegmentWriter { return &segments.Status{} },
	STRAVA:          func() SegmentWriter { return &segments.Strava{} },
	SVELTE:          func() SegmentWriter { return &segments.Svelte{} },
	SVN:             func() SegmentWriter { return &segments.Svn{} },
	SWIFT:           func() SegmentWriter { return &segments.Swift{} },
	SYSTEMINFO:      func() SegmentWriter { return &segments.SystemInfo{} },
	TALOSCTL:        func() SegmentWriter { return &segments.TalosCTL{} },
	TAURI:           func() SegmentWriter { return &segments.Tauri{} },
	TERRAFORM:       func() SegmentWriter { return &segments.Terraform{} },
	TEXT:            func() SegmentWriter { return &segments.Text{} },
	TIME:            func() SegmentWriter { return &segments.Time{} },
	UI5TOOLING:      func() SegmentWriter { return &segments.UI5Tooling{} },
	UMBRACO:         func() SegmentWriter { return &segments.Umbraco{} },
	UNITY:           func() SegmentWriter { return &segments.Unity{} },
	UPGRADE:         func() SegmentWriter { return &segments.Upgrade{} },
	V:               func() SegmentWriter { return &segments.V{} },
	VALA:            func() SegmentWriter { return &segments.Vala{} },
	WAKATIME:        func() SegmentWriter { return &segments.Wakatime{} },
	WINREG:          func() SegmentWriter { return &segments.WindowsRegistry{} },
	WITHINGS:        func() SegmentWriter { return &segments.Withings{} },
	XMAKE:           func() SegmentWriter { return &segments.XMake{} },
	YARN:            func() SegmentWriter { return &segments.Yarn{} },
	YTM:             func() SegmentWriter { return &segments.Ytm{} },
	ZIG:             func() SegmentWriter { return &segments.Zig{} },
}

func (segment *Segment) MapSegmentWithWriter(env runtime.Environment) error {
	segment.env = env

	if segment.Properties == nil {
		segment.Properties = make(properties.Map)
	}

	f, ok := Segments[segment.Type]
	if !ok {
		return errors.New("unable to map writer")
	}

	writer := f()
	wrapper := &properties.Wrapper{
		Properties: segment.Properties,
	}

	writer.Init(wrapper, env)
	segment.writer = writer

	return nil
}



================================================
FILE: src/constants/constants_unix.go
================================================
//go:build !windows

package constants

const (
	DotnetExitCode = 142
)



================================================
FILE: src/constants/constants_windows64.go
================================================
//go:build windows && !386

package constants

const (
	DotnetExitCode = int(0x80008091)
)



================================================
FILE: src/constants/constrants_windows386.go
================================================
//go:build windows && 386

package constants

const (
	DotnetExitCode = -2147450735
)



================================================
FILE: src/log/log.go
================================================
package log

import (
	"fmt"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

var (
	enabled bool
	raw     bool

	log strings.Builder
)

func Enable(plain bool) {
	enabled = true
	raw = plain

	Debugf("logging enabled, raw mode: %t", plain)
}

func Trace(start time.Time, args ...string) {
	if !enabled {
		return
	}

	elapsed := time.Since(start)
	fn, _ := funcSpec()

	// Color-code elapsed time based on duration
	var coloredElapsed Text
	ms := elapsed.Milliseconds()

	switch {
	case ms < 1:
		coloredElapsed = Text(elapsed.String()).Green().Plain()
	case ms >= 1 && ms < 10:
		coloredElapsed = Text(elapsed.String()).Yellow().Plain()
	case ms >= 10 && ms < 100:
		coloredElapsed = Text(elapsed.String()).Orange().Plain()
	default: // >= 100ms
		coloredElapsed = Text(elapsed.String()).Red().Plain()
	}

	header := fmt.Sprintf("%s(%s) - %s", fn, strings.Join(args, " "), coloredElapsed)

	printLn(trace, header)
}

func Debug(message ...string) {
	if !enabled {
		return
	}

	fn, line := funcSpec()
	header := fmt.Sprintf("%s:%d", fn, line)

	printLn(debug, header, strings.Join(message, " "))
}

func Debugf(format string, args ...any) {
	if !enabled {
		return
	}

	message := fmt.Sprintf(format, args...)
	Debug(message)
}

func Error(err error) {
	if !enabled {
		return
	}
	fn, line := funcSpec()
	header := fmt.Sprintf("%s:%d", fn, line)

	printLn(bug, header, err.Error())
}

func String() string {
	return log.String()
}

func funcSpec() (string, int) {
	pcs := make([]uintptr, 4)
	n := runtime.Callers(3, pcs)
	if n == 0 {
		return "", 0
	}

	frames := runtime.CallersFrames(pcs[:n])
	var frame runtime.Frame
	more := true

	// Loop through frames until we're out of log.go
	for more {
		frame, more = frames.Next()
		if strings.Contains(frame.File, "log.go") {
			continue
		}

		// Found first non-log.go frame
		fn := frame.Function
		fn = fn[strings.LastIndex(fn, ".")+1:]
		file := filepath.Base(frame.File)

		if strings.HasPrefix(fn, "func") {
			return file, frame.Line
		}

		return fmt.Sprintf("%s:%s", file, fn), frame.Line
	}

	return "", 0
}



================================================
FILE: src/log/print.go
================================================
package log

import (
	"fmt"
	"strings"
	"time"
)

type logType byte

const (
	debug logType = 1 << iota
	bug
	trace
)

type Text string

func (t Text) Green() Text {
	if raw {
		return t
	}
	return "\x1b[38;2;191;207;240m" + t
}

func (t Text) Red() Text {
	if raw {
		return t
	}
	return "\x1b[38;2;253;122;140m" + t
}

func (t Text) Purple() Text {
	if raw {
		return t
	}
	return "\x1b[38;2;204;137;214m" + t
}

func (t Text) Yellow() Text {
	if raw {
		return t
	}
	return "\x1b[38;2;156;231;201m" + t
}

func (t Text) Orange() Text {
	if raw {
		return t
	}
	return "\x1b[38;2;253;184;109m" + t
}

func (t Text) Bold() Text {
	if raw {
		return t
	}
	return "\x1b[1m" + t
}

func (t Text) Plain() Text {
	if raw {
		return t
	}
	return t + "\033[0m"
}

func (t Text) String() string {
	return string(t)
}

func printLn(lt logType, args ...string) {
	if len(args) == 0 {
		return
	}

	var str Text
	switch lt {
	case debug:
		str = Text("[DEBUG] ").Green()
	case bug:
		str = Text("[ERROR] ").Red()
	case trace:
		str = Text("[TRACE] ").Purple()
	}

	// timestamp 156, 231, 201
	str += Text(time.Now().Format("15:04:05.000") + " ").Yellow().Plain()
	str += Text(args[0])
	str += parseArgs(args...)
	log.WriteString(str.String())
}

func parseArgs(args ...string) Text {
	if len(args) == 1 {
		return "\n"
	}

	// display empty return values as NO DATA
	if len(args[1]) == 0 {
		text := Text(" \u2192").Yellow()
		text += Text(" NO DATA\n").Red().Plain()
		return text
	}

	// print a single line for single output
	splitted := strings.Split(args[1], "\n")
	if len(splitted) == 1 {
		text := Text(" \u2192").Yellow().Plain()
		return Text(fmt.Sprintf("%s %s\n", text, args[1]))
	}

	// indent multiline output with 4 spaces
	var str Text
	str += Text(" \u2193\n").Yellow().Plain()
	for _, line := range splitted {
		str += Text(fmt.Sprintf("    %s\n", line))
	}
	return str
}



================================================
FILE: src/maps/concurrent.go
================================================
package maps

import (
	"fmt"
	"sync"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

func NewConcurrent() *Concurrent {
	var cm Concurrent
	return &cm
}

type Concurrent sync.Map

func (cm *Concurrent) Set(key string, value any) {
	(*sync.Map)(cm).Store(key, value)
}

func (cm *Concurrent) Get(key string) (any, bool) {
	return (*sync.Map)(cm).Load(key)
}

func (cm *Concurrent) MustGet(key string) any {
	val, OK := (*sync.Map)(cm).Load(key)
	if !OK {
		log.Error(fmt.Errorf("key %s not found", key))
	}

	return val
}

func (cm *Concurrent) Delete(key string) {
	(*sync.Map)(cm).Delete(key)
}

func (cm *Concurrent) Contains(key string) bool {
	_, ok := (*sync.Map)(cm).Load(key)
	return ok
}

func (cm *Concurrent) ToSimple() Simple {
	list := make(map[string]any)
	(*sync.Map)(cm).Range(func(key, value any) bool {
		if value == nil {
			return false
		}

		list[key.(string)] = value
		return true
	})

	return list
}



================================================
FILE: src/maps/config.go
================================================
package maps

type Config struct {
	UserName  *Map `json:"user_name,omitempty" toml:"user_name,omitempty" yaml:"user_name,omitempty"`
	HostName  *Map `json:"host_name,omitempty" toml:"host_name,omitempty" yaml:"host_name,omitempty"`
	ShellName *Map `json:"shell_name,omitempty" toml:"shell_name,omitempty" yaml:"shell_name,omitempty"`
}

func (c *Config) GetUserName(key string) string {
	if c == nil || c.UserName == nil {
		return key
	}

	return c.UserName.Get(key)
}

func (c *Config) GetHostName(key string) string {
	if c == nil || c.HostName == nil {
		return key
	}

	return c.HostName.Get(key)
}

func (c *Config) GetShellName(key string) string {
	if c == nil || c.ShellName == nil {
		return key
	}

	return c.ShellName.Get(key)
}

type Map map[string]string

func (m *Map) Get(key string) string {
	if m == nil {
		return key
	}

	if value, ok := (*m)[key]; ok {
		return value
	}

	return key
}



================================================
FILE: src/maps/simple.go
================================================
package maps

type Simple map[string]any

func (m Simple) ToConcurrent() *Concurrent {
	var cm Concurrent
	for k, v := range m {
		cm.Set(k, v)
	}
	return &cm
}



================================================
FILE: src/prompt/debug.go
================================================
package prompt

import (
	"fmt"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

// debug will loop through your config file and output the timings for each segments
func (e *Engine) PrintDebug(startTime time.Time, version string) string {
	e.write(fmt.Sprintf("\n%s %s\n", log.Text("Version:").Green().Bold().Plain(), version))
	sh := e.Env.Shell()
	shellVersion := e.Env.Getenv("POSH_SHELL_VERSION")
	if len(shellVersion) != 0 {
		sh += fmt.Sprintf(" (%s)", shellVersion)
	}
	e.write(fmt.Sprintf("\n%s %s\n", log.Text("Shell:").Green().Bold().Plain(), sh))

	// console title timing
	titleStartTime := time.Now()
	log.Debug("segment: Title")
	consoleTitle := &config.Segment{
		Alias:      "ConsoleTitle",
		NameLength: 12,
		Enabled:    len(e.Config.ConsoleTitleTemplate) > 0,
		Duration:   time.Since(titleStartTime),
		Type:       config.TEXT,
	}
	_ = consoleTitle.MapSegmentWithWriter(e.Env)
	consoleTitle.SetText(e.getTitleTemplateText())

	largestSegmentNameLength := consoleTitle.NameLength

	// render prompt
	e.write(log.Text("\nPrompt:\n\n").Green().Bold().Plain().String())
	e.write(e.Primary())

	e.write(log.Text("\n\nSegments:\n\n").Green().Bold().Plain().String())

	var segments []*config.Segment
	segments = append(segments, consoleTitle)

	for _, block := range e.Config.Blocks {
		for _, segment := range block.Segments {
			segments = append(segments, segment)
			if segment.NameLength > largestSegmentNameLength {
				largestSegmentNameLength = segment.NameLength
			}
		}
	}

	// 22 is the color for false/true and 7 is the reset color
	largestSegmentNameLength += 22 + 7
	for _, segment := range segments {
		duration := segment.Duration.Milliseconds()
		var active log.Text
		if segment.Enabled {
			active = log.Text("true").Yellow()
		} else {
			active = log.Text("false").Purple()
		}
		segmentName := fmt.Sprintf("%s(%s)", segment.Name(), active.Plain())
		e.write(fmt.Sprintf("%-*s - %3d ms\n", largestSegmentNameLength, segmentName, duration))
	}

	e.write(fmt.Sprintf("\n%s %s\n", log.Text("Run duration:").Green().Bold().Plain(), time.Since(startTime)))
	e.write(fmt.Sprintf("\n%s %s\n", log.Text("Cache path:").Green().Bold().Plain(), cache.Path()))

	cfg := e.Env.Flags().Config
	if len(cfg) == 0 {
		cfg = "no --config set, using default built-in configuration"
	}

	e.write(fmt.Sprintf("\n%s %s\n", log.Text("Config path:").Green().Bold().Plain(), cfg))

	e.write(log.Text("\nLogs:\n\n").Green().Bold().Plain().String())
	e.write(e.Env.Logs())
	return e.string()
}



================================================
FILE: src/prompt/engine.go
================================================
package prompt

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

var cycle *color.Cycle = &color.Cycle{}

type Engine struct {
	Env                   runtime.Environment
	Config                *config.Config
	activeSegment         *config.Segment
	previousActiveSegment *config.Segment
	rprompt               string
	Overflow              config.Overflow
	prompt                strings.Builder
	currentLineLength     int
	rpromptLength         int
	Padding               int
	Plain                 bool
	forceRender           bool
}

const (
	PRIMARY   = "primary"
	TRANSIENT = "transient"
	DEBUG     = "debug"
	SECONDARY = "secondary"
	RIGHT     = "right"
	TOOLTIP   = "tooltip"
	VALID     = "valid"
	ERROR     = "error"
	PREVIEW   = "preview"
)

func (e *Engine) write(text string) {
	e.prompt.WriteString(text)
}

func (e *Engine) string() string {
	text := e.prompt.String()
	e.prompt.Reset()
	return text
}

func (e *Engine) canWriteRightBlock(length int, rprompt bool) (int, bool) {
	if rprompt && (len(e.rprompt) == 0) {
		return 0, false
	}

	consoleWidth, err := e.Env.TerminalWidth()
	if err != nil || consoleWidth == 0 {
		return 0, false
	}

	availableSpace := consoleWidth - e.currentLineLength

	// spanning multiple lines
	if availableSpace < 0 {
		overflow := e.currentLineLength % consoleWidth
		availableSpace = consoleWidth - overflow
	}

	availableSpace -= length

	promptBreathingRoom := 5
	if rprompt {
		promptBreathingRoom = 30
	}

	canWrite := availableSpace >= promptBreathingRoom

	// reset the available space when we can't write so we can fill the line
	if !canWrite {
		availableSpace = consoleWidth - length
	}

	return availableSpace, canWrite
}

func (e *Engine) pwd() {
	// only print when relevant
	if len(e.Config.PWD) == 0 {
		return
	}

	// only print when supported
	sh := e.Env.Shell()
	if sh == shell.ELVISH || sh == shell.XONSH {
		return
	}

	pwd := e.Env.Pwd()
	if e.Env.IsCygwin() {
		pwd = strings.ReplaceAll(pwd, `\`, `/`)
	}

	// Allow template logic to define when to enable the PWD (when supported)
	tmpl := &template.Text{
		Template: e.Config.PWD,
	}

	pwdType, err := tmpl.Render()
	if err != nil || len(pwdType) == 0 {
		return
	}

	user := e.Env.User()
	host, _ := e.Env.Host()
	e.write(terminal.Pwd(pwdType, user, host, pwd))
}

func (e *Engine) getNewline() string {
	newline := "\n"

	if e.Plain || e.Env.Flags().Debug {
		return newline
	}

	// Warp terminal will remove a newline character ('\n') from the prompt, so we hack it in.
	if e.isWarp() {
		return terminal.LineBreak()
	}

	return newline
}

func (e *Engine) writeNewline() {
	defer func() {
		e.currentLineLength = 0
	}()

	e.write(e.getNewline())
}

func (e *Engine) isWarp() bool {
	return terminal.Program == terminal.Warp
}

func (e *Engine) isIterm() bool {
	return terminal.Program == terminal.ITerm
}

func (e *Engine) shouldFill(filler string, padLength int) (string, bool) {
	if len(filler) == 0 {
		return "", false
	}

	tmpl := &template.Text{
		Template: filler,
		Context:  e,
	}

	var err error
	if filler, err = tmpl.Render(); err != nil {
		return "", false
	}

	// allow for easy color overrides and templates
	terminal.SetColors("default", "default")
	terminal.Write("", "", filler)
	filler, lenFiller := terminal.String()
	if lenFiller == 0 {
		return "", false
	}

	repeat := padLength / lenFiller
	unfilled := padLength % lenFiller
	text := strings.Repeat(filler, repeat) + strings.Repeat(" ", unfilled)
	return text, true
}

func (e *Engine) getTitleTemplateText() string {
	tmpl := &template.Text{
		Template: e.Config.ConsoleTitleTemplate,
	}
	if text, err := tmpl.Render(); err == nil {
		return text
	}
	return ""
}

func (e *Engine) renderBlock(block *config.Block, cancelNewline bool) bool {
	text, length := e.writeBlockSegments(block)

	// do not print anything when we don't have any text unless forced
	if !block.Force && length == 0 {
		return false
	}

	defer e.applyPowerShellBleedPatch()

	// do not print a newline to avoid a leading space
	// when we're printing the first primary prompt in
	// the shell
	if block.Newline && !cancelNewline {
		e.writeNewline()
	}

	switch block.Type {
	case config.Prompt:
		if block.Alignment == config.Left {
			e.currentLineLength += length
			e.write(text)
			return true
		}

		if block.Alignment != config.Right {
			return false
		}

		space, OK := e.canWriteRightBlock(length, false)

		// we can't print the right block as there's not enough room available
		if !OK {
			e.Overflow = block.Overflow
			switch block.Overflow {
			case config.Break:
				e.writeNewline()
			case config.Hide:
				// make sure to fill if needed
				if padText, OK := e.shouldFill(block.Filler, space+length); OK {
					e.write(padText)
				}

				e.currentLineLength = 0
				return true
			}
		}

		defer func() {
			e.currentLineLength = 0
			e.Overflow = ""
		}()

		// validate if we have a filler and fill if needed
		if padText, OK := e.shouldFill(block.Filler, space); OK {
			e.write(padText)
			e.write(text)
			return true
		}

		var prompt string

		if space > 0 {
			prompt += strings.Repeat(" ", space)
		}

		prompt += text
		e.write(prompt)
	case config.RPrompt:
		e.rprompt = text
		e.rpromptLength = length
	}

	return true
}

func (e *Engine) applyPowerShellBleedPatch() {
	// when in PowerShell, we need to clear the line after the prompt
	// to avoid the background being printed on the next line
	// when at the end of the buffer.
	// See https://github.com/JanDeDobbeleer/oh-my-posh/issues/65
	if e.Env.Shell() != shell.PWSH && e.Env.Shell() != shell.PWSH5 {
		return
	}

	// only do this when enabled
	if !e.Config.PatchPwshBleed {
		return
	}

	e.write(terminal.ClearAfter())
}

func (e *Engine) setActiveSegment(segment *config.Segment) {
	e.activeSegment = segment
	terminal.Interactive = segment.Interactive
	terminal.SetColors(segment.ResolveBackground(), segment.ResolveForeground())
}

func (e *Engine) renderActiveSegment() {
	e.writeSeparator(false)

	switch e.activeSegment.ResolveStyle() {
	case config.Plain, config.Powerline:
		terminal.Write(color.Background, color.Foreground, e.activeSegment.Text())
	case config.Diamond:
		background := color.Transparent

		if e.previousActiveSegment != nil && e.previousActiveSegment.HasEmptyDiamondAtEnd() {
			background = e.previousActiveSegment.ResolveBackground()
		}

		terminal.Write(background, color.Background, e.activeSegment.LeadingDiamond)
		terminal.Write(color.Background, color.Foreground, e.activeSegment.Text())
	case config.Accordion:
		if e.activeSegment.Enabled {
			terminal.Write(color.Background, color.Foreground, e.activeSegment.Text())
		}
	}

	e.previousActiveSegment = e.activeSegment

	terminal.SetParentColors(e.previousActiveSegment.ResolveBackground(), e.previousActiveSegment.ResolveForeground())
}

func (e *Engine) writeSeparator(final bool) {
	if e.activeSegment == nil {
		return
	}

	isCurrentDiamond := e.activeSegment.ResolveStyle() == config.Diamond
	if final && isCurrentDiamond {
		terminal.Write(color.Transparent, color.Background, e.activeSegment.TrailingDiamond)
		return
	}

	isPreviousDiamond := e.previousActiveSegment != nil && e.previousActiveSegment.ResolveStyle() == config.Diamond
	if isPreviousDiamond {
		e.adjustTrailingDiamondColorOverrides()
	}

	if isPreviousDiamond && isCurrentDiamond && len(e.activeSegment.LeadingDiamond) == 0 {
		terminal.Write(color.Background, color.ParentBackground, e.previousActiveSegment.TrailingDiamond)
		return
	}

	if isPreviousDiamond && len(e.previousActiveSegment.TrailingDiamond) > 0 {
		terminal.Write(color.Transparent, color.ParentBackground, e.previousActiveSegment.TrailingDiamond)
	}

	isPowerline := e.activeSegment.IsPowerline()

	shouldOverridePowerlineLeadingSymbol := func() bool {
		if !isPowerline {
			return false
		}

		if isPowerline && len(e.activeSegment.LeadingPowerlineSymbol) == 0 {
			return false
		}

		if e.previousActiveSegment != nil && e.previousActiveSegment.IsPowerline() {
			return false
		}

		return true
	}

	if shouldOverridePowerlineLeadingSymbol() {
		terminal.Write(color.Transparent, color.Background, e.activeSegment.LeadingPowerlineSymbol)
		return
	}

	resolvePowerlineSymbol := func() string {
		if isPowerline {
			return e.activeSegment.PowerlineSymbol
		}

		if e.previousActiveSegment != nil && e.previousActiveSegment.IsPowerline() {
			return e.previousActiveSegment.PowerlineSymbol
		}

		return ""
	}

	symbol := resolvePowerlineSymbol()
	if len(symbol) == 0 {
		return
	}

	bgColor := color.Background
	if final || !isPowerline {
		bgColor = color.Transparent
	}

	if e.activeSegment.ResolveStyle() == config.Diamond && len(e.activeSegment.LeadingDiamond) == 0 {
		bgColor = color.Background
	}

	if e.activeSegment.InvertPowerline || (e.previousActiveSegment != nil && e.previousActiveSegment.InvertPowerline) {
		terminal.Write(e.getPowerlineColor(), bgColor, symbol)
		return
	}

	terminal.Write(bgColor, e.getPowerlineColor(), symbol)
}

func (e *Engine) getPowerlineColor() color.Ansi {
	if e.previousActiveSegment == nil {
		return color.Transparent
	}

	if e.previousActiveSegment.ResolveStyle() == config.Diamond && len(e.previousActiveSegment.TrailingDiamond) == 0 {
		return e.previousActiveSegment.ResolveBackground()
	}

	if e.activeSegment.ResolveStyle() == config.Diamond && len(e.activeSegment.LeadingDiamond) == 0 {
		return e.previousActiveSegment.ResolveBackground()
	}

	if !e.previousActiveSegment.IsPowerline() {
		return color.Transparent
	}

	return e.previousActiveSegment.ResolveBackground()
}

func (e *Engine) adjustTrailingDiamondColorOverrides() {
	// as we now already adjusted the activeSegment, we need to change the value
	// of background and foreground to parentBackground and parentForeground
	// this will still break when using parentBackground and parentForeground as keywords
	// in a trailing diamond, but let's fix that when it happens as it requires either a rewrite
	// of the logic for diamonds or storing grandparents as well like one happy family.
	if e.previousActiveSegment == nil || len(e.previousActiveSegment.TrailingDiamond) == 0 {
		return
	}

	if !strings.Contains(e.previousActiveSegment.TrailingDiamond, string(color.Background)) && !strings.Contains(e.previousActiveSegment.TrailingDiamond, string(color.Foreground)) {
		return
	}

	match := regex.FindNamedRegexMatch(terminal.AnchorRegex, e.previousActiveSegment.TrailingDiamond)
	if len(match) == 0 {
		return
	}

	adjustOverride := func(anchor string, override color.Ansi) {
		newOverride := override
		switch override { //nolint:exhaustive
		case color.Foreground:
			newOverride = color.ParentForeground
		case color.Background:
			newOverride = color.ParentBackground
		}

		if override == newOverride {
			return
		}

		newAnchor := strings.Replace(match[terminal.ANCHOR], string(override), string(newOverride), 1)
		e.previousActiveSegment.TrailingDiamond = strings.Replace(e.previousActiveSegment.TrailingDiamond, anchor, newAnchor, 1)
	}

	if len(match[terminal.BG]) > 0 {
		adjustOverride(match[terminal.ANCHOR], color.Ansi(match[terminal.BG]))
	}

	if len(match[terminal.FG]) > 0 {
		adjustOverride(match[terminal.ANCHOR], color.Ansi(match[terminal.FG]))
	}
}

func (e *Engine) rectifyTerminalWidth(diff int) {
	// Since the terminal width may not be given by the CLI flag, we should always call this here.
	_, err := e.Env.TerminalWidth()
	if err != nil {
		// Skip when we're unable to determine the terminal width.
		return
	}

	e.Env.Flags().TerminalWidth += diff
}

// New returns a prompt engine initialized with the
// given configuration options, and is ready to print any
// of the prompt components.
func New(flags *runtime.Flags) *Engine {
	flags.Config = config.Path(flags.Config)
	cfg, _ := config.Load(flags.Config, flags.Shell, flags.Migrate)

	env := &runtime.Terminal{}
	env.Init(flags)

	template.Init(env, cfg.Var, cfg.Maps)

	flags.HasExtra = cfg.DebugPrompt != nil ||
		cfg.SecondaryPrompt != nil ||
		cfg.TransientPrompt != nil ||
		cfg.ValidLine != nil ||
		cfg.ErrorLine != nil

	// when we print using https://github.com/akinomyoga/ble.sh, this needs to be unescaped for certain prompts
	sh := env.Shell()
	if sh == shell.BASH && !flags.Escape {
		sh = shell.GENERIC
	}

	terminal.Init(sh)
	terminal.BackgroundColor = cfg.TerminalBackground.ResolveTemplate()
	terminal.Colors = cfg.MakeColors(env)
	terminal.Plain = flags.Plain

	eng := &Engine{
		Config:      cfg,
		Env:         env,
		Plain:       flags.Plain,
		forceRender: flags.Force || len(env.Getenv("POSH_FORCE_RENDER")) > 0,
	}

	switch env.Shell() {
	case shell.XONSH:
		// In Xonsh, the behavior of wrapping at the end of a prompt line is inconsistent across different operating systems.
		// On Windows, it wraps before the last cell on the terminal screen, that is, the last cell is never available for a prompt line.
		if env.GOOS() == runtime.WINDOWS {
			eng.rectifyTerminalWidth(-1)
		}
	case shell.ELVISH:
		// In Elvish, the case is similar to that in Xonsh.
		// However, on Windows, we have to reduce the terminal width by 1 again to ensure that newlines are displayed correctly.
		diff := -1
		if env.GOOS() == runtime.WINDOWS {
			diff = -2
		}
		eng.rectifyTerminalWidth(diff)
	case shell.PWSH, shell.PWSH5:
		// when in PowerShell, and force patching the bleed bug
		// we need to reduce the terminal width by 1 so the last
		// character isn't cut off by the ANSI escape sequences
		// See https://github.com/JanDeDobbeleer/oh-my-posh/issues/65
		if cfg.PatchPwshBleed {
			eng.rectifyTerminalWidth(-1)
		}
	}

	return eng
}



================================================
FILE: src/prompt/engine_test.go
================================================
package prompt

import (
	"errors"
	"strings"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"

	"github.com/stretchr/testify/assert"
)

func TestCanWriteRPrompt(t *testing.T) {
	cases := []struct {
		TerminalWidthError error
		Case               string
		TerminalWidth      int
		PromptLength       int
		RPromptLength      int
		Expected           bool
	}{
		{Case: "Width Error", Expected: false, TerminalWidthError: errors.New("burp")},
		{Case: "Terminal > Prompt enabled", Expected: true, TerminalWidth: 200, PromptLength: 100, RPromptLength: 10},
		{Case: "Terminal > Prompt enabled edge", Expected: true, TerminalWidth: 200, PromptLength: 100, RPromptLength: 70},
		{Case: "Prompt > Terminal enabled", Expected: true, TerminalWidth: 200, PromptLength: 300, RPromptLength: 70},
		{Case: "Terminal > Prompt disabled no breathing", Expected: false, TerminalWidth: 200, PromptLength: 100, RPromptLength: 71},
		{Case: "Prompt > Terminal disabled no breathing", Expected: false, TerminalWidth: 200, PromptLength: 300, RPromptLength: 80},
		{Case: "Prompt > Terminal disabled no room", Expected: true, TerminalWidth: 200, PromptLength: 400, RPromptLength: 80},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("TerminalWidth").Return(tc.TerminalWidth, tc.TerminalWidthError)
		engine := &Engine{
			Env:               env,
			rpromptLength:     tc.RPromptLength,
			currentLineLength: tc.PromptLength,
			rprompt:           "hello",
		}

		_, got := engine.canWriteRightBlock(tc.RPromptLength, true)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestPrintPWD(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Config   string
		Pwd      string
		Shell    string
		Cygwin   bool
	}{
		{Case: "Empty PWD"},
		{Case: "OSC99", Config: terminal.OSC99, Expected: "\x1b]9;9;pwd\x1b\\"},
		{Case: "OSC99 - Elvish", Config: terminal.OSC99, Shell: shell.ELVISH},
		{Case: "OSC7", Config: terminal.OSC7, Expected: "\x1b]7;file://host/pwd\x1b\\"},
		{Case: "OSC51", Config: terminal.OSC51, Expected: "\x1b]51;Auser@host:pwd\x1b\\"},
		{Case: "Template (empty)", Config: "{{ if eq .Shell \"pwsh\" }}osc7{{ end }}"},
		{Case: "Template (non empty)", Shell: shell.GENERIC, Config: "{{ if eq .Shell \"shell\" }}osc7{{ end }}", Expected: "\x1b]7;file://host/pwd\x1b\\"},
		{
			Case:     "OSC99 Cygwin",
			Pwd:      `C:\Users\user\Documents\GitHub\oh-my-posh`,
			Config:   terminal.OSC99,
			Cygwin:   true,
			Expected: "\x1b]9;9;C:/Users/user/Documents/GitHub/oh-my-posh\x1b\\",
		},
		{
			Case:     "OSC99 Windows",
			Pwd:      `C:\Users\user\Documents\GitHub\oh-my-posh`,
			Config:   terminal.OSC99,
			Expected: "\x1b]9;9;C:\\Users\\user\\Documents\\GitHub\\oh-my-posh\x1b\\",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		if len(tc.Pwd) == 0 {
			tc.Pwd = "pwd"
		}

		env.On("Pwd").Return(tc.Pwd)
		env.On("User").Return("user")
		env.On("Shell").Return(tc.Shell)
		env.On("IsCygwin").Return(tc.Cygwin)
		env.On("Host").Return("host", nil)

		template.Cache = &cache.Template{
			Shell:    tc.Shell,
			Segments: maps.NewConcurrent(),
		}
		template.Init(env, nil, nil)

		terminal.Init(shell.GENERIC)

		engine := &Engine{
			Env: env,
			Config: &config.Config{
				PWD: tc.Config,
			},
		}

		engine.pwd()
		got := engine.string()

		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func BenchmarkEngineRender(b *testing.B) {
	for b.Loop() {
		engineRender()
	}
}

func engineRender() {
	cfg, _ := config.Load("", shell.GENERIC, false)

	env := &runtime.Terminal{}
	env.Init(nil)

	defer env.Close()

	template.Cache = &cache.Template{
		Segments: maps.NewConcurrent(),
	}
	template.Init(env, nil, nil)

	terminal.Init(shell.GENERIC)
	terminal.BackgroundColor = cfg.TerminalBackground.ResolveTemplate()
	terminal.Colors = cfg.MakeColors(env)

	engine := &Engine{
		Config: cfg,
		Env:    env,
	}

	engine.Primary()
}

func TestGetTitle(t *testing.T) {
	cases := []struct {
		Template      string
		User          string
		Cwd           string
		PathSeparator string
		ShellName     string
		Expected      string
		Root          bool
	}{
		{
			Template:      "{{.Env.USERDOMAIN}} :: {{.PWD}}{{if .Root}} :: Admin{{end}} :: {{.Shell}}",
			Cwd:           "C:\\vagrant",
			PathSeparator: "\\",
			ShellName:     "PowerShell",
			Root:          true,
			Expected:      "\x1b]0;MyCompany :: C:\\vagrant :: Admin :: PowerShell\a",
		},
		{
			Template:      "{{.Folder}}{{if .Root}} :: Admin{{end}} :: {{.Shell}}",
			Cwd:           "C:\\vagrant",
			PathSeparator: "\\",
			ShellName:     "PowerShell",
			Expected:      "\x1b]0;vagrant :: PowerShell\a",
		},
		{
			Template:      "{{.UserName}}@{{.HostName}}{{if .Root}} :: Admin{{end}} :: {{.Shell}}",
			Root:          true,
			User:          "MyUser",
			PathSeparator: "\\",
			ShellName:     "PowerShell",
			Expected:      "\x1b]0;MyUser@MyHost :: Admin :: PowerShell\a",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Pwd").Return(tc.Cwd)
		env.On("Home").Return("/usr/home")
		env.On("PathSeparator").Return(tc.PathSeparator)
		env.On("Getenv", "USERDOMAIN").Return("MyCompany")
		env.On("Shell").Return(tc.ShellName)

		terminal.Init(shell.GENERIC)

		template.Cache = &cache.Template{
			Shell:    tc.ShellName,
			UserName: "MyUser",
			Root:     tc.Root,
			HostName: "MyHost",
			PWD:      tc.Cwd,
			Folder:   "vagrant",
			Segments: maps.NewConcurrent(),
		}
		template.Init(env, nil, nil)

		engine := &Engine{
			Config: &config.Config{
				ConsoleTitleTemplate: tc.Template,
			},
			Env: env,
		}

		title := engine.getTitleTemplateText()
		got := terminal.FormatTitle(title)

		assert.Equal(t, tc.Expected, got)
	}
}

func TestGetConsoleTitleIfGethostnameReturnsError(t *testing.T) {
	cases := []struct {
		Template      string
		User          string
		Cwd           string
		PathSeparator string
		ShellName     string
		Expected      string
		Root          bool
	}{
		{
			Template:      "Not using Host only {{.UserName}} and {{.Shell}}",
			User:          "MyUser",
			PathSeparator: "\\",
			ShellName:     "PowerShell",
			Expected:      "\x1b]0;Not using Host only MyUser and PowerShell\a",
		},
		{
			Template:      "{{.UserName}}@{{.HostName}} :: {{.Shell}}",
			User:          "MyUser",
			PathSeparator: "\\",
			ShellName:     "PowerShell",
			Expected:      "\x1b]0;MyUser@ :: PowerShell\a",
		},
		{
			Template: "\x1b[93m[\x1b[39m\x1b[96mconsole-title\x1b[39m\x1b[96m ≡\x1b[39m\x1b[31m +0\x1b[39m\x1b[31m ~1\x1b[39m\x1b[31m -0\x1b[39m\x1b[31m !\x1b[39m\x1b[93m]\x1b[39m",
			Expected: "\x1b]0;[console-title ≡ +0 ~1 -0 !]\a",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Pwd").Return(tc.Cwd)
		env.On("Home").Return("/usr/home")
		env.On("Getenv", "USERDOMAIN").Return("MyCompany")
		env.On("Shell").Return(tc.ShellName)

		terminal.Init(shell.GENERIC)

		template.Cache = &cache.Template{
			Shell:    tc.ShellName,
			UserName: "MyUser",
			Root:     tc.Root,
			HostName: "",
			Segments: maps.NewConcurrent(),
		}
		template.Init(env, nil, nil)

		engine := &Engine{
			Config: &config.Config{
				ConsoleTitleTemplate: tc.Template,
			},
			Env: env,
		}

		title := engine.getTitleTemplateText()
		got := terminal.FormatTitle(title)

		assert.Equal(t, tc.Expected, got)
	}
}

func TestShouldFill(t *testing.T) {
	cases := []struct {
		Case           string
		Overflow       config.Overflow
		ExpectedFiller string
		Block          config.Block
		Padding        int
		ExpectedBool   bool
	}{
		{
			Case:           "Plain single character with no padding",
			Padding:        0,
			ExpectedFiller: "",
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Hide,
				Filler:   "-",
			},
		},
		{
			Case:           "Plain single character with 1 padding",
			Padding:        1,
			ExpectedFiller: "-",
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Hide,
				Filler:   "-",
			},
		},
		{
			Case:           "Plain single character with lots of padding",
			Padding:        200,
			ExpectedFiller: strings.Repeat("-", 200),
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Hide,
				Filler:   "-",
			},
		},
		{
			Case:           "Plain multi-character with some padding",
			Padding:        20,
			ExpectedFiller: strings.Repeat("-^-", 6) + "  ",
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Hide,
				Filler:   "-^-",
			},
		},
		{
			Case:           "Template conditional on overflow with no overflow",
			Padding:        3,
			ExpectedFiller: strings.Repeat("X", 3),
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Hide,
				Filler:   "{{ if .Overflow -}} O {{- else -}} X {{- end }}",
			},
		},
		{
			Case:           "Template conditional on overflow with an overflow",
			Overflow:       config.Break,
			Padding:        3,
			ExpectedFiller: strings.Repeat("O", 3),
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Hide,
				Filler:   "{{ if .Overflow -}} O {{- else -}} X {{- end }}",
			},
		},
		{
			Case:           "Template conditional on overflow break",
			Overflow:       config.Break,
			Padding:        3,
			ExpectedFiller: strings.Repeat("O", 3),
			ExpectedBool:   true,
			Block: config.Block{
				Overflow: config.Break,
				Filler:   `{{ if eq .Overflow "break" -}} O {{- else -}} X {{- end }}`,
			},
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Shell").Return(shell.GENERIC)

		engine := &Engine{
			Env:      env,
			Overflow: tc.Overflow,
		}

		template.Cache = &cache.Template{
			Shell:    shell.GENERIC,
			Segments: maps.NewConcurrent(),
		}
		template.Init(env, nil, nil)

		terminal.Init(shell.GENERIC)
		terminal.Plain = true
		terminal.Colors = &color.Defaults{}

		gotFiller, gotBool := engine.shouldFill(tc.Block.Filler, tc.Padding)

		assert.Equal(t, tc.ExpectedFiller, gotFiller, tc.Case)
		assert.Equal(t, tc.ExpectedBool, gotBool, tc.Case)
	}
}



================================================
FILE: src/prompt/extra.go
================================================
package prompt

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

type ExtraPromptType int

const (
	Transient ExtraPromptType = iota
	Valid
	Error
	Secondary
	Debug
)

func (e *Engine) ExtraPrompt(promptType ExtraPromptType) string {
	var prompt *config.Segment

	switch promptType {
	case Debug:
		prompt = e.Config.DebugPrompt
	case Transient:
		prompt = e.Config.TransientPrompt
	case Valid:
		prompt = e.Config.ValidLine
	case Error:
		prompt = e.Config.ErrorLine
	case Secondary:
		prompt = e.Config.SecondaryPrompt
	}

	if prompt == nil {
		prompt = &config.Segment{}
	}

	getTemplate := func(template string) string {
		if len(template) != 0 {
			return template
		}
		switch promptType { //nolint: exhaustive
		case Debug:
			return "[DBG]: "
		case Transient:
			return "{{ .Shell }}> "
		case Secondary:
			return "> "
		default:
			return ""
		}
	}

	tmpl := &template.Text{
		Template: getTemplate(prompt.Template),
	}

	promptText, err := tmpl.Render()
	if err != nil {
		promptText = err.Error()
	}

	if promptType == Transient && prompt.Newline {
		promptText = fmt.Sprintf("%s%s", e.getNewline(), promptText)
	}

	if promptType == Transient && e.Config.ShellIntegration {
		exitCode, _ := e.Env.StatusCodes()
		e.write(terminal.CommandFinished(exitCode, e.Env.Flags().NoExitCode))
		e.write(terminal.PromptStart())
	}

	foreground := color.Ansi(prompt.ForegroundTemplates.FirstMatch(nil, string(prompt.Foreground)))
	background := color.Ansi(prompt.BackgroundTemplates.FirstMatch(nil, string(prompt.Background)))
	terminal.SetColors(background, foreground)
	terminal.Write(background, foreground, promptText)

	str, length := terminal.String()

	if promptType == Transient && len(prompt.Filler) != 0 {
		consoleWidth, err := e.Env.TerminalWidth()
		if err == nil || consoleWidth != 0 {
			if padText, OK := e.shouldFill(prompt.Filler, consoleWidth-length); OK {
				str += padText
			}
		}
	}

	switch e.Env.Shell() {
	case shell.ZSH:
		if promptType == Transient {
			if !e.Env.Flags().Eval {
				break
			}

			prompt := fmt.Sprintf("PS1=%s", shell.QuotePosixStr(str))
			// empty RPROMPT
			prompt += "\nRPROMPT=''"
			return prompt
		}
	case shell.PWSH, shell.PWSH5:
		if promptType == Transient {
			// clear the line afterwards to prevent text from being written on the same line
			// see https://github.com/JanDeDobbeleer/oh-my-posh/issues/3628
			return str + terminal.ClearAfter()
		}
	}

	return str
}



================================================
FILE: src/prompt/preview.go
================================================
package prompt

import (
	"fmt"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

func (e *Engine) Preview() string {
	var builder strings.Builder

	printPrompt := func(title, prompt string) {
		builder.WriteString(log.Text(fmt.Sprintf("\n%s:\n\n", title)).Bold().Plain().String())
		builder.WriteString(prompt)
		builder.WriteString("\n")
	}

	printPrompt("Primary", e.Primary())

	right := e.RPrompt()
	if len(right) > 0 {
		printPrompt("Right", right)
	}

	if e.Config.SecondaryPrompt != nil {
		printPrompt("Secondary", e.ExtraPrompt(Secondary))
	}

	if e.Config.TransientPrompt != nil {
		printPrompt("Transient", e.ExtraPrompt(Transient))
	}

	if e.Config.DebugPrompt != nil {
		printPrompt("Debug", e.ExtraPrompt(Debug))
	}

	if e.Config.ValidLine != nil {
		printPrompt("Valid", e.ExtraPrompt(Valid))
	}

	if e.Config.ErrorLine != nil {
		printPrompt("Error", e.ExtraPrompt(Error))
	}

	builder.WriteString("\n")

	return builder.String()
}



================================================
FILE: src/prompt/primary.go
================================================
package prompt

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

func (e *Engine) Primary() string {
	needsPrimaryRightPrompt := e.needsPrimaryRightPrompt()

	e.writePrimaryPrompt(needsPrimaryRightPrompt)

	switch e.Env.Shell() {
	case shell.ZSH:
		if !e.Env.Flags().Eval {
			break
		}

		// Warp doesn't support RPROMPT so we need to write it manually
		if e.isWarp() {
			e.writePrimaryRightPrompt()
			prompt := fmt.Sprintf("PS1=%s", shell.QuotePosixStr(e.string()))
			return prompt
		}

		prompt := fmt.Sprintf("PS1=%s", shell.QuotePosixStr(e.string()))
		prompt += fmt.Sprintf("\nRPROMPT=%s", shell.QuotePosixStr(e.rprompt))

		return prompt
	default:
		if !needsPrimaryRightPrompt {
			break
		}

		e.writePrimaryRightPrompt()
	}

	return e.string()
}

func (e *Engine) writePrimaryPrompt(needsPrimaryRPrompt bool) {
	if e.Config.ShellIntegration {
		exitCode, _ := e.Env.StatusCodes()
		e.write(terminal.CommandFinished(exitCode, e.Env.Flags().NoExitCode))
		e.write(terminal.PromptStart())
	}

	// cache a pointer to the color cycle
	cycle = &e.Config.Cycle
	var cancelNewline, didRender bool

	for i, block := range e.Config.Blocks {
		// do not print a leading newline when we're at the first row and the prompt is cleared
		if i == 0 {
			row, _ := e.Env.CursorPosition()
			cancelNewline = e.Env.Flags().Cleared || e.Env.Flags().PromptCount == 1 || row == 1
		}

		// skip setting a newline when we didn't print anything yet
		if i != 0 {
			cancelNewline = !didRender
		}

		if block.Type == config.RPrompt && !needsPrimaryRPrompt {
			continue
		}

		if e.renderBlock(block, cancelNewline) {
			didRender = true
		}

		if e.Config.ToolTipsAction.IsDefault() {
			continue
		}

		e.Env.Session().Set(RPromptKey, e.rprompt, cache.INFINITE)
		e.Env.Session().Set(RPromptLengthKey, strconv.Itoa(e.rpromptLength), cache.INFINITE)
	}

	if len(e.Config.ConsoleTitleTemplate) > 0 && !e.Env.Flags().Plain {
		title := e.getTitleTemplateText()
		e.write(terminal.FormatTitle(title))
	}

	if e.Config.FinalSpace {
		e.write(" ")
		e.currentLineLength++
	}

	if e.Config.ITermFeatures != nil && e.isIterm() {
		host, _ := e.Env.Host()
		e.write(terminal.RenderItermFeatures(e.Config.ITermFeatures, e.Env.Shell(), e.Env.Pwd(), e.Env.User(), host))
	}

	if e.Config.ShellIntegration {
		e.write(terminal.CommandStart())
	}

	e.pwd()
}

func (e *Engine) needsPrimaryRightPrompt() bool {
	if e.Env.Flags().Debug {
		return true
	}

	switch e.Env.Shell() {
	case shell.PWSH, shell.PWSH5, shell.GENERIC, shell.ZSH:
		return true
	default:
		return false
	}
}

func (e *Engine) writePrimaryRightPrompt() {
	space, OK := e.canWriteRightBlock(e.rpromptLength, true)
	if !OK {
		return
	}

	e.write(terminal.SaveCursorPosition())
	e.write(strings.Repeat(" ", space))
	e.write(e.rprompt)
	e.write(terminal.RestoreCursorPosition())
}



================================================
FILE: src/prompt/rprompt.go
================================================
package prompt

import (
	"strconv"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
)

const (
	RPromptKey       = "rprompt"
	RPromptLengthKey = "rprompt_length"
)

func (e *Engine) RPrompt() string {
	var rprompt *config.Block

	for _, block := range e.Config.Blocks {
		if block.Type != config.RPrompt {
			continue
		}

		rprompt = block
		break
	}

	if rprompt == nil {
		return ""
	}

	text, length := e.writeBlockSegments(rprompt)

	// do not print anything when we don't have any text
	if length == 0 {
		return ""
	}

	e.rpromptLength = length

	if e.Env.Shell() == shell.ELVISH && e.Env.GOOS() != runtime.WINDOWS {
		// Workaround to align with a right-aligned block on non-Windows systems.
		text += " "
	}

	if !e.Config.ToolTipsAction.IsDefault() {
		e.Env.Session().Set(RPromptKey, text, cache.INFINITE)
		e.Env.Session().Set(RPromptLengthKey, strconv.Itoa(e.rpromptLength), cache.INFINITE)
	}

	return text
}



================================================
FILE: src/prompt/segments.go
================================================
package prompt

import (
	"runtime"
	"slices"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

type result struct {
	segment *config.Segment
	index   int
}

func (e *Engine) writeBlockSegments(block *config.Block) (string, int) {
	length := len(block.Segments)

	if length == 0 {
		return "", 0
	}

	out := make(chan result, length)

	for i, segment := range block.Segments {
		go func(segment *config.Segment) {
			segment.Execute(e.Env)
			out <- result{segment, i}
		}(segment)
	}

	e.writeSegments(out, block)

	if e.activeSegment != nil && len(block.TrailingDiamond) > 0 {
		e.activeSegment.TrailingDiamond = block.TrailingDiamond
	}

	e.writeSeparator(true)

	e.activeSegment = nil
	e.previousActiveSegment = nil

	return terminal.String()
}

func (e *Engine) writeSegments(out chan result, block *config.Block) {
	count := len(block.Segments)
	// store the current index
	current := 0
	// keep track of what we already executed
	executedCount := 0
	// store the results
	results := make([]*config.Segment, count)
	// store the unique names of executed segments
	executed := make([]string, count)
	// store the actual redered index
	segmentIndex := 0

	for {
		select {
		case res := <-out:
			executedCount++

			finished := executedCount == count

			results[res.index] = res.segment

			name := res.segment.Name()
			if !slices.Contains(executed, name) {
				executed = append(executed, name)
			}

			segment := results[current]

			for segment != nil {
				if !e.canRenderSegment(segment, executed) && !finished {
					break
				}

				if segment.Render(segmentIndex, e.forceRender) {
					segmentIndex++
				}

				e.writeSegment(block, segment)

				if current == count-1 {
					return
				}

				current++
				segment = results[current]
			}
		default:
			runtime.Gosched()
		}
	}
}

func (e *Engine) writeSegment(block *config.Block, segment *config.Segment) bool {
	if !segment.Enabled && segment.ResolveStyle() != config.Accordion {
		return false
	}

	if colors, newCycle := cycle.Loop(); colors != nil {
		cycle = &newCycle
		segment.Foreground = colors.Foreground
		segment.Background = colors.Background
	}

	if terminal.Len() == 0 && len(block.LeadingDiamond) > 0 {
		segment.LeadingDiamond = block.LeadingDiamond
	}

	e.setActiveSegment(segment)
	e.renderActiveSegment()

	return true
}

func (e *Engine) canRenderSegment(segment *config.Segment, executed []string) bool {
	for _, name := range segment.Needs {
		if slices.Contains(executed, name) {
			continue
		}

		return false
	}

	return true
}



================================================
FILE: src/prompt/segments_test.go
================================================
package prompt

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	"github.com/stretchr/testify/assert"
)

func TestRenderBlock(t *testing.T) {
	engine := New(&runtime.Flags{
		IsPrimary: true,
	})
	block := &config.Block{
		Segments: []*config.Segment{
			{
				Type:       "text",
				Template:   "Hello",
				Foreground: "red",
				Background: "blue",
			},
			{
				Type:       "text",
				Template:   "World",
				Foreground: "red",
				Background: "blue",
			},
		},
	}

	prompt, length := engine.writeBlockSegments(block)
	assert.NotEmpty(t, prompt)
	assert.Equal(t, 10, length)
}

func TestCanRenderSegment(t *testing.T) {
	cases := []struct {
		Case     string
		Executed []string
		Needs    []string
		Expected bool
	}{
		{
			Case:     "No cross segment dependencies",
			Expected: true,
		},
		{
			Case:     "Cross segment dependencies, nothing executed",
			Expected: false,
			Needs:    []string{"Foo"},
		},
		{
			Case:     "Cross segment dependencies, available",
			Expected: true,
			Executed: []string{"Foo"},
			Needs:    []string{"Foo"},
		},
	}
	for _, c := range cases {
		segment := &config.Segment{
			Type:  "text",
			Needs: c.Needs,
		}

		engine := &Engine{}
		got := engine.canRenderSegment(segment, c.Executed)

		assert.Equal(t, c.Expected, got, c.Case)
	}
}



================================================
FILE: src/prompt/tooltip.go
================================================
package prompt

import (
	"slices"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/config"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/terminal"
)

func (e *Engine) Tooltip(tip string) string {
	tip = strings.Trim(tip, " ")
	tooltips := make([]*config.Segment, 0, 1)

	for _, tooltip := range e.Config.Tooltips {
		if !slices.Contains(tooltip.Tips, tip) {
			continue
		}

		tooltip.Execute(e.Env)

		if !tooltip.Enabled {
			continue
		}

		tooltips = append(tooltips, tooltip)
	}

	if len(tooltips) == 0 {
		return ""
	}

	// little hack to reuse the current logic
	block := &config.Block{
		Alignment: config.Right,
		Segments:  tooltips,
	}

	text, length := e.writeBlockSegments(block)

	// do not print anything when we don't have any text
	if length == 0 {
		return ""
	}

	text, length = e.handleToolTipAction(text, length)

	switch e.Env.Shell() {
	case shell.PWSH, shell.PWSH5:
		e.rprompt = text
		e.currentLineLength = e.Env.Flags().Column

		space, ok := e.canWriteRightBlock(length, true)
		if !ok {
			return ""
		}

		e.write(terminal.SaveCursorPosition())
		e.write(strings.Repeat(" ", space))
		e.write(text)
		e.write(terminal.RestoreCursorPosition())
		return e.string()
	default:
		return text
	}
}

func (e *Engine) handleToolTipAction(text string, length int) (string, int) {
	if e.Config.ToolTipsAction.IsDefault() {
		return text, length
	}

	rprompt, OK := e.Env.Session().Get(RPromptKey)
	if !OK {
		return text, length
	}

	rpromptLengthStr, OK := e.Env.Session().Get(RPromptLengthKey)
	if !OK {
		return text, length
	}

	rpromptLength, err := strconv.Atoi(rpromptLengthStr)
	if err != nil {
		return text, length
	}

	length += rpromptLength

	switch e.Config.ToolTipsAction {
	case config.Extend:
		text = rprompt + text
	case config.Prepend:
		text += rprompt
	}

	return text, length
}



================================================
FILE: src/properties/map.go
================================================
package properties

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
)

type Properties interface {
	GetColor(property Property, defaultValue color.Ansi) color.Ansi
	GetBool(property Property, defaultValue bool) bool
	GetString(property Property, defaultValue string) string
	GetFloat64(property Property, defaultValue float64) float64
	GetInt(property Property, defaultValue int) int
	GetKeyValueMap(property Property, defaultValue map[string]string) map[string]string
	GetStringArray(property Property, defaultValue []string) []string
	Get(property Property, defaultValue any) any
}

// Property defines one property of a segment for context
type Property string

// general Properties used across Segments
const (
	// Style indicates the style to use
	Style Property = "style"
	// FetchVersion decides whether to fetch the version number or not
	FetchVersion Property = "fetch_version"
	// AlwaysEnabled decides whether or not to always display the info
	AlwaysEnabled Property = "always_enabled"
	// VersionURLTemplate is the template to use when building language segment hyperlink
	VersionURLTemplate Property = "version_url_template"
	// DisplayError decides whether to display when an error occurs or not
	DisplayError Property = "display_error"
	// DisplayDefault hides or shows the default
	DisplayDefault Property = "display_default"
	// AccessToken is the access token to use for an API
	AccessToken Property = "access_token"
	// RefreshToken is the refresh token to use for an API
	RefreshToken Property = "refresh_token"
	// HTTPTimeout timeout used when executing http request
	HTTPTimeout Property = "http_timeout"
	// DefaultHTTPTimeout default timeout used when executing http request
	DefaultHTTPTimeout = 20
	// Files to trigger the segment on
	Files Property = "files"
	// Duration of the cache
	CacheDuration Property = "cache_duration"
)

type Map map[Property]any

func (m Map) GetString(property Property, defaultValue string) string {
	val, found := m[property]
	if !found {
		return defaultValue
	}
	return fmt.Sprint(val)
}

func (m Map) GetColor(property Property, defaultValue color.Ansi) color.Ansi {
	val, found := m[property]
	if !found {
		return defaultValue
	}

	colorString := color.Ansi(fmt.Sprint(val))
	if color.IsAnsiColorName(colorString) {
		return colorString
	}

	values := regex.FindNamedRegexMatch(`(?P<color>#[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}|p:.*)`, colorString.String())
	if values != nil && values["color"] != "" {
		return color.Ansi(values["color"])
	}

	return defaultValue
}

func (m Map) GetBool(property Property, defaultValue bool) bool {
	val, found := m[property]
	if !found {
		return defaultValue
	}
	boolValue, ok := val.(bool)
	if !ok {
		return defaultValue
	}
	return boolValue
}

func (m Map) GetFloat64(property Property, defaultValue float64) float64 {
	val, found := m[property]
	if !found {
		return defaultValue
	}

	switch v := val.(type) {
	case int:
		return float64(v)
	case int64:
		return float64(v)
	case uint64:
		return float64(v)
	case float64:
		return v
	default:
		return defaultValue
	}
}

func (m Map) GetInt(property Property, defaultValue int) int {
	val, found := m[property]
	if !found {
		return defaultValue
	}

	switch v := val.(type) {
	case int:
		return v
	case int64:
		return int(v)
	case uint64:
		return int(v)
	case float64:
		intValue, ok := val.(float64)
		if !ok {
			return defaultValue
		}
		return int(intValue)
	default:
		return defaultValue
	}
}

func (m Map) GetKeyValueMap(property Property, defaultValue map[string]string) map[string]string {
	val, found := m[property]
	if !found {
		return defaultValue
	}

	keyValues := parseKeyValueArray(val)

	return keyValues
}

func (m Map) GetStringArray(property Property, defaultValue []string) []string {
	val, found := m[property]
	if !found {
		return defaultValue
	}

	keyValues := ParseStringArray(val)

	return keyValues
}

func (m Map) Get(property Property, defaultValue any) any {
	val, found := m[property]
	if !found {
		return defaultValue
	}

	return val
}

func ParseStringArray(param any) []string {
	switch v := param.(type) {
	default:
		return []string{}
	case []any:
		list := make([]string, len(v))
		for i, v := range v {
			list[i] = fmt.Sprint(v)
		}
		return list
	case []string:
		return v
	}
}

func parseKeyValueArray(param any) map[string]string {
	switch v := param.(type) {
	default:
		return map[string]string{}
	case map[any]any:
		keyValueArray := make(map[string]string)
		for key, value := range v {
			val := value.(string)
			keyString := fmt.Sprintf("%v", key)
			keyValueArray[keyString] = val
		}
		return keyValueArray
	case map[string]any:
		keyValueArray := make(map[string]string)
		for key, value := range v {
			val := value.(string)
			keyValueArray[key] = val
		}
		return keyValueArray
	case []any:
		keyValueArray := make(map[string]string)
		for _, s := range v {
			l := ParseStringArray(s)
			if len(l) == 2 {
				key := l[0]
				val := l[1]
				keyValueArray[key] = val
			}
		}
		return keyValueArray
	case Map:
		keyValueArray := make(map[string]string)
		for key, value := range v {
			val := value.(string)
			keyString := fmt.Sprintf("%v", key)
			keyValueArray[keyString] = val
		}
		return keyValueArray
	case map[string]string:
		return v
	}
}

// Generic functions

type Value interface {
	string | int | []string | float64 | bool
}

func OneOf[T Value](properties Properties, defaultValue T, props ...Property) T {
	for _, prop := range props {
		// get value on a generic get, then see if we can cast to T?
		val := properties.Get(prop, nil)
		if val == nil {
			continue
		}

		if v, ok := val.(T); ok {
			return v
		}
	}

	return defaultValue
}



================================================
FILE: src/properties/map_test.go
================================================
package properties

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/stretchr/testify/assert"
)

const (
	expected      = "expected"
	expectedColor = color.Ansi("#768954")

	Foo Property = "color"
)

func TestGetString(t *testing.T) {
	var properties = Map{Foo: expected}
	value := properties.GetString(Foo, "err")
	assert.Equal(t, expected, value)
}

func TestGetStringNoEntry(t *testing.T) {
	var properties = Map{}
	value := properties.GetString(Foo, expected)
	assert.Equal(t, expected, value)
}

func TestGetStringNoTextEntry(t *testing.T) {
	var properties = Map{Foo: true}
	value := properties.GetString(Foo, expected)
	assert.Equal(t, "true", value)
}

func TestGetHexColor(t *testing.T) {
	expected := expectedColor
	var properties = Map{Foo: expected}
	value := properties.GetColor(Foo, "#789123")
	assert.Equal(t, expected, value)
}

func TestGetColor(t *testing.T) {
	expected := color.Ansi("yellow")
	var properties = Map{Foo: expected}
	value := properties.GetColor(Foo, "#789123")
	assert.Equal(t, expected, value)
}

func TestDefaultColorWithInvalidColorCode(t *testing.T) {
	expected := expectedColor
	var properties = Map{Foo: "invalid"}
	value := properties.GetColor(Foo, expected)
	assert.Equal(t, expected, value)
}

func TestDefaultColorWithUnavailableProperty(t *testing.T) {
	expected := expectedColor
	var properties = Map{}
	value := properties.GetColor(Foo, expected)
	assert.Equal(t, expected, value)
}

func TestGetPaletteColor(t *testing.T) {
	expected := color.Ansi("p:red")
	var properties = Map{Foo: expected}
	value := properties.GetColor(Foo, "white")
	assert.Equal(t, expected, value)
}

func TestGetBool(t *testing.T) {
	expected := true
	var properties = Map{Foo: expected}
	value := properties.GetBool(Foo, false)
	assert.True(t, value)
}

func TestGetBoolPropertyNotInMap(t *testing.T) {
	var properties = Map{}
	value := properties.GetBool(Foo, false)
	assert.False(t, value)
}

func TestGetBoolInvalidProperty(t *testing.T) {
	var properties = Map{Foo: "borked"}
	value := properties.GetBool(Foo, false)
	assert.False(t, value)
}

func TestGetFloat64(t *testing.T) {
	cases := []struct {
		Input    any
		Case     string
		Expected float64
	}{
		{Case: "int", Expected: 1337, Input: 1337},
		{Case: "float64", Expected: 1337, Input: float64(1337)},
		{Case: "uint64", Expected: 1337, Input: uint64(1337)},
		{Case: "int64", Expected: 1337, Input: int64(1337)},
		{Case: "string", Expected: 9001, Input: "invalid"},
		{Case: "bool", Expected: 9001, Input: true},
	}
	for _, tc := range cases {
		properties := Map{Foo: tc.Input}
		value := properties.GetFloat64(Foo, 9001)
		assert.Equal(t, tc.Expected, value, tc.Case)
	}
}

func TestGetFloat64PropertyNotInMap(t *testing.T) {
	expected := float64(1337)
	var properties = Map{}
	value := properties.GetFloat64(Foo, expected)
	assert.Equal(t, expected, value)
}

func TestOneOf(t *testing.T) {
	cases := []struct {
		Expected     any
		Map          Map
		Case         string
		DefaultValue string
		Properties   []Property
	}{
		{
			Case:       "one element",
			Expected:   "1337",
			Properties: []Property{Foo},
			Map: Map{
				Foo: "1337",
			},
			DefaultValue: "2000",
		},
		{
			Case:       "two elements",
			Expected:   "1337",
			Properties: []Property{Foo},
			Map: Map{
				Foo:   "1337",
				"Bar": "9001",
			},
			DefaultValue: "2000",
		},
		{
			Case:       "no match",
			Expected:   "2000",
			Properties: []Property{"Moo"},
			Map: Map{
				Foo:   "1337",
				"Bar": "9001",
			},
			DefaultValue: "2000",
		},
		{
			Case:       "incorrect type",
			Expected:   "2000",
			Properties: []Property{Foo},
			Map: Map{
				Foo:   1337,
				"Bar": "9001",
			},
			DefaultValue: "2000",
		},
	}
	for _, tc := range cases {
		value := OneOf(tc.Map, tc.DefaultValue, tc.Properties...)
		assert.Equal(t, tc.Expected, value, tc.Case)
	}
}



================================================
FILE: src/properties/properties.go
================================================
package properties

import (
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

type Wrapper struct {
	Properties Map
}

func (w *Wrapper) GetColor(property Property, defaultColor color.Ansi) color.Ansi {
	value := w.Properties.GetColor(property, defaultColor)
	log.Debug(fmt.Sprintf("%s: %s", property, value))
	return value
}

func (w *Wrapper) GetBool(property Property, defaultValue bool) bool {
	value := w.Properties.GetBool(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %t", property, value))
	return value
}

func (w *Wrapper) GetString(property Property, defaultValue string) string {
	value := w.Properties.GetString(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %s", property, value))
	return value
}

func (w *Wrapper) GetFloat64(property Property, defaultValue float64) float64 {
	value := w.Properties.GetFloat64(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %f", property, value))
	return value
}

func (w *Wrapper) GetInt(property Property, defaultValue int) int {
	value := w.Properties.GetInt(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %d", property, value))
	return value
}

func (w *Wrapper) GetKeyValueMap(property Property, defaultValue map[string]string) map[string]string {
	value := w.Properties.GetKeyValueMap(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %v", property, value))
	return value
}

func (w *Wrapper) GetStringArray(property Property, defaultValue []string) []string {
	value := w.Properties.GetStringArray(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %v", property, value))
	return value
}

func (w *Wrapper) Get(property Property, defaultValue any) any {
	value := w.Properties.Get(property, defaultValue)
	log.Debug(fmt.Sprintf("%s: %v", property, value))
	return value
}



================================================
FILE: src/regex/regex.go
================================================
package regex

import (
	"regexp"
	"sync"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

var (
	regexCache     = make(map[string]*regexp.Regexp)
	regexCacheLock = sync.RWMutex{}
)

const (
	LINK = `(?P<STR>\x1b]8;;(.+)\x1b\\(?P<TEXT>.+)\x1b]8;;\x1b\\)`
)

func GetCompiledRegex(pattern string) (*regexp.Regexp, error) {
	// try in cache first
	regexCacheLock.RLock()
	re := regexCache[pattern]
	regexCacheLock.RUnlock()
	if re != nil {
		return re, nil
	}

	// should we panic or return the error?
	re, err := regexp.Compile(pattern)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	// lock for concurrent access and save the compiled expression in cache
	regexCacheLock.Lock()
	regexCache[pattern] = re
	regexCacheLock.Unlock()

	return re, nil
}

func FindNamedRegexMatch(pattern, text string) map[string]string {
	result := make(map[string]string)

	re, err := GetCompiledRegex(pattern)
	if err != nil {
		return result
	}

	match := re.FindStringSubmatch(text)
	if len(match) == 0 {
		return result
	}

	for i, name := range re.SubexpNames() {
		if i == 0 {
			continue
		}
		result[name] = match[i]
	}

	return result
}

func FindAllNamedRegexMatch(pattern, text string) []map[string]string {
	var results []map[string]string

	re, err := GetCompiledRegex(pattern)
	if err != nil {
		return results
	}

	match := re.FindAllStringSubmatch(text, -1)

	if len(match) == 0 {
		return results
	}

	for _, set := range match {
		result := make(map[string]string)
		for i, name := range re.SubexpNames() {
			if i == 0 {
				result["text"] = set[i]
				continue
			}
			result[name] = set[i]
		}
		results = append(results, result)
	}

	return results
}

func ReplaceAllString(pattern, text, replaceText string) string {
	re, err := GetCompiledRegex(pattern)
	if err != nil {
		return text
	}

	return re.ReplaceAllString(text, replaceText)
}

func MatchString(pattern, text string) bool {
	re, err := GetCompiledRegex(pattern)
	if err != nil {
		return false
	}

	return re.MatchString(text)
}

func FindStringMatch(pattern, text string, index int) (string, bool) {
	re, err := GetCompiledRegex(pattern)
	if err != nil {
		return text, false
	}

	matches := re.FindStringSubmatch(text)
	if len(matches) <= index {
		return text, false
	}

	match := matches[index]
	if len(match) == 0 {
		return text, false
	}

	return match, true
}



================================================
FILE: src/regex/regex_test.go
================================================
package regex

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFindStringMatch(t *testing.T) {
	cases := []struct {
		Case     string
		Pattern  string
		Text     string
		Expected string
		Index    int
	}{
		{
			Case:     "Full match at index 0",
			Pattern:  `\w+`,
			Text:     "hello",
			Index:    0,
			Expected: "hello",
		},
		{
			Case:     "Capture group at index 1",
			Pattern:  `hello (\w+)`,
			Text:     "hello world",
			Index:    1,
			Expected: "world",
		},
		{
			Case:     "No matches returns original text",
			Pattern:  `\d+`,
			Text:     "hello",
			Index:    0,
			Expected: "hello",
		},
		{
			Case:     "Invalid pattern returns original text",
			Pattern:  `[invalid`,
			Text:     "hello",
			Index:    0,
			Expected: "hello",
		},
		{
			Case:     "Empty text returns empty string",
			Pattern:  `\w+`,
			Text:     "",
			Index:    0,
			Expected: "",
		},
		{
			Case:     "Index out of bounds returns original text",
			Pattern:  `(\w+)`,
			Text:     "hello",
			Index:    2,
			Expected: "hello",
		},
		{
			Case:     "Multiple capture groups",
			Pattern:  `(\w+)\s(\w+)`,
			Text:     "hello world",
			Index:    2,
			Expected: "world",
		},
	}

	for _, tc := range cases {
		got, _ := FindStringMatch(tc.Pattern, tc.Text, tc.Index)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/runtime/environment.go
================================================
package runtime

import (
	"io"
	"io/fs"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/battery"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"

	disk "github.com/shirou/gopsutil/v3/disk"
)

const (
	UNKNOWN = "unknown"
	WINDOWS = "windows"
	DARWIN  = "darwin"
	LINUX   = "linux"
	FREEBSD = "freebsd"
	CMD     = "cmd"

	PRIMARY = "primary"
)

type Environment interface {
	Getenv(key string) string
	Pwd() string
	Home() string
	User() string
	Root() bool
	Host() (string, error)
	GOOS() string
	Shell() string
	Platform() string
	StatusCodes() (int, string)
	HasFiles(pattern string) bool
	HasFilesInDir(dir, pattern string) bool
	HasFolder(folder string) bool
	HasParentFilePath(input string, followSymlinks bool) (fileInfo *FileInfo, err error)
	HasFileInParentDirs(pattern string, depth uint) bool
	ResolveSymlink(input string) (string, error)
	DirMatchesOneOf(dir string, regexes []string) bool
	DirIsWritable(input string) bool
	CommandPath(command string) string
	HasCommand(command string) bool
	FileContent(file string) string
	LsDir(input string) []fs.DirEntry
	RunCommand(command string, args ...string) (string, error)
	RunShellCommand(shell, command string) string
	ExecutionTime() float64
	Flags() *Flags
	BatteryState() (*battery.Info, error)
	QueryWindowTitles(processName, windowTitleRegex string) (string, error)
	WindowsRegistryKeyValue(key string) (*WindowsRegistryValue, error)
	HTTPRequest(url string, body io.Reader, timeout int, requestModifiers ...http.RequestModifier) ([]byte, error)
	IsWsl() bool
	IsWsl2() bool
	IsCygwin() bool
	StackCount() int
	TerminalWidth() (int, error)
	Cache() cache.Cache
	Session() cache.Cache
	Close()
	Logs() string
	InWSLSharedDrive() bool
	ConvertToLinuxPath(input string) string
	ConvertToWindowsPath(input string) string
	Connection(connectionType ConnectionType) (*Connection, error)
	CursorPosition() (row, col int)
	SystemInfo() (*SystemInfo, error)
}

type Flags struct {
	PSWD          string
	PipeStatus    string
	Config        string
	Shell         string
	ShellVersion  string
	PWD           string
	AbsolutePWD   string
	Type          string
	ConfigHash    string
	PromptCount   int
	Column        int
	TerminalWidth int
	ExecutionTime float64
	StackCount    int
	ErrorCode     int
	JobCount      int
	Strict        bool
	HasExtra      bool
	Debug         bool
	Cleared       bool
	NoExitCode    bool
	SaveCache     bool
	Init          bool
	Migrate       bool
	Eval          bool
	Escape        bool
	IsPrimary     bool
	Plain         bool
	Force         bool
}

type CommandError struct {
	Err      string
	ExitCode int
}

func (e *CommandError) Error() string {
	return e.Err
}

type FileInfo struct {
	ParentFolder string
	Path         string
	IsDir        bool
}

type WindowsRegistryValueType string

const (
	DWORD  = "DWORD"
	QWORD  = "QWORD"
	BINARY = "BINARY"
	STRING = "STRING"
)

type WindowsRegistryValue struct {
	ValueType WindowsRegistryValueType
	String    string
	DWord     uint64
	QWord     uint64
}

type NotImplemented struct{}

func (n *NotImplemented) Error() string {
	return "not implemented"
}

type ConnectionType string

const (
	ETHERNET  ConnectionType = "ethernet"
	WIFI      ConnectionType = "wifi"
	CELLULAR  ConnectionType = "cellular"
	BLUETOOTH ConnectionType = "bluetooth"
)

type Connection struct {
	Name         string
	Type         ConnectionType
	SSID         string
	TransmitRate uint64
	ReceiveRate  uint64
}

type Memory struct {
	PhysicalTotalMemory     uint64
	PhysicalAvailableMemory uint64
	PhysicalFreeMemory      uint64
	PhysicalPercentUsed     float64
	SwapTotalMemory         uint64
	SwapFreeMemory          uint64
	SwapPercentUsed         float64
}

type SystemInfo struct {
	Disks map[string]disk.IOCountersStat
	Memory
	Load1  float64
	Load5  float64
	Load15 float64
}



================================================
FILE: src/runtime/networks_windows.go
================================================
package runtime

import (
	"errors"
	"strings"
	"syscall"
	"time"
	"unsafe"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"golang.org/x/sys/windows"
)

var (
	wlanapi             = syscall.NewLazyDLL("wlanapi.dll")
	hWlanOpenHandle     = wlanapi.NewProc("WlanOpenHandle")
	hWlanCloseHandle    = wlanapi.NewProc("WlanCloseHandle")
	hWlanQueryInterface = wlanapi.NewProc("WlanQueryInterface")
	hWlanEnumInterfaces = wlanapi.NewProc("WlanEnumInterfaces")
)

//nolint:revive
type MIN_IF_TABLE2 struct {
	NumEntries uint64
	Table      [256]MIB_IF_ROW2
}

//nolint:revive
const (
	IF_MAX_STRING_SIZE         uint64 = 256
	IF_MAX_PHYS_ADDRESS_LENGTH uint64 = 32
)

//nolint:revive
type MIB_IF_ROW2 struct {
	InterfaceLuid            uint64
	InterfaceIndex           uint32
	InterfaceGUID            windows.GUID
	Alias                    [IF_MAX_STRING_SIZE + 1]uint16
	Description              [IF_MAX_STRING_SIZE + 1]uint16
	PhysicalAddressLength    uint32
	PhysicalAddress          [IF_MAX_PHYS_ADDRESS_LENGTH]uint8
	PermanentPhysicalAddress [IF_MAX_PHYS_ADDRESS_LENGTH]uint8

	Mtu                uint32
	Type               uint32
	TunnelType         uint32
	MediaType          uint32
	PhysicalMediumType uint32
	AccessType         uint32
	DirectionType      uint32

	InterfaceAndOperStatusFlags struct {
		HardwareInterface bool
		FilterInterface   bool
		ConnectorPresent  bool
		NotAuthenticated  bool
		NotMediaConnected bool
		Paused            bool
		LowPower          bool
		EndPointInterface bool
	}

	OperStatus        uint32
	AdminStatus       uint32
	MediaConnectState uint32
	NetworkGUID       windows.GUID
	ConnectionType    uint32

	TransmitLinkSpeed uint64
	ReceiveLinkSpeed  uint64

	InOctets           uint64
	InUcastPkts        uint64
	InNUcastPkts       uint64
	InDiscards         uint64
	InErrors           uint64
	InUnknownProtos    uint64
	InUcastOctets      uint64
	InMulticastOctets  uint64
	InBroadcastOctets  uint64
	OutOctets          uint64
	OutUcastPkts       uint64
	OutNUcastPkts      uint64
	OutDiscards        uint64
	OutErrors          uint64
	OutUcastOctets     uint64
	OutMulticastOctets uint64
	OutBroadcastOctets uint64
	OutQLen            uint64
}

//nolint:revive, unused
type WLAN_INTERFACE_INFO_LIST struct {
	dwNumberOfItems uint32
	dwIndex         uint32
	InterfaceInfo   [1]WLAN_INTERFACE_INFO
}

//nolint:revive
type WLAN_INTERFACE_INFO struct {
	InterfaceGuid           syscall.GUID
	strInterfaceDescription [256]uint16
	isState                 uint32
}

//nolint:revive
const (
	WLAN_MAX_NAME_LENGTH  int64 = 256
	DOT11_SSID_MAX_LENGTH int64 = 32
)

//nolint:revive, unused
type WLAN_CONNECTION_ATTRIBUTES struct {
	isState                   uint32
	wlanConnectionMode        uint32
	strProfileName            [WLAN_MAX_NAME_LENGTH]uint16
	wlanAssociationAttributes WLAN_ASSOCIATION_ATTRIBUTES
	wlanSecurityAttributes    WLAN_SECURITY_ATTRIBUTES
}

//nolint:revive, unused
type WLAN_ASSOCIATION_ATTRIBUTES struct {
	dot11Ssid         DOT11_SSID
	dot11BssType      uint32
	dot11Bssid        [6]uint8
	dot11PhyType      uint32
	uDot11PhyIndex    uint32
	wlanSignalQuality uint32
	ulRxRate          uint32
	ulTxRate          uint32
}

//nolint:revive, unused
type WLAN_SECURITY_ATTRIBUTES struct {
	bSecurityEnabled     uint32
	bOneXEnabled         uint32
	dot11AuthAlgorithm   uint32
	dot11CipherAlgorithm uint32
}

//nolint:revive
type DOT11_SSID struct {
	uSSIDLength uint32
	ucSSID      [DOT11_SSID_MAX_LENGTH]uint8
}

func (term *Terminal) getConnections() []*Connection {
	var pIFTable2 *MIN_IF_TABLE2
	_, _, _ = hGetIfTable2.Call(uintptr(unsafe.Pointer(&pIFTable2)))

	networks := make([]*Connection, 0)

	for i := 0; i < int(pIFTable2.NumEntries); i++ {
		networkInterface := pIFTable2.Table[i]
		alias := strings.TrimRight(syscall.UTF16ToString(networkInterface.Alias[:]), "\x00")

		if networkInterface.OperStatus != 1 || // not connected or functional
			!networkInterface.InterfaceAndOperStatusFlags.HardwareInterface || // rule out software interfaces
			strings.HasPrefix(alias, "Local Area Connection") || // not relevant
			strings.Index(alias, "-") >= 3 { // rule out parts of Ethernet filter interfaces
			// e.g. : "Ethernet-WFP Native MAC Layer LightWeight Filter-0000"
			continue
		}

		var connectionType ConnectionType
		var ssid string
		switch networkInterface.Type {
		case 6:
			connectionType = ETHERNET
		case 237, 234, 244:
			connectionType = CELLULAR
		}

		if networkInterface.PhysicalMediumType == 10 {
			connectionType = BLUETOOTH
		}

		// skip connections which aren't relevant
		if len(connectionType) == 0 {
			continue
		}

		log.Debugf("Found network interface: %s", alias)

		network := &Connection{
			Type:         connectionType,
			Name:         alias,
			TransmitRate: networkInterface.TransmitLinkSpeed,
			ReceiveRate:  networkInterface.ReceiveLinkSpeed,
			SSID:         ssid,
		}

		networks = append(networks, network)
	}

	wifi, err := term.wifiNetwork()
	if err == nil {
		networks = append(networks, wifi)
		return networks
	}

	log.Error(err)

	return networks
}

func (term *Terminal) wifiNetwork() (*Connection, error) {
	log.Trace(time.Now())
	// Open handle
	var pdwNegotiatedVersion uint32
	var phClientHandle uint32
	e, _, err := hWlanOpenHandle.Call(uintptr(uint32(2)), uintptr(unsafe.Pointer(nil)), uintptr(unsafe.Pointer(&pdwNegotiatedVersion)), uintptr(unsafe.Pointer(&phClientHandle)))
	if e != 0 {
		return nil, err
	}

	defer func() {
		_, _, _ = hWlanCloseHandle.Call(uintptr(phClientHandle), uintptr(unsafe.Pointer(nil)))
	}()

	// list interfaces
	var interfaceList *WLAN_INTERFACE_INFO_LIST
	e, _, err = hWlanEnumInterfaces.Call(uintptr(phClientHandle), uintptr(unsafe.Pointer(nil)), uintptr(unsafe.Pointer(&interfaceList)))
	if e != 0 {
		return nil, err
	}

	// use first interface that is connected
	numberOfInterfaces := int(interfaceList.dwNumberOfItems)
	infoSize := unsafe.Sizeof(interfaceList.InterfaceInfo[0])
	for i := range numberOfInterfaces {
		network := (*WLAN_INTERFACE_INFO)(unsafe.Pointer(uintptr(unsafe.Pointer(&interfaceList.InterfaceInfo[0])) + uintptr(i)*infoSize))
		if network.isState != 1 {
			log.Debug("Skipping non-connected wifi interface")
			continue
		}

		return term.parseNetworkInterface(network, phClientHandle)
	}

	return nil, errors.New("not connected")
}

func (term *Terminal) parseNetworkInterface(network *WLAN_INTERFACE_INFO, clientHandle uint32) (*Connection, error) {
	info := Connection{
		Type: WIFI,
	}

	// Query wifi connection state
	var dataSize uint32
	var wlanAttr *WLAN_CONNECTION_ATTRIBUTES
	e, _, err := hWlanQueryInterface.Call(uintptr(clientHandle),
		uintptr(unsafe.Pointer(&network.InterfaceGuid)),
		uintptr(7), // wlan_intf_opcode_current_connection
		uintptr(unsafe.Pointer(nil)),
		uintptr(unsafe.Pointer(&dataSize)),
		uintptr(unsafe.Pointer(&wlanAttr)),
		uintptr(unsafe.Pointer(nil)))
	if e != 0 {
		return &info, err
	}

	// SSID
	ssid := wlanAttr.wlanAssociationAttributes.dot11Ssid
	if ssid.uSSIDLength > 0 {
		info.SSID = string(ssid.ucSSID[0:ssid.uSSIDLength])
		info.Name = info.SSID
		log.Debugf("Found wifi interface: %s", info.SSID)
	}

	info.TransmitRate = uint64(wlanAttr.wlanAssociationAttributes.ulTxRate / 1024)
	info.ReceiveRate = uint64(wlanAttr.wlanAssociationAttributes.ulRxRate / 1024)

	return &info, nil
}



================================================
FILE: src/runtime/terminal.go
================================================
package runtime

import (
	"context"
	"errors"
	"fmt"
	"io"
	"io/fs"
	httplib "net/http"
	"net/http/httputil"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/cmd"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"

	disk "github.com/shirou/gopsutil/v3/disk"
	load "github.com/shirou/gopsutil/v3/load"
	process "github.com/shirou/gopsutil/v3/process"
)

type Terminal struct {
	CmdFlags     *Flags
	cmdCache     *cache.Command
	deviceCache  *cache.File
	sessionCache *cache.File
	lsDirMap     maps.Concurrent
	cwd          string
	host         string
	networks     []*Connection
}

func (term *Terminal) Init(flags *Flags) {
	defer log.Trace(time.Now())

	term.CmdFlags = flags

	if term.CmdFlags == nil {
		term.CmdFlags = &Flags{}
	}

	initCache := func(fileName string) *cache.File {
		fileCache := &cache.File{}
		fileCache.Init(filepath.Join(cache.Path(), fileName), term.CmdFlags.SaveCache)
		return fileCache
	}

	term.deviceCache = initCache(cache.FileName)
	if fileName, err := cache.SessionFileName(); err == nil {
		term.sessionCache = initCache(fileName)
	}

	term.setPromptCount()

	term.setPwd()

	term.cmdCache = &cache.Command{
		Commands: maps.NewConcurrent(),
	}
}

func (term *Terminal) Getenv(key string) string {
	defer log.Trace(time.Now(), key)
	val := os.Getenv(key)
	log.Debug(val)
	return val
}

func (term *Terminal) Pwd() string {
	return term.cwd
}

func (term *Terminal) setPwd() {
	defer log.Trace(time.Now())

	correctPath := func(pwd string) string {
		if term.GOOS() != WINDOWS {
			return pwd
		}

		// on Windows, and being case sensitive and not consistent and all, this gives silly issues
		driveLetter, err := regex.GetCompiledRegex(`^[a-z]:`)
		if err == nil {
			return driveLetter.ReplaceAllStringFunc(pwd, strings.ToUpper)
		}

		return pwd
	}

	if term.CmdFlags != nil && term.CmdFlags.PWD != "" {
		term.cwd = path.Clean(term.CmdFlags.PWD)
		log.Debug(term.cwd)
		return
	}

	dir, err := os.Getwd()
	if err != nil {
		log.Error(err)
		return
	}

	term.cwd = correctPath(dir)
	log.Debug(term.cwd)
}

func (term *Terminal) HasFiles(pattern string) bool {
	return term.HasFilesInDir(term.Pwd(), pattern)
}

func (term *Terminal) HasFilesInDir(dir, pattern string) bool {
	defer log.Trace(time.Now(), pattern)

	fileSystem := os.DirFS(dir)
	var dirEntries []fs.DirEntry

	if files, OK := term.lsDirMap.Get(dir); OK {
		dirEntries, _ = files.([]fs.DirEntry)
	}

	if len(dirEntries) == 0 {
		var err error
		dirEntries, err = fs.ReadDir(fileSystem, ".")
		if err != nil {
			log.Error(err)
			log.Debug("false")
			return false
		}

		term.lsDirMap.Set(dir, dirEntries)
	}

	pattern = strings.ToLower(pattern)

	for _, match := range dirEntries {
		if match.IsDir() {
			continue
		}

		matchFileName, err := filepath.Match(pattern, strings.ToLower(match.Name()))
		if err != nil {
			log.Error(err)
			log.Debug("false")
			return false
		}

		if matchFileName {
			log.Debug("true")
			return true
		}
	}

	log.Debug("false")
	return false
}

func (term *Terminal) HasFileInParentDirs(pattern string, depth uint) bool {
	defer log.Trace(time.Now(), pattern, fmt.Sprint(depth))
	currentFolder := term.Pwd()

	for c := 0; c < int(depth); c++ {
		if term.HasFilesInDir(currentFolder, pattern) {
			log.Debug("true")
			return true
		}

		if dir := filepath.Dir(currentFolder); dir != currentFolder {
			currentFolder = dir
		} else {
			log.Debug("false")
			return false
		}
	}
	log.Debug("false")
	return false
}

func (term *Terminal) HasFolder(folder string) bool {
	defer log.Trace(time.Now(), folder)
	f, err := os.Stat(folder)
	if err != nil {
		log.Debug("false")
		return false
	}
	isDir := f.IsDir()
	log.Debugf("%t", isDir)
	return isDir
}

func (term *Terminal) ResolveSymlink(input string) (string, error) {
	defer log.Trace(time.Now(), input)
	link, err := filepath.EvalSymlinks(input)
	if err != nil {
		log.Error(err)
		return "", err
	}
	log.Debug(link)
	return link, nil
}

func (term *Terminal) FileContent(file string) string {
	defer log.Trace(time.Now(), file)
	if !filepath.IsAbs(file) {
		file = filepath.Join(term.Pwd(), file)
	}

	content, err := os.ReadFile(file)
	if err != nil {
		log.Error(err)
		return ""
	}

	fileContent := string(content)
	log.Debug(fileContent)

	return fileContent
}

func (term *Terminal) LsDir(input string) []fs.DirEntry {
	defer log.Trace(time.Now(), input)

	entries, err := os.ReadDir(input)
	if err != nil {
		log.Error(err)
		return nil
	}

	log.Debugf("%v", entries)
	return entries
}

func (term *Terminal) User() string {
	defer log.Trace(time.Now())
	user := os.Getenv("USER")
	if user == "" {
		user = os.Getenv("USERNAME")
	}
	log.Debug(user)
	return user
}

func (term *Terminal) Host() (string, error) {
	defer log.Trace(time.Now())
	if len(term.host) != 0 {
		return term.host, nil
	}

	hostName, err := os.Hostname()
	if err != nil {
		log.Error(err)
		return "", err
	}

	hostName = cleanHostName(hostName)
	log.Debug(hostName)
	term.host = hostName

	return hostName, nil
}

func (term *Terminal) GOOS() string {
	defer log.Trace(time.Now())
	return runtime.GOOS
}

func (term *Terminal) Home() string {
	return path.Home()
}

func (term *Terminal) RunCommand(command string, args ...string) (string, error) {
	defer log.Trace(time.Now(), append([]string{command}, args...)...)

	if cacheCommand, ok := term.cmdCache.Get(command); ok {
		command = cacheCommand
	}

	output, err := cmd.Run(command, args...)
	if err != nil {
		log.Error(err)
	}

	log.Debug(output)
	return output, err
}

func (term *Terminal) RunShellCommand(shell, command string) string {
	defer log.Trace(time.Now())

	if out, err := term.RunCommand(shell, "-c", command); err == nil {
		return out
	}

	return ""
}

func (term *Terminal) CommandPath(command string) string {
	defer log.Trace(time.Now(), command)
	if cmdPath, ok := term.cmdCache.Get(command); ok {
		log.Debug(cmdPath)
		return cmdPath
	}

	cmdPath, err := exec.LookPath(command)
	if err == nil {
		term.cmdCache.Set(command, cmdPath)
		log.Debug(cmdPath)
		return cmdPath
	}

	log.Error(err)
	return ""
}

func (term *Terminal) HasCommand(command string) bool {
	defer log.Trace(time.Now(), command)

	if cmdPath := term.CommandPath(command); cmdPath != "" {
		return true
	}

	return false
}

func (term *Terminal) StatusCodes() (int, string) {
	defer log.Trace(time.Now())

	if term.CmdFlags.Shell != CMD || !term.CmdFlags.NoExitCode {
		return term.CmdFlags.ErrorCode, term.CmdFlags.PipeStatus
	}

	errorCode := term.Getenv("=ExitCode")
	log.Debug(errorCode)
	term.CmdFlags.ErrorCode, _ = strconv.Atoi(errorCode)

	return term.CmdFlags.ErrorCode, term.CmdFlags.PipeStatus
}

func (term *Terminal) ExecutionTime() float64 {
	defer log.Trace(time.Now())
	if term.CmdFlags.ExecutionTime < 0 {
		return 0
	}
	return term.CmdFlags.ExecutionTime
}

func (term *Terminal) Flags() *Flags {
	defer log.Trace(time.Now())
	return term.CmdFlags
}

func (term *Terminal) Shell() string {
	defer log.Trace(time.Now())
	if len(term.CmdFlags.Shell) != 0 {
		return term.CmdFlags.Shell
	}

	log.Debug("no shell name provided in flags, trying to detect it")

	pid := os.Getppid()
	p, _ := process.NewProcess(int32(pid))

	name, err := p.Name()
	if err != nil {
		log.Error(err)
		return UNKNOWN
	}

	log.Debug("process name: " + name)

	// Cache the shell value to speed things up.
	term.CmdFlags.Shell = strings.Trim(strings.TrimSuffix(name, ".exe"), " ")
	return term.CmdFlags.Shell
}

func (term *Terminal) unWrapError(err error) error {
	cause := err
	for {
		type nested interface{ Unwrap() error }
		unwrap, ok := cause.(nested)
		if !ok {
			break
		}
		cause = unwrap.Unwrap()
	}
	return cause
}

func (term *Terminal) HTTPRequest(targetURL string, body io.Reader, timeout int, requestModifiers ...http.RequestModifier) ([]byte, error) {
	defer log.Trace(time.Now(), targetURL)

	ctx, cncl := context.WithTimeout(context.Background(), time.Millisecond*time.Duration(timeout))
	defer cncl()

	request, err := httplib.NewRequestWithContext(ctx, httplib.MethodGet, targetURL, body)
	if err != nil {
		return nil, err
	}

	for _, modifier := range requestModifiers {
		modifier(request)
	}

	if term.CmdFlags.Debug {
		dump, _ := httputil.DumpRequestOut(request, true)
		log.Debug(string(dump))
	}

	response, err := http.HTTPClient.Do(request)
	if err != nil {
		log.Error(err)
		return nil, term.unWrapError(err)
	}

	// anything inside the range [200, 299] is considered a success
	if response.StatusCode < 200 || response.StatusCode >= 300 {
		err := &http.Error{
			StatusCode: response.StatusCode,
		}
		log.Error(err)
		return nil, err
	}

	defer response.Body.Close()

	responseBody, err := io.ReadAll(response.Body)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	log.Debug(string(responseBody))

	return responseBody, nil
}

func (term *Terminal) HasParentFilePath(parent string, followSymlinks bool) (*FileInfo, error) {
	defer log.Trace(time.Now(), parent)

	pwd := term.Pwd()
	if followSymlinks {
		if actual, err := term.ResolveSymlink(pwd); err == nil {
			pwd = actual
		}
	}

	for {
		fileSystem := os.DirFS(pwd)
		info, err := fs.Stat(fileSystem, parent)
		if err == nil {
			return &FileInfo{
				ParentFolder: pwd,
				Path:         filepath.Join(pwd, parent),
				IsDir:        info.IsDir(),
			}, nil
		}

		if !os.IsNotExist(err) {
			return nil, err
		}

		if dir := filepath.Dir(pwd); dir != pwd {
			pwd = dir
			continue
		}

		log.Error(err)
		return nil, errors.New("no match at root level")
	}
}

func (term *Terminal) StackCount() int {
	defer log.Trace(time.Now())

	if term.CmdFlags.StackCount < 0 {
		return 0
	}

	return term.CmdFlags.StackCount
}

func (term *Terminal) Cache() cache.Cache {
	return term.deviceCache
}

func (term *Terminal) Session() cache.Cache {
	return term.sessionCache
}

func (term *Terminal) Close() {
	defer log.Trace(time.Now())
	term.clearCacheFiles()
	term.deviceCache.Close()
	term.sessionCache.Close()
}

func (term *Terminal) clearCacheFiles() {
	if !term.CmdFlags.Init {
		return
	}

	deletedFiles, err := cache.Clear(cache.Path(), false)
	if err != nil {
		log.Error(err)
		return
	}

	for _, file := range deletedFiles {
		log.Debugf("removed cache file: %s", file)
	}
}

func (term *Terminal) Logs() string {
	return log.String()
}

func (term *Terminal) DirMatchesOneOf(dir string, regexes []string) (match bool) {
	// sometimes the function panics inside golang, we want to silence that error
	// and assume that there's no match. Not perfect, but better than crashing
	// for the time being until we figure out what the actual root cause is
	defer func() {
		if err := recover(); err != nil {
			log.Error(errors.New("panic"))
			match = false
		}
	}()
	match = dirMatchesOneOf(dir, term.Home(), term.GOOS(), regexes)
	return
}

func dirMatchesOneOf(dir, home, goos string, regexes []string) bool {
	if len(regexes) == 0 {
		return false
	}

	if goos == WINDOWS {
		dir = strings.ReplaceAll(dir, "\\", "/")
		home = strings.ReplaceAll(home, "\\", "/")
	}

	for _, element := range regexes {
		normalized := strings.ReplaceAll(element, "\\\\", "/")
		if strings.HasPrefix(normalized, "~") {
			rem := normalized[1:]
			if len(rem) == 0 || rem[0] == '/' {
				normalized = home + rem
			}
		}
		pattern := fmt.Sprintf("^%s$", normalized)
		if goos == WINDOWS || goos == DARWIN {
			pattern = "(?i)" + pattern
		}
		matched := regex.MatchString(pattern, dir)
		if matched {
			return true
		}
	}
	return false
}

func (term *Terminal) setPromptCount() {
	defer log.Trace(time.Now())

	var count int
	if val, found := term.Session().Get(cache.PROMPTCOUNTCACHE); found {
		count, _ = strconv.Atoi(val)
	}

	// Only update the count if we're generating a primary prompt.
	if term.CmdFlags.Type == PRIMARY {
		count++
		term.Session().Set(cache.PROMPTCOUNTCACHE, strconv.Itoa(count), cache.ONEDAY)
	}

	term.CmdFlags.PromptCount = count
}

func (term *Terminal) CursorPosition() (row, col int) {
	if number, err := strconv.Atoi(term.Getenv("POSH_CURSOR_LINE")); err == nil {
		row = number
	}

	if number, err := strconv.Atoi(term.Getenv("POSH_CURSOR_COLUMN")); err != nil {
		col = number
	}

	return
}

func (term *Terminal) SystemInfo() (*SystemInfo, error) {
	s := &SystemInfo{}

	mem, err := term.Memory()
	if err != nil {
		return nil, err
	}
	s.Memory = *mem

	loadStat, err := load.Avg()
	if err == nil {
		s.Load1 = loadStat.Load1
		s.Load5 = loadStat.Load5
		s.Load15 = loadStat.Load15
	}

	diskIO, err := disk.IOCounters()
	if err == nil {
		s.Disks = diskIO
	}
	return s, nil
}

func cleanHostName(hostName string) string {
	garbage := []string{
		".lan",
		".local",
		".localdomain",
	}
	for _, g := range garbage {
		if strings.HasSuffix(hostName, g) {
			hostName = strings.Replace(hostName, g, "", 1)
		}
	}
	return hostName
}



================================================
FILE: src/runtime/terminal_darwin.go
================================================
package runtime

import (
	"errors"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime/battery"
)

func mapMostLogicalState(state string) battery.State {
	switch state {
	case "charging":
		return battery.Charging
	case "discharging":
		return battery.Discharging
	case "AC attached":
		return battery.NotCharging
	case "full":
		return battery.Full
	case "empty":
		return battery.Empty
	case "charged":
		return battery.Full
	default:
		return battery.Unknown
	}
}

func (term *Terminal) parseBatteryOutput(output string) (*battery.Info, error) {
	matches := regex.FindNamedRegexMatch(`(?P<PERCENTAGE>[0-9]{1,3})%; (?P<STATE>[a-zA-Z\s]+);`, output)
	if len(matches) != 2 {
		err := errors.New("unable to find battery state based on output")
		log.Error(err)
		return nil, err
	}
	var percentage int
	var err error
	if percentage, err = strconv.Atoi(matches["PERCENTAGE"]); err != nil {
		log.Error(err)
		return nil, errors.New("unable to parse battery percentage")
	}
	return &battery.Info{
		Percentage: percentage,
		State:      mapMostLogicalState(matches["STATE"]),
	}, nil
}

func (term *Terminal) BatteryState() (*battery.Info, error) {
	defer log.Trace(time.Now())
	output, err := term.RunCommand("pmset", "-g", "batt")
	if err != nil {
		log.Error(err)
		return nil, err
	}
	if !strings.Contains(output, "Battery") {
		return nil, errors.New("no battery found")
	}
	return term.parseBatteryOutput(output)
}



================================================
FILE: src/runtime/terminal_test.go
================================================
package runtime

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNormalHostName(t *testing.T) {
	hostName := "hello"
	assert.Equal(t, hostName, cleanHostName(hostName))
}

func TestHostNameWithLocal(t *testing.T) {
	hostName := "hello.local"
	assert.Equal(t, "hello", cleanHostName(hostName))
}

func TestHostNameWithLan(t *testing.T) {
	hostName := "hello.lan"
	cleanHostName := cleanHostName(hostName)
	assert.Equal(t, "hello", cleanHostName)
}

func TestDirMatchesOneOf(t *testing.T) {
	cases := []struct {
		GOOS     string
		HomeDir  string
		Dir      string
		Pattern  string
		Expected bool
	}{
		{GOOS: LINUX, HomeDir: "/home/bill", Dir: "/home/bill", Pattern: "/home/bill", Expected: true},
		{GOOS: LINUX, HomeDir: "/home/bill", Dir: "/home/bill/foo", Pattern: "~/foo", Expected: true},
		{GOOS: LINUX, HomeDir: "/home/bill", Dir: "/home/bill/foo", Pattern: "~/Foo", Expected: false},
		{GOOS: LINUX, HomeDir: "/home/bill", Dir: "/home/bill/foo", Pattern: "~\\\\foo", Expected: true},
		{GOOS: LINUX, HomeDir: "/home/bill", Dir: "/home/bill/foo/bar", Pattern: "~/fo.*", Expected: true},
		{GOOS: LINUX, HomeDir: "/home/bill", Dir: "/home/bill/foo", Pattern: "~/fo\\w", Expected: true},

		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill", Pattern: "C:\\\\Users\\\\Bill", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill", Pattern: "C:/Users/Bill", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill", Pattern: "c:/users/bill", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill", Pattern: "~", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill\\Foo", Pattern: "~/Foo", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill\\Foo", Pattern: "~/foo", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill\\Foo\\Bar", Pattern: "~/fo.*", Expected: true},
		{GOOS: WINDOWS, HomeDir: "C:\\Users\\Bill", Dir: "C:\\Users\\Bill\\Foo", Pattern: "~/fo\\w", Expected: true},
	}

	for _, tc := range cases {
		got := dirMatchesOneOf(tc.Dir, tc.HomeDir, tc.GOOS, []string{tc.Pattern})
		assert.Equal(t, tc.Expected, got)
	}
}

func TestDirMatchesOneOfRegexInverted(t *testing.T) {
	// detect panic(thrown by MustCompile)
	defer func() {
		if err := recover(); err != nil {
			// display a message explaining omp failed(with the err)
			assert.Equal(t, "regexp: Compile(`^(?!Projects[\\/]).*$`): error parsing regexp: invalid or unsupported Perl syntax: `(?!`", err)
		}
	}()
	_ = dirMatchesOneOf("Projects/oh-my-posh", "", LINUX, []string{"(?!Projects[\\/]).*"})
}

func TestDirMatchesOneOfRegexInvertedNonEscaped(t *testing.T) {
	// detect panic(thrown by MustCompile)
	defer func() {
		if err := recover(); err != nil {
			// display a message explaining omp failed(with the err)
			assert.Equal(t, "regexp: Compile(`^(?!Projects/).*$`): error parsing regexp: invalid or unsupported Perl syntax: `(?!`", err)
		}
	}()
	_ = dirMatchesOneOf("Projects/oh-my-posh", "", LINUX, []string{"(?!Projects/).*"})
}



================================================
FILE: src/runtime/terminal_unix.go
================================================
//go:build !windows

package runtime

import (
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/shirou/gopsutil/v3/host"
	mem "github.com/shirou/gopsutil/v3/mem"
	terminal "github.com/wayneashleyberry/terminal-dimensions"
	"golang.org/x/sys/unix"
)

func (term *Terminal) Root() bool {
	defer log.Trace(time.Now())
	return os.Geteuid() == 0
}

func (term *Terminal) QueryWindowTitles(_, _ string) (string, error) {
	return "", &NotImplemented{}
}

func (term *Terminal) IsWsl() bool {
	defer log.Trace(time.Now())
	const key = "is_wsl"
	if val, found := term.Cache().Get(key); found {
		log.Debug(val)
		return val == "true"
	}

	var val bool
	defer func() {
		term.Cache().Set(key, strconv.FormatBool(val), cache.INFINITE)
	}()

	val = term.HasCommand("wslpath")
	log.Debug(strconv.FormatBool(val))

	return val
}

func (term *Terminal) IsWsl2() bool {
	defer log.Trace(time.Now())
	if !term.IsWsl() {
		return false
	}
	uname := term.FileContent("/proc/sys/kernel/osrelease")
	return strings.Contains(uname, "WSL2")
}

func (term *Terminal) IsCygwin() bool {
	defer log.Trace(time.Now())
	return false
}

func (term *Terminal) TerminalWidth() (int, error) {
	defer log.Trace(time.Now())

	if term.CmdFlags.TerminalWidth > 0 {
		log.Debugf("terminal width: %d", term.CmdFlags.TerminalWidth)
		return term.CmdFlags.TerminalWidth, nil
	}

	width, err := terminal.Width()
	if err != nil {
		log.Error(err)
	}

	// fetch width from the environment variable
	// in case the terminal width is not available
	if width == 0 {
		i, err := strconv.Atoi(term.Getenv("COLUMNS"))
		if err != nil {
			log.Error(err)
		}
		width = uint(i)
	}

	term.CmdFlags.TerminalWidth = int(width)
	log.Debugf("terminal width: %d", term.CmdFlags.TerminalWidth)
	return term.CmdFlags.TerminalWidth, err
}

func (term *Terminal) Platform() string {
	const key = "environment_platform"
	if val, found := term.Cache().Get(key); found {
		log.Debug(val)
		return val
	}

	var platform string
	defer func() {
		term.Cache().Set(key, platform, cache.INFINITE)
	}()

	if wsl := term.Getenv("WSL_DISTRO_NAME"); len(wsl) != 0 {
		platform = strings.Split(strings.ToLower(wsl), "-")[0]
		log.Debug(platform)
		return platform
	}

	platform, _, _, _ = host.PlatformInformation()
	if platform == "arch" {
		// validate for Manjaro
		lsbInfo := term.FileContent("/etc/lsb-release")
		if strings.Contains(strings.ToLower(lsbInfo), "manjaro") {
			platform = "manjaro"
		}
	}

	log.Debug(platform)
	return platform
}

func (term *Terminal) WindowsRegistryKeyValue(_ string) (*WindowsRegistryValue, error) {
	return nil, &NotImplemented{}
}

func (term *Terminal) InWSLSharedDrive() bool {
	if !term.IsWsl2() {
		return false
	}
	windowsPath := term.ConvertToWindowsPath(term.Pwd())
	return !strings.HasPrefix(windowsPath, `//wsl.localhost/`) && !strings.HasPrefix(windowsPath, `//wsl$/`)
}

func (term *Terminal) ConvertToWindowsPath(input string) string {
	windowsPath, err := term.RunCommand("wslpath", "-m", input)
	if err == nil {
		return windowsPath
	}
	return input
}

func (term *Terminal) ConvertToLinuxPath(input string) string {
	if linuxPath, err := term.RunCommand("wslpath", "-u", input); err == nil {
		return linuxPath
	}
	return input
}

func (term *Terminal) DirIsWritable(input string) bool {
	defer log.Trace(time.Now(), input)
	return unix.Access(input, unix.W_OK) == nil
}

func (term *Terminal) Connection(_ ConnectionType) (*Connection, error) {
	// added to disable the linting error, we can implement this later
	if len(term.networks) == 0 {
		return nil, &NotImplemented{}
	}

	return nil, &NotImplemented{}
}

func (term *Terminal) Memory() (*Memory, error) {
	m := &Memory{}
	memStat, err := mem.VirtualMemory()
	if err != nil {
		log.Error(err)
		return nil, err
	}
	m.PhysicalTotalMemory = memStat.Total
	m.PhysicalAvailableMemory = memStat.Available
	m.PhysicalFreeMemory = memStat.Free
	m.PhysicalPercentUsed = memStat.UsedPercent
	swapStat, err := mem.SwapMemory()
	if err != nil {
		log.Error(err)
	}
	m.SwapTotalMemory = swapStat.Total
	m.SwapFreeMemory = swapStat.Free
	m.SwapPercentUsed = swapStat.UsedPercent
	return m, nil
}



================================================
FILE: src/runtime/terminal_windows.go
================================================
package runtime

import (
	"errors"
	"fmt"
	"strings"
	"syscall"
	"time"

	"github.com/Azure/go-ansiterm/winterm"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
	"golang.org/x/sys/windows"
	"golang.org/x/sys/windows/registry"
)

func (term *Terminal) Root() bool {
	defer log.Trace(time.Now())
	var sid *windows.SID

	// Although this looks scary, it is directly copied from the
	// official windows documentation. The Go API for this is a
	// direct wrap around the official C++ API.
	// See https://docs.microsoft.com/en-us/windows/desktop/api/securitybaseapi/nf-securitybaseapi-checktokenmembership
	err := windows.AllocateAndInitializeSid(
		&windows.SECURITY_NT_AUTHORITY,
		2,
		windows.SECURITY_BUILTIN_DOMAIN_RID,
		windows.DOMAIN_ALIAS_RID_ADMINS,
		0, 0, 0, 0, 0, 0,
		&sid)
	if err != nil {
		log.Error(err)
		return false
	}
	defer func() {
		_ = windows.FreeSid(sid)
	}()

	// This appears to cast a null pointer so I'm not sure why this
	// works, but this guy says it does and it Works for Me™:
	// https://github.com/golang/go/issues/28804#issuecomment-438838144
	token := windows.Token(0)

	member, err := token.IsMember(sid)
	if err != nil {
		log.Error(err)
		return false
	}

	return member
}

func (term *Terminal) QueryWindowTitles(processName, windowTitleRegex string) (string, error) {
	defer log.Trace(time.Now(), windowTitleRegex)
	title, err := queryWindowTitles(processName, windowTitleRegex)
	if err != nil {
		log.Error(err)
	}
	return title, err
}

func (term *Terminal) IsWsl() bool {
	defer log.Trace(time.Now())
	return false
}

func (term *Terminal) IsWsl2() bool {
	defer log.Trace(time.Now())
	return false
}

func (term *Terminal) IsCygwin() bool {
	defer log.Trace(time.Now())
	return len(term.Getenv("OSTYPE")) != 0 || term.Getenv("BROWSER") == "cygstart"
}

func (term *Terminal) TerminalWidth() (int, error) {
	defer log.Trace(time.Now())

	if term.CmdFlags.TerminalWidth > 0 {
		log.Debugf("terminal width: %d", term.CmdFlags.TerminalWidth)
		return term.CmdFlags.TerminalWidth, nil
	}

	handle, err := syscall.Open("CONOUT$", syscall.O_RDWR, 0)
	if err != nil {
		log.Error(err)
		return 0, err
	}

	info, err := winterm.GetConsoleScreenBufferInfo(uintptr(handle))
	if err != nil {
		log.Error(err)
		return 0, err
	}

	term.CmdFlags.TerminalWidth = int(info.Size.X)
	log.Debugf("terminal width: %d", term.CmdFlags.TerminalWidth)
	return term.CmdFlags.TerminalWidth, nil
}

func (term *Terminal) Platform() string {
	return WINDOWS
}

// Takes a registry path to a key like
//
//	"HKLM\Software\Microsoft\Windows NT\CurrentVersion\EditionID"
//
// The last part of the path is the key to retrieve.
//
// If the path ends in "\", the "(Default)" key in that path is retrieved.
//
// Returns a variant type if successful; nil and an error if not.
func (term *Terminal) WindowsRegistryKeyValue(input string) (*WindowsRegistryValue, error) {
	log.Trace(time.Now(), input)

	// Format:
	// "HKLM\Software\Microsoft\Windows NT\CurrentVersion\EditionID"
	//   1  |                  2                         |   3
	//
	// Split into:
	//
	// 1. Root key - extract the root HKEY string and turn this into a handle to get started
	// 2. Path - open this path
	// 3. Key - get this key value
	//
	// If 3 is "" (i.e. the path ends with "\"), then get (Default) key.
	//
	rootKey, regPath, found := strings.Cut(input, `\`)
	if !found {
		err := fmt.Errorf("Error, malformed registry path: '%s'", input)
		log.Error(err)
		return nil, err
	}

	var regKey string
	if !strings.HasSuffix(regPath, `\`) {
		regKey = path.Base(regPath)
		if len(regKey) != 0 {
			regPath = strings.TrimSuffix(regPath, `\`+regKey)
		}
	}

	var key registry.Key
	switch rootKey {
	case "HKCR", "HKEY_CLASSES_ROOT":
		key = windows.HKEY_CLASSES_ROOT
	case "HKCC", "HKEY_CURRENT_CONFIG":
		key = windows.HKEY_CURRENT_CONFIG
	case "HKCU", "HKEY_CURRENT_USER":
		key = windows.HKEY_CURRENT_USER
	case "HKLM", "HKEY_LOCAL_MACHINE":
		key = windows.HKEY_LOCAL_MACHINE
	case "HKU", "HKEY_USERS":
		key = windows.HKEY_USERS
	default:
		err := fmt.Errorf("Error, unknown registry key: '%s", rootKey)
		log.Error(err)
		return nil, err
	}

	k, err := registry.OpenKey(key, regPath, registry.READ)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	_, valType, err := k.GetValue(regKey, nil)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	var regValue *WindowsRegistryValue

	switch valType {
	case windows.REG_SZ, windows.REG_EXPAND_SZ:
		value, _, _ := k.GetStringValue(regKey)
		regValue = &WindowsRegistryValue{ValueType: STRING, String: value}
	case windows.REG_DWORD:
		value, _, _ := k.GetIntegerValue(regKey)
		regValue = &WindowsRegistryValue{ValueType: DWORD, DWord: value, String: fmt.Sprintf("0x%08X", value)}
	case windows.REG_QWORD:
		value, _, _ := k.GetIntegerValue(regKey)
		regValue = &WindowsRegistryValue{ValueType: QWORD, QWord: value, String: fmt.Sprintf("0x%016X", value)}
	case windows.REG_BINARY:
		value, _, _ := k.GetBinaryValue(regKey)
		regValue = &WindowsRegistryValue{ValueType: BINARY, String: string(value)}
	}

	if regValue == nil {
		errorLogMsg := fmt.Sprintf("Error, no formatter for type: %d", valType)
		return nil, errors.New(errorLogMsg)
	}

	log.Debug(fmt.Sprintf("%s(%s): %s", regKey, regValue.ValueType, regValue.String))
	return regValue, nil
}

func (term *Terminal) InWSLSharedDrive() bool {
	return false
}

func (term *Terminal) ConvertToWindowsPath(input string) string {
	return strings.ReplaceAll(input, `\`, "/")
}

func (term *Terminal) ConvertToLinuxPath(input string) string {
	return input
}

func (term *Terminal) DirIsWritable(input string) bool {
	defer log.Trace(time.Now())
	return term.isWriteable(input)
}

func (term *Terminal) Connection(connectionType ConnectionType) (*Connection, error) {
	if term.networks == nil {
		networks := term.getConnections()
		if len(networks) == 0 {
			return nil, errors.New("no connections found")
		}
		term.networks = networks
	}

	for _, network := range term.networks {
		if network.Type == connectionType {
			return network, nil
		}
	}

	log.Error(fmt.Errorf("network type '%s' not found", connectionType))
	return nil, &NotImplemented{}
}



================================================
FILE: src/runtime/terminal_windows_nix.go
================================================
//go:build !darwin

package runtime

import (
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/battery"
)

func (term *Terminal) BatteryState() (*battery.Info, error) {
	defer log.Trace(time.Now())
	info, err := battery.Get()
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return info, nil
}



================================================
FILE: src/runtime/win32_windows.go
================================================
package runtime

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"syscall"
	"unsafe"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"

	"golang.org/x/sys/windows"
)

// win32 specific code

// win32 dll load and function definitions
var (
	user32                       = syscall.NewLazyDLL("user32.dll")
	procEnumWindows              = user32.NewProc("EnumWindows")
	procGetWindowTextW           = user32.NewProc("GetWindowTextW")
	procGetWindowThreadProcessID = user32.NewProc("GetWindowThreadProcessId")

	psapi              = syscall.NewLazyDLL("psapi.dll")
	getModuleBaseNameA = psapi.NewProc("GetModuleBaseNameA")

	iphlpapi     = syscall.NewLazyDLL("iphlpapi.dll")
	hGetIfTable2 = iphlpapi.NewProc("GetIfTable2")
)

// enumWindows call enumWindows from user32 and returns all active windows
// https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows
func enumWindows(enumFunc, lparam uintptr) (err error) {
	r1, _, e1 := syscall.SyscallN(procEnumWindows.Addr(), enumFunc, lparam, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

// getWindowText returns the title and text of a window from a window handle
// https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextw
func getWindowText(hwnd syscall.Handle, str *uint16, maxCount int32) (length int32, err error) {
	r0, _, e1 := syscall.SyscallN(procGetWindowTextW.Addr(), uintptr(hwnd), uintptr(unsafe.Pointer(str)), uintptr(maxCount))
	length = int32(r0)
	if length == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func getWindowFileName(handle syscall.Handle) (string, error) {
	var pid int
	_, _, _ = procGetWindowThreadProcessID.Call(uintptr(handle), uintptr(unsafe.Pointer(&pid)))
	const query = windows.PROCESS_QUERY_INFORMATION | windows.PROCESS_VM_READ
	h, err := windows.OpenProcess(query, false, uint32(pid))
	if err != nil {
		return "", errors.New("unable to open window process")
	}
	buf := [1024]byte{}
	length, _, _ := getModuleBaseNameA.Call(uintptr(h), 0, uintptr(unsafe.Pointer(&buf)), 1024)
	filename := string(buf[:length])
	return strings.ToLower(filename), nil
}

// GetWindowTitle searches for a window attached to the pid
func queryWindowTitles(processName, windowTitleRegex string) (string, error) {
	var title string
	// callback for EnumWindows
	cb := syscall.NewCallback(func(handle syscall.Handle, _ uintptr) uintptr {
		fileName, err := getWindowFileName(handle)
		if err != nil {
			// ignore the error and continue enumeration
			return 1
		}
		if processName != fileName {
			// ignore the error and continue enumeration
			return 1
		}
		b := make([]uint16, 200)
		_, err = getWindowText(handle, &b[0], int32(len(b)))
		if err != nil {
			// ignore the error and continue enumeration
			return 1
		}
		title = syscall.UTF16ToString(b)
		if regex.MatchString(windowTitleRegex, title) {
			// will cause EnumWindows to return 0 (error)
			// but we don't want to enumerate all windows since we got what we want
			return 0
		}
		return 1 // continue enumeration
	})
	// Enumerates all top-level windows on the screen
	// The error is not checked because if EnumWindows is stopped bofere enumerating all windows
	// it returns 0(error occurred) instead of 1(success)
	// In our case, title will equal "" or the title of the window anyway
	err := enumWindows(cb, 0)
	if len(title) == 0 {
		var message string
		if err != nil {
			message = err.Error()
		}
		return "", errors.New("no matching window title found\n" + message)
	}
	return title, nil
}

var (
	advapi     = syscall.NewLazyDLL("advapi32.dll")
	procGetAce = advapi.NewProc("GetAce")
)

const (
	ACCESS_DENIED_ACE_TYPE = 1 //nolint: revive
)

type accessMask uint32

func (m accessMask) canWrite() bool {
	allowed := []int{windows.GENERIC_WRITE, windows.WRITE_DAC, windows.WRITE_OWNER}
	for _, v := range allowed {
		if m&accessMask(v) != 0 {
			return true
		}
	}
	return false
}

func (m accessMask) permissions() string {
	var permissions []string
	if m&windows.GENERIC_READ != 0 {
		permissions = append(permissions, "GENERIC_READ")
	}
	if m&windows.GENERIC_WRITE != 0 {
		permissions = append(permissions, "GENERIC_WRITE")
	}
	if m&windows.GENERIC_EXECUTE != 0 {
		permissions = append(permissions, "GENERIC_EXECUTE")
	}
	if m&windows.GENERIC_ALL != 0 {
		permissions = append(permissions, "GENERIC_ALL")
	}
	if m&windows.WRITE_DAC != 0 {
		permissions = append(permissions, "WRITE_DAC")
	}
	if m&windows.WRITE_OWNER != 0 {
		permissions = append(permissions, "WRITE_OWNER")
	}
	if m&windows.SYNCHRONIZE != 0 {
		permissions = append(permissions, "SYNCHRONIZE")
	}
	if m&windows.DELETE != 0 {
		permissions = append(permissions, "DELETE")
	}
	if m&windows.READ_CONTROL != 0 {
		permissions = append(permissions, "READ_CONTROL")
	}
	if m&windows.ACCESS_SYSTEM_SECURITY != 0 {
		permissions = append(permissions, "ACCESS_SYSTEM_SECURITY")
	}
	if m&windows.MAXIMUM_ALLOWED != 0 {
		permissions = append(permissions, "MAXIMUM_ALLOWED")
	}
	return strings.Join(permissions, "\n")
}

type AccessAllowedAce struct {
	AceType    uint8
	AceFlags   uint8
	AceSize    uint16
	AccessMask accessMask
	SidStart   uint32
}

func getCurrentUser() (user *tokenUser, err error) {
	token := windows.GetCurrentProcessToken()
	defer token.Close()

	tokenuser, err := token.GetTokenUser()
	if err != nil {
		return
	}
	tokenGroups, err := token.GetTokenGroups()
	if err != nil {
		return
	}
	user = &tokenUser{
		sid:    tokenuser.User.Sid,
		groups: tokenGroups.AllGroups(),
	}
	return
}

type tokenUser struct {
	sid    *windows.SID
	groups []windows.SIDAndAttributes
}

func (u *tokenUser) isMemberOf(sid *windows.SID) bool {
	if u.sid.Equals(sid) {
		return true
	}
	for _, g := range u.groups {
		if g.Sid.Equals(sid) {
			return true
		}
	}
	return false
}

func (env *Terminal) isWriteable(folder string) bool {
	cu, err := getCurrentUser()

	if err != nil {
		// unable to get current user
		log.Error(err)
		return false
	}

	si, err := windows.GetNamedSecurityInfo(folder, windows.SE_FILE_OBJECT, windows.DACL_SECURITY_INFORMATION)
	if err != nil {
		log.Error(err)
		return false
	}

	dacl, _, err := si.DACL()
	if err != nil || dacl == nil {
		// no dacl implies full access
		log.Debug("no dacl")
		return true
	}

	rs := reflect.ValueOf(dacl).Elem()
	aceCount := rs.Field(3).Uint()

	for i := range aceCount {
		ace := &AccessAllowedAce{}

		ret, _, _ := procGetAce.Call(uintptr(unsafe.Pointer(dacl)), uintptr(i), uintptr(unsafe.Pointer(&ace)))
		if ret == 0 {
			log.Debug("no ace found")
			return false
		}

		aceSid := (*windows.SID)(unsafe.Pointer(&ace.SidStart))

		if !cu.isMemberOf(aceSid) {
			log.Debug("not current user or in group")
			continue
		}

		log.Debug(fmt.Sprintf("current user is member of %s", aceSid.String()))

		// this gets priority over the other access types
		if ace.AceType == ACCESS_DENIED_ACE_TYPE {
			log.Debug("ACCESS_DENIED_ACE_TYPE")
			return false
		}

		log.Debugf("%v", ace.AccessMask.permissions())
		if ace.AccessMask.canWrite() {
			log.Debug("user has write access")
			return true
		}
	}
	log.Debug("no write access")
	return false
}

var (
	kernel32             = syscall.NewLazyDLL("kernel32.dll")
	globalMemoryStatusEx = kernel32.NewProc("GlobalMemoryStatusEx")
)

type memoryStatusEx struct {
	Length               uint32
	MemoryLoad           uint32
	TotalPhys            uint64
	AvailPhys            uint64
	TotalPageFile        uint64
	AvailPageFile        uint64
	TotalVirtual         uint64
	AvailVirtual         uint64
	AvailExtendedVirtual uint64
}

func (env *Terminal) Memory() (*Memory, error) {
	var memStat memoryStatusEx
	memStat.Length = uint32(unsafe.Sizeof(memStat))
	r0, _, err := globalMemoryStatusEx.Call(uintptr(unsafe.Pointer(&memStat)))
	if r0 == 0 {
		log.Error(err)
		return nil, err
	}
	return &Memory{
		PhysicalTotalMemory:     memStat.TotalPhys,
		PhysicalFreeMemory:      memStat.AvailPhys,
		PhysicalAvailableMemory: memStat.AvailPhys,
		PhysicalPercentUsed:     float64(memStat.MemoryLoad),
	}, nil
}



================================================
FILE: src/runtime/battery/battery.go
================================================
// Copyright (C) 2016-2017 Karol 'Kenji Takahashi' Woźniak
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package battery

type Info struct {
	Percentage int
	State      State
}

type NoBatteryError struct{}

func (m *NoBatteryError) Error() string {
	return "no battery"
}

// State type enumerates possible battery states.
type State int

var states = [...]string{
	Unknown:     "Unknown",
	Empty:       "Empty",
	Full:        "Full",
	Charging:    "Charging",
	Discharging: "Discharging",
	NotCharging: "Not Charging",
}

func (s State) String() string {
	return states[s]
}

// Possible state values.
// Unknown can mean either controller returned unknown, or
// not able to retrieve state due to some error.
const (
	Unknown State = iota
	Empty
	Full
	Charging
	Discharging
	NotCharging
)



================================================
FILE: src/runtime/battery/battery_darwin.go
================================================
package battery

import (
	"errors"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/cmd"
)

func mapMostLogicalState(state string) State {
	switch state {
	case "charging":
		return Charging
	case "discharging":
		return Discharging
	case "AC attached":
		return NotCharging
	case "full":
		return Full
	case "empty":
		return Empty
	case "charged":
		return Full
	default:
		return Unknown
	}
}

func parseBatteryOutput(output string) (*Info, error) {
	matches := regex.FindNamedRegexMatch(`(?P<PERCENTAGE>[0-9]{1,3})%; (?P<STATE>[a-zA-Z\s]+);`, output)
	if len(matches) != 2 {
		return nil, errors.New("unable to find battery state based on output")
	}

	var percentage int
	var err error
	if percentage, err = strconv.Atoi(matches["PERCENTAGE"]); err != nil {
		return nil, errors.New("unable to parse battery percentage")
	}

	// sometimes it reports discharging when at 100, so let's force it to Full
	// https://github.com/JanDeDobbeleer/oh-my-posh/issues/3729
	if percentage == 100 {
		return &Info{
			Percentage: percentage,
			State:      Full,
		}, nil
	}

	return &Info{
		Percentage: percentage,
		State:      mapMostLogicalState(matches["STATE"]),
	}, nil
}

func Get() (*Info, error) {
	output, err := cmd.Run("pmset", "-g", "batt")
	if err != nil {
		return nil, err
	}
	if !strings.Contains(output, "Battery") {
		return nil, ErrNotFound
	}
	return parseBatteryOutput(output)
}



================================================
FILE: src/runtime/battery/battery_darwin_test.go
================================================
package battery

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseBatteryOutput(t *testing.T) {
	cases := []struct {
		Case               string
		Output             string
		ExpectedState      State
		ExpectedPercentage int
		ExpectError        bool
	}{
		{
			Case:               "charging",
			Output:             "99%; charging;",
			ExpectedState:      Charging,
			ExpectedPercentage: 99,
		},
		{
			Case:               "charging 1%",
			Output:             "1%; charging;",
			ExpectedState:      Charging,
			ExpectedPercentage: 1,
		},
		{
			Case:               "not charging 80%",
			Output:             "81%; AC attached;",
			ExpectedState:      NotCharging,
			ExpectedPercentage: 81,
		},
		{
			Case:               "charged",
			Output:             "100%; charged;",
			ExpectedState:      Full,
			ExpectedPercentage: 100,
		},
		{
			Case:               "discharging, but not",
			Output:             "100%; discharging;",
			ExpectedState:      Full,
			ExpectedPercentage: 100,
		},
	}
	for _, tc := range cases {
		info, err := parseBatteryOutput(tc.Output)
		if tc.ExpectError {
			assert.Error(t, err, tc.Case)
			return
		}
		assert.Equal(t, tc.ExpectedState, info.State, tc.Case)
		assert.Equal(t, tc.ExpectedPercentage, info.Percentage, tc.Case)
	}
}



================================================
FILE: src/runtime/battery/battery_linux.go
================================================
// battery
// Copyright (C) 2016-2017 Karol 'Kenji Takahashi' Woźniak
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package battery

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

const sysfs = "/sys/class/power_supply"

func newState(name string) (State, error) {
	for i, state := range states {
		if strings.EqualFold(name, state) {
			return State(i), nil
		}
	}

	return Unknown, fmt.Errorf("invalid state `%s`", name)
}

func readFloat(path, filename string) (float64, error) {
	str, err := os.ReadFile(filepath.Join(path, filename))
	if err != nil {
		return 0, err
	}

	if len(str) == 0 {
		return 0, ErrNotFound
	}

	num, err := strconv.ParseFloat(string(str[:len(str)-1]), 64)
	if err != nil {
		return 0, err
	}

	return num / 1000, nil // Convert micro->milli
}

func readAmp(path, filename string, volts float64) (float64, error) {
	val, err := readFloat(path, filename)
	if err != nil {
		return 0, err
	}

	return val * volts, nil
}

func isBattery(path string) bool {
	t, err := os.ReadFile(filepath.Join(path, "type"))
	return err == nil && string(t) == "Battery\n"
}

func getBatteryFiles() ([]string, error) {
	files, err := os.ReadDir(sysfs)
	if err != nil {
		return nil, err
	}

	var bFiles []string
	for _, file := range files {
		path := filepath.Join(sysfs, file.Name())
		if isBattery(path) {
			bFiles = append(bFiles, path)
		}
	}

	if len(bFiles) == 0 {
		return nil, &NoBatteryError{}
	}

	return bFiles, nil
}

func getByPath(path string) (*battery, error) {
	b := &battery{}
	var err error

	if b.Current, err = readFloat(path, "energy_now"); err == nil {
		if b.Full, err = readFloat(path, "energy_full"); err != nil {
			return nil, errors.New("unable to parse energy_full")
		}
	} else {
		currentDoesNotExist := os.IsNotExist(err)
		if b.Voltage, err = readFloat(path, "voltage_now"); err != nil {
			return nil, errors.New("unable to parse voltage_now")
		}
		b.Voltage /= 1000
		if currentDoesNotExist {
			if b.Current, err = readAmp(path, "charge_now", b.Voltage); err != nil {
				return nil, errors.New("unable to parse charge_now")
			}
			if b.Full, err = readAmp(path, "charge_full", b.Voltage); err != nil {
				return nil, errors.New("unable to parse charge_full")
			}
		} else {
			if b.Full, err = readFloat(path, "energy_full"); err != nil {
				return nil, errors.New("unable to parse energy_full")
			}
		}
	}

	state, err := os.ReadFile(filepath.Join(path, "status"))
	if err != nil || len(state) == 0 {
		return nil, errors.New("unable to parse or invalid status")
	}
	if b.State, err = newState(string(state[:len(state)-1])); err != nil {
		return nil, errors.New("unable to map to new state")
	}

	return b, nil
}

func systemGetAll() ([]*battery, error) {
	bFiles, err := getBatteryFiles()
	if err != nil {
		return nil, err
	}

	var batteries []*battery
	var errs Errors

	for _, bFile := range bFiles {
		b, err := getByPath(bFile)
		if err != nil {
			errs = append(errs, err)
			continue
		}
		batteries = append(batteries, b)
	}

	if len(batteries) == 0 {
		return nil, errs
	}

	return batteries, nil
}



================================================
FILE: src/runtime/battery/battery_netbsd.go
================================================
package battery

import (
	"errors"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime/cmd"
)

func Get() (*Info, error) {
	output, err := cmd.Run("envstat", "-s", "acpibat0:charge", "-n")
	if err != nil {
		return nil, err
	}
	percentage, err := strconv.Atoi(strings.TrimSpace(output))
	if err != nil {
		return nil, errors.New("unable to parse battery percentage")
	}
	return &Info{
		Percentage: percentage,
		State:      Unknown,
	}, nil
}



================================================
FILE: src/runtime/battery/battery_openandfreebsd.go
================================================
//go:build openbsd || freebsd

package battery

import (
	"errors"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime/cmd"
)

// See https://man.openbsd.org/man8/apm.8
func mapMostLogicalState(state string) State {
	switch state {
	case "3":
		return Charging
	case "0", "1":
		return Discharging
	case "2":
		return Empty
	default:
		return Unknown
	}
}

func parseBatteryOutput(apm_percentage string, apm_status string) (*Info, error) {
	percentage, err := strconv.Atoi(strings.TrimSpace(apm_percentage))
	if err != nil {
		return nil, errors.New("unable to parse battery percentage")
	}

	if percentage == 100 {
		return &Info{
			Percentage: percentage,
			State:      Full,
		}, nil
	}

	return &Info{
		Percentage: percentage,
		State:      mapMostLogicalState(apm_status),
	}, nil
}

func Get() (*Info, error) {
	apm_percentage, err := cmd.Run("apm", "-l")
	if err != nil {
		return nil, err
	}

	apm_status, err := cmd.Run("apm", "-b")
	if err != nil {
		return nil, err
	}

	return parseBatteryOutput(apm_percentage, apm_status)

}



================================================
FILE: src/runtime/battery/battery_openandfreebsd_test.go
================================================
//go:build openbsd || freebsd

package battery

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseBatteryOutput(t *testing.T) {
	cases := []struct {
		Case               string
		PercentOutput      string
		StatusOutput       string
		ExpectedState      State
		ExpectedPercentage int
		ExpectError        bool
	}{
		{
			Case:               "charging",
			PercentOutput:      "99",
			StatusOutput:       "3",
			ExpectedState:      Charging,
			ExpectedPercentage: 99,
		},
		{
			Case:               "charging 1%",
			PercentOutput:      "1",
			StatusOutput:       "3",
			ExpectedState:      Charging,
			ExpectedPercentage: 1,
		},
		{
			Case:               "removed",
			PercentOutput:      "0",
			StatusOutput:       "4",
			ExpectedState:      Unknown,
			ExpectedPercentage: 0,
		},
		{
			Case:               "charged",
			PercentOutput:      "100",
			StatusOutput:       "0",
			ExpectedState:      Full,
			ExpectedPercentage: 100,
		},
		{
			Case:               "discharging",
			PercentOutput:      "25",
			StatusOutput:       "1",
			ExpectedState:      Discharging,
			ExpectedPercentage: 25,
		},
	}
	for _, tc := range cases {
		info, err := parseBatteryOutput(tc.PercentOutput, tc.StatusOutput)
		if tc.ExpectError {
			assert.Error(t, err, tc.Case)
			return
		}
		assert.Equal(t, tc.ExpectedState, info.State, tc.Case)
		assert.Equal(t, tc.ExpectedPercentage, info.Percentage, tc.Case)
	}
}



================================================
FILE: src/runtime/battery/battery_windows.go
================================================
// battery
// Copyright (C) 2016-2017 Karol 'Kenji Takahashi' Woźniak
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package battery

import (
	"errors"
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

type batteryQueryInformation struct {
	BatteryTag       uint32
	InformationLevel int32
	AtRate           int32
}

type batteryInformation struct {
	Capabilities        uint32
	Technology          uint8
	Reserved            [3]uint8
	Chemistry           [4]uint8
	DesignedCapacity    uint32
	FullChargedCapacity uint32
	DefaultAlert1       uint32
	DefaultAlert2       uint32
	CriticalBias        uint32
	CycleCount          uint32
}

type batteryWaitStatus struct {
	BatteryTag   uint32
	Timeout      uint32
	PowerState   uint32
	LowCapacity  uint32
	HighCapacity uint32
}

type batteryStatus struct {
	PowerState uint32
	Capacity   uint32
	Voltage    uint32
	Rate       int32
}

type guid struct {
	Data1 uint32
	Data2 uint16
	Data3 uint16
	Data4 [8]byte
}

type spDeviceInterfaceData struct {
	cbSize             uint32
	InterfaceClassGuid guid //nolint:revive
	Flags              uint32
	Reserved           uint
}

var guidDeviceBattery = guid{
	0x72631e54,
	0x78A4,
	0x11d0,
	[8]byte{0xbc, 0xf7, 0x00, 0xaa, 0x00, 0xb7, 0xb3, 0x2a},
}

func uint32ToFloat64(num uint32) (float64, error) {
	if num == 0xffffffff { // BATTERY_UNKNOWN_CAPACITY
		return 0, errors.New("unknown value received")
	}
	return float64(num), nil
}

func setupDiSetup(proc *windows.LazyProc, args ...uintptr) (uintptr, error) {
	r1, _, errno := syscall.SyscallN(proc.Addr(), args...)
	if windows.Handle(r1) == windows.InvalidHandle {
		if errno != 0 {
			return 0, error(errno)
		}
		return 0, syscall.EINVAL
	}
	return r1, nil
}

func setupDiCall(proc *windows.LazyProc, args ...uintptr) syscall.Errno {
	r1, _, errno := syscall.SyscallN(proc.Addr(), args...)
	if r1 == 0 {
		if errno != 0 {
			return errno
		}
		return syscall.EINVAL
	}
	return 0
}

var setupapi = &windows.LazyDLL{Name: "setupapi.dll", System: true}
var setupDiGetClassDevsW = setupapi.NewProc("SetupDiGetClassDevsW")
var setupDiEnumDeviceInterfaces = setupapi.NewProc("SetupDiEnumDeviceInterfaces")
var setupDiGetDeviceInterfaceDetailW = setupapi.NewProc("SetupDiGetDeviceInterfaceDetailW")
var setupDiDestroyDeviceInfoList = setupapi.NewProc("SetupDiDestroyDeviceInfoList")

func readState(powerState uint32) State {
	switch {
	case powerState&0x00000004 != 0:
		return Charging
	case powerState&0x00000008 != 0:
		return Empty
	case powerState&0x00000002 != 0:
		return Discharging
	case powerState&0x00000001 != 0:
		return Full
	default:
		return Unknown
	}
}

func systemGet(idx int) (*battery, error) {
	hdev, err := setupDiSetup(
		setupDiGetClassDevsW,
		uintptr(unsafe.Pointer(&guidDeviceBattery)),
		0,
		0,
		2|16, // DIGCF_PRESENT|DIGCF_DEVICEINTERFACE
	)

	if err != nil {
		return nil, err
	}

	defer func() {
		_, _, _ = syscall.SyscallN(setupDiDestroyDeviceInfoList.Addr(), hdev)
	}()

	var did spDeviceInterfaceData
	did.cbSize = uint32(unsafe.Sizeof(did))
	errno := setupDiCall(
		setupDiEnumDeviceInterfaces,
		hdev,
		0,
		uintptr(unsafe.Pointer(&guidDeviceBattery)),
		uintptr(idx),
		uintptr(unsafe.Pointer(&did)),
	)

	if errno == 259 { // ERROR_NO_MORE_ITEMS
		return nil, ErrNotFound
	}

	if errno != 0 {
		return nil, errno
	}

	var cbRequired uint32
	errno = setupDiCall(
		setupDiGetDeviceInterfaceDetailW,
		hdev,
		uintptr(unsafe.Pointer(&did)),
		0,
		0,
		uintptr(unsafe.Pointer(&cbRequired)),
		0,
	)

	if errno != 0 && errno != 122 { // ERROR_INSUFFICIENT_BUFFER
		return nil, errno
	}

	if cbRequired == 0 {
		return nil, errors.New("no buffer information returned")
	}

	// The god damn struct with ANYSIZE_ARRAY of utf16 in it is crazy.
	// So... let's emulate it with array of uint16 ;-D.
	// Keep in mind that the first two elements are actually cbSize.
	didd := make([]uint16, cbRequired/2)
	cbSize := (*uint32)(unsafe.Pointer(&didd[0]))
	if unsafe.Sizeof(uint(0)) == 8 {
		*cbSize = 8
	} else {
		*cbSize = 6
	}

	errno = setupDiCall(
		setupDiGetDeviceInterfaceDetailW,
		hdev,
		uintptr(unsafe.Pointer(&did)),
		uintptr(unsafe.Pointer(&didd[0])),
		uintptr(cbRequired),
		uintptr(unsafe.Pointer(&cbRequired)),
		0,
	)

	if errno != 0 {
		return nil, errno
	}

	devicePath := &didd[2:][0]

	handle, err := windows.CreateFile(
		devicePath,
		windows.GENERIC_READ|windows.GENERIC_WRITE,
		windows.FILE_SHARE_READ|windows.FILE_SHARE_WRITE,
		nil,
		windows.OPEN_EXISTING,
		windows.FILE_ATTRIBUTE_NORMAL,
		0,
	)

	if err != nil {
		return nil, err
	}

	defer func() {
		_ = windows.CloseHandle(handle)
	}()

	var dwOut uint32

	var dwWait uint32
	var bqi batteryQueryInformation
	err = windows.DeviceIoControl(
		handle,
		2703424, // IOCTL_BATTERY_QUERY_TAG
		(*byte)(unsafe.Pointer(&dwWait)),
		uint32(unsafe.Sizeof(dwWait)),
		(*byte)(unsafe.Pointer(&bqi.BatteryTag)),
		uint32(unsafe.Sizeof(bqi.BatteryTag)),
		&dwOut,
		nil,
	)

	if err != nil {
		return nil, err
	}

	if bqi.BatteryTag == 0 {
		return nil, errors.New("battery tag not returned")
	}

	b := &battery{}

	var bi batteryInformation
	err = windows.DeviceIoControl(
		handle,
		2703428, // IOCTL_BATTERY_QUERY_INFORMATION
		(*byte)(unsafe.Pointer(&bqi)),
		uint32(unsafe.Sizeof(bqi)),
		(*byte)(unsafe.Pointer(&bi)),
		uint32(unsafe.Sizeof(bi)),
		&dwOut,
		nil,
	)

	if err != nil {
		return nil, err
	}

	b.Full = float64(bi.FullChargedCapacity)

	bws := batteryWaitStatus{BatteryTag: bqi.BatteryTag}

	var bs batteryStatus
	err = windows.DeviceIoControl(
		handle,
		2703436, // IOCTL_BATTERY_QUERY_STATUS
		(*byte)(unsafe.Pointer(&bws)),
		uint32(unsafe.Sizeof(bws)),
		(*byte)(unsafe.Pointer(&bs)),
		uint32(unsafe.Sizeof(bs)),
		&dwOut,
		nil,
	)

	if err != nil {
		return nil, err
	}

	if b.Current, err = uint32ToFloat64(bs.Capacity); err != nil {
		return nil, err
	}

	if b.Voltage, err = uint32ToFloat64(bs.Voltage); err != nil {
		return nil, err
	}

	b.Voltage /= 1000
	b.State = readState(bs.PowerState)

	return b, nil
}

func systemGetAll() ([]*battery, error) {
	var batteries []*battery
	var i int
	var errs Errors

	for i = 0; ; i++ {
		b, err := systemGet(i)
		if err == ErrNotFound {
			break
		}
		if err != nil {
			errs = append(errs, err)
			continue
		}
		batteries = append(batteries, b)
	}

	if i == 0 {
		return nil, &NoBatteryError{}
	}

	if len(batteries) == 0 {
		return nil, errs
	}

	return batteries, nil
}



================================================
FILE: src/runtime/battery/battery_windows_nix.go
================================================
//go:build !darwin && !netbsd && !openbsd && !freebsd

package battery

import (
	"math"
)

// battery type represents a single battery entry information.
type battery struct {
	// Current battery state.
	State State
	// Current (momentary) capacity (in mWh).
	Current float64
	// Last known full capacity (in mWh).
	Full float64
	// Current voltage (in V).
	Voltage float64
}

func mapMostLogicalState(currentState, newState State) State {
	switch currentState {
	case Discharging, NotCharging:
		return Discharging
	case Empty:
		return newState
	case Charging:
		if newState == Discharging {
			return Discharging
		}
		return Charging
	case Unknown:
		return newState
	case Full:
		return newState
	}
	return newState
}

// Get returns information about all batteries in the system.
//
// If error != nil, it will be either ErrFatal or Errors.
// If error is of type Errors, it is guaranteed that length of both returned slices is the same and that i-th error coresponds with i-th battery structure.
func Get() (*Info, error) {
	parseBatteryInfo := func(batteries []*battery) *Info {
		var info Info
		var current, total float64
		var state State
		for _, bt := range batteries {
			current += bt.Current
			total += bt.Full
			state = mapMostLogicalState(state, bt.State)
		}
		batteryPercentage := current / total * 100
		info.Percentage = int(math.Min(100, batteryPercentage))
		info.State = state
		return &info
	}

	batteries, err := systemGetAll()
	if err != nil {
		return nil, err
	}
	return parseBatteryInfo(batteries), nil
}



================================================
FILE: src/runtime/battery/battery_windows_nix_test.go
================================================
//go:build !darwin && !netbsd && !openbsd

// battery
// Copyright (C) 2016-2017 Karol 'Kenji Takahashi' Woźniak
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package battery

import (
	"testing"

	"github.com/alecthomas/assert"
)

func TestMapBatteriesState(t *testing.T) {
	cases := []struct {
		Case          string
		ExpectedState State
		CurrentState  State
		NewState      State
	}{
		{Case: "charging > charged", ExpectedState: Charging, CurrentState: Full, NewState: Charging},
		{Case: "charging < discharging", ExpectedState: Discharging, CurrentState: Discharging, NewState: Charging},
		{Case: "charging == charging", ExpectedState: Charging, CurrentState: Charging, NewState: Charging},
		{Case: "discharging > charged", ExpectedState: Discharging, CurrentState: Full, NewState: Discharging},
		{Case: "discharging > unknown", ExpectedState: Discharging, CurrentState: Unknown, NewState: Discharging},
		{Case: "discharging > full", ExpectedState: Discharging, CurrentState: Full, NewState: Discharging},
		{Case: "discharging > charging 2", ExpectedState: Discharging, CurrentState: Charging, NewState: Discharging},
		{Case: "discharging > empty", ExpectedState: Discharging, CurrentState: Empty, NewState: Discharging},
	}
	for _, tc := range cases {
		assert.Equal(t, tc.ExpectedState, mapMostLogicalState(tc.CurrentState, tc.NewState), tc.Case)
	}
}



================================================
FILE: src/runtime/battery/errors.go
================================================
// battery
// Copyright (C) 2016-2017 Karol 'Kenji Takahashi' Woźniak
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package battery

import "fmt"

var ErrNotFound = fmt.Errorf("not found")

type Errors []error

func (e Errors) Error() string {
	var s string
	for _, err := range e {
		if err != nil {
			s += err.Error() + ", "
		}
	}
	// strip trailing colon/space
	if len(s) > 1 {
		s = s[:len(s)-2]
	}
	return s
}



================================================
FILE: src/runtime/battery/errors_test.go
================================================
// battery
// Copyright (C) 2016-2017 Karol 'Kenji Takahashi' Woźniak
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package battery

import (
	"errors"
	"testing"
)

func TestErrors(t *testing.T) {
	cases := []struct {
		str string
		in  Errors
	}{
		{"", Errors{nil}},
		{"", Errors{errors.New("")}},
		{"t1", Errors{errors.New("t1")}},
		{"t2, t3", Errors{errors.New("t2"), errors.New("t3")}},
		{"t4, t5", Errors{errors.New("t4"), errors.New("t5")}},
	}

	for i, c := range cases {
		str := c.in.Error()

		if str != c.str {
			t.Errorf("%d: %v != %v", i, str, c.str)
		}
	}
}



================================================
FILE: src/runtime/cmd/run.go
================================================
package cmd

import (
	"bytes"
	"context"
	"os/exec"
	"strings"
	"time"
)

// Run is used to correctly run a command with a timeout.
func Run(command string, args ...string) (string, error) {
	// set a timeout of 4 seconds
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*4)
	defer cancel()
	cmd := exec.CommandContext(ctx, command, args...)
	var out bytes.Buffer
	var err bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &err
	cmdErr := cmd.Run()
	if cmdErr != nil {
		output := err.String()
		return output, cmdErr
	}
	// some silly commands return 0 and the output is in stderr instead of stdout
	result := out.String()
	if len(result) == 0 {
		result = err.String()
	}
	output := strings.TrimSpace(result)
	return output, nil
}



================================================
FILE: src/runtime/http/connection.go
================================================
package http

import (
	"net"
	"time"
)

// if we can connect to ohmyposh within 200ms, we are connected
// otherwise, let's consider being offline
func IsConnected() bool {
	timeout := 200 * time.Millisecond
	_, err := net.DialTimeout("tcp", "ohmyposh.dev:80", timeout)
	return err == nil
}



================================================
FILE: src/runtime/http/http.go
================================================
package http

import (
	"net"
	"net/http"
	"time"
)

// Inspired by: https://www.thegreatcodeadventure.com/mocking-http-requests-in-golang/

type httpClient interface {
	Do(req *http.Request) (*http.Response, error)
}

var (
	defaultTransport http.RoundTripper = &http.Transport{
		Proxy: http.ProxyFromEnvironment,
		Dial: (&net.Dialer{
			Timeout: 10 * time.Second,
		}).Dial,
		TLSHandshakeTimeout:   10 * time.Second,
		ResponseHeaderTimeout: 10 * time.Second,
	}

	HTTPClient httpClient = &http.Client{Transport: defaultTransport}
)

type Error struct {
	StatusCode int
}

func (e *Error) Error() string {
	return http.StatusText(e.StatusCode)
}



================================================
FILE: src/runtime/http/oauth.go
================================================
package http

import (
	"encoding/json"
	"fmt"
	"io"
	httplib "net/http"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
)

const (
	Timeout             = "timeout"
	InvalidRefreshToken = "invalid refresh token"
	TokenRefreshFailed  = "token refresh error"
	DefaultRefreshToken = "111111111111111111111111111111"
)

type tokenExchange struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
}

type OAuthError struct {
	message string
}

func (a *OAuthError) Error() string {
	return a.message
}

type OAuthRequest struct {
	AccessTokenKey  string
	RefreshTokenKey string
	SegmentName     string
	RefreshToken    string
	AccessToken     string
	Request
}

func (o *OAuthRequest) getAccessToken() (string, error) {
	// get directly from cache
	if acccessToken, OK := o.Env.Cache().Get(o.AccessTokenKey); OK && len(acccessToken) != 0 {
		return acccessToken, nil
	}

	// use cached refresh token to get new access token
	if refreshToken, OK := o.Env.Cache().Get(o.RefreshTokenKey); OK && len(refreshToken) != 0 {
		if acccessToken, err := o.refreshToken(refreshToken); err == nil {
			return acccessToken, nil
		}
	}

	// use initial refresh token from property
	// refreshToken := o.props.GetString(properties.RefreshToken, "")
	// ignore an empty or default refresh token
	if len(o.RefreshToken) == 0 || o.RefreshToken == DefaultRefreshToken {
		return "", &OAuthError{
			message: InvalidRefreshToken,
		}
	}

	// no need to let the user provide access token, we'll always verify the refresh token
	acccessToken, err := o.refreshToken(o.RefreshToken)
	return acccessToken, err
}

func (o *OAuthRequest) refreshToken(refreshToken string) (string, error) {
	// httpTimeout := o.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)
	if o.HTTPTimeout == 0 {
		o.HTTPTimeout = 20
	}

	url := fmt.Sprintf("https://ohmyposh.dev/api/refresh?segment=%s&token=%s", o.SegmentName, refreshToken)
	body, err := o.Env.HTTPRequest(url, nil, o.HTTPTimeout)
	if err != nil {
		return "", &OAuthError{
			// This might happen if /api was asleep. Assume the user will just retry
			message: Timeout,
		}
	}

	tokens := &tokenExchange{}
	err = json.Unmarshal(body, &tokens)
	if err != nil {
		return "", &OAuthError{
			message: TokenRefreshFailed,
		}
	}

	// add tokens to cache
	o.Env.Cache().Set(o.AccessTokenKey, tokens.AccessToken, cache.ToDuration(tokens.ExpiresIn))
	o.Env.Cache().Set(o.RefreshTokenKey, tokens.RefreshToken, cache.TWOYEARS)
	return tokens.AccessToken, nil
}

func OauthResult[a any](o *OAuthRequest, url string, body io.Reader, requestModifiers ...RequestModifier) (a, error) {
	accessToken, err := o.getAccessToken()
	if err != nil {
		var data a
		return data, err
	}

	// add token to header for authentication
	addAuthHeader := func(request *httplib.Request) {
		request.Header.Add("Authorization", "Bearer "+accessToken)
	}

	if requestModifiers == nil {
		requestModifiers = []RequestModifier{}
	}

	requestModifiers = append(requestModifiers, addAuthHeader)

	return Do[a](&o.Request, url, body, requestModifiers...)
}



================================================
FILE: src/runtime/http/oauth_test.go
================================================
package http

import (
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

type data struct {
	Hello string `json:"hello"`
}

func TestOauthResult(t *testing.T) {
	accessTokenKey := "test_access_token"
	refreshTokenKey := "test_refresh_token"
	tokenResponse := `{ "access_token":"NEW_ACCESSTOKEN","refresh_token":"NEW_REFRESHTOKEN", "expires_in":1234 }`
	jsonResponse := `{ "hello":"world" }`
	successData := &data{Hello: "world"}

	cases := []struct {
		Error                 error
		ExpectedData          *data
		AccessToken           string
		RefreshToken          string
		TokenResponse         string
		JSONResponse          string
		CacheJSONResponse     string
		Case                  string
		ExpectedErrorMessage  string
		CacheTimeout          int
		ResponseCacheMiss     bool
		AccessTokenFromCache  bool
		RefreshTokenFromCache bool
	}{
		{
			Case:                 "No initial tokens",
			ExpectedErrorMessage: InvalidRefreshToken,
		},
		{
			Case:          "Use config tokens",
			AccessToken:   "INITIAL_ACCESSTOKEN",
			RefreshToken:  "INITIAL_REFRESHTOKEN",
			TokenResponse: tokenResponse,
			JSONResponse:  jsonResponse,
			ExpectedData:  successData,
		},
		{
			Case:                 "Access token from cache",
			AccessToken:          "ACCESSTOKEN",
			AccessTokenFromCache: true,
			JSONResponse:         jsonResponse,
			ExpectedData:         successData,
		},
		{
			Case:                  "Refresh token from cache",
			RefreshToken:          "REFRESH_TOKEN",
			RefreshTokenFromCache: true,
			JSONResponse:          jsonResponse,
			TokenResponse:         tokenResponse,
			ExpectedData:          successData,
		},
		{
			Case:                  "Refresh token from cache, success",
			RefreshToken:          "REFRESH_TOKEN",
			RefreshTokenFromCache: true,
			JSONResponse:          jsonResponse,
			TokenResponse:         tokenResponse,
			ExpectedData:          successData,
		},
		{
			Case:                  "Refresh API error",
			RefreshToken:          "REFRESH_TOKEN",
			RefreshTokenFromCache: true,
			Error:                 fmt.Errorf("API error"),
			ExpectedErrorMessage:  Timeout,
		},
		{
			Case:                  "Refresh API parse error",
			RefreshToken:          "REFRESH_TOKEN",
			RefreshTokenFromCache: true,
			TokenResponse:         "INVALID_JSON",
			ExpectedErrorMessage:  TokenRefreshFailed,
		},
		{
			Case:                 "Default config token",
			RefreshToken:         DefaultRefreshToken,
			ExpectedErrorMessage: InvalidRefreshToken,
		},
		{
			Case:          "Cache data, invalid data",
			RefreshToken:  "REFRESH_TOKEN",
			TokenResponse: tokenResponse,
			JSONResponse:  jsonResponse,
			ExpectedData:  successData,
		},
		{
			Case:          "Cache data, no cache",
			RefreshToken:  "REFRESH_TOKEN",
			TokenResponse: tokenResponse,
			JSONResponse:  jsonResponse,
			ExpectedData:  successData,
		},
		{
			Case:                 "API body failure",
			AccessToken:          "ACCESSTOKEN",
			AccessTokenFromCache: true,
			JSONResponse:         "ERR",
			ExpectedErrorMessage: "invalid character 'E' looking for beginning of value",
		},
		{
			Case:                 "API request failure",
			AccessToken:          "ACCESSTOKEN",
			AccessTokenFromCache: true,
			JSONResponse:         "ERR",
			Error:                fmt.Errorf("no response"),
			ExpectedErrorMessage: "no response",
		},
	}

	for _, tc := range cases {
		url := "https://www.strava.com/api/v3/athlete/activities?page=1&per_page=1"
		tokenURL := fmt.Sprintf("https://ohmyposh.dev/api/refresh?segment=test&token=%s", tc.RefreshToken)

		cache := &mock.Cache{}

		cache.On("Get", accessTokenKey).Return(tc.AccessToken, tc.AccessTokenFromCache)
		cache.On("Get", refreshTokenKey).Return(tc.RefreshToken, tc.RefreshTokenFromCache)
		cache.On("Set", testify_.Anything, testify_.Anything, testify_.Anything)

		env := &MockedEnvironment{}

		env.On("Cache").Return(cache)
		env.On("HTTPRequest", url).Return([]byte(tc.JSONResponse), tc.Error)
		env.On("HTTPRequest", tokenURL).Return([]byte(tc.TokenResponse), tc.Error)

		oauth := &OAuthRequest{
			AccessTokenKey:  accessTokenKey,
			RefreshTokenKey: refreshTokenKey,
			SegmentName:     "test",
			AccessToken:     tc.AccessToken,
			RefreshToken:    tc.RefreshToken,
			Request: Request{
				Env:         env,
				HTTPTimeout: 20,
			},
		}

		got, err := OauthResult[*data](oauth, url, nil)
		assert.Equal(t, tc.ExpectedData, got, tc.Case)

		if len(tc.ExpectedErrorMessage) == 0 {
			assert.Nil(t, err, tc.Case)
		} else {
			assert.Equal(t, tc.ExpectedErrorMessage, err.Error(), tc.Case)
		}
	}
}



================================================
FILE: src/runtime/http/request.go
================================================
package http

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

type RequestModifier func(request *http.Request)

type Request struct {
	Env         Environment
	HTTPTimeout int
}

type Environment interface {
	HTTPRequest(url string, body io.Reader, timeout int, requestModifiers ...RequestModifier) ([]byte, error)
	Cache() cache.Cache
}

func Do[a any](r *Request, url string, body io.Reader, requestModifiers ...RequestModifier) (a, error) {
	var data a
	httpTimeout := r.HTTPTimeout // r.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	responseBody, err := r.Env.HTTPRequest(url, body, httpTimeout, requestModifiers...)
	if err != nil {
		log.Error(err)
		return data, err
	}

	err = json.Unmarshal(responseBody, &data)
	if err != nil {
		log.Error(err)
		return data, err
	}

	return data, nil
}



================================================
FILE: src/runtime/http/request_test.go
================================================
package http

import (
	"io"
	"net"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"

	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

type MockedEnvironment struct {
	testify_.Mock
}

func (env *MockedEnvironment) Cache() cache.Cache {
	args := env.Called()
	return args.Get(0).(cache.Cache)
}

func (env *MockedEnvironment) HTTPRequest(url string, _ io.Reader, _ int, _ ...RequestModifier) ([]byte, error) {
	args := env.Called(url)
	return args.Get(0).([]byte), args.Error(1)
}

func TestRequestResult(t *testing.T) {
	successData := &data{Hello: "world"}
	jsonResponse := `{ "hello":"world" }`
	url := "https://google.com?q=hello"

	cases := []struct {
		Error                error
		ExpectedData         *data
		Case                 string
		JSONResponse         string
		CacheJSONResponse    string
		ExpectedErrorMessage string
		CacheTimeout         int
		ResponseCacheMiss    bool
	}{
		{
			Case:         "No cache",
			JSONResponse: jsonResponse,
			ExpectedData: successData,
		},
		{
			Case:                 "DNS error",
			Error:                &net.DNSError{IsNotFound: true},
			ExpectedErrorMessage: "lookup : ",
		},
		{
			Case:                 "Response incorrect",
			JSONResponse:         `[`,
			ExpectedErrorMessage: "unexpected end of JSON input",
		},
	}

	for _, tc := range cases {
		env := &MockedEnvironment{}
		env.On("HTTPRequest", url).Return([]byte(tc.JSONResponse), tc.Error)

		request := &Request{
			Env:         env,
			HTTPTimeout: 0,
		}

		got, err := Do[*data](request, url, nil)
		assert.Equal(t, tc.ExpectedData, got, tc.Case)
		if len(tc.ExpectedErrorMessage) == 0 {
			assert.Nil(t, err, tc.Case)
		} else {
			assert.Equal(t, tc.ExpectedErrorMessage, err.Error(), tc.Case)
		}
	}
}



================================================
FILE: src/runtime/mock/environment.go
================================================
package mock

import (
	"io"
	"io/fs"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/battery"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"

	mock "github.com/stretchr/testify/mock"
)

type Environment struct {
	mock.Mock
}

func (env *Environment) Getenv(key string) string {
	args := env.Called(key)
	return args.String(0)
}

func (env *Environment) Pwd() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) Home() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) HasFiles(pattern string) bool {
	args := env.Called(pattern)
	return args.Bool(0)
}

func (env *Environment) HasFilesInDir(dir, pattern string) bool {
	args := env.Called(dir, pattern)
	return args.Bool(0)
}

func (env *Environment) HasFolder(folder string) bool {
	args := env.Called(folder)
	return args.Bool(0)
}

func (env *Environment) ResolveSymlink(input string) (string, error) {
	args := env.Called(input)
	return args.String(0), args.Error(1)
}

func (env *Environment) FileContent(file string) string {
	args := env.Called(file)
	return args.String(0)
}

func (env *Environment) LsDir(input string) []fs.DirEntry {
	args := env.Called(input)
	return args.Get(0).([]fs.DirEntry)
}

func (env *Environment) User() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) Host() (string, error) {
	args := env.Called()
	return args.String(0), args.Error(1)
}

func (env *Environment) GOOS() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) Platform() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) CommandPath(command string) string {
	args := env.Called(command)
	return args.String(0)
}

func (env *Environment) HasCommand(command string) bool {
	args := env.Called(command)
	return args.Bool(0)
}

func (env *Environment) RunCommand(command string, args ...string) (string, error) {
	arguments := env.Called(command, args)
	return arguments.String(0), arguments.Error(1)
}

func (env *Environment) RunShellCommand(shell, command string) string {
	args := env.Called(shell, command)
	return args.String(0)
}

func (env *Environment) StatusCodes() (int, string) {
	args := env.Called()
	return args.Int(0), args.String(1)
}

func (env *Environment) ExecutionTime() float64 {
	args := env.Called()
	return float64(args.Int(0))
}

func (env *Environment) Root() bool {
	args := env.Called()
	return args.Bool(0)
}

func (env *Environment) Flags() *runtime.Flags {
	arguments := env.Called()
	return arguments.Get(0).(*runtime.Flags)
}

func (env *Environment) BatteryState() (*battery.Info, error) {
	args := env.Called()
	return args.Get(0).(*battery.Info), args.Error(1)
}

func (env *Environment) Shell() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) QueryWindowTitles(processName, windowTitleRegex string) (string, error) {
	args := env.Called(processName, windowTitleRegex)
	return args.String(0), args.Error(1)
}

func (env *Environment) WindowsRegistryKeyValue(path string) (*runtime.WindowsRegistryValue, error) {
	args := env.Called(path)
	return args.Get(0).(*runtime.WindowsRegistryValue), args.Error(1)
}

func (env *Environment) HTTPRequest(url string, _ io.Reader, _ int, _ ...http.RequestModifier) ([]byte, error) {
	args := env.Called(url)
	return args.Get(0).([]byte), args.Error(1)
}

func (env *Environment) HasParentFilePath(parent string, followSymlinks bool) (*runtime.FileInfo, error) {
	args := env.Called(parent, followSymlinks)
	return args.Get(0).(*runtime.FileInfo), args.Error(1)
}

func (env *Environment) StackCount() int {
	args := env.Called()
	return args.Int(0)
}

func (env *Environment) IsWsl() bool {
	args := env.Called()
	return args.Bool(0)
}

func (env *Environment) IsWsl2() bool {
	args := env.Called()
	return args.Bool(0)
}

func (env *Environment) IsCygwin() bool {
	args := env.Called()
	return args.Bool(0)
}

func (env *Environment) TerminalWidth() (int, error) {
	args := env.Called()
	return args.Int(0), args.Error(1)
}

func (env *Environment) CachePath() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) Cache() cache.Cache {
	args := env.Called()
	return args.Get(0).(cache.Cache)
}

func (env *Environment) Session() cache.Cache {
	args := env.Called()
	return args.Get(0).(cache.Cache)
}

func (env *Environment) Close() {
	_ = env.Called()
}

func (env *Environment) Logs() string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) InWSLSharedDrive() bool {
	args := env.Called()
	return args.Bool(0)
}

func (env *Environment) ConvertToWindowsPath(_ string) string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) ConvertToLinuxPath(_ string) string {
	args := env.Called()
	return args.String(0)
}

func (env *Environment) Connection(connectionType runtime.ConnectionType) (*runtime.Connection, error) {
	args := env.Called(connectionType)
	return args.Get(0).(*runtime.Connection), args.Error(1)
}

func (env *Environment) MockGitCommand(dir, returnValue string, args ...string) {
	args = append([]string{"-C", dir, "--no-optional-locks", "-c", "core.quotepath=false", "-c", "color.status=false"}, args...)
	env.On("RunCommand", "git", args).Return(returnValue, nil)
}

func (env *Environment) MockHgCommand(dir, returnValue string, args ...string) {
	args = append([]string{"-R", dir}, args...)
	env.On("RunCommand", "hg", args).Return(returnValue, nil)
}

func (env *Environment) MockJjCommand(dir, returnValue string, args ...string) {
	args = append([]string{"--repository", dir, "--no-pager", "--color", "never", "--ignore-working-copy"}, args...)
	env.On("RunCommand", "jj", args).Return(returnValue, nil)
}

func (env *Environment) MockSvnCommand(dir, returnValue string, args ...string) {
	args = append([]string{"-C", dir, "--no-optional-locks", "-c", "core.quotepath=false", "-c", "color.status=false"}, args...)
	env.On("RunCommand", "svn", args).Return(returnValue, nil)
}

func (env *Environment) HasFileInParentDirs(pattern string, depth uint) bool {
	args := env.Called(pattern, depth)
	return args.Bool(0)
}

func (env *Environment) DirMatchesOneOf(dir string, regexes []string) bool {
	args := env.Called(dir, regexes)
	return args.Bool(0)
}

func (env *Environment) Trace(start time.Time, args ...string) {
	_ = env.Called(start, args)
}

func (env *Environment) Debug(message string) {
	_ = env.Called(message)
}

func (env *Environment) DebugF(format string, a ...any) {
	_ = env.Called(format, a)
}

func (env *Environment) Error(err error) {
	_ = env.Called(err)
}

func (env *Environment) DirIsWritable(path string) bool {
	args := env.Called(path)
	return args.Bool(0)
}

func (env *Environment) CursorPosition() (int, int) {
	args := env.Called()
	return args.Int(0), args.Int(1)
}

func (env *Environment) SystemInfo() (*runtime.SystemInfo, error) {
	args := env.Called()
	return args.Get(0).(*runtime.SystemInfo), args.Error(1)
}

func (env *Environment) Unset(name string) {
	for i := 0; i < len(env.ExpectedCalls); i++ {
		f := env.ExpectedCalls[i]
		if f.Method == name {
			f.Unset()
		}
	}
}



================================================
FILE: src/runtime/path/clean.go
================================================
package path

import (
	"fmt"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/regex"
)

// Base returns the last element of path.
// Trailing path separators are removed before extracting the last element.
// If the path consists entirely of separators, Base returns a single separator.
func Base(input string) string {
	volumeName := filepath.VolumeName(input)
	// Strip trailing slashes.
	for len(input) > 0 && IsSeparator(input[len(input)-1]) {
		input = input[0 : len(input)-1]
	}

	if len(input) == 0 {
		return Separator()
	}

	if volumeName == input {
		return input
	}

	// Throw away volume name
	input = input[len(filepath.VolumeName(input)):]
	// Find the last element
	i := len(input) - 1
	for i >= 0 && !IsSeparator(input[i]) {
		i--
	}

	if i >= 0 {
		input = input[i+1:]
	}

	// If empty now, it had only slashes.
	if len(input) == 0 {
		return Separator()
	}

	return input
}

func Clean(input string) string {
	if len(input) == 0 {
		return input
	}

	cleaned := input
	separator := Separator()

	// The prefix can be empty for a relative path.
	var prefix string
	if IsSeparator(cleaned[0]) {
		prefix = separator
	}

	if runtime.GOOS == windows {
		// Normalize (forward) slashes to backslashes on Windows.
		cleaned = strings.ReplaceAll(cleaned, "/", `\`)

		// Clean the prefix for a UNC path, if any.
		if regex.MatchString(`^\\{2}[^\\]+`, cleaned) {
			cleaned = strings.TrimPrefix(cleaned, `\\.\UNC\`)
			if len(cleaned) == 0 {
				return cleaned
			}
			prefix = `\\`
		}

		// Always use an uppercase drive letter on Windows.
		driveLetter, err := regex.GetCompiledRegex(`^[a-z]:`)
		if err == nil {
			cleaned = driveLetter.ReplaceAllStringFunc(cleaned, strings.ToUpper)
		}
	}

	sb := new(strings.Builder)
	sb.WriteString(prefix)

	// Clean slashes.
	matches := regex.FindAllNamedRegexMatch(fmt.Sprintf(`(?P<element>[^\%s]+)`, separator), cleaned)
	n := len(matches) - 1
	for i, m := range matches {
		sb.WriteString(m["element"])
		if i != n {
			sb.WriteString(separator)
		}
	}

	return sb.String()
}

func ReplaceHomeDirPrefixWithTilde(path string) string {
	home := Home()
	if !strings.HasPrefix(path, home) {
		return path
	}

	rem := path[len(home):]
	if len(rem) == 0 || IsSeparator(rem[0]) {
		return "~" + rem
	}

	return path
}

func ReplaceTildePrefixWithHomeDir(path string) string {
	if !strings.HasPrefix(path, "~") {
		return path
	}

	rem := path[1:]
	if len(rem) == 0 || IsSeparator(rem[0]) {
		return Home() + rem
	}

	return path
}



================================================
FILE: src/runtime/path/home.go
================================================
package path

import (
	"os"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

func Home() string {
	home := os.Getenv("HOME")
	defer func() {
		log.Debug(home)
	}()

	if len(home) > 0 {
		return home
	}

	// fallback to older implemenations on Windows
	home = os.Getenv("HOMEDRIVE") + os.Getenv("HOMEPATH")

	if len(home) == 0 {
		home = os.Getenv("USERPROFILE")
	}

	return home
}



================================================
FILE: src/runtime/path/separator.go
================================================
package path

import (
	"runtime"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

const (
	windows = "windows"
)

func Separator() string {
	defer log.Trace(time.Now())

	if runtime.GOOS == windows {
		return `\`
	}

	return "/"
}

func IsSeparator(c uint8) bool {
	if c == '/' {
		return true
	}

	if runtime.GOOS == windows && c == '\\' {
		return true
	}

	return false
}



================================================
FILE: src/segments/angular.go
================================================
package segments

import (
	"path/filepath"
)

type Angular struct {
	language
}

func (a *Angular) Template() string {
	return languageTemplate
}

func (a *Angular) Enabled() bool {
	a.extensions = []string{"angular.json"}
	a.commands = []*cmd{
		{
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
			getVersion: a.getVersion,
		},
	}
	a.versionURLTemplate = "https://github.com/angular/angular/releases/tag/{{.Full}}"

	return a.language.Enabled()
}

func (a *Angular) getVersion() (string, error) {
	return a.nodePackageVersion(filepath.Join("@angular", "core"))
}



================================================
FILE: src/segments/argocd.go
================================================
package segments

import (
	"errors"
	"os"
	"path"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/spf13/pflag"
	"gopkg.in/yaml.v3"
)

const (
	argocdOptsEnv     = "ARGOCD_OPTS"
	argocdInvalidFlag = "invalid flag"
	argocdInvalidYaml = "invalid yaml"
	argocdNoCurrent   = "no current context"

	NameTemplate = " {{ .Name }} "
)

type ArgocdContext struct {
	Name   string `yaml:"name"`
	Server string `yaml:"server"`
	User   string `yaml:"user"`
}

type ArgocdConfig struct {
	CurrentContext string           `yaml:"current-context"`
	Contexts       []*ArgocdContext `yaml:"contexts"`
}

type Argocd struct {
	base

	ArgocdContext
}

func (a *Argocd) Template() string {
	return NameTemplate
}

func (a *Argocd) Enabled() bool {
	// always parse config instead of using cli to save time
	configPath := a.getConfigPath()
	succeeded, err := a.parseConfig(configPath)
	if err != nil {
		log.Error(err)
		return false
	}
	return succeeded
}

func (a *Argocd) getConfigPath() string {
	cp := path.Join(a.env.Home(), ".config", "argocd", "config")
	cpo := a.getConfigFromOpts()
	if len(cpo) > 0 {
		cp = cpo
	}
	return cp
}

func (a *Argocd) getConfigFromOpts() string {
	// don't exit/panic when encountering invalid flags
	flags := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)
	// ignore other valid and invalid flags
	flags.ParseErrorsWhitelist.UnknownFlags = true
	// only care about config
	flags.String("config", "", "get config from opts")

	opts := a.env.Getenv(argocdOptsEnv)
	_ = flags.Parse(strings.Split(opts, " "))
	return flags.Lookup("config").Value.String()
}

func (a *Argocd) parseConfig(file string) (bool, error) {
	config := a.env.FileContent(file)
	// missing or empty file content
	if len(config) == 0 {
		return false, errors.New(argocdInvalidYaml)
	}

	var data ArgocdConfig
	err := yaml.Unmarshal([]byte(config), &data)
	if err != nil {
		log.Error(err)
		return false, errors.New(argocdInvalidYaml)
	}
	a.Name = data.CurrentContext
	for _, context := range data.Contexts {
		if context.Name == a.Name {
			// mandatory fields in yaml
			if len(context.Server) == 0 || len(context.User) == 0 {
				return false, errors.New(argocdInvalidYaml)
			}
			a.Server = context.Server
			a.User = context.User
			return true, nil
		}
	}
	return false, errors.New(argocdNoCurrent)
}



================================================
FILE: src/segments/argocd_test.go
================================================
package segments

import (
	"fmt"
	"path"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
)

const (
	poshHome = "/Users/posh"
)

func TestArgocdGetConfigFromOpts(t *testing.T) {
	configFile := "/Users/posh/.config/argocd/config"
	cases := []struct {
		Case     string
		Opts     string
		Expected string
	}{
		{Case: "invalid flag in opts", Opts: "--invalid", Expected: ""},
		{Case: "no config in opts", Opts: "--grpc-web", Expected: ""},
		{
			Case:     "config in opts",
			Opts:     fmt.Sprintf("--grpc-web --config %s --plaintext", configFile),
			Expected: configFile,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", argocdOptsEnv).Return(tc.Opts)

		argocd := &Argocd{
			base: base{
				env:   env,
				props: properties.Map{},
			},
		}
		config := argocd.getConfigFromOpts()
		assert.Equal(t, tc.Expected, config, tc.Case)
	}
}

func TestArgocdGetConfigPath(t *testing.T) {
	configFile := path.Join(poshHome, ".config", "argocd", "config")
	cases := []struct {
		Case          string
		Opts          string
		Expected      string
		ExpectedError string
	}{
		{Case: "without opts", Expected: configFile},
		{Case: "with opts", Opts: "--config /etc/argocd/config", Expected: "/etc/argocd/config"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return(poshHome)
		env.On("Getenv", argocdOptsEnv).Return(tc.Opts)

		argocd := &Argocd{
			base: base{
				env:   env,
				props: properties.Map{},
			},
		}
		assert.Equal(t, tc.Expected, argocd.getConfigPath())
	}
}

func TestArgocdParseConfig(t *testing.T) {
	configFile := "/Users/posh/.config/argocd/config"
	cases := []struct {
		ExpectedContext ArgocdContext
		Case            string
		Config          string
		ExpectedError   string
		Expected        bool
	}{
		{Case: "missing or empty yaml", Config: "", ExpectedError: argocdInvalidYaml},
		{
			Case:          "invalid yaml",
			ExpectedError: argocdInvalidYaml,
			Config: `
[context]
context
`,
		},
		{
			Case:          "invalid config",
			ExpectedError: argocdInvalidYaml,
			Config: `
contexts:
  - name: context1
    server: server1
    user: user1
  - name: context2
    server: server2
    userr: user2
current-context: context2
servers:
  - grpc-web: true
    server: server1
  - grpc-web: false
    server: serve2
`,
		},
		{
			Case:          "no current context found",
			ExpectedError: argocdNoCurrent,
			Config: `
contexts:
  - name: context1
    server: server1
    user: user1
  - name: context2
    server: server2
    user: user2
`,
		},
		{
			Case:     "current context found",
			Expected: true,
			Config: `
contexts:
  - name: context1
    server: server1
    user: user1
  - name: context2
    server: server2
    user: user2
current-context: context2
servers:
  - grpc-web: true
    server: server1
  - grpc-web: false
    server: serve2
users:
  - auth-token: authtoken1
    name: user1
    refresh-token: refreshtoken1
  - auth-token: authtoken2
    name: user2
    refresh-token: refreshtoken2
`,
			ExpectedContext: ArgocdContext{
				Name:   "context2",
				Server: "server2",
				User:   "user2",
			},
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("FileContent", configFile).Return(tc.Config)

		argocd := &Argocd{
			base: base{
				env:   env,
				props: properties.Map{},
			},
		}
		if len(tc.ExpectedError) > 0 {
			_, err := argocd.parseConfig(configFile)
			assert.EqualError(t, err, tc.ExpectedError, tc.Case)
			continue
		}
		config, err := argocd.parseConfig(configFile)
		assert.NoErrorf(t, err, tc.Case)
		assert.Equal(t, tc.Expected, config, tc.Case)
		assert.Equal(t, tc.ExpectedContext, argocd.ArgocdContext, tc.Case)
	}
}

func TestArgocdSegment(t *testing.T) {
	configFile := path.Join(poshHome, ".config", "argocd", "config")
	cases := []struct {
		ExpectedContext ArgocdContext
		Case            string
		Opts            string
		Config          string
		Template        string
		ExpectedString  string
		ExpectedError   string
		ExpectedEnabled bool
	}{
		{
			Case: "default template",
			Opts: "",
			Config: `
contexts:
  - name: context1
    server: server1
    user: user1
  - name: context2
    server: server2
    user: user2
current-context: context2
servers:
  - grpc-web: true
    server: server1
  - grpc-web: false
    server: serve2
`,
			ExpectedString:  "context2",
			ExpectedEnabled: true,
			ExpectedContext: ArgocdContext{
				Name:   "context2",
				Server: "server2",
				User:   "user2",
			},
		},
		{
			Case: "full template",
			Opts: "",
			Config: `
contexts:
  - name: context1
    server: server1
    user: user1
  - name: context2
    server: server2
    user: user2
current-context: context2
servers:
  - grpc-web: true
    server: server1
  - grpc-web: false
    server: serve2
`,
			Template:        "{{ .Name }}:{{ .User}}@{{ .Server }}",
			ExpectedString:  "context2:user2@server2",
			ExpectedEnabled: true,
			ExpectedContext: ArgocdContext{
				Name:   "context2",
				Server: "server2",
				User:   "user2",
			},
		},
		{
			Case:            "broken config",
			Config:          `}`,
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return(poshHome)
		env.On("Getenv", argocdOptsEnv).Return(tc.Opts)
		env.On("FileContent", configFile).Return(tc.Config)
		env.On("Flags").Return(&runtime.Flags{})

		argocd := &Argocd{}
		argocd.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, argocd.Enabled(), tc.Case)

		if !tc.ExpectedEnabled {
			continue
		}

		assert.Equal(t, tc.ExpectedContext, argocd.ArgocdContext, tc.Case)
		if len(tc.Template) > 0 {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, argocd), tc.Case)
		} else {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, argocd.Template(), argocd), tc.Case)
		}
	}
}



================================================
FILE: src/segments/aurelia.go
================================================
package segments

type Aurelia struct {
	language
}

func (a *Aurelia) Template() string {
	return languageTemplate
}

func (a *Aurelia) Enabled() bool {
	a.extensions = []string{"package.json"}
	a.commands = []*cmd{
		{
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)(-(?P<prerelease>[a-z]+).(?P<buildmetadata>[0-9]+))?)))`,
			getVersion: a.getVersion,
		},
	}
	a.versionURLTemplate = "https://github.com/aurelia/aurelia/releases/tag/v{{ .Full }}"

	if !a.hasNodePackage("aurelia") {
		return false
	}

	return a.language.Enabled()
}

func (a *Aurelia) getVersion() (string, error) {
	return a.nodePackageVersion("aurelia")
}



================================================
FILE: src/segments/aws.go
================================================
package segments

import (
	"fmt"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
)

type Aws struct {
	base

	Profile string
	Region  string
}

const (
	defaultUser = "default"
)

func (a *Aws) Template() string {
	return " {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} "
}

func (a *Aws) Enabled() bool {
	getEnvFirstMatch := func(envs ...string) string {
		for _, env := range envs {
			value := a.env.Getenv(env)
			if len(value) != 0 {
				return value
			}
		}

		return ""
	}

	displayDefaultUser := a.props.GetBool(properties.DisplayDefault, true)
	a.Profile = getEnvFirstMatch("AWS_VAULT", "AWS_DEFAULT_PROFILE", "AWS_PROFILE")
	if !displayDefaultUser && a.Profile == defaultUser {
		return false
	}

	a.Region = getEnvFirstMatch("AWS_REGION", "AWS_DEFAULT_REGION")
	if len(a.Profile) != 0 && len(a.Region) != 0 {
		return true
	}

	if len(a.Profile) == 0 && len(a.Region) != 0 && displayDefaultUser {
		a.Profile = defaultUser
		return true
	}

	a.getConfigFileInfo()
	if !displayDefaultUser && a.Profile == defaultUser {
		return false
	}

	return len(a.Profile) != 0
}

func (a *Aws) getConfigFileInfo() {
	configPath := a.env.Getenv("AWS_CONFIG_FILE")
	if len(configPath) == 0 {
		configPath = fmt.Sprintf("%s/.aws/config", a.env.Home())
	}

	config := a.env.FileContent(configPath)
	configSection := "[default]"
	if len(a.Profile) != 0 {
		configSection = fmt.Sprintf("[profile %s]", a.Profile)
	}

	configLines := strings.SplitSeq(config, "\n")
	var sectionActive bool
	for line := range configLines {
		if strings.HasPrefix(line, configSection) {
			sectionActive = true
			continue
		}

		if sectionActive && strings.HasPrefix(line, "region") {
			splitted := strings.Split(line, "=")
			if len(splitted) >= 2 {
				a.Region = strings.TrimSpace(splitted[1])
				break
			}
		}
	}

	if len(a.Profile) == 0 && len(a.Region) != 0 {
		a.Profile = defaultUser
	}
}

func (a *Aws) RegionAlias() string {
	if len(a.Region) == 0 {
		return ""
	}

	splitted := strings.Split(a.Region, "-")
	if len(splitted) < 2 {
		return a.Region
	}

	splitted[1] = regex.ReplaceAllString(`orth|outh|ast|est|entral`, splitted[1], "")
	return strings.Join(splitted, "")
}



================================================
FILE: src/segments/aws_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestAWSSegment(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		Profile         string
		DefaultProfile  string
		Vault           string
		Region          string
		DefaultRegion   string
		ConfigFile      string
		Template        string
		ExpectedEnabled bool
		DisplayDefault  bool
	}{
		{Case: "enabled with default user", ExpectedString: "default@eu-west", Region: "eu-west", ExpectedEnabled: true, DisplayDefault: true},
		{Case: "disabled with default user", ExpectedString: "default@eu-west", Region: "eu-west", ExpectedEnabled: false, DisplayDefault: false},
		{Case: "disabled", ExpectedString: "", ExpectedEnabled: false},
		{Case: "enabled with default user", ExpectedString: "default@eu-west", Profile: "default", Region: "eu-west", ExpectedEnabled: true, DisplayDefault: true},
		{Case: "enabled with default profile", ExpectedString: "default@eu-west", DefaultProfile: "default", Region: "eu-west", ExpectedEnabled: true, DisplayDefault: true},
		{Case: "disabled with default user", ExpectedString: "default", Profile: "default", Region: "eu-west", ExpectedEnabled: false, DisplayDefault: false},
		{Case: "enabled no region", ExpectedString: "company", ExpectedEnabled: true, Profile: "company"},
		{Case: "enabled with region", ExpectedString: "company@eu-west", ExpectedEnabled: true, Profile: "company", Region: "eu-west", DefaultRegion: "us-west"},
		{Case: "enabled with default region", ExpectedString: "company@us-west", ExpectedEnabled: true, Profile: "company", DefaultRegion: "us-west"},
		{
			Case:            "template: enabled no region",
			ExpectedString:  "profile: company",
			ExpectedEnabled: true,
			Profile:         "company",
			Template:        "profile: {{.Profile}}{{if .Region}} in {{.Region}}{{end}}",
		},
		{
			Case:            "template: enabled with region",
			ExpectedString:  "profile: company in eu-west",
			ExpectedEnabled: true,
			Profile:         "company",
			Region:          "eu-west",
			Template:        "profile: {{.Profile}}{{if .Region}} in {{.Region}}{{end}}",
		},
		{
			Case:            "template: enabled with region alias that has compound cardinal direction",
			ExpectedString:  "profile: company in apne3",
			ExpectedEnabled: true,
			Profile:         "company",
			Region:          "ap-northeast-3",
			Template:        "profile: {{.Profile}}{{if .Region}} in {{.RegionAlias}}{{end}}",
		},
		{Case: "template: invalid", ExpectedString: "{{ .Burp", ExpectedEnabled: true, Profile: "c", Template: "{{ .Burp"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", "AWS_VAULT").Return(tc.Vault)
		env.On("Getenv", "AWS_PROFILE").Return(tc.Profile)
		env.On("Getenv", "AWS_DEFAULT_PROFILE").Return(tc.DefaultProfile)
		env.On("Getenv", "AWS_REGION").Return(tc.Region)
		env.On("Getenv", "AWS_DEFAULT_REGION").Return(tc.DefaultRegion)
		env.On("Getenv", "AWS_CONFIG_FILE").Return(tc.ConfigFile)
		env.On("FileContent", "/usr/home/.aws/config").Return("")
		env.On("Home").Return("/usr/home")
		props := properties.Map{
			properties.DisplayDefault: tc.DisplayDefault,
		}
		env.On("Flags").Return(&runtime.Flags{})

		aws := &Aws{}
		aws.Init(props, env)

		if tc.Template == "" {
			tc.Template = aws.Template()
		}

		assert.Equal(t, tc.ExpectedEnabled, aws.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, aws), tc.Case)
	}
}



================================================
FILE: src/segments/az.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Az struct {
	base

	Origin string
	AzureSubscription
}

const (
	Source properties.Property = "source"

	Pwsh = "pwsh"
	Cli  = "cli"
	// this deprecated value is used to support the old behavior of first_match
	FirstMatch = "cli|pwsh"
	azureEnv   = "POSH_AZURE_SUBSCRIPTION"
)

type AzureConfig struct {
	InstallationID string               `json:"installationId"`
	Subscriptions  []*AzureSubscription `json:"subscriptions"`
}

type AzureSubscription struct {
	User              *AzureUser `json:"user"`
	ID                string     `json:"id"`
	Name              string     `json:"name"`
	State             string     `json:"state"`
	TenantID          string     `json:"tenantId"`
	TenantDisplayName string     `json:"tenantDisplayName"`
	EnvironmentName   string     `json:"environmentName"`
	HomeTenantID      string     `json:"homeTenantId"`
	ManagedByTenants  []any      `json:"managedByTenants"`
	IsDefault         bool       `json:"isDefault"`
}

type AzureUser struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type AzurePowerShellSubscription struct {
	Name    string `json:"Name"`
	Account struct {
		Type string `json:"Type"`
	} `json:"Account"`
	Environment struct {
		Name string `json:"Name"`
	} `json:"Environment"`
	Subscription struct {
		ID                 string `json:"Id"`
		Name               string `json:"Name"`
		State              string `json:"State"`
		ExtendedProperties struct {
			Account string `json:"Account"`
		} `json:"ExtendedProperties"`
	} `json:"Subscription"`
	Tenant struct {
		ID   string `json:"Id"`
		Name string `json:"Name"`
	} `json:"Tenant"`
}

func (a *Az) Template() string {
	return NameTemplate
}

func (a *Az) Enabled() bool {
	source := a.props.GetString(Source, FirstMatch)

	// migrate first_match
	if source == "first_match" {
		source = FirstMatch
	}

	sources := strings.SplitSeq(source, "|")

	for source := range sources {
		switch source {
		case Pwsh:
			if OK := a.getModuleSubscription(); OK {
				return OK
			}
		case Cli:
			if OK := a.getCLISubscription(); OK {
				return OK
			}
		}
	}

	return false
}

func (a *Az) FileContentWithoutBom(file string) string {
	config := a.env.FileContent(file)
	const ByteOrderMark = "\ufeff"
	return strings.TrimLeft(config, ByteOrderMark)
}

func (a *Az) getCLISubscription() bool {
	cfg, err := a.findConfig("azureProfile.json")
	if err != nil {
		return false
	}
	content := a.FileContentWithoutBom(cfg)
	if len(content) == 0 {
		return false
	}
	var config AzureConfig
	if err := json.Unmarshal([]byte(content), &config); err != nil {
		return false
	}
	for _, subscription := range config.Subscriptions {
		if subscription.IsDefault {
			a.AzureSubscription = *subscription
			a.Origin = "CLI"
			return true
		}
	}
	return false
}

func (a *Az) getModuleSubscription() bool {
	envSubscription := a.env.Getenv(azureEnv)
	if len(envSubscription) == 0 {
		return false
	}

	var config AzurePowerShellSubscription
	if err := json.Unmarshal([]byte(envSubscription), &config); err != nil {
		return false
	}

	a.IsDefault = true
	a.EnvironmentName = config.Environment.Name
	a.TenantID = config.Tenant.ID
	a.ID = config.Subscription.ID
	a.Name = config.Subscription.Name
	a.State = config.Subscription.State
	a.User = &AzureUser{
		Name: config.Subscription.ExtendedProperties.Account,
		Type: config.Account.Type,
	}
	a.TenantDisplayName = config.Tenant.Name

	a.Origin = "PWSH"

	return true
}

func (a *Az) findConfig(fileName string) (string, error) {
	configDirs := []string{
		a.env.Getenv("AZURE_CONFIG_DIR"),
		filepath.Join(a.env.Home(), ".azure"),
		filepath.Join(a.env.Home(), ".Azure"),
	}
	for _, dir := range configDirs {
		if len(dir) != 0 && a.env.HasFilesInDir(dir, fileName) {
			return filepath.Join(dir, fileName), nil
		}
	}
	return "", errors.New("azure config dir not found")
}



================================================
FILE: src/segments/az_functions.go
================================================
package segments

type AzFunc struct {
	language
}

func (az *AzFunc) Template() string {
	return languageTemplate
}

func (az *AzFunc) Enabled() bool {
	az.extensions = []string{"host.json", "local.settings.json", "function.json"}
	az.commands = []*cmd{
		{

			executable: "func",
			args:       []string{"--version"},
			regex:      `(?P<version>[0-9.]+)`,
		},
	}

	return az.language.Enabled()
}



================================================
FILE: src/segments/az_test.go
================================================
package segments

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

func TestAzSegment(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		Template        string
		Source          string
		ExpectedEnabled bool
		HasCLI          bool
		HasPowerShell   bool
	}{
		{
			Case:            "no config files found",
			ExpectedEnabled: false,
		},
		{
			Case:            "Az CLI Profile",
			ExpectedEnabled: true,
			ExpectedString:  "AzureCliCloud",
			Template:        "{{ .EnvironmentName }}",
			HasCLI:          true,
		},
		{
			Case:            "Az Pwsh Profile",
			ExpectedEnabled: true,
			ExpectedString:  "AzurePoshCloud",
			Template:        "{{ .EnvironmentName }}",
			HasPowerShell:   true,
		},
		{
			Case:            "Az Pwsh Profile",
			ExpectedEnabled: true,
			ExpectedString:  "AzurePoshCloud",
			Template:        "{{ .EnvironmentName }}",
			HasPowerShell:   true,
		},
		{
			Case:            "Faulty template",
			ExpectedEnabled: true,
			ExpectedString:  template.IncorrectTemplate,
			Template:        "{{ .Burp }}",
			HasPowerShell:   true,
		},
		{
			Case:            "PWSH",
			ExpectedEnabled: true,
			ExpectedString:  "PWSH",
			Template:        "{{ .Origin }}",
			HasPowerShell:   true,
		},
		{
			Case:            "CLI",
			ExpectedEnabled: true,
			ExpectedString:  "CLI",
			Template:        "{{ .Origin }}",
			HasCLI:          true,
		},
		{
			Case:            "Az CLI Profile only",
			ExpectedEnabled: true,
			ExpectedString:  "AzureCliCloud",
			Template:        "{{ .EnvironmentName }}",
			HasCLI:          true,
			Source:          Cli,
		},
		{
			Case:            "Az CLI Profile only - disabled",
			ExpectedEnabled: false,
			Template:        "{{ .EnvironmentName }}",
			HasCLI:          false,
			Source:          Cli,
		},
		{
			Case:            "PowerShell Profile only",
			ExpectedEnabled: true,
			ExpectedString:  "AzurePoshCloud",
			Template:        "{{ .EnvironmentName }}",
			HasPowerShell:   true,
			Source:          Pwsh,
		},
		{
			Case:            "Az CLI Profile only - disabled",
			ExpectedEnabled: false,
			Template:        "{{ .EnvironmentName }}",
			Source:          Pwsh,
		},
		{
			Case:            "Az CLI account type",
			ExpectedEnabled: true,
			ExpectedString:  "user",
			Template:        "{{ .User.Type }}",
			HasCLI:          true,
			Source:          Cli,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return(poshHome)
		env.On("Flags").Return(&runtime.Flags{})

		var azureProfile, azureRmContext string

		if tc.HasCLI {
			content, _ := os.ReadFile("../test/azureProfile.json")
			azureProfile = string(content)
		}
		if tc.HasPowerShell {
			content, _ := os.ReadFile("../test/AzureRmContext.json")
			azureRmContext = string(content)
		}

		env.On("GOOS").Return(runtime.LINUX)
		env.On("FileContent", filepath.Join(poshHome, ".azure", "azureProfile.json")).Return(azureProfile)
		env.On("Getenv", "POSH_AZURE_SUBSCRIPTION").Return(azureRmContext)
		env.On("Getenv", "AZURE_CONFIG_DIR").Return("")

		if tc.HasCLI {
			env.On("HasFilesInDir", filepath.Clean("/Users/posh/.azure"), "azureProfile.json").Return(true)
		} else {
			env.On("HasFilesInDir", filepath.Clean("/Users/posh/.azure"), "azureProfile.json").Return(false)
			env.On("HasFilesInDir", filepath.Clean("/Users/posh/.Azure"), "azureProfile.json").Return(false)
		}

		if tc.Source == "" {
			tc.Source = FirstMatch
		}

		az := &Az{}
		az.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, az.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, az), tc.Case)
	}
}



================================================
FILE: src/segments/azd.go
================================================
package segments

import (
	"encoding/json"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

type Azd struct {
	base

	azdConfig
}

type azdConfig struct {
	DefaultEnvironment string `json:"defaultEnvironment"`
	Version            int    `json:"version"`
}

func (t *Azd) Template() string {
	return " \uebd8 {{ .DefaultEnvironment }} "
}

func (t *Azd) Enabled() bool {
	var parentFilePath string

	folders := t.props.GetStringArray(LanguageFolders, []string{".azure"})
	for _, folder := range folders {
		if file, err := t.env.HasParentFilePath(folder, false); err == nil {
			parentFilePath = file.ParentFolder
			break
		}
	}

	if len(parentFilePath) == 0 {
		log.Debug("no .azure folder found in parent directories")
		return false
	}

	dotAzureFolder := filepath.Join(parentFilePath, ".azure")
	files := t.env.LsDir(dotAzureFolder)

	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if strings.EqualFold(file.Name(), "config.json") {
			return t.TryReadConfigJSON(filepath.Join(dotAzureFolder, file.Name()))
		}
	}

	return false
}

func (t *Azd) TryReadConfigJSON(file string) bool {
	if len(file) == 0 {
		return false
	}

	content := t.env.FileContent(file)
	var config azdConfig
	if err := json.Unmarshal([]byte(content), &config); err != nil {
		return false
	}

	t.azdConfig = config
	return true
}



================================================
FILE: src/segments/azd_test.go
================================================
package segments

import (
	"errors"
	"io/fs"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
)

func TestAzdSegment(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		Template        string
		ExpectedEnabled bool
		IsInited        bool
	}{
		{
			Case:            "no .azure directory found",
			ExpectedEnabled: false,
		},
		{
			Case:            "Environment located",
			ExpectedEnabled: true,
			ExpectedString:  "TestEnvironment",
			Template:        "{{ .DefaultEnvironment }}",
			IsInited:        true,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Flags").Return(&runtime.Flags{})

		if tc.IsInited {
			fileInfo := &runtime.FileInfo{
				Path:         "test/.azure",
				ParentFolder: "test",
				IsDir:        true,
			}
			env.On("HasParentFilePath", ".azure", false).Return(fileInfo, nil)
			dirEntries := []fs.DirEntry{
				&MockDirEntry{
					name:  "config.json",
					isDir: false,
				}, &MockDirEntry{
					name:  "TestEnvironment",
					isDir: true,
				},
			}
			env.On("LsDir", filepath.Join("test", ".azure")).Return(dirEntries, nil)

			env.On("FileContent", filepath.Join("test", ".azure", "config.json")).Return(`{"version": 1, "defaultEnvironment": "TestEnvironment"}`, nil)
		} else {
			env.On("HasParentFilePath", ".azure", false).Return(&runtime.FileInfo{}, errors.New("no such file or directory"))
		}

		azd := Azd{}
		azd.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, azd.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, azd), tc.Case)
	}
}



================================================
FILE: src/segments/base.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type base struct {
	props properties.Properties
	env   runtime.Environment

	Segment *Segment `json:"Segment"`
}

type Segment struct {
	Text  string `json:"Text"`
	Index int    `json:"Index"`
}

func (s *base) Text() string {
	return s.Segment.Text
}

func (s *base) SetText(text string) {
	s.Segment.Text = text
}

func (s *base) SetIndex(index int) {
	s.Segment.Index = index
}

func (s *base) Init(props properties.Properties, env runtime.Environment) {
	s.Segment = &Segment{}
	s.props = props
	s.env = env
}



================================================
FILE: src/segments/battery.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/battery"
)

type Battery struct {
	base
	Error string
	Icon  string
	battery.Info
}

const (
	// ChargingIcon to display when charging
	ChargingIcon properties.Property = "charging_icon"
	// DischargingIcon o display when discharging
	DischargingIcon properties.Property = "discharging_icon"
	// ChargedIcon to display when fully charged
	ChargedIcon properties.Property = "charged_icon"
	// NotChargingIcon to display when on AC power
	NotChargingIcon properties.Property = "not_charging_icon"
)

func (b *Battery) Template() string {
	return " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }} "
}

func (b *Battery) Enabled() bool {
	// disable in WSL1
	if b.env.IsWsl() && !b.env.IsWsl2() {
		return false
	}

	info, err := b.env.BatteryState()

	if !b.enabledWhileError(err) {
		return false
	}

	b.Info = *info

	// case on computer without batteries(no error, empty array)
	if err == nil && b.Percentage == 0 {
		return false
	}

	switch b.State {
	case battery.Discharging:
		b.Icon = b.props.GetString(DischargingIcon, "")
	case battery.NotCharging:
		b.Icon = b.props.GetString(NotChargingIcon, "")
	case battery.Charging:
		b.Icon = b.props.GetString(ChargingIcon, "")
	case battery.Full:
		b.Icon = b.props.GetString(ChargedIcon, "")
	case battery.Empty, battery.Unknown:
		return true
	}
	return true
}

func (b *Battery) enabledWhileError(err error) bool {
	if err == nil {
		return true
	}
	if _, ok := err.(*battery.NoBatteryError); ok {
		return false
	}
	displayError := b.props.GetBool(properties.DisplayError, false)
	if !displayError {
		return false
	}
	b.Error = err.Error()
	// On Windows, it sometimes errors when the battery is full.
	// This hack ensures we display a fully charged battery, even if
	// that state can be incorrect. It's better to "ignore" the error
	// than to not display the segment at all as that will confuse users.
	b.Percentage = 100
	b.State = battery.Full
	return true
}



================================================
FILE: src/segments/bazel.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Bazel struct {
	Icon string
	language
}

const (
	// Bazel's icon
	Icon properties.Property = "icon"
)

func (b *Bazel) Template() string {
	return " {{ if .Error }}{{ .Icon }} {{ .Error }}{{ else }}{{ url .Icon .URL }} {{ .Full }}{{ end }} "
}

func (b *Bazel) Enabled() bool {
	b.extensions = []string{"*.bazel", "*.bzl", "BUILD", "WORKSPACE", ".bazelrc", ".bazelversion"}
	b.folders = []string{"bazel-bin", "bazel-out", "bazel-testlogs"}
	b.commands = []*cmd{
		{
			executable: "bazel",
			args:       []string{"--version"},
			regex:      `bazel (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	// Use the correct URL for Bazel >5.4.1, since they do not have the docs subdomain.
	b.versionURLTemplate = "https://{{ if lt .Major 6 }}docs.{{ end }}bazel.build/versions/{{ .Major }}.{{ .Minor }}.{{ .Patch }}"

	b.Icon = b.props.GetString(Icon, "\ue63a")

	return b.language.Enabled()
}



================================================
FILE: src/segments/bazel_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBazel(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
		Template       string
	}{
		{Case: "bazel 4.0.0", ExpectedString: "<LINK>https://docs.bazel.build/versions/4.0.0<TEXT>\ue63a</TEXT></LINK> 4.0.0", Version: "bazel 4.0.0", Template: ""},
		{Case: "bazel 5.4.1", ExpectedString: "<LINK>https://docs.bazel.build/versions/5.4.1<TEXT>\ue63a</TEXT></LINK> 5.4.1", Version: "bazel 5.4.1", Template: ""},
		{Case: "bazel 6.4.0", ExpectedString: "<LINK>https://bazel.build/versions/6.4.0<TEXT>\ue63a</TEXT></LINK> 6.4.0", Version: "bazel 6.4.0", Template: ""},
		{Case: "bazel 7.1.1", ExpectedString: "<LINK>https://bazel.build/versions/7.1.1<TEXT>\ue63a</TEXT></LINK> 7.1.1", Version: "bazel 7.1.1", Template: ""},
		{Case: "bazel 10.11.12", ExpectedString: "<LINK>https://bazel.build/versions/10.11.12<TEXT>\ue63a</TEXT></LINK> 10.11.12", Version: "bazel 10.11.12", Template: ""},
		{Case: "", ExpectedString: "\ue63a err parsing info from bazel with", Version: "", Template: ""},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "bazel",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.bazel",
		}
		env, props := getMockedLanguageEnv(params)
		props[Icon] = "\ue63a"
		b := &Bazel{}
		b.Init(props, env)
		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, b.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, b.Template(), b), failMsg)
	}
}



================================================
FILE: src/segments/brewfather.go
================================================
package segments

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"math"
	"net/http"
	"sort"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

// segment struct, makes templating easier
type Brewfather struct {
	base

	DaysBottledOrFermented *uint
	TemperatureTrendIcon   string
	StatusIcon             string
	DayIcon                string
	URL                    string
	Batch
	ReadingAge     int
	DaysFermenting uint
	DaysBottled    uint
}

const (
	BFUserID  properties.Property = "user_id"
	BFBatchID properties.Property = "batch_id"

	BFDoubleUpIcon      properties.Property = "doubleup_icon"
	BFSingleUpIcon      properties.Property = "singleup_icon"
	BFFortyFiveUpIcon   properties.Property = "fortyfiveup_icon"
	BFFlatIcon          properties.Property = "flat_icon"
	BFFortyFiveDownIcon properties.Property = "fortyfivedown_icon"
	BFSingleDownIcon    properties.Property = "singledown_icon"
	BFDoubleDownIcon    properties.Property = "doubledown_icon"

	BFPlanningStatusIcon     properties.Property = "planning_status_icon"
	BFBrewingStatusIcon      properties.Property = "brewing_status_icon"
	BFFermentingStatusIcon   properties.Property = "fermenting_status_icon"
	BFConditioningStatusIcon properties.Property = "conditioning_status_icon"
	BFCompletedStatusIcon    properties.Property = "completed_status_icon"
	BFArchivedStatusIcon     properties.Property = "archived_status_icon"

	BFDayIcon properties.Property = "day_icon"

	BFStatusPlanning     string = "Planning"
	BFStatusBrewing      string = "Brewing"
	BFStatusFermenting   string = "Fermenting"
	BFStatusConditioning string = "Conditioning"
	BFStatusCompleted    string = "Completed"
	BFStatusArchived     string = "Archived"
)

// Returned from https://api.brewfather.app/v1/batches/batch_id/readings
type BatchReading struct {
	Comment     string  `json:"comment"`
	DeviceType  string  `json:"type"`
	DeviceID    string  `json:"id"`
	Gravity     float64 `json:"sg"`
	Temperature float64 `json:"temp"`
	Timepoint   int64   `json:"timepoint"`
	Time        int64   `json:"time"`
}
type Batch struct {
	Reading   *BatchReading
	Status    string `json:"status"`
	BatchName string `json:"name"`
	Recipe    struct {
		Name string `json:"name"`
	} `json:"recipe"`
	BatchNumber      int     `json:"batchNo"`
	BrewDate         int64   `json:"brewDate"`
	FermentStartDate int64   `json:"fermentationStartDate"`
	BottlingDate     int64   `json:"bottlingDate"`
	MeasuredOg       float64 `json:"measuredOg"`
	MeasuredFg       float64 `json:"measuredFg"`
	MeasuredAbv      float64 `json:"measuredAbv"`
	TemperatureTrend float64
}

func (bf *Brewfather) Template() string {
	return " {{ .StatusIcon }} {{ if .DaysBottledOrFermented }}{{ .DaysBottledOrFermented }}{{ .DayIcon }} {{ end }}{{ url .Recipe.Name .URL }} {{ printf \"%.1f\" .MeasuredAbv }}%{{ if and (.Reading) (eq .Status \"Fermenting\") }} {{ printf \"%.3f\" .Reading.Gravity }} {{ .Reading.Temperature }}\u00b0 {{ .TemperatureTrendIcon }}{{ end }} " //nolint:lll
}

func (bf *Brewfather) Enabled() bool {
	data, err := bf.getResult()
	if err != nil {
		return false
	}
	bf.Batch = *data

	if bf.Reading != nil {
		readingDate := time.UnixMilli(bf.Reading.Time)
		bf.ReadingAge = int(time.Since(readingDate).Hours())
	} else {
		bf.ReadingAge = -1
	}

	bf.TemperatureTrendIcon = bf.getTrendIcon(bf.TemperatureTrend)
	bf.StatusIcon = bf.getBatchStatusIcon(data.Status)

	fermStartDate := time.UnixMilli(bf.FermentStartDate)
	bottlingDate := time.UnixMilli(bf.BottlingDate)

	switch bf.Status {
	case BFStatusFermenting:
		// in the fermenter now, so relative to today.
		bf.DaysFermenting = uint(time.Since(fermStartDate).Hours() / 24)
		bf.DaysBottled = 0
		bf.DaysBottledOrFermented = &bf.DaysFermenting
	case BFStatusConditioning, BFStatusCompleted, BFStatusArchived:
		bf.DaysFermenting = uint(bottlingDate.Sub(fermStartDate).Hours() / 24)
		bf.DaysBottled = uint(time.Since(bottlingDate).Hours() / 24)
		bf.DaysBottledOrFermented = &bf.DaysBottled
	default:
		bf.DaysFermenting = 0
		bf.DaysBottled = 0
		bf.DaysBottledOrFermented = nil
	}

	// URL property set to weblink to the full batch page
	batchID := bf.props.GetString(BFBatchID, "")
	if len(batchID) > 0 {
		bf.URL = fmt.Sprintf("https://web.brewfather.app/tabs/batches/batch/%s", batchID)
	}

	bf.DayIcon = bf.props.GetString(BFDayIcon, "d")

	return true
}

func (bf *Brewfather) getTrendIcon(trend float64) string {
	// Not a fan of this logic - wondering if Go lets us do something cleaner...
	if trend >= 0 {
		if trend > 4 {
			return bf.props.GetString(BFDoubleUpIcon, "↑↑")
		}

		if trend > 2 {
			return bf.props.GetString(BFSingleUpIcon, "↑")
		}

		if trend > 0.5 {
			return bf.props.GetString(BFFortyFiveUpIcon, "↗")
		}

		return bf.props.GetString(BFFlatIcon, "→")
	}

	if trend < -4 {
		return bf.props.GetString(BFDoubleDownIcon, "↓↓")
	}

	if trend < -2 {
		return bf.props.GetString(BFSingleDownIcon, "↓")
	}

	if trend < -0.5 {
		return bf.props.GetString(BFFortyFiveDownIcon, "↘")
	}

	return bf.props.GetString(BFFlatIcon, "→")
}

func (bf *Brewfather) getBatchStatusIcon(batchStatus string) string {
	switch batchStatus {
	case BFStatusPlanning:
		return bf.props.GetString(BFPlanningStatusIcon, "\uF8EA")
	case BFStatusBrewing:
		return bf.props.GetString(BFBrewingStatusIcon, "\uF7DE")
	case BFStatusFermenting:
		return bf.props.GetString(BFFermentingStatusIcon, "\uF499")
	case BFStatusConditioning:
		return bf.props.GetString(BFConditioningStatusIcon, "\uE372")
	case BFStatusCompleted:
		return bf.props.GetString(BFCompletedStatusIcon, "\uF7A5")
	case BFStatusArchived:
		return bf.props.GetString(BFArchivedStatusIcon, "\uF187")
	default:
		return ""
	}
}

func (bf *Brewfather) getResult() (*Batch, error) {
	userID := bf.props.GetString(BFUserID, "")
	if len(userID) == 0 {
		return nil, errors.New("missing Brewfather user id (user_id)")
	}

	apiKey := bf.props.GetString(APIKey, "")
	if len(apiKey) == 0 {
		return nil, errors.New("missing Brewfather api key (api_key)")
	}

	batchID := bf.props.GetString(BFBatchID, "")
	if len(batchID) == 0 {
		return nil, errors.New("missing Brewfather batch id (batch_id)")
	}

	authString := fmt.Sprintf("%s:%s", userID, apiKey)
	authStringb64 := base64.StdEncoding.EncodeToString([]byte(authString))
	authHeader := fmt.Sprintf("Basic %s", authStringb64)
	batchURL := fmt.Sprintf("https://api.brewfather.app/v1/batches/%s", batchID)
	batchReadingsURL := fmt.Sprintf("https://api.brewfather.app/v1/batches/%s/readings", batchID)

	httpTimeout := bf.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	// batch
	addAuthHeader := func(request *http.Request) {
		request.Header.Add("authorization", authHeader)
	}

	body, err := bf.env.HTTPRequest(batchURL, nil, httpTimeout, addAuthHeader)
	if err != nil {
		return nil, err
	}

	var batch Batch
	err = json.Unmarshal(body, &batch)
	if err != nil {
		return nil, err
	}

	// readings
	body, err = bf.env.HTTPRequest(batchReadingsURL, nil, httpTimeout, addAuthHeader)
	if err != nil {
		return nil, err
	}

	var arr []*BatchReading
	err = json.Unmarshal(body, &arr)
	if err != nil {
		return nil, err
	}

	if len(arr) > 0 {
		// could just take latest reading using their API, but that won't allow us to see trend - get 'em all and sort by time,
		// using two most recent for trend
		sort.Slice(arr, func(i, j int) bool {
			return arr[i].Time > arr[j].Time
		})

		// Keep the latest one
		batch.Reading = arr[0]

		if len(arr) > 1 {
			batch.TemperatureTrend = arr[0].Temperature - arr[1].Temperature
		}
	}

	return &batch, nil
}

// Unit conversion functions available to template.
func (bf *Brewfather) DegCToF(degreesC float64) float64 {
	return math.Round(10*((degreesC*1.8)+32)) / 10 // 1 decimal place
}

func (bf *Brewfather) DegCToKelvin(degreesC float64) float64 {
	return math.Round(10*(degreesC+273.15)) / 10 // 1 decimal place, only addition, but just to be sure
}

func (bf *Brewfather) SGToBrix(sg float64) float64 {
	// from https://en.wikipedia.org/wiki/Brix#Specific_gravity_2
	return math.Round(100*((182.4601*sg*sg*sg)-(775.6821*sg*sg)+(1262.7794*sg)-669.5622)) / 100
}

func (bf *Brewfather) SGToPlato(sg float64) float64 {
	// from https://en.wikipedia.org/wiki/Brix#Specific_gravity_2
	return math.Round(100*((135.997*sg*sg*sg)-(630.272*sg*sg)+(1111.14*sg)-616.868)) / 100 // 2 decimal places
}



================================================
FILE: src/segments/brewfather_test.go
================================================
package segments

import (
	"encoding/json"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

const (
	BFFakeBatchID      = "FAKE"
	BFBatchURL         = "https://api.brewfather.app/v1/batches/" + BFFakeBatchID
	BFCacheKey         = BFBatchURL
	BFBatchReadingsURL = "https://api.brewfather.app/v1/batches/" + BFFakeBatchID + "/readings"
)

var (
	TimeNow = time.Now()
	// Create a fake timeline for the fake json, all in Unix milliseconds, to be used in all fake json responses
	FakeBrewDate              = TimeNow.Add(-time.Hour * 24 * 20)
	FakeFermentationStartDate = FakeBrewDate.Add(time.Hour * 24)                   // 1 day after brew date = 19 days ago
	FakeReading1Date          = FakeFermentationStartDate.Add(time.Minute * 35)    // first reading 35 minutes
	FakeReading2Date          = FakeReading1Date.Add(time.Hour)                    // second reading 1 hour later
	FakeReading3Date          = FakeReading2Date.Add(time.Hour * 3)                // 3 hours after last reading, 454 hours ago
	FakeBottlingDate          = FakeFermentationStartDate.Add(time.Hour * 24 * 14) // 14 days after ferm date = 5 days ago

	BrewDateMillis      = FakeBrewDate.UnixMilli()
	FermStartDateMillis = FakeFermentationStartDate.UnixMilli()
	Reading1DateMillis  = FakeReading1Date.UnixMilli()
	Reading2DateMillis  = FakeReading2Date.UnixMilli()
	Reading3DateMillis  = FakeReading3Date.UnixMilli()
	BottlingDateMillis  = FakeBottlingDate.UnixMilli()

	BatchNumber = 18
	BatchName   = "Batch"
	RecipeName  = "Fake Beer"
	MeasuredAbv = 1.3
)

func createBatch(status string) *Batch {
	return &Batch{
		Status:           status,
		BatchNumber:      BatchNumber,
		BrewDate:         BrewDateMillis,
		FermentStartDate: FermStartDateMillis,
		BottlingDate:     BottlingDateMillis,
		BatchName:        BatchName,
		MeasuredAbv:      MeasuredAbv,
		Recipe: struct {
			Name string `json:"name"`
		}{
			Name: RecipeName,
		},
	}
}

func createReading(temp, gravity float64, millis int64) *BatchReading {
	return &BatchReading{
		DeviceID:    "manual",
		Temperature: temp,
		Comment:     "",
		Gravity:     gravity,
		Time:        millis,
		DeviceType:  "manual",
	}
}

func TestBrewfatherSegment(t *testing.T) {
	cases := []struct {
		Error                 error
		BatchResponse         *Batch
		Case                  string
		ExpectedString        string
		Template              string
		BatchReadingsResponse []*BatchReading
		CacheTimeout          int
		ExpectedEnabled       bool
		CacheFoundFail        bool
	}{
		{
			Case:                  "Planning Status",
			BatchResponse:         createBatch(BFStatusPlanning),
			BatchReadingsResponse: []*BatchReading{},
			Template:              "{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:        " Fake Beer 1.3%",
			ExpectedEnabled:       true,
		},
		{
			Case:                  "Brewing Status",
			BatchResponse:         createBatch(BFStatusBrewing),
			BatchReadingsResponse: []*BatchReading{},
			Template:              "{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:        " Fake Beer 1.3%",
			ExpectedEnabled:       true,
		},
		{
			Case:                  "Fermenting Status, no readings",
			BatchResponse:         createBatch(BFStatusFermenting),
			BatchReadingsResponse: []*BatchReading{},
			Template:              "{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:        " 19d Fake Beer 1.3%",
			ExpectedEnabled:       true,
		},
		{
			Case:          "Fermenting Status, one reading",
			BatchResponse: createBatch(BFStatusFermenting),
			BatchReadingsResponse: []*BatchReading{
				createReading(19.5, 1.066, Reading1DateMillis),
			},
			Template:        "{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:  " 19d Fake Beer 1.3%: 1.066 19.5° →",
			ExpectedEnabled: true,
		},
		{
			Case:          "Fermenting Status, two readings, temp trending up",
			BatchResponse: createBatch(BFStatusFermenting),
			BatchReadingsResponse: []*BatchReading{
				createReading(21.0, 1.063, Reading2DateMillis),
				createReading(19.5, 1.066, Reading1DateMillis),
			},
			Template:        "{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:  " 19d Fake Beer 1.3%: 1.063 21° ↗",
			ExpectedEnabled: true,
		},
		{
			Case:          "Fermenting Status, three readings, temp trending hard down, include age of most recent reading",
			BatchResponse: createBatch(BFStatusFermenting),
			BatchReadingsResponse: []*BatchReading{
				createReading(15.0, 1.050, Reading3DateMillis),
				createReading(21.0, 1.063, Reading2DateMillis),
				createReading(19.5, 1.066, Reading1DateMillis),
			},
			Template:        "{{.StatusIcon}} {{.ReadingAge}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:  " 451 19d Fake Beer 1.3%: 1.05 15° ↓↓",
			ExpectedEnabled: true,
		},
		{
			Case:          "Bad batch json, readings fine",
			BatchResponse: nil,
			BatchReadingsResponse: []*BatchReading{
				createReading(15.0, 1.050, Reading3DateMillis),
			},
			Template:        "{{.StatusIcon}} {{.ReadingAge}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:  "",
			ExpectedEnabled: false,
		},
		{
			Case:          "Conditioning Status",
			BatchResponse: createBatch(BFStatusConditioning),
			BatchReadingsResponse: []*BatchReading{
				createReading(15.0, 1.050, Reading3DateMillis),
			},
			Template:        "{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}d {{end}}{{.Recipe.Name}} {{.MeasuredAbv}}%{{ if and (.Reading) (eq .Status \"Fermenting\")}}: {{.Reading.Gravity}} {{.Reading.Temperature}}° {{.TemperatureTrendIcon}}{{end}}", //nolint:lll
			ExpectedString:  " 5d Fake Beer 1.3%",
			ExpectedEnabled: true,
		},
		{
			Case:          "Fermenting Status, test all unit conversions",
			BatchResponse: createBatch(BFStatusFermenting),
			BatchReadingsResponse: []*BatchReading{
				createReading(34.5, 1.066, Reading1DateMillis),
			},
			Template:        "{{ if and (.Reading) (eq .Status \"Fermenting\") }}SG: ({{.Reading.Gravity}} Bx:{{.SGToBrix .Reading.Gravity}} P:{{.SGToPlato .Reading.Gravity}}), Temp: (C:{{.Reading.Temperature}} F:{{.DegCToF .Reading.Temperature}} K:{{.DegCToKelvin .Reading.Temperature}}){{end}}", //nolint:lll
			ExpectedString:  "SG: (1.066 Bx:16.13 P:16.13), Temp: (C:34.5 F:94.1 K:307.7)",
			ExpectedEnabled: true,
		},
		{
			Case:          "Fermenting Status, test all unit conversions 2",
			BatchResponse: createBatch(BFStatusFermenting),
			BatchReadingsResponse: []*BatchReading{
				createReading(3.5, 1.004, Reading1DateMillis),
			},
			Template:        "{{ if and (.Reading) (eq .Status \"Fermenting\") }}SG: ({{.Reading.Gravity}} Bx:{{.SGToBrix .Reading.Gravity}} P:{{.SGToPlato .Reading.Gravity}}), Temp: (C:{{.Reading.Temperature}} F:{{.DegCToF .Reading.Temperature}} K:{{.DegCToKelvin .Reading.Temperature}}){{end}}", //nolint:lll
			ExpectedString:  "SG: (1.004 Bx:1.03 P:1.03), Temp: (C:3.5 F:38.3 K:276.7)",
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		props := properties.Map{
			BFBatchID: BFFakeBatchID,
			APIKey:    "FAKE",
			BFUserID:  "FAKE",
		}

		var batchJSON []byte
		var err error
		if tc.BatchResponse != nil {
			batchJSON, err = json.Marshal(tc.BatchResponse)
			assert.NoError(t, err)
		} else {
			// bad JSON
			batchJSON = []byte("invalid json")
		}

		batchReadingsJSON, err := json.Marshal(tc.BatchReadingsResponse)
		assert.NoError(t, err)

		env.On("HTTPRequest", BFBatchURL).Return(batchJSON, tc.Error)
		env.On("HTTPRequest", BFBatchReadingsURL).Return(batchReadingsJSON, tc.Error)
		env.On("Flags").Return(&runtime.Flags{})

		brew := &Brewfather{}
		brew.Init(props, env)

		enabled := brew.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = brew.Template()
		}
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, brew), tc.Case)
	}
}



================================================
FILE: src/segments/buf.go
================================================
package segments

type Buf struct {
	language
}

func (b *Buf) Template() string {
	return languageTemplate
}

func (b *Buf) Enabled() bool {
	b.extensions = []string{"buf.yaml", "buf.gen.yaml", "buf.work.yaml"}
	b.commands = []*cmd{
		{
			executable: "buf",
			args:       []string{"--version"},
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	b.versionURLTemplate = "https://github.com/bufbuild/buf/releases/tag/v{{.Full}}"

	return b.language.Enabled()
}



================================================
FILE: src/segments/buf_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBuf(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Buf 1.12.0", ExpectedString: "1.12.0", Version: "1.12.0"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "buf",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "buf.yaml",
		}
		env, props := getMockedLanguageEnv(params)
		b := &Buf{}
		b.Init(props, env)
		assert.True(t, b.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, b.Template(), b), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/bun.go
================================================
package segments

type Bun struct {
	language
}

func (b *Bun) Template() string {
	return languageTemplate
}

func (b *Bun) Enabled() bool {
	b.extensions = []string{"bun.lockb", "bun.lock"}
	b.commands = []*cmd{
		{
			executable: "bun",
			args:       []string{"--version"},
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	b.versionURLTemplate = "https://github.com/oven-sh/bun/releases/tag/bun-v{{.Full}}"

	return b.language.Enabled()
}



================================================
FILE: src/segments/bun_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBun(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Bun 1.1.8", ExpectedString: "1.1.8", Version: "1.1.8"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "bun",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "bun.lockb",
		}
		env, props := getMockedLanguageEnv(params)
		b := &Bun{}
		b.Init(props, env)
		assert.True(t, b.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, b.Template(), b), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/carbon_intensity.go
================================================
package segments

import (
	"encoding/json"
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type CarbonIntensity struct {
	base

	TrendIcon string

	CarbonIntensityData
}

type CarbonIntensityResponse struct {
	Data []CarbonIntensityPeriod `json:"data"`
}

type CarbonIntensityPeriod struct {
	Intensity *CarbonIntensityData `json:"intensity"`
	From      string               `json:"from"`
	To        string               `json:"to"`
}

type CarbonIntensityData struct {
	Index    Index  `json:"index"`
	Forecast Number `json:"forecast"`
	Actual   Number `json:"actual"`
}

type Number int

func (n Number) String() string {
	if n == 0 {
		return "??"
	}

	return fmt.Sprintf("%d", n)
}

type Index string

func (i Index) Icon() string {
	switch i {
	case "very low":
		return "↓↓"
	case "low":
		return "↓"
	case "moderate":
		return "•"
	case "high":
		return "↑"
	case "very high":
		return "↑↑"
	default:
		return ""
	}
}

func (d *CarbonIntensity) Enabled() bool {
	err := d.setStatus()

	if err != nil {
		log.Error(err)
		return false
	}

	return true
}

func (d *CarbonIntensity) Template() string {
	return " CO₂ {{ .Index.Icon }}{{ .Actual.String }} {{ .TrendIcon }} {{ .Forecast.String }} "
}

func (d *CarbonIntensity) getResult() (*CarbonIntensityResponse, error) {
	response := new(CarbonIntensityResponse)
	url := "https://api.carbonintensity.org.uk/intensity"

	httpTimeout := d.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	body, err := d.env.HTTPRequest(url, nil, httpTimeout)
	if err != nil {
		return new(CarbonIntensityResponse), err
	}

	err = json.Unmarshal(body, &response)
	if err != nil {
		return new(CarbonIntensityResponse), err
	}

	return response, nil
}

func (d *CarbonIntensity) setStatus() error {
	response, err := d.getResult()
	if err != nil {
		return err
	}

	if len(response.Data) == 0 {
		d.Actual = 0
		d.Forecast = 0
		d.Index = "??"
		d.TrendIcon = "→"
		return nil
	}

	d.CarbonIntensityData = *response.Data[0].Intensity

	if d.Forecast > d.Actual {
		d.TrendIcon = "↗"
	}

	if d.Forecast < d.Actual {
		d.TrendIcon = "↘"
	}

	if d.Forecast == d.Actual || d.Actual == 0 || d.Forecast == 0 {
		d.TrendIcon = "→"
	}

	return nil
}



================================================
FILE: src/segments/carbon_intensity_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

const (
	CARBONINTENSITYURL = "https://api.carbonintensity.org.uk/intensity"
)

func TestCarbonIntensitySegmentSingle(t *testing.T) {
	cases := []struct {
		Case            string
		Index           string
		ExpectedString  string
		Template        string
		Actual          int
		Forecast        int
		HasError        bool
		HasData         bool
		ExpectedEnabled bool
	}{
		{
			Case:            "Very Low, Going Down",
			HasError:        false,
			HasData:         true,
			Actual:          20,
			Forecast:        10,
			Index:           "very low",
			ExpectedString:  "CO₂ ↓↓20 ↘ 10",
			ExpectedEnabled: true,
		},
		{
			Case:            "Very Low, Staying Same",
			HasError:        false,
			HasData:         true,
			Actual:          20,
			Forecast:        20,
			Index:           "very low",
			ExpectedString:  "CO₂ ↓↓20 → 20",
			ExpectedEnabled: true,
		},
		{
			Case:            "Very Low, Going Up",
			HasError:        false,
			HasData:         true,
			Actual:          20,
			Forecast:        30,
			Index:           "very low",
			ExpectedString:  "CO₂ ↓↓20 ↗ 30",
			ExpectedEnabled: true,
		},
		{
			Case:            "Low, Going Down",
			HasError:        false,
			HasData:         true,
			Actual:          100,
			Forecast:        50,
			Index:           "low",
			ExpectedString:  "CO₂ ↓100 ↘ 50",
			ExpectedEnabled: true,
		},
		{
			Case:            "Low, Staying Same",
			HasError:        false,
			HasData:         true,
			Actual:          100,
			Forecast:        100,
			Index:           "low",
			ExpectedString:  "CO₂ ↓100 → 100",
			ExpectedEnabled: true,
		},
		{
			Case:            "Low, Going Up",
			HasError:        false,
			HasData:         true,
			Actual:          100,
			Forecast:        150,
			Index:           "low",
			ExpectedString:  "CO₂ ↓100 ↗ 150",
			ExpectedEnabled: true,
		},
		{
			Case:            "Moderate, Going Down",
			HasError:        false,
			HasData:         true,
			Actual:          150,
			Forecast:        100,
			Index:           "moderate",
			ExpectedString:  "CO₂ •150 ↘ 100",
			ExpectedEnabled: true,
		},
		{
			Case:            "Moderate, Staying Same",
			HasError:        false,
			HasData:         true,
			Actual:          150,
			Forecast:        150,
			Index:           "moderate",
			ExpectedString:  "CO₂ •150 → 150",
			ExpectedEnabled: true,
		},
		{
			Case:            "Moderate, Going Up",
			HasError:        false,
			HasData:         true,
			Actual:          150,
			Forecast:        200,
			Index:           "moderate",
			ExpectedString:  "CO₂ •150 ↗ 200",
			ExpectedEnabled: true,
		},
		{
			Case:            "High, Going Down",
			HasError:        false,
			HasData:         true,
			Actual:          200,
			Forecast:        150,
			Index:           "high",
			ExpectedString:  "CO₂ ↑200 ↘ 150",
			ExpectedEnabled: true,
		},
		{
			Case:            "High, Staying Same",
			HasError:        false,
			HasData:         true,
			Actual:          200,
			Forecast:        200,
			Index:           "high",
			ExpectedString:  "CO₂ ↑200 → 200",
			ExpectedEnabled: true,
		},
		{
			Case:            "High, Going Up",
			HasError:        false,
			HasData:         true,
			Actual:          200,
			Forecast:        300,
			Index:           "high",
			ExpectedString:  "CO₂ ↑200 ↗ 300",
			ExpectedEnabled: true,
		},
		{
			Case:            "Missing Actual",
			HasError:        false,
			HasData:         true,
			Actual:          0, // Missing data will be parsed to the default value of 0
			Forecast:        300,
			Index:           "high",
			ExpectedString:  "CO₂ ↑?? → 300",
			ExpectedEnabled: true,
		},
		{
			Case:            "Missing Forecast",
			HasError:        false,
			HasData:         true,
			Actual:          200,
			Forecast:        0, // Missing data will be parsed to the default value of 0
			Index:           "high",
			ExpectedString:  "CO₂ ↑200 → ??",
			ExpectedEnabled: true,
		},
		{
			Case:            "Missing Index",
			HasError:        false,
			HasData:         true,
			Actual:          200,
			Forecast:        300,
			Index:           "", // Missing data will be parsed to the default value of ""
			ExpectedString:  "CO₂ 200 ↗ 300",
			ExpectedEnabled: true,
		},
		{
			Case:            "Missing Data",
			HasError:        false,
			HasData:         false,
			Actual:          0,
			Forecast:        0,
			Index:           "",
			ExpectedString:  "CO₂ ?? → ??",
			ExpectedEnabled: true,
		},
		{
			Case:            "Error",
			HasError:        true,
			HasData:         false,
			Actual:          0,
			Forecast:        0,
			Index:           "",
			ExpectedString:  "",
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		var props = properties.Map{
			properties.HTTPTimeout: 5000,
		}

		jsonResponse := fmt.Sprintf(
			`{ "data": [ { "from": "2023-10-27T12:30Z", "to": "2023-10-27T13:00Z", "intensity": { "forecast": %d, "actual": %d, "index": "%s" } } ] }`,
			tc.Forecast, tc.Actual, tc.Index,
		)

		if !tc.HasData {
			jsonResponse = `{ "data": [] }`
		}

		if tc.HasError {
			jsonResponse = `{ "error": "Something went wrong" }`
		}

		responseError := errors.New("Something went wrong")
		if !tc.HasError {
			responseError = nil
		}

		env.On("HTTPRequest", CARBONINTENSITYURL).Return([]byte(jsonResponse), responseError)
		env.On("Flags").Return(&runtime.Flags{})

		d := &CarbonIntensity{}
		d.Init(props, env)

		enabled := d.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = d.Template()
		}
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, d), tc.Case)
	}
}



================================================
FILE: src/segments/cds.go
================================================
package segments

type Cds struct {
	language
	HasDependency bool
}

func (c *Cds) Template() string {
	return languageTemplate
}

func (c *Cds) Enabled() bool {
	c.extensions = []string{".cdsrc.json", ".cdsrc-private.json", "*.cds"}
	c.commands = []*cmd{
		{
			executable: "cds",
			args:       []string{"--version"},
			regex:      `@sap/cds: (?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	c.language.loadContext = c.loadContext
	c.language.inContext = c.inContext
	c.displayMode = c.props.GetString(DisplayMode, DisplayModeContext)

	return c.language.Enabled()
}

func (c *Cds) loadContext() {
	if !c.hasNodePackage("@sap/cds") {
		return
	}

	c.HasDependency = true
}

func (c *Cds) inContext() bool {
	return c.HasDependency
}



================================================
FILE: src/segments/cds_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCdsSegment(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Template       string
		Version        string
		PackageJSON    string
		DisplayMode    string
	}{
		{
			Case:           "1) cds 5.5.0 - file .cdsrc.json present",
			ExpectedString: "5.5.0",
			Version:        "@sap/cds: 5.5.0\n@sap/cds-compiler: 2.7.0\n@sap/cds-dk: 4.5.3",
			DisplayMode:    DisplayModeFiles,
		},
		{
			Case:           "2) cds 5.5.1 - file some.cds",
			ExpectedString: "5.5.1",
			Version:        "@sap/cds: 5.5.1\n@sap/cds-compiler: 2.7.0\n@sap/cds-dk: 4.5.3",
			DisplayMode:    DisplayModeFiles,
		},
		{
			Case:           "4) cds 5.5.3 - package.json dependency",
			ExpectedString: "5.5.3",
			Version:        "@sap/cds: 5.5.3\n@sap/cds-compiler: 2.7.0\n@sap/cds-dk: 4.5.3",
			PackageJSON:    "{ \"name\": \"my-app\",\"dependencies\": { \"@sap/cds\": \"^5\" } }",
			DisplayMode:    DisplayModeContext,
		},
		{
			Case:           "4) cds 5.5.4 - package.json dependency, major + minor",
			ExpectedString: "5.5",
			Template:       "{{ .Major }}.{{ .Minor }}",
			Version:        "@sap/cds: 5.5.4\n@sap/cds-compiler: 2.7.0\n@sap/cds-dk: 4.5.3",
			PackageJSON:    "{ \"name\": \"my-app\",\"dependencies\": { \"@sap/cds\": \"^5\" } }",
			DisplayMode:    DisplayModeContext,
		},
		{
			Case:           "6) cds 5.5.9 - display always",
			ExpectedString: "5.5.9",
			Version:        "@sap/cds: 5.5.9\n@sap/cds-compiler: 2.7.0\n@sap/cds-dk: 4.5.3",
			PackageJSON:    "{ \"name\": \"my-app\",\"dependencies\": { \"@sap/cds\": \"^5\" } }",
			DisplayMode:    DisplayModeAlways,
		},
		{
			Case:           "8) cds 5.5.0 - file .cdsrc-private.json present",
			ExpectedString: "5.5.0",
			Version:        "@sap/cds: 5.5.0\n@sap/cds-compiler: 2.7.0\n@sap/cds-dk: 4.5.3",
			DisplayMode:    DisplayModeFiles,
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "cds",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     ".cdsrc.json",
		}
		env, props := getMockedLanguageEnv(params)

		if len(tc.DisplayMode) == 0 {
			tc.DisplayMode = DisplayModeContext
		}
		props[DisplayMode] = tc.DisplayMode

		env.On("HasFiles", "package.json").Return(len(tc.PackageJSON) != 0)
		env.On("FileContent", "package.json").Return(tc.PackageJSON)

		cds := &Cds{}
		cds.Init(props, env)

		if tc.Template == "" {
			tc.Template = cds.Template()
		}

		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, cds.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, cds), failMsg)
	}
}



================================================
FILE: src/segments/cf.go
================================================
package segments

type Cf struct {
	language
}

func (c *Cf) Template() string {
	return languageTemplate
}

func (c *Cf) Enabled() bool {
	c.extensions = []string{"manifest.yml", "mta.yaml"}
	c.commands = []*cmd{
		{
			executable: "cf",
			args:       []string{"version"},
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	c.displayMode = c.props.GetString(DisplayMode, DisplayModeFiles)
	c.versionURLTemplate = "https://github.com/cloudfoundry/cli/releases/tag/v{{ .Full }}"

	return c.language.Enabled()
}



================================================
FILE: src/segments/cf_target.go
================================================
package segments

import (
	"errors"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type CfTarget struct {
	base

	CfTargetDetails
}

type CfTargetDetails struct {
	URL   string
	User  string
	Org   string
	Space string
}

func (c *CfTarget) Template() string {
	return "{{if .Org }}{{ .Org }}{{ end }}{{if .Space }}/{{ .Space }}{{ end }}"
}

func (c *CfTarget) Enabled() bool {
	if !c.env.HasCommand("cf") {
		return false
	}

	displayMode := c.props.GetString(DisplayMode, DisplayModeAlways)
	if displayMode != DisplayModeFiles {
		return c.setCFTargetStatus()
	}

	files := c.props.GetStringArray(properties.Files, []string{"manifest.yml"})
	for _, file := range files {
		manifest, err := c.env.HasParentFilePath(file, false)
		if err != nil || manifest.IsDir {
			continue
		}

		return c.setCFTargetStatus()
	}

	return false
}

func (c *CfTarget) setCFTargetStatus() bool {
	output, err := c.getCFTargetCommandOutput()

	if err != nil {
		return false
	}

	lines := strings.SplitSeq(output, "\n")
	for line := range lines {
		splitted := strings.SplitN(line, ":", 2)
		if len(splitted) < 2 {
			continue
		}
		key := splitted[0]
		value := strings.TrimSpace(splitted[1])
		switch key {
		case "API endpoint":
			c.URL = value
		case "user":
			c.User = value
		case "org":
			c.Org = value
		case "space":
			c.Space = value
		}
	}

	return true
}

func (c *CfTarget) getCFTargetCommandOutput() (string, error) {
	output, err := c.env.RunCommand("cf", "target")

	if err != nil {
		return "", err
	}

	if len(output) == 0 {
		return "", errors.New("cf command output is empty")
	}

	return output, nil
}



================================================
FILE: src/segments/cf_target_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"os/exec"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestCFTargetSegment(t *testing.T) {
	cases := []struct {
		CommandError   error
		FileInfo       *runtime.FileInfo
		Case           string
		Template       string
		ExpectedString string
		DisplayMode    string
		TargetOutput   string
	}{
		{
			Case:         "not logged in to CF account",
			TargetOutput: `Not logged in`,
			CommandError: &exec.ExitError{},
		},
		{
			Case:           "logged in, default template",
			ExpectedString: "12345678trial/dev",
			TargetOutput:   "API endpoint: https://api.cf.eu10.hana.ondemand.com\nAPI version: 3.109.0\nuser: user@some.com\norg: 12345678trial\nspace: dev",
		},
		{
			Case: "no output from command",
		},
		{
			Case:           "logged in, full template",
			Template:       "{{.URL}} {{.User}} {{.Org}} {{.Space}}",
			ExpectedString: "https://api.cf.eu10.hana.ondemand.com user@some.com 12345678trial dev",
			TargetOutput:   "API endpoint: https://api.cf.eu10.hana.ondemand.com\nAPI version: 3.109.0\nuser: user@some.com\norg: 12345678trial\nspace: dev",
		},
		{
			Case:         "files and no manifest file",
			DisplayMode:  DisplayModeFiles,
			TargetOutput: "API endpoint: https://api.cf.eu10.hana.ondemand.com\nAPI version: 3.109.0\nuser: user@some.com\norg: 12345678trial\nspace: dev",
		},
		{
			Case:           "files and a manifest file",
			ExpectedString: "12345678trial/dev",
			DisplayMode:    DisplayModeFiles,
			FileInfo:       &runtime.FileInfo{},
			TargetOutput:   "API endpoint: https://api.cf.eu10.hana.ondemand.com\nAPI version: 3.109.0\nuser: user@some.com\norg: 12345678trial\nspace: dev",
		},
		{
			Case:        "files and a manifest directory",
			DisplayMode: DisplayModeFiles,
			FileInfo: &runtime.FileInfo{
				IsDir: true,
			},
		},
	}

	for _, tc := range cases {
		var env = new(mock.Environment)
		env.On("HasCommand", "cf").Return(true)
		env.On("RunCommand", "cf", []string{"target"}).Return(tc.TargetOutput, tc.CommandError)
		env.On("Pwd", nil).Return("/usr/home/dev/my-app")
		env.On("Home", nil).Return("/usr/home")
		var err error
		if tc.FileInfo == nil {
			err = errors.New("no such file or directory")
		}
		env.On("HasParentFilePath", "manifest.yml", false).Return(tc.FileInfo, err)

		cfTarget := &CfTarget{}
		props := properties.Map{
			DisplayMode: tc.DisplayMode,
		}

		if tc.Template == "" {
			tc.Template = cfTarget.Template()
		}

		cfTarget.Init(props, env)

		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.Equal(t, len(tc.ExpectedString) > 0, cfTarget.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, cfTarget), failMsg)
	}
}



================================================
FILE: src/segments/cf_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCFSegment(t *testing.T) {
	cases := []struct {
		Case           string
		Template       string
		ExpectedString string
		CfYamlFile     string
		Version        string
		DisplayMode    string
	}{
		{
			Case:           "1) cf 2.12.1 - file manifest.yml",
			ExpectedString: "2.12.1",
			CfYamlFile:     "manifest.yml",
			Version:        `cf.exe version 2.12.1+645c3ce6a.2021-08-16`,
			DisplayMode:    DisplayModeFiles,
		},
		{
			Case:           "2) cf 11.0.0-rc1 - file mta.yaml",
			Template:       "{{ .Major }}",
			ExpectedString: "11",
			CfYamlFile:     "mta.yaml",
			Version:        `cf version 11.0.0-rc1`,
			DisplayMode:    DisplayModeFiles,
		},
		{
			Case:           "4) cf 11.1.0-rc1 - mode always",
			Template:       "{{ .Major }}.{{ .Minor }}",
			ExpectedString: "11.1",
			Version:        `cf.exe version 11.1.0-rc1`,
			DisplayMode:    DisplayModeAlways,
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "cf",
			versionParam:  "version",
			versionOutput: tc.Version,
			extension:     "manifest.yml",
		}
		env, props := getMockedLanguageEnv(params)

		props[DisplayMode] = tc.DisplayMode

		cf := &Cf{}
		cf.Init(props, env)

		if tc.Template == "" {
			tc.Template = cf.Template()
		}

		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, cf.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, cf), failMsg)
	}
}



================================================
FILE: src/segments/cmake.go
================================================
package segments

type Cmake struct {
	language
}

func (c *Cmake) Template() string {
	return languageTemplate
}

func (c *Cmake) Enabled() bool {
	c.extensions = []string{"*.cmake", "CMakeLists.txt"}
	c.commands = []*cmd{
		{
			executable: "cmake",
			args:       []string{"--version"},
			regex:      `cmake version (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	c.versionURLTemplate = "https://cmake.org/cmake/help/v{{ .Major }}.{{ .Minor }}"

	return c.language.Enabled()
}



================================================
FILE: src/segments/cmake_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCmake(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Cmake 3.23.2", ExpectedString: "3.23.2", Version: "cmake version 3.23.2"},
		{Case: "Cmake 2.3.13", ExpectedString: "2.3.12", Version: "cmake version 2.3.12"},
		{Case: "", ExpectedString: "err parsing info from cmake with", Version: ""},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "cmake",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.cmake",
		}
		env, props := getMockedLanguageEnv(params)
		c := &Cmake{}
		c.Init(props, env)
		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, c.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, c.Template(), c), failMsg)
	}
}



================================================
FILE: src/segments/command.go
================================================
package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Cmd struct {
	base

	Output string
}

const (
	// ExecutableShell to execute command in
	ExecutableShell properties.Property = "shell"
	// Command to execute
	Command properties.Property = "command"
	// Command to execute
	Script properties.Property = "script"
	// Interpret execution, or not
	Interpret properties.Property = "interpret"
)

func (c *Cmd) Template() string {
	return " {{ .Output }} "
}

func (c *Cmd) Enabled() bool {
	shell := c.props.GetString(ExecutableShell, "bash")
	if !c.env.HasCommand(shell) {
		return false
	}

	command := c.props.GetString(Command, "")
	if len(command) != 0 {
		return c.runCommand(shell, command)
	}

	script := c.props.GetString(Script, "")
	if len(script) != 0 {
		return c.runScript(shell, script)
	}

	return false
}

func (c *Cmd) runCommand(shell, command string) bool {
	interpret := c.props.GetBool(Interpret, true)

	if !interpret {
		c.Output = c.env.RunShellCommand(shell, command)
		return len(c.Output) != 0
	}

	if strings.Contains(command, "||") {
		commands := strings.SplitSeq(command, "||")
		for cmd := range commands {
			output := c.env.RunShellCommand(shell, strings.TrimSpace(cmd))
			if len(output) != 0 {
				c.Output = output
				return true
			}
		}
	}

	if strings.Contains(command, "&&") {
		var output string
		commands := strings.SplitSeq(command, "&&")
		for cmd := range commands {
			output += c.env.RunShellCommand(shell, strings.TrimSpace(cmd))
		}
		c.Output = output
		return len(c.Output) != 0
	}

	c.Output = c.env.RunShellCommand(shell, strings.TrimSpace(command))
	return len(c.Output) != 0
}

func (c *Cmd) runScript(shell, script string) bool {
	c.Output = c.env.RunShellCommand(shell, script)
	return len(c.Output) != 0
}



================================================
FILE: src/segments/command_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestExecuteCommand(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "echo hello").Return("hello")
	props := properties.Map{
		Command: "echo hello",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.True(t, enabled)
	assert.Equal(t, "hello", renderTemplate(env, c.Template(), c))
}

func TestExecuteMultipleCommandsOrFirst(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "exit 1").Return("")
	env.On("RunShellCommand", "bash", "echo hello").Return("hello")
	env.On("RunShellCommand", "bash", "exit 1 || echo hello").Return("hello")
	props := properties.Map{
		Command: "exit 1 || echo hello",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.True(t, enabled)
	assert.Equal(t, "hello", renderTemplate(env, c.Template(), c))
}

func TestExecuteMultipleCommandsOrSecond(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "echo hello").Return("hello")
	env.On("RunShellCommand", "bash", "echo world").Return("world")
	props := properties.Map{
		Command: "echo hello || echo world",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.True(t, enabled)
	assert.Equal(t, "hello", renderTemplate(env, c.Template(), c))
}

func TestExecuteMultipleCommandsAnd(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "echo hello").Return("hello")
	env.On("RunShellCommand", "bash", "echo world").Return("world")
	props := properties.Map{
		Command: "echo hello && echo world",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.True(t, enabled)
	assert.Equal(t, "helloworld", renderTemplate(env, c.Template(), c))
}

func TestExecuteSingleCommandEmpty(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "").Return("")
	props := properties.Map{
		Command: "",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.False(t, enabled)
}

func TestExecuteSingleCommandNoCommandProperty(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "").Return("")
	var props properties.Map

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.False(t, enabled)
}

func TestExecuteMultipleCommandsAndDisabled(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "echo").Return("")
	props := properties.Map{
		Command: "echo && echo",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.False(t, enabled)
}

func TestExecuteMultipleCommandsOrDisabled(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "echo").Return("")
	env.On("RunShellCommand", "bash", "echo|| echo").Return("")
	props := properties.Map{
		Command: "echo|| echo",
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.False(t, enabled)
}

func TestExecuteNonInterpretedCommand(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "bash").Return(true)
	env.On("RunShellCommand", "bash", "echo hello && echo world").Return("hello world")
	props := properties.Map{
		Command:   "echo hello && echo world",
		Interpret: false,
	}

	c := &Cmd{}
	c.Init(props, env)

	enabled := c.Enabled()
	assert.True(t, enabled)
	assert.Equal(t, "hello world", renderTemplate(env, c.Template(), c))
}

func TestExecuteScript(t *testing.T) {
	cases := []struct {
		Case            string
		Output          string
		ExpectedString  string
		HasScript       bool
		ExpectedEnabled bool
	}{
		{
			Case:            "Output",
			Output:          "Hello World",
			ExpectedString:  "Hello World",
			ExpectedEnabled: true,
		},
		{
			Case:            "No output",
			ExpectedEnabled: false,
		},
	}
	for _, tc := range cases {
		script := "../test/script.sh"
		env := new(mock.Environment)
		env.On("HasCommand", "bash").Return(true)
		env.On("RunShellCommand", "bash", script).Return(tc.Output)
		props := properties.Map{
			Script: script,
		}

		c := &Cmd{}
		c.Init(props, env)

		enabled := c.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, c.Template(), c))
		}
	}
}



================================================
FILE: src/segments/connection.go
================================================
package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type Connection struct {
	base

	runtime.Connection
}

const (
	Type properties.Property = "type"
)

func (c *Connection) Template() string {
	return " {{ if eq .Type \"wifi\"}}\uf1eb{{ else if eq .Type \"ethernet\"}}\ueba9{{ end }} "
}

func (c *Connection) Enabled() bool {
	types := c.props.GetString(Type, "wifi|ethernet")
	connectionTypes := strings.SplitSeq(types, "|")
	for connectionType := range connectionTypes {
		network, err := c.env.Connection(runtime.ConnectionType(connectionType))
		if err != nil {
			continue
		}
		c.Connection = *network
		return true
	}
	return false
}



================================================
FILE: src/segments/connection_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestConnection(t *testing.T) {
	type connectionResponse struct {
		Connection *runtime.Connection
		Error      error
	}
	cases := []struct {
		Case            string
		ExpectedString  string
		ConnectionType  string
		Connections     []*connectionResponse
		ExpectedEnabled bool
	}{
		{
			Case:            "WiFi only, enabled",
			ExpectedString:  "\uf1eb",
			ExpectedEnabled: true,
			ConnectionType:  "wifi",
			Connections: []*connectionResponse{
				{
					Connection: &runtime.Connection{
						Name: "WiFi",
						Type: "wifi",
					},
				},
			},
		},
		{
			Case:           "WiFi only, disabled",
			ConnectionType: "wifi",
			Connections: []*connectionResponse{
				{
					Connection: &runtime.Connection{
						Type: runtime.WIFI,
					},
					Error: fmt.Errorf("no connection"),
				},
			},
		},
		{
			Case:            "WiFi and Ethernet, enabled",
			ConnectionType:  "wifi|ethernet",
			ExpectedString:  "\ueba9",
			ExpectedEnabled: true,
			Connections: []*connectionResponse{
				{
					Connection: &runtime.Connection{
						Type: runtime.WIFI,
					},
					Error: fmt.Errorf("no connection"),
				},
				{
					Connection: &runtime.Connection{
						Type: runtime.ETHERNET,
					},
				},
			},
		},
		{
			Case:           "WiFi and Ethernet, disabled",
			ConnectionType: "wifi|ethernet",
			Connections: []*connectionResponse{
				{
					Connection: &runtime.Connection{
						Type: runtime.WIFI,
					},
					Error: fmt.Errorf("no connection"),
				},
				{
					Connection: &runtime.Connection{
						Type: runtime.ETHERNET,
					},
					Error: fmt.Errorf("no connection"),
				},
			},
		},
	}
	for _, tc := range cases {
		env := &mock.Environment{}
		for _, con := range tc.Connections {
			env.On("Connection", con.Connection.Type).Return(con.Connection, con.Error)
		}

		props := &properties.Map{
			Type: tc.ConnectionType,
		}

		c := &Connection{}
		c.Init(props, env)

		assert.Equal(t, tc.ExpectedEnabled, c.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, c.Template(), c), fmt.Sprintf("Failed in case: %s", tc.Case))
		}
	}
}



================================================
FILE: src/segments/crystal.go
================================================
package segments

type Crystal struct {
	language
}

func (c *Crystal) Template() string {
	return languageTemplate
}

func (c *Crystal) Enabled() bool {
	c.extensions = []string{"*.cr", "shard.yml"}
	c.commands = []*cmd{
		{
			executable: "crystal",
			args:       []string{"--version"},
			regex:      `Crystal (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	c.versionURLTemplate = "https://github.com/crystal-lang/crystal/releases/tag/{{ .Full }}"

	return c.language.Enabled()
}



================================================
FILE: src/segments/crystal_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCrystal(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Crystal 1.0.0", ExpectedString: "1.0.0", Version: "Crystal 1.0.0 (2021-03-22)"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "crystal",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.cr",
		}
		env, props := getMockedLanguageEnv(params)
		c := &Crystal{}
		c.Init(props, env)
		assert.True(t, c.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, c.Template(), c), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/dart.go
================================================
package segments

var (
	dartExtensions = []string{"*.dart", "pubspec.yaml", "pubspec.yml", "pubspec.lock"}
	dartFolders    = []string{".dart_tool"}
)

type Dart struct {
	language
}

func (d *Dart) Template() string {
	return languageTemplate
}

func (d *Dart) Enabled() bool {
	d.extensions = dartExtensions
	d.folders = dartFolders
	d.commands = []*cmd{
		{
			executable: "fvm",
			args:       []string{"dart", "--version"},
			regex:      `Dart SDK version: (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
		{
			executable: "dart",
			args:       []string{"--version"},
			regex:      `Dart SDK version: (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	d.versionURLTemplate = "https://dart.dev/guides/language/evolution#dart-{{ .Major }}{{ .Minor }}"

	return d.language.Enabled()
}



================================================
FILE: src/segments/dart_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDart(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Dart 2.12.4", ExpectedString: "2.12.4", Version: "Dart SDK version: 2.12.4 (stable) (Thu Apr 15 12:26:53 2021 +0200) on \"macos_x64\""},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "dart",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.dart",
		}

		env, props := getMockedLanguageEnv(params)
		env.On("HasCommand", "fvm").Return(false)

		d := &Dart{}
		d.Init(props, env)

		assert.True(t, d.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, d.Template(), d), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/deno.go
================================================
package segments

type Deno struct {
	language
}

func (d *Deno) Template() string {
	return languageTemplate
}

func (d *Deno) Enabled() bool {
	d.extensions = []string{"*.js", "*.ts", "deno.json"}
	d.commands = []*cmd{
		{
			executable: "deno",
			args:       []string{"--version"},
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	d.versionURLTemplate = "https://github.com/denoland/deno/releases/tag/v{{.Full}}"

	return d.language.Enabled()
}



================================================
FILE: src/segments/deno_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDeno(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Deno 1.25.2", ExpectedString: "1.25.2", Version: "deno 1.25.2 (release, aarch64-apple-darwin)\nv8 10.6.194.5\ntypescript 4.7.4"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "deno",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.js",
		}
		env, props := getMockedLanguageEnv(params)
		d := &Deno{}
		d.Init(props, env)
		assert.True(t, d.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, d.Template(), d), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/docker.go
================================================
package segments

import (
	"encoding/json"
	"path/filepath"

	"slices"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

const (
	// FetchContext is the property used to fetch the current docker context
	FetchContext properties.Property = "fetch_context"
)

type DockerConfig struct {
	CurrentContext string `json:"currentContext"`
}

type Docker struct {
	base

	Context string
}

func (d *Docker) Template() string {
	return " \uf308 {{ .Context }} "
}

func (d *Docker) envVars() []string {
	return []string{"DOCKER_MACHINE_NAME", "DOCKER_HOST", "DOCKER_CONTEXT"}
}

func (d *Docker) configFiles() []string {
	files := []string{
		filepath.Join(d.env.Home(), ".docker/config.json"),
	}

	dockerConfig := d.env.Getenv("DOCKER_CONFIG")
	if len(dockerConfig) > 0 {
		files = append(files, filepath.Join(dockerConfig, "config.json"))
	}

	return files
}

func (d *Docker) Enabled() bool {
	extensions := []string{
		"compose.yml",
		"compose.yaml",
		"docker-compose.yml",
		"docker-compose.yaml",
		"Dockerfile",
	}

	extensions = d.props.GetStringArray(LanguageExtensions, extensions)

	displayMode := d.props.GetString(DisplayMode, DisplayModeContext)
	switch displayMode {
	case DisplayModeContext:
		return d.fetchContext()
	case DisplayModeFiles:
		if !slices.ContainsFunc(extensions, d.env.HasFiles) {
			return false
		}

		// always respect the context fetching
		if d.props.GetBool(FetchContext, true) {
			_ = d.fetchContext()
		}

		return true
	}

	return false
}

func (d *Docker) fetchContext() bool {
	// Check if there is a non-empty environment variable named `DOCKER_HOST` or `DOCKER_CONTEXT`
	// These variables are set by the docker CLI and override the config file
	// Return the current context if it is not empty and not `default`
	for _, v := range d.envVars() {
		context := d.env.Getenv(v)
		if len(context) > 0 && context != "default" {
			d.Context = context
			return true
		}
	}

	// Check if there is a file named `$HOME/.docker/config.json` or `$DOCKER_CONFIG/config.json`
	// Return the current context if it is not empty and not `default`
	for _, f := range d.configFiles() {
		data := d.env.FileContent(f)
		if len(data) == 0 {
			continue
		}

		var cfg DockerConfig
		if err := json.Unmarshal([]byte(data), &cfg); err != nil {
			continue
		}

		if len(cfg.CurrentContext) > 0 && cfg.CurrentContext != "default" {
			d.Context = cfg.CurrentContext
			return true
		}
	}

	return false
}



================================================
FILE: src/segments/docker_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
	mock_ "github.com/stretchr/testify/mock"
)

func TestDockerContext(t *testing.T) {
	type envVar struct {
		name  string
		value string
	}
	cases := []struct {
		EnvVar          envVar
		Case            string
		Expected        string
		ConfigFile      string
		ExpectedEnabled bool
		HasFiles        bool
	}{
		{Case: "DOCKER_MACHINE_NAME", Expected: "alpine", ExpectedEnabled: true, EnvVar: envVar{name: "DOCKER_MACHINE_NAME", value: "alpine"}},
		{Case: "DOCKER_HOST", Expected: "alpine 2", ExpectedEnabled: true, EnvVar: envVar{name: "DOCKER_HOST", value: "alpine 2"}},
		{Case: "DOCKER_CONTEXT", Expected: "alpine 3", ExpectedEnabled: true, EnvVar: envVar{name: "DOCKER_HOST", value: "alpine 3"}},
		{Case: "DOCKER_CONTEXT - default", ExpectedEnabled: false, EnvVar: envVar{name: "DOCKER_HOST", value: "default"}},
		{Case: "no docker context active", ExpectedEnabled: false},
		{Case: "config file", Expected: "alpine", ExpectedEnabled: true, HasFiles: true, ConfigFile: `{"currentContext": "alpine"}`},
		{Case: "config file - default", ExpectedEnabled: false, HasFiles: true, ConfigFile: `{"currentContext": "default"}`},
		{Case: "config file - broken", ExpectedEnabled: false, HasFiles: true, ConfigFile: `{`},
	}

	for _, tc := range cases {
		docker := &Docker{}
		env := new(mock.Environment)
		docker.Init(properties.Map{}, env)

		for _, v := range docker.envVars() {
			var value string
			if v == tc.EnvVar.name {
				value = tc.EnvVar.value
			}
			env.On("Getenv", v).Return(value)
		}

		env.On("Home").Return("")
		env.On("Getenv", "DOCKER_CONFIG").Return("")
		for _, f := range docker.configFiles() {
			env.On("HasFiles", f).Return(tc.HasFiles)
			env.On("FileContent", f).Return(tc.ConfigFile)
		}

		assert.Equal(t, tc.ExpectedEnabled, docker.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.Expected, renderTemplate(env, "{{ .Context }}", docker), tc.Case)
		}
	}
}

func TestDockerFiles(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedEnabled bool
		HasFiles        bool
	}{
		{Case: "compose.yml", ExpectedEnabled: true, HasFiles: true},
		{Case: "compose.yaml", ExpectedEnabled: true, HasFiles: true},
		{Case: "docker-compose.yml", ExpectedEnabled: true, HasFiles: true},
		{Case: "docker-compose.yaml", ExpectedEnabled: true, HasFiles: true},
		{Case: "Dockerfile", ExpectedEnabled: true, HasFiles: true},
		{Case: "docker-compose.yml - not found", ExpectedEnabled: false, HasFiles: false},
	}

	for _, tc := range cases {
		docker := &Docker{}
		env := new(mock.Environment)
		props := properties.Map{
			DisplayMode:  DisplayModeFiles,
			FetchContext: false,
		}

		docker.Init(props, env)

		env.On("HasFiles", tc.Case).Return(true)
		env.On("HasFiles", mock_.Anything).Return(false)

		assert.Equal(t, tc.ExpectedEnabled, docker.Enabled(), tc.Case)
	}
}



================================================
FILE: src/segments/dotnet.go
================================================
package segments

import (
	"encoding/json"

	"github.com/jandedobbeleer/oh-my-posh/src/constants"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type globalJSON struct {
	Sdk struct {
		Version string `json:"version"`
	} `json:"sdk"`
}

const (
	// FetchSDKVersion fetches the SDK version in global.json
	FetchSDKVersion properties.Property = "fetch_sdk_version"
)

type Dotnet struct {
	SDKVersion string
	language
	Unsupported bool
}

func (d *Dotnet) Template() string {
	return " {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }} "
}

func (d *Dotnet) Enabled() bool {
	d.extensions = []string{
		"*.cs",
		"*.csx",
		"*.vb",
		"*.sln",
		"*.slnf",
		"*.csproj",
		"*.vbproj",
		"*.fs",
		"*.fsx",
		"*.fsproj",
		"global.json",
	}
	d.commands = []*cmd{
		{
			executable: "dotnet",
			args:       []string{"--version"},
			regex: `(?P<version>((?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)` +
				`(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?))`,
		},
	}
	d.versionURLTemplate = "https://github.com/dotnet/core/blob/master/release-notes/{{ .Major }}.{{ .Minor }}/{{ .Major }}.{{ .Minor }}.{{ substr 0 1 .Patch }}/{{ .Major }}.{{ .Minor }}.{{ substr 0 1 .Patch }}.md" //nolint: lll

	enabled := d.language.Enabled()
	if !enabled {
		return false
	}

	d.Unsupported = d.exitCode == constants.DotnetExitCode

	if !d.props.GetBool(FetchSDKVersion, false) {
		return true
	}

	file, err := d.env.HasParentFilePath("global.json", false)
	if err != nil {
		return true
	}

	content := d.env.FileContent(file.Path)

	var globalJSON globalJSON
	if err := json.Unmarshal([]byte(content), &globalJSON); err == nil {
		d.SDKVersion = globalJSON.Sdk.Version
	}

	return true
}



================================================
FILE: src/segments/dotnet_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/constants"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	"github.com/stretchr/testify/assert"
)

func TestDotnetSegment(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Version  string
		ExitCode int
	}{
		{Case: "Unsupported version", Expected: "\uf071", ExitCode: constants.DotnetExitCode, Version: "3.1.402"},
		{Case: "Regular version", Expected: "3.1.402", Version: "3.1.402"},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "dotnet",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.cs",
		}
		env, props := getMockedLanguageEnv(params)

		if tc.ExitCode != 0 {
			env.Unset("RunCommand")
			err := &runtime.CommandError{ExitCode: tc.ExitCode}
			env.On("RunCommand", "dotnet", []string{"--version"}).Return("", err)
		}

		dotnet := &Dotnet{}
		dotnet.Init(props, env)

		assert.True(t, dotnet.Enabled())
		assert.Equal(t, tc.Expected, renderTemplate(env, dotnet.Template(), dotnet), tc.Case)
	}
}

func TestDotnetSDKVersion(t *testing.T) {
	cases := []struct {
		Case           string
		GlobalJSON     string
		ExpectedSDK    string
		GlobalJSONPath string
		FetchSDK       bool
		HasGlobalJSON  bool
	}{
		{
			Case:        "Do not fetch SDK version",
			FetchSDK:    false,
			ExpectedSDK: "",
		},
		{
			Case:        "No global.json found",
			FetchSDK:    true,
			ExpectedSDK: "",
		},
		{
			Case:           "Valid global.json",
			FetchSDK:       true,
			GlobalJSON:     `{"sdk": {"version": "6.0.100"}}`,
			ExpectedSDK:    "6.0.100",
			HasGlobalJSON:  true,
			GlobalJSONPath: "/test/global.json",
		},
		{
			Case:           "Invalid global.json",
			FetchSDK:       true,
			GlobalJSON:     `invalid json`,
			ExpectedSDK:    "",
			HasGlobalJSON:  true,
			GlobalJSONPath: "/test/global.json",
		},
	}

	params := &mockedLanguageParams{
		cmd:           "dotnet",
		versionParam:  "--version",
		versionOutput: "6.0.100",
		extension:     "*.cs",
	}

	for _, tc := range cases {
		props := properties.Map{
			FetchSDKVersion:         tc.FetchSDK,
			properties.FetchVersion: false,
		}

		env, _ := getMockedLanguageEnv(params)

		if tc.HasGlobalJSON {
			file := &runtime.FileInfo{
				Path: tc.GlobalJSONPath,
			}
			env.On("HasParentFilePath", "global.json", false).Return(file, nil)
			env.On("FileContent", tc.GlobalJSONPath).Return(tc.GlobalJSON)
		} else {
			env.On("HasParentFilePath", "global.json", false).Return(&runtime.FileInfo{}, errors.New("file not found"))
		}

		dotnet := &Dotnet{}
		dotnet.Init(props, env)

		assert.True(t, dotnet.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedSDK, dotnet.SDKVersion, tc.Case)
	}
}



================================================
FILE: src/segments/elixir.go
================================================
package segments

type Elixir struct {
	language
}

func (e *Elixir) Template() string {
	return languageTemplate
}

func (e *Elixir) Enabled() bool {
	e.extensions = []string{"*.ex", "*.exs"}
	e.commands = []*cmd{
		{
			executable: "asdf",
			args:       []string{"current", "elixir"},
			regex:      `elixir\s+(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))[^\s]*\s+`,
		},
		{
			executable: "elixir",
			args:       []string{"--version"},
			regex:      `Elixir (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	e.versionURLTemplate = "https://github.com/elixir-lang/elixir/releases/tag/v{{ .Full }}"

	return e.language.Enabled()
}



================================================
FILE: src/segments/elixir_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/stretchr/testify/assert"
)

func TestElixir(t *testing.T) {
	cases := []struct {
		Case                string
		ExpectedString      string
		ElixirVersionOutput string
		AsdfVersionOutput   string
		HasAsdf             bool
		AsdfExitCode        int
	}{
		{
			Case:                "Version without asdf",
			ExpectedString:      "1.14.2",
			ElixirVersionOutput: "Erlang/OTP 25 [erts-13.1.3] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit] [dtrace]\n\nElixir 1.14.2 (compiled with Erlang/OTP 25)",
		},
		{
			Case:                "Version with asdf",
			ExpectedString:      "1.14.2",
			HasAsdf:             true,
			AsdfVersionOutput:   "elixir          1.14.2-otp-25   /path/to/.tool-versions",
			ElixirVersionOutput: "Should not be used",
		},
		{
			Case:                "Version with asdf not set: should fall back to elixir --version",
			ExpectedString:      "1.14.2",
			HasAsdf:             true,
			AsdfVersionOutput:   "elixir             ______          No version is set. Run \"asdf <global|shell|local> elixir <version>\"",
			AsdfExitCode:        126,
			ElixirVersionOutput: "Erlang/OTP 25 [erts-13.1.3] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit] [dtrace]\n\nElixir 1.14.2 (compiled with Erlang/OTP 25)",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "elixir",
			versionParam:  "--version",
			versionOutput: tc.ElixirVersionOutput,
			extension:     "*.ex",
		}
		env, props := getMockedLanguageEnv(params)

		env.On("HasCommand", "asdf").Return(tc.HasAsdf)
		var asdfErr error
		if tc.AsdfExitCode != 0 {
			asdfErr = &runtime.CommandError{ExitCode: tc.AsdfExitCode}
		}
		env.On("RunCommand", "asdf", []string{"current", "elixir"}).Return(tc.AsdfVersionOutput, asdfErr)

		r := &Elixir{}
		r.Init(props, env)
		assert.True(t, r.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, r.Template(), r), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/executiontime.go
================================================
package segments

import (
	"fmt"
	"strconv"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"

	lang "golang.org/x/text/language"
	"golang.org/x/text/message"
)

type Executiontime struct {
	base

	FormattedMs string
	Ms          int64
}

// DurationStyle how to display the time
type DurationStyle string

const (
	// ThresholdProperty represents minimum duration (milliseconds) required to enable this segment
	ThresholdProperty properties.Property = "threshold"
	// Austin milliseconds short
	Austin DurationStyle = "austin"
	// Roundrock milliseconds long
	Roundrock DurationStyle = "roundrock"
	// Dallas milliseconds full
	Dallas DurationStyle = "dallas"
	// Galveston hour
	Galveston DurationStyle = "galveston"
	// Galveston hour
	GalvestonMs DurationStyle = "galvestonms"
	// Houston hour and milliseconds
	Houston DurationStyle = "houston"
	// Amarillo seconds
	Amarillo DurationStyle = "amarillo"
	// Round will round the output of the format
	Round DurationStyle = "round"
	// Always 7 character width
	Lucky7 = "lucky7"

	second           = 1000
	minute           = 60000
	hour             = 3600000
	day              = 86400000
	secondsPerMinute = 60
	minutesPerHour   = 60
	hoursPerDay      = 24
)

func (t *Executiontime) Enabled() bool {
	alwaysEnabled := t.props.GetBool(properties.AlwaysEnabled, false)
	executionTimeMs := t.env.ExecutionTime()
	thresholdMs := t.props.GetFloat64(ThresholdProperty, float64(500))
	if !alwaysEnabled && executionTimeMs < thresholdMs {
		return false
	}
	style := DurationStyle(t.props.GetString(properties.Style, string(Austin)))
	t.Ms = int64(executionTimeMs)
	t.FormattedMs = t.formatDuration(style)
	return t.FormattedMs != ""
}

func (t *Executiontime) Template() string {
	return " {{ .FormattedMs }} "
}

func (t *Executiontime) formatDuration(style DurationStyle) string {
	switch style {
	case Austin:
		return t.formatDurationAustin()
	case Roundrock:
		return t.formatDurationRoundrock()
	case Dallas:
		return t.formatDurationDallas()
	case Galveston:
		return t.formatDurationGalveston()
	case GalvestonMs:
		return t.formatDurationGalvestonMs()
	case Houston:
		return t.formatDurationHouston()
	case Amarillo:
		return t.formatDurationAmarillo()
	case Round:
		return t.formatDurationRound()
	case Lucky7:
		return t.formatDurationLucky7()
	default:
		return fmt.Sprintf("Style: %s is not available", style)
	}
}

func (t *Executiontime) formatDurationAustin() string {
	if t.Ms < second {
		return fmt.Sprintf("%dms", t.Ms%second)
	}

	seconds := float64(t.Ms%minute) / second
	result := strconv.FormatFloat(seconds, 'f', -1, 64) + "s"

	if t.Ms >= minute {
		result = fmt.Sprintf("%dm %s", t.Ms/minute%secondsPerMinute, result)
	}
	if t.Ms >= hour {
		result = fmt.Sprintf("%dh %s", t.Ms/hour%hoursPerDay, result)
	}
	if t.Ms >= day {
		result = fmt.Sprintf("%dd %s", t.Ms/day, result)
	}
	return result
}

func (t *Executiontime) formatDurationRoundrock() string {
	result := fmt.Sprintf("%dms", t.Ms%second)
	if t.Ms >= second {
		result = fmt.Sprintf("%ds %s", t.Ms/second%secondsPerMinute, result)
	}
	if t.Ms >= minute {
		result = fmt.Sprintf("%dm %s", t.Ms/minute%minutesPerHour, result)
	}
	if t.Ms >= hour {
		result = fmt.Sprintf("%dh %s", t.Ms/hour%hoursPerDay, result)
	}
	if t.Ms >= day {
		result = fmt.Sprintf("%dd %s", t.Ms/day, result)
	}
	return result
}

func (t *Executiontime) formatDurationDallas() string {
	seconds := float64(t.Ms%minute) / second
	result := strconv.FormatFloat(seconds, 'f', -1, 64)

	if t.Ms >= minute {
		result = fmt.Sprintf("%d:%s", t.Ms/minute%minutesPerHour, result)
	}
	if t.Ms >= hour {
		result = fmt.Sprintf("%d:%s", t.Ms/hour%hoursPerDay, result)
	}
	if t.Ms >= day {
		result = fmt.Sprintf("%d:%s", t.Ms/day, result)
	}
	return result
}

func (t *Executiontime) formatDurationGalveston() string {
	result := fmt.Sprintf("%02d:%02d:%02d", t.Ms/hour, t.Ms/minute%minutesPerHour, t.Ms%minute/second)
	return result
}

func (t *Executiontime) formatDurationGalvestonMs() string {
	millies := t.Ms % second
	result := fmt.Sprintf("%02d:%02d:%02d:%03d", t.Ms/hour, t.Ms/minute%minutesPerHour, t.Ms%minute/second, millies)
	return result
}

func (t *Executiontime) formatDurationHouston() string {
	milliseconds := ".0"
	if t.Ms%second > 0 {
		// format milliseconds as a string with truncated trailing zeros
		milliseconds = strconv.FormatFloat(float64(t.Ms%second)/second, 'f', -1, 64)
		// at this point milliseconds looks like "0.5". remove the leading "0"
		if len(milliseconds) >= 1 {
			milliseconds = milliseconds[1:]
		}
	}

	result := fmt.Sprintf("%02d:%02d:%02d%s", t.Ms/hour, t.Ms/minute%minutesPerHour, t.Ms%minute/second, milliseconds)
	return result
}

func (t *Executiontime) formatDurationAmarillo() string {
	// wholeNumber represents the value to the left of the decimal point (seconds)
	wholeNumber := t.Ms / second
	// decimalNumber represents the value to the right of the decimal point (milliseconds)
	decimalNumber := float64(t.Ms%second) / second

	// format wholeNumber as a string with thousands separators
	printer := message.NewPrinter(lang.English)
	result := printer.Sprintf("%d", wholeNumber)

	if decimalNumber > 0 {
		// format decimalNumber as a string with truncated trailing zeros
		decimalResult := strconv.FormatFloat(decimalNumber, 'f', -1, 64)
		// at this point decimalResult looks like "0.5"
		// remove the leading "0" and append
		if len(decimalResult) >= 1 {
			result += decimalResult[1:]
		}
	}
	result += "s"

	return result
}

func (t *Executiontime) formatDurationRound() string {
	toRoundString := func(one, two int64, oneText, twoText string) string {
		if two == 0 {
			return fmt.Sprintf("%d%s", one, oneText)
		}
		return fmt.Sprintf("%d%s %d%s", one, oneText, two, twoText)
	}
	hours := t.Ms / hour % hoursPerDay
	if t.Ms >= day {
		return toRoundString(t.Ms/day, hours, "d", "h")
	}
	minutes := t.Ms / minute % secondsPerMinute
	if t.Ms >= hour {
		return toRoundString(hours, minutes, "h", "m")
	}
	seconds := (t.Ms % minute) / second
	if t.Ms >= minute {
		return toRoundString(minutes, seconds, "m", "s")
	}
	if t.Ms >= second {
		return fmt.Sprintf("%ds", seconds)
	}
	return fmt.Sprintf("%dms", t.Ms%second)
}

func (t *Executiontime) formatDurationLucky7() string {
	// https://github.com/JanDeDobbeleer/oh-my-posh/issues/3970
	// execution time will always be 7 characters long
	// decimal point will be at the same location (3rd space or str[2])
	// seconds and milliseconds will be aligned
	// [m, s], [h, m], [d, h] will be aligned
	if t.Ms < second {
		//   999ms
		// 1234567
		return fmt.Sprintf("%5dms", t.Ms%second)
	}

	if t.Ms < minute {
		// 12.34s
		// 1234567

		//  1.23s
		// 1230 (= 1230ms)
		// ^ use Sprintf pad left space
		//  1230
		// from here, just take 1, 23 of 230, and append s and ' '

		result := fmt.Sprintf("%5d", t.Ms)

		return result[:2] + "." + result[2:4] + "s "
	}

	if t.Ms < hour {
		m := t.Ms / minute
		s := t.Ms % minute / second

		return fmt.Sprintf("%2dm %2ds", m, s)
	}

	if t.Ms < day {
		h := t.Ms / hour
		m := t.Ms % hour / minute

		return fmt.Sprintf("%2dh %2dm", h, m)
	}

	if t.Ms < 100*day {
		d := t.Ms / day
		h := t.Ms % day / hour

		return fmt.Sprintf("%2dd %2dh", d, h)
	}

	// I have no Idea how you got here
	// return "   ∞   "
	d := t.Ms / day
	return fmt.Sprintf("%6dd", d)
}



================================================
FILE: src/segments/executiontime_test.go
================================================
package segments

import (
	"math"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestExecutionTimeWriterDefaultThresholdEnabled(t *testing.T) {
	env := new(mock.Environment)
	env.On("ExecutionTime").Return(1337)

	executionTime := &Executiontime{}
	executionTime.Init(properties.Map{}, env)

	assert.True(t, executionTime.Enabled())
}

func TestExecutionTimeWriterDefaultThresholdDisabled(t *testing.T) {
	env := new(mock.Environment)
	env.On("ExecutionTime").Return(1)

	executionTime := &Executiontime{}
	executionTime.Init(properties.Map{}, env)

	assert.False(t, executionTime.Enabled())
}

func TestExecutionTimeWriterCustomThresholdEnabled(t *testing.T) {
	env := new(mock.Environment)
	env.On("ExecutionTime").Return(99)
	props := properties.Map{
		ThresholdProperty: float64(10),
	}

	executionTime := &Executiontime{}
	executionTime.Init(props, env)

	assert.True(t, executionTime.Enabled())
}

func TestExecutionTimeWriterCustomThresholdDisabled(t *testing.T) {
	env := new(mock.Environment)
	env.On("ExecutionTime").Return(99)
	props := properties.Map{
		ThresholdProperty: float64(100),
	}

	executionTime := &Executiontime{}
	executionTime.Init(props, env)

	assert.False(t, executionTime.Enabled())
}

func TestExecutionTimeWriterDuration(t *testing.T) {
	input := 1337
	expected := "1.337s"
	env := new(mock.Environment)
	env.On("ExecutionTime").Return(input)

	executionTime := &Executiontime{}
	executionTime.Init(properties.Map{}, env)

	executionTime.Enabled()
	assert.Equal(t, expected, executionTime.FormattedMs)
}

func TestExecutionTimeWriterDuration2(t *testing.T) {
	input := 13371337
	expected := "3h 42m 51.337s"
	env := new(mock.Environment)
	env.On("ExecutionTime").Return(input)

	executionTime := &Executiontime{}
	executionTime.Init(properties.Map{}, env)

	executionTime.Enabled()
	assert.Equal(t, expected, executionTime.FormattedMs)
}

func TestExecutionTimeFormatDurationAustin(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "1ms"},
		{Input: "0.1s", Expected: "100ms"},
		{Input: "1s", Expected: "1s"},
		{Input: "2.1s", Expected: "2.1s"},
		{Input: "1m", Expected: "1m 0s"},
		{Input: "3m2.1s", Expected: "3m 2.1s"},
		{Input: "1h", Expected: "1h 0m 0s"},
		{Input: "4h3m2.1s", Expected: "4h 3m 2.1s"},
		{Input: "124h3m2.1s", Expected: "5d 4h 3m 2.1s"},
		{Input: "124h3m2.0s", Expected: "5d 4h 3m 2s"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationAustin()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatDurationRoundrock(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "1ms"},
		{Input: "0.1s", Expected: "100ms"},
		{Input: "1s", Expected: "1s 0ms"},
		{Input: "2.1s", Expected: "2s 100ms"},
		{Input: "1m", Expected: "1m 0s 0ms"},
		{Input: "3m2.1s", Expected: "3m 2s 100ms"},
		{Input: "1h", Expected: "1h 0m 0s 0ms"},
		{Input: "4h3m2.1s", Expected: "4h 3m 2s 100ms"},
		{Input: "124h3m2.1s", Expected: "5d 4h 3m 2s 100ms"},
		{Input: "124h3m2.0s", Expected: "5d 4h 3m 2s 0ms"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationRoundrock()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatDallas(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "0.001"},
		{Input: "0.1s", Expected: "0.1"},
		{Input: "1s", Expected: "1"},
		{Input: "2.1s", Expected: "2.1"},
		{Input: "1m", Expected: "1:0"},
		{Input: "3m2.1s", Expected: "3:2.1"},
		{Input: "1h", Expected: "1:0:0"},
		{Input: "4h3m2.1s", Expected: "4:3:2.1"},
		{Input: "124h3m2.1s", Expected: "5:4:3:2.1"},
		{Input: "124h3m2.0s", Expected: "5:4:3:2"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationDallas()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatGalveston(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "00:00:00"},
		{Input: "0.1s", Expected: "00:00:00"},
		{Input: "1s", Expected: "00:00:01"},
		{Input: "2.1s", Expected: "00:00:02"},
		{Input: "1m", Expected: "00:01:00"},
		{Input: "3m2.1s", Expected: "00:03:02"},
		{Input: "1h", Expected: "01:00:00"},
		{Input: "4h3m2.1s", Expected: "04:03:02"},
		{Input: "124h3m2.1s", Expected: "124:03:02"},
		{Input: "124h3m2.0s", Expected: "124:03:02"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationGalveston()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatGalvestonMs(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "00:00:00:001"},
		{Input: "0.1s", Expected: "00:00:00:100"},
		{Input: "1s", Expected: "00:00:01:000"},
		{Input: "2.1s", Expected: "00:00:02:100"},
		{Input: "1m", Expected: "00:01:00:000"},
		{Input: "3m2.1s", Expected: "00:03:02:100"},
		{Input: "1h", Expected: "01:00:00:000"},
		{Input: "4h3m2.1s", Expected: "04:03:02:100"},
		{Input: "124h3m2.1s", Expected: "124:03:02:100"},
		{Input: "124h3m2.0s", Expected: "124:03:02:000"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationGalvestonMs()
		assert.Equal(t, tc.Expected, output, tc.Input)
	}
}

func TestExecutionTimeFormatHouston(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "00:00:00.001"},
		{Input: "0.1s", Expected: "00:00:00.1"},
		{Input: "1s", Expected: "00:00:01.0"},
		{Input: "2.1s", Expected: "00:00:02.1"},
		{Input: "1m", Expected: "00:01:00.0"},
		{Input: "3m2.1s", Expected: "00:03:02.1"},
		{Input: "1h", Expected: "01:00:00.0"},
		{Input: "4h3m2.1s", Expected: "04:03:02.1"},
		{Input: "124h3m2.1s", Expected: "124:03:02.1"},
		{Input: "124h3m2.0s", Expected: "124:03:02.0"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationHouston()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatAmarillo(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "0.001s"},
		{Input: "0.1s", Expected: "0.1s"},
		{Input: "1s", Expected: "1s"},
		{Input: "2.1s", Expected: "2.1s"},
		{Input: "1m", Expected: "60s"},
		{Input: "3m2.1s", Expected: "182.1s"},
		{Input: "1h", Expected: "3,600s"},
		{Input: "4h3m2.1s", Expected: "14,582.1s"},
		{Input: "124h3m2.1s", Expected: "446,582.1s"},
		{Input: "124h3m2.0s", Expected: "446,582s"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationAmarillo()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatDurationRound(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{Input: "0.001s", Expected: "1ms"},
		{Input: "0.1s", Expected: "100ms"},
		{Input: "1s", Expected: "1s"},
		{Input: "2.1s", Expected: "2s"},
		{Input: "1m", Expected: "1m"},
		{Input: "3m2.1s", Expected: "3m 2s"},
		{Input: "1h", Expected: "1h"},
		{Input: "4h3m2.1s", Expected: "4h 3m"},
		{Input: "124h3m2.1s", Expected: "5d 4h"},
		{Input: "124h3m2.0s", Expected: "5d 4h"},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationRound()
		assert.Equal(t, tc.Expected, output)
	}
}

func TestExecutionTimeFormatDurationLucky7(t *testing.T) {
	cases := []struct {
		Input    string
		Expected string
	}{
		{
			Input:    "0.001s",
			Expected: "    1ms",
		},
		{
			Input:    "0.1s",
			Expected: "  100ms",
		},
		{
			Input:    "1s",
			Expected: " 1.00s ",
		},
		{
			Input:    "2.1s",
			Expected: " 2.10s ",
		},
		{
			Input:    "1m",
			Expected: " 1m  0s",
		},
		{
			Input:    "3m2.1s",
			Expected: " 3m  2s",
		},
		{
			Input:    "1h",
			Expected: " 1h  0m",
		},
		{
			Input:    "4h3m2.1s",
			Expected: " 4h  3m",
		},
		{
			Input:    "124h3m2.1s",
			Expected: " 5d  4h",
		},
		{
			Input:    "124h3m2.0s",
			Expected: " 5d  4h",
		},
	}

	for _, tc := range cases {
		duration, _ := time.ParseDuration(tc.Input)
		executionTime := &Executiontime{}
		executionTime.Ms = duration.Milliseconds()
		output := executionTime.formatDurationLucky7()
		assert.Equal(t, tc.Expected, output)
	}

	// Extra fuzz test
	var timestamp int64 = 1
	var ms1000days int64 = 1000 * 24 * 60 * 60 * 1000

	// log(ms1000days, 1.5) is approx 62.1
	for timestamp < ms1000days {
		timestamp = int64(math.Ceil(float64(timestamp) * 1.5))

		executionTime := (&Executiontime{
			Ms: timestamp,
		}).formatDurationLucky7()

		// Lucky 7!!
		assert.Equal(t, len(executionTime), 7)
	}
}



================================================
FILE: src/segments/firebase.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

const (
	FIREBASENOACTIVECONFIG = "NO ACTIVE CONFIG FOUND"
)

type Firebase struct {
	base

	Project string
}

type FirebaseData struct {
	ActiveProject map[string]string `json:"activeProjects"`
}

func (f *Firebase) Template() string {
	return " {{ .Project}} "
}

func (f *Firebase) Enabled() bool {
	cfgDir := filepath.Join(f.env.Home(), ".config", "configstore")
	configFile, err := f.getActiveConfig(cfgDir)
	if err != nil {
		log.Error(err)
		return false
	}

	data, err := f.getFirebaseData(configFile)
	if err != nil {
		log.Error(err)
		return false
	}

	// Within the activeProjects is a key value pair
	// of the path to the project and the project name

	// Test if the current directory is a project path
	// and if it is, return the project name
	for key, value := range data.ActiveProject {
		if strings.HasPrefix(f.env.Pwd(), key) {
			f.Project = value
			return true
		}
	}

	return false
}

func (f *Firebase) getActiveConfig(cfgDir string) (string, error) {
	activeConfigFile := filepath.Join(cfgDir, "firebase-tools.json")
	activeConfigData := f.env.FileContent(activeConfigFile)
	if len(activeConfigData) == 0 {
		return "", errors.New(FIREBASENOACTIVECONFIG)
	}
	return activeConfigData, nil
}

func (f *Firebase) getFirebaseData(configFile string) (*FirebaseData, error) {
	var data FirebaseData

	err := json.Unmarshal([]byte(configFile), &data)
	if err != nil {
		return nil, err
	}

	return &data, nil
}



================================================
FILE: src/segments/firebase_test.go
================================================
package segments

import (
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
)

func TestFirebaseSegment(t *testing.T) {
	config := `{
		"activeProjects": {
			"path": "project-name"
		}
	}`
	cases := []struct {
		Case            string
		ActiveConfig    string
		ActivePath      string
		ExpectedString  string
		ExpectedEnabled bool
	}{
		{
			Case:            "happy path",
			ExpectedEnabled: true,
			ActiveConfig:    config,
			ActivePath:      "path",
			ExpectedString:  "project-name",
		},
		{
			Case:            "happy subpath",
			ExpectedEnabled: true,
			ActiveConfig:    config,
			ActivePath:      "path/subpath",
			ExpectedString:  "project-name",
		},
		{
			Case:            "no active config",
			ExpectedEnabled: false,
		},
		{
			Case:            "empty config",
			ActiveConfig:    "{}",
			ExpectedEnabled: false,
		},
		{
			Case:            "bad config",
			ActiveConfig:    "{bad}",
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return("home")
		env.On("Pwd").Return(tc.ActivePath)
		fcPath := filepath.Join("home", ".config", "configstore", "firebase-tools.json")
		env.On("FileContent", fcPath).Return(tc.ActiveConfig)

		f := &Firebase{}
		f.Init(properties.Map{}, env)

		f.Enabled()

		assert.Equal(t, tc.ExpectedEnabled, f.Enabled())
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, f.Template(), f), tc.Case)
		}
	}
}

func TestGetFirebaseActiveConfig(t *testing.T) {
	data :=
		`{
			"activeProjects": {
				"path": "project-name"
			}
		}`
	cases := []struct {
		Case           string
		ActiveConfig   string
		ExpectedString string
		ExpectedError  string
	}{
		{
			Case:           "happy path",
			ActiveConfig:   data,
			ExpectedString: data,
		},
		{
			Case:          "no active config",
			ActiveConfig:  "",
			ExpectedError: FIREBASENOACTIVECONFIG,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return("home")
		configPath := filepath.Join("home", ".config", "configstore")
		contentPath := filepath.Join(configPath, "firebase-tools.json")
		env.On("FileContent", contentPath).Return(tc.ActiveConfig)

		f := &Firebase{}
		f.Init(properties.Map{}, env)

		got, err := f.getActiveConfig(configPath)
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
		if len(tc.ExpectedError) > 0 {
			assert.EqualError(t, err, tc.ExpectedError, tc.Case)
		} else {
			assert.NoError(t, err, tc.Case)
		}
	}
}



================================================
FILE: src/segments/flutter.go
================================================
package segments

type Flutter struct {
	language
}

func (f *Flutter) Template() string {
	return languageTemplate
}

func (f *Flutter) Enabled() bool {
	f.extensions = dartExtensions
	f.folders = dartFolders
	f.commands = []*cmd{
		{
			executable: "fvm",
			args:       []string{"flutter", "--version"},
			regex:      `Flutter (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
		{
			executable: "flutter",
			args:       []string{"--version"},
			regex:      `Flutter (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	f.versionURLTemplate = "https://github.com/flutter/flutter/releases/tag/{{ .Major }}.{{ .Minor }}.{{ .Patch }}"

	return f.language.Enabled()
}



================================================
FILE: src/segments/flutter_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFlutter(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Flutter 2.10.4", ExpectedString: "2.10.4", Version: "Flutter 2.10.4 • channel stable • https://github.com/flutter/flutter.git"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "flutter",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.dart",
		}

		env, props := getMockedLanguageEnv(params)
		env.On("HasCommand", "fvm").Return(false)

		d := &Flutter{}
		d.Init(props, env)

		assert.True(t, d.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, d.Template(), d), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/fortran.go
================================================
package segments

type Fortran struct {
	language
}

func (f *Fortran) Template() string {
	return languageTemplate
}

func (f *Fortran) Enabled() bool {
	f.extensions = []string{
		"*.f", "*.for", "*.fpp",
		"*.f77", "*.f90", "*.f95",
		"*.f03", "*.f08",
		"*.F", "*.FOR", "*.FPP",
		"*.F77", "*.F90", "*.F95",
		"*.F03", "*.F08",
		"fpm.toml",
	}
	f.commands = []*cmd{
		{
			executable: "gfortran",
			args:       []string{"--version"},
			regex:      `GNU Fortran \(.*\) (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}

	return f.language.Enabled()
}



================================================
FILE: src/segments/fortran_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFortran(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{
			Case:           "GNU Fortran 10.2.1 Debian",
			ExpectedString: "10.2.1",
			Version: `GNU Fortran (Debian 10.2.1-6) 10.2.1 20210110
			Copyright (C) 2020 Free Software Foundation, Inc.
			This is free software; see the source for copying conditions.  There is NO
			warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.`,
		},
		{
			Case:           "GNU Fortran 11.4.0 Ubuntu",
			ExpectedString: "11.4.0",
			Version: `GNU Fortran (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
			Copyright (C) 2021 Free Software Foundation, Inc.
			This is free software; see the source for copying conditions.  There is NO
			warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.`,
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "gfortran",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.f",
		}
		env, props := getMockedLanguageEnv(params)
		f := &Fortran{}
		f.Init(props, env)
		assert.True(t, f.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, f.Template(), f), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/fossil.go
================================================
package segments

import "strings"

// FossilStatus represents part of the status of a Svn repository
type FossilStatus struct {
	ScmStatus
}

func (s *FossilStatus) add(code string) {
	switch code {
	case "CONFLICT":
		s.Conflicted++
	case "DELETED", "MISSING":
		s.Deleted++
	case "ADDED", "ADDED_BY_INTEGRATE", "ADDED_BY_MERGE":
		s.Added++
	case "EDITED", "UPDATED", "UPDATED_BY_INTEGRATE", "UPDATED_BY_MERGE", "CHANGED":
		s.Modified++
	case "RENAMED":
		s.Moved++
	}
}

const (
	FOSSILCOMMAND = "fossil"
)

type Fossil struct {
	Status *FossilStatus
	Branch string
	scm
}

func (f *Fossil) Template() string {
	return " \ue725 {{.Branch}} {{.Status.String}} "
}

func (f *Fossil) Enabled() bool {
	if !f.hasCommand(FOSSILCOMMAND) {
		return false
	}

	// run fossil command
	output, err := f.env.RunCommand(f.command, "status")
	if err != nil {
		return false
	}

	f.Status = &FossilStatus{}
	lines := strings.SplitSeq(output, "\n")

	for line := range lines {
		if len(line) == 0 {
			continue
		}
		context := strings.SplitN(line, " ", 2)
		if len(context) < 2 {
			continue
		}
		switch context[0] {
		case "tags:":
			f.Branch = strings.TrimSpace(context[1])
		default:
			f.Status.add(context[0])
		}
	}

	return true
}



================================================
FILE: src/segments/fossil_test.go
================================================
package segments

import (
	"fmt"
	"strings"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestFossilStatus(t *testing.T) {
	cases := []struct {
		OutputError      error
		Case             string
		Output           string
		ExpectedStatus   string
		ExpectedBranch   string
		HasCommand       bool
		ExpectedDisabled bool
	}{
		{
			Case:             "not installed",
			HasCommand:       false,
			ExpectedDisabled: true,
		},
		{
			Case:             "command error",
			HasCommand:       true,
			OutputError:      fmt.Errorf("error"),
			ExpectedDisabled: true,
		},
		{
			Case:       "default status",
			HasCommand: true,
			Output: `
			repository:   /Users/jan/Downloads/myclone.fossil
			local-root:   /Users/jan/Projects/fossil/
			config-db:    /Users/jan/.config/fossil.db
			checkout:     0fabc4f3566c7e7d9e528b17253de42e14dd5c7b 2022-06-05 04:06:17 UTC
			parent:       e8a051e6a943a26c9c33a30df8ceda069c06c174 2022-06-04 23:09:02 UTC
			tags:         trunk
			comment:      In the /setup_skin page, add a mention of/link to /skins, per request in the forum. (user: stephan)
			CONFLICT             test.tst
			DELETED	             test.tst
			MISSING              test.tst
			ADDED                test.tst
			ADDED_BY_INTEGRATE   test.tst
			ADDED_BY_MERGE       test.tst
			EDITED               auto.def
			UPDATED              test.tst
			UPDATED_BY_INTEGRATE test.tst
			UPDATED_BY_MERGE 	 test.tst
			CHANGED 	         test.tst
			RENAMED 		     test.tst
			`,
			ExpectedBranch: "trunk",
			ExpectedStatus: "+3 ~5 -2 >1 !1",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return("unix")
		env.On("IsWsl").Return(false)
		env.On("InWSLSharedDrive").Return(false)
		env.On("HasCommand", FOSSILCOMMAND).Return(tc.HasCommand)
		env.On("RunCommand", FOSSILCOMMAND, []string{"status"}).Return(strings.ReplaceAll(tc.Output, "\t", ""), tc.OutputError)

		f := &Fossil{}
		f.Init(properties.Map{}, env)

		got := f.Enabled()

		assert.Equal(t, !tc.ExpectedDisabled, got, tc.Case)
		if tc.ExpectedDisabled {
			continue
		}
		assert.Equal(t, tc.ExpectedStatus, f.Status.String(), tc.Case)
		assert.Equal(t, tc.ExpectedBranch, f.Branch, tc.Case)
	}
}



================================================
FILE: src/segments/gcp.go
================================================
package segments

import (
	"errors"
	"path"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	"gopkg.in/ini.v1"
)

const (
	GCPNOACTIVECONFIG = "NO ACTIVE CONFIG FOUND"
)

type Gcp struct {
	base

	Account      string
	Project      string
	Region       string
	ActiveConfig string
}

func (g *Gcp) Template() string {
	return " {{ .Project }} "
}

func (g *Gcp) Enabled() bool {
	cfgDir := g.getConfigDirectory()
	cfgName, err := g.getActiveConfig(cfgDir)
	if err != nil {
		log.Error(err)
		return false
	}

	g.ActiveConfig = cfgName
	cfgPath := path.Join(cfgDir, "configurations", "config_"+cfgName)
	cfg := g.env.FileContent(cfgPath)

	if len(cfg) == 0 {
		log.Error(errors.New("config file is empty"))
		return false
	}

	data, err := ini.Load([]byte(cfg))
	if err != nil {
		log.Error(err)
		return false
	}

	g.Project = data.Section("core").Key("project").String()
	g.Account = data.Section("core").Key("account").String()
	g.Region = data.Section("compute").Key("region").String()

	return true
}

func (g *Gcp) getActiveConfig(cfgDir string) (string, error) {
	activeCfg := g.env.Getenv("CLOUDSDK_ACTIVE_CONFIG_NAME")
	if len(activeCfg) != 0 {
		return activeCfg, nil
	}

	ap := path.Join(cfgDir, "active_config")
	activeCfg = g.env.FileContent(ap)
	if len(activeCfg) == 0 {
		return "", errors.New(GCPNOACTIVECONFIG)
	}

	return activeCfg, nil
}

func (g *Gcp) getConfigDirectory() string {
	cfgDir := g.env.Getenv("CLOUDSDK_CONFIG")
	if len(cfgDir) != 0 {
		return cfgDir
	}

	if g.env.GOOS() == runtime.WINDOWS {
		return path.Join(g.env.Getenv("APPDATA"), "gcloud")
	}

	return path.Join(g.env.Home(), ".config", "gcloud")
}



================================================
FILE: src/segments/gcp_test.go
================================================
package segments

import (
	"path"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestGcpSegment(t *testing.T) {
	cases := []struct {
		Case            string
		CfgData         string
		ActiveConfig    string
		EnvActiveConfig string
		ExpectedString  string
		ExpectedEnabled bool
	}{
		{
			Case:            "happy path",
			ExpectedEnabled: true,
			ActiveConfig:    "production",
			CfgData: `
			[core]
			account = test@example.com
			project = test-test-test

			[compute]
			region = europe-test1
			`,
			ExpectedString: "test-test-test :: europe-test1 :: test@example.com",
		},
		{
			Case:            "no active config",
			ExpectedEnabled: false,
		},
		{
			Case:            "empty config",
			ActiveConfig:    "production",
			ExpectedEnabled: false,
		},
		{
			Case:            "bad config",
			ActiveConfig:    "production",
			CfgData:         "{bad}",
			ExpectedEnabled: false,
		},
		{
			Case:            "use CLOUDSDK_ACTIVE_CONFIG_NAME",
			EnvActiveConfig: "myconfig",
			ExpectedEnabled: true,
			CfgData: `
			[core]
			account = user@example.com
			project = cloud-proj

			[compute]
			region = us-west1
			`,
			ExpectedString: "cloud-proj :: us-west1 :: user@example.com",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", "CLOUDSDK_CONFIG").Return("config")
		env.On("Getenv", "CLOUDSDK_ACTIVE_CONFIG_NAME").Return(tc.EnvActiveConfig)

		// Only use fallback file if env var is not set
		if tc.EnvActiveConfig == "" {
			fcPath := path.Join("config", "active_config")
			env.On("FileContent", fcPath).Return(tc.ActiveConfig)
		}

		// Resolve active config name
		activeConfig := tc.EnvActiveConfig
		if activeConfig == "" {
			activeConfig = tc.ActiveConfig
		}

		cfgpath := path.Join("config", "configurations", "config_"+activeConfig)
		env.On("FileContent", cfgpath).Return(tc.CfgData)

		g := &Gcp{}
		g.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, g.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, "{{.Project}} :: {{.Region}} :: {{.Account}}", g), tc.Case)
		}
	}
}

func TestGetConfigDirectory(t *testing.T) {
	cases := []struct {
		Case           string
		GOOS           string
		Home           string
		AppData        string
		CloudSDKConfig string
		Expected       string
	}{
		{
			Case:           "CLOUDSDK_CONFIG",
			CloudSDKConfig: "/Users/posh/.config/gcloud",
			Expected:       "/Users/posh/.config/gcloud",
		},
		{
			Case:     "Windows",
			GOOS:     runtime.WINDOWS,
			AppData:  "/Users/posh/.config",
			Expected: "/Users/posh/.config/gcloud",
		},
		{
			Case:     "default",
			Home:     "/Users/posh2/",
			Expected: "/Users/posh2/.config/gcloud",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", "CLOUDSDK_CONFIG").Return(tc.CloudSDKConfig)
		env.On("Getenv", "APPDATA").Return(tc.AppData)
		env.On("Home").Return(tc.Home)
		env.On("GOOS").Return(tc.GOOS)

		g := &Gcp{}
		g.Init(properties.Map{}, env)

		assert.Equal(t, tc.Expected, g.getConfigDirectory(), tc.Case)
	}
}

func TestGetActiveConfig(t *testing.T) {
	cases := []struct {
		Case                    string
		EnvActiveConfigName     string
		FileActiveConfigContent string
		ExpectedString          string
		ExpectedError           string
	}{
		{
			Case:                "CLOUDSDK_ACTIVE_CONFIG_NAME set",
			EnvActiveConfigName: "envconfig",
			ExpectedString:      "envconfig",
		},
		{
			Case:                    "Fallback to file content",
			FileActiveConfigContent: "fileconfig",
			ExpectedString:          "fileconfig",
		},
		{
			Case:          "No config anywhere",
			ExpectedError: GCPNOACTIVECONFIG,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", "CLOUDSDK_ACTIVE_CONFIG_NAME").Return(tc.EnvActiveConfigName)

		// If env var not set, mock file fallback
		if tc.EnvActiveConfigName == "" {
			env.On("FileContent", path.Join("", "active_config")).Return(tc.FileActiveConfigContent)
		}

		g := &Gcp{}
		g.Init(properties.Map{}, env)

		got, err := g.getActiveConfig("")
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
		if len(tc.ExpectedError) > 0 {
			assert.EqualError(t, err, tc.ExpectedError, tc.Case)
		} else {
			assert.NoError(t, err, tc.Case)
		}
	}
}



================================================
FILE: src/segments/git.go
================================================
package segments

import (
	"fmt"
	url2 "net/url"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"

	"gopkg.in/ini.v1"
)

type Commit struct {
	Timestamp time.Time
	Author    *User
	Committer *User
	Refs      *Refs
	Subject   string
	Sha       string
}

type Refs struct {
	Heads   []string
	Tags    []string
	Remotes []string
}

type User struct {
	Name  string
	Email string
}

// GitStatus represents part of the status of a git repository
type GitStatus struct {
	ScmStatus
}

func (s *GitStatus) add(code string) {
	switch code {
	case ".":
		return
	case "D":
		s.Deleted++
	case "A":
		s.Added++
	case "?":
		s.Untracked++
	case "U", "AA":
		s.Unmerged++
	case "M", "R", "C", "m":
		s.Modified++
	}
}

const (
	// FetchStatus fetches the status of the repository
	FetchStatus properties.Property = "fetch_status"
	// IgnoreStatus allows to ignore certain repo's for status information
	IgnoreStatus properties.Property = "ignore_status"
	// FetchStashCount fetches the stash count
	FetchStashCount properties.Property = "fetch_stash_count"
	// FetchWorktreeCount fetches the worktree count
	FetchWorktreeCount properties.Property = "fetch_worktree_count"
	// FetchUpstreamIcon fetches the upstream icon
	FetchUpstreamIcon properties.Property = "fetch_upstream_icon"
	// FetchBareInfo fetches the bare repo status
	FetchBareInfo properties.Property = "fetch_bare_info"
	// FetchUser fetches the current user for the repo
	FetchUser properties.Property = "fetch_user"

	// BranchIcon the icon to use as branch indicator
	BranchIcon properties.Property = "branch_icon"
	// BranchIdenticalIcon the icon to display when the remote and local branch are identical
	BranchIdenticalIcon properties.Property = "branch_identical_icon"
	// BranchAheadIcon the icon to display when the local branch is ahead of the remote
	BranchAheadIcon properties.Property = "branch_ahead_icon"
	// BranchBehindIcon the icon to display when the local branch is behind the remote
	BranchBehindIcon properties.Property = "branch_behind_icon"
	// BranchGoneIcon the icon to use when ther's no remote
	BranchGoneIcon properties.Property = "branch_gone_icon"
	// RebaseIcon shows before the rebase context
	RebaseIcon properties.Property = "rebase_icon"
	// CherryPickIcon shows before the cherry-pick context
	CherryPickIcon properties.Property = "cherry_pick_icon"
	// RevertIcon shows before the revert context
	RevertIcon properties.Property = "revert_icon"
	// CommitIcon shows before the detached context
	CommitIcon properties.Property = "commit_icon"
	// NoCommitsIcon shows when there are no commits in the repo yet
	NoCommitsIcon properties.Property = "no_commits_icon"
	// TagIcon shows before the tag context
	TagIcon properties.Property = "tag_icon"
	// MergeIcon shows before the merge context
	MergeIcon properties.Property = "merge_icon"
	// UpstreamIcons allows to add custom upstream icons
	UpstreamIcons properties.Property = "upstream_icons"
	// GithubIcon shows when upstream is github
	GithubIcon properties.Property = "github_icon"
	// BitbucketIcon shows  when upstream is bitbucket
	BitbucketIcon properties.Property = "bitbucket_icon"
	// AzureDevOpsIcon shows  when upstream is azure devops
	AzureDevOpsIcon properties.Property = "azure_devops_icon"
	// CodeCommit shows  when upstream is aws codecommit
	CodeCommit properties.Property = "codecommit_icon"
	// CodebergIcon shows when upstream is codeberg
	CodebergIcon properties.Property = "codeberg_icon"
	// GitlabIcon shows when upstream is gitlab
	GitlabIcon properties.Property = "gitlab_icon"
	// GitIcon shows when the upstream can't be identified
	GitIcon properties.Property = "git_icon"
	// UntrackedModes list the optional untracked files mode per repo
	UntrackedModes properties.Property = "untracked_modes"
	// IgnoreSubmodules list the optional ignore-submodules mode per repo
	IgnoreSubmodules properties.Property = "ignore_submodules"
	// MappedBranches allows overriding certain branches with an icon/text
	MappedBranches properties.Property = "mapped_branches"

	DETACHED     = "(detached)"
	BRANCHPREFIX = "ref: refs/heads/"
	GITCOMMAND   = "git"

	trueStr = "true"
)

type Rebase struct {
	HEAD    string
	Onto    string
	Current int
	Total   int
}

type Git struct {
	User           *User
	Working        *GitStatus
	Staging        *GitStatus
	commit         *Commit
	Rebase         *Rebase
	RawUpstreamURL string
	Ref            string
	Hash           string
	ShortHash      string
	BranchStatus   string
	Upstream       string
	HEAD           string
	UpstreamIcon   string
	UpstreamURL    string
	scm
	worktreeCount int
	stashCount    int
	Behind        int
	Ahead         int
	IsWorkTree    bool
	Merge         bool
	CherryPick    bool
	Revert        bool
	poshgit       bool
	Detached      bool
	IsBare        bool
	UpstreamGone  bool
}

func (g *Git) Template() string {
	return " {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}{{ if and (.Staging.Changed) (.Working.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }} " //nolint: lll
}

func (g *Git) Enabled() bool {
	g.User = &User{}
	g.Working = &GitStatus{}
	g.Staging = &GitStatus{}

	if !g.shouldDisplay() {
		return false
	}

	fetchUser := g.props.GetBool(FetchUser, false)
	if fetchUser {
		g.setUser()
	}

	g.RepoName = g.repoName()

	if g.IsBare {
		g.getBareRepoInfo()
		return true
	}

	source := g.props.GetString(Source, Cli)
	if source == Pwsh && g.hasPoshGitStatus() {
		return true
	}

	displayStatus := g.props.GetBool(FetchStatus, false)
	if displayStatus && g.shouldIgnoreStatus() {
		displayStatus = false
	}

	if displayStatus {
		g.setGitStatus()
		g.setGitHEADContext()
		g.setBranchStatus()
	} else {
		g.setHEADName()
	}

	if g.props.GetBool(FetchUpstreamIcon, false) {
		g.UpstreamIcon = g.getUpstreamIcon()
	}

	return true
}

func (g *Git) CacheKey() (string, bool) {
	dir, err := g.env.HasParentFilePath(".git", true)
	if err != nil {
		return "", false
	}

	if !g.isRepo(dir) {
		return "", false
	}

	ref := g.fileContent(g.mainSCMDir, "HEAD")
	ref = strings.Replace(ref, "ref: refs/heads/", "", 1)

	// Use the repo clone in the cache key so the mapped path is consistent
	// for primary and worktree repos.
	return fmt.Sprintf("%s@%s", dir.Path, ref), true
}

func (g *Git) Commit() *Commit {
	if g.commit != nil {
		return g.commit
	}

	g.commit = &Commit{
		Author:    &User{},
		Committer: &User{},
		Refs:      &Refs{},
	}

	commitBody := g.getGitCommandOutput("log", "-1", "--pretty=format:an:%an%nae:%ae%ncn:%cn%nce:%ce%nat:%at%nsu:%s%nha:%H%nrf:%D", "--decorate=full")
	splitted := strings.SplitSeq(strings.TrimSpace(commitBody), "\n")
	for line := range splitted {
		line = strings.TrimSpace(line)
		if len(line) <= 3 {
			continue
		}
		anchor := line[:3]
		line = line[3:]
		switch anchor {
		case "an:":
			g.commit.Author.Name = line
		case "ae:":
			g.commit.Author.Email = line
		case "cn:":
			g.commit.Committer.Name = line
		case "ce:":
			g.commit.Committer.Email = line
		case "at:":
			if t, err := strconv.ParseInt(line, 10, 64); err == nil {
				g.commit.Timestamp = time.Unix(t, 0)
			}
		case "su:":
			g.commit.Subject = line
		case "ha:":
			g.commit.Sha = line
		case "rf:":
			refs := strings.SplitSeq(line, ", ")
			for ref := range refs {
				ref = strings.TrimSpace(ref)
				switch {
				case strings.HasSuffix(ref, "HEAD"):
					continue
				case strings.HasPrefix(ref, "tag: refs/tags/"):
					g.commit.Refs.Tags = append(g.commit.Refs.Tags, strings.TrimPrefix(ref, "tag: refs/tags/"))
				case strings.HasPrefix(ref, "refs/remotes/"):
					g.commit.Refs.Remotes = append(g.commit.Refs.Remotes, strings.TrimPrefix(ref, "refs/remotes/"))
				case strings.HasPrefix(ref, "HEAD -> refs/heads/"):
					g.commit.Refs.Heads = append(g.commit.Refs.Heads, strings.TrimPrefix(ref, "HEAD -> refs/heads/"))
				case strings.HasPrefix(ref, "refs/heads/"):
					g.commit.Refs.Heads = append(g.commit.Refs.Heads, strings.TrimPrefix(ref, "refs/heads/"))
				default:
					g.commit.Refs.Heads = append(g.commit.Refs.Heads, ref)
				}
			}
		}
	}
	return g.commit
}

func (g *Git) StashCount() int {
	if g.poshgit || g.stashCount != 0 {
		return g.stashCount
	}

	stashContent := g.fileContent(g.scmDir, "logs/refs/stash")
	if stashContent == "" {
		return 0
	}

	lines := strings.Split(stashContent, "\n")
	g.stashCount = len(lines)
	return g.stashCount
}

func (g *Git) Kraken() string {
	root := g.getGitCommandOutput("rev-list", "--max-parents=0", "HEAD")
	if strings.Contains(root, "\n") {
		root = strings.Split(root, "\n")[0]
	}

	if len(g.RawUpstreamURL) == 0 {
		if len(g.Upstream) == 0 {
			g.Upstream = "origin"
		}
		g.RawUpstreamURL = g.getRemoteURL()
	}

	if len(g.Hash) == 0 {
		g.Hash = g.getGitCommandOutput("rev-parse", "HEAD")
	}

	return fmt.Sprintf("gitkraken://repolink/%s/commit/%s?url=%s", root, g.Hash, url2.QueryEscape(g.RawUpstreamURL))
}

func (g *Git) LatestTag() string {
	return g.getGitCommandOutput("describe", "--tags", "--abbrev=0")
}

func (g *Git) shouldDisplay() bool {
	gitdir, err := g.env.HasParentFilePath(".git", true)
	if err != nil {
		return false
	}

	if g.props.GetBool(FetchBareInfo, false) {
		g.IsBare = g.isBareRepo(gitdir)
	}

	if !g.hasCommand(GITCOMMAND) {
		return false
	}

	return g.isRepo(gitdir)
}

func (g *Git) isRepo(gitdir *runtime.FileInfo) bool {
	g.setDir(gitdir.Path)

	if !gitdir.IsDir {
		if g.hasWorktree(gitdir) {
			g.repoRootDir = g.convertToWindowsPath(g.repoRootDir)
			return true
		}

		return false
	}

	g.mainSCMDir = gitdir.Path
	g.scmDir = gitdir.Path
	// convert the worktree file path to a windows one when in a WSL shared folder
	g.repoRootDir = strings.TrimSuffix(g.convertToWindowsPath(gitdir.Path), "/.git")
	return true
}

func (g *Git) setUser() {
	g.User.Name = g.getGitCommandOutput("config", "user.name")
	g.User.Email = g.getGitCommandOutput("config", "user.email")
}

func (g *Git) isBareRepo(gitDir *runtime.FileInfo) bool {
	defer log.Trace(time.Now())

	if gitDir.IsDir {
		g.mainSCMDir = gitDir.Path
	} else {
		content := g.fileContent(gitDir.ParentFolder, ".git")
		dir := strings.TrimPrefix(content, "gitdir: ")
		g.mainSCMDir = filepath.Join(gitDir.ParentFolder, dir)
	}

	configData := g.fileContent(g.mainSCMDir, "config")
	if len(configData) == 0 {
		log.Debug("Git config file not found, not a bare repo")
		return false
	}

	cfg, err := ini.Load([]byte(configData))
	if err != nil {
		log.Error(err)
		return false
	}

	coreSection := cfg.Section("core")
	if coreSection == nil {
		log.Debug("Git core section not found, not a bare repo")
		return false
	}

	bare := coreSection.Key("bare").String()

	return bare == trueStr
}

func (g *Git) getBareRepoInfo() {
	head := g.fileContent(g.mainSCMDir, "HEAD")
	branchIcon := g.props.GetString(BranchIcon, "\uE0A0")
	g.Ref = strings.Replace(head, "ref: refs/heads/", "", 1)
	g.HEAD = fmt.Sprintf("%s%s", branchIcon, g.formatBranch(g.Ref))
	if !g.props.GetBool(FetchUpstreamIcon, false) {
		return
	}

	g.Upstream = g.getGitCommandOutput("remote")
	if len(g.Upstream) != 0 {
		g.UpstreamIcon = g.getUpstreamIcon()
	}
}

func (g *Git) setDir(dir string) {
	dir = path.ReplaceHomeDirPrefixWithTilde(dir) // align with template PWD
	if g.env.GOOS() == runtime.WINDOWS {
		g.Dir = strings.TrimSuffix(dir, `\.git`)
		return
	}

	g.Dir = strings.TrimSuffix(dir, "/.git")
}

func (g *Git) hasWorktree(gitdir *runtime.FileInfo) bool {
	g.scmDir = gitdir.Path
	content := g.env.FileContent(gitdir.Path)
	content = strings.Trim(content, " \r\n")
	matches := regex.FindNamedRegexMatch(`^gitdir: (?P<dir>.*)$`, content)

	if len(matches) == 0 {
		log.Debug("no matches found, directory isn't a worktree")
		return false
	}

	// if we open a worktree file in a WSL shared folder, we have to convert it back
	// to the mounted path
	g.mainSCMDir = g.convertToLinuxPath(matches["dir"])

	// in worktrees, the path looks like this: gitdir: path/.git/worktrees/branch
	// scmDir needs to become path/.git
	// repoRootDir needs to become path
	worktreeIndex := strings.LastIndex(g.mainSCMDir, "/worktrees/")

	// in submodules, the path looks like this: gitdir: ../.git/modules/test-submodule
	// we need the parent folder to detect where the real .git folder is
	if strings.Contains(g.mainSCMDir, "/modules/") {
		g.scmDir = resolveGitPath(gitdir.ParentFolder, g.mainSCMDir)
		// this might be both a worktree and a submodule, where the path would look like
		// this: path/.git/modules/module/path/worktrees/location. We cannot distinguish
		// between worktree and a module path containing the word 'worktree,' however.
		worktreeIndex = strings.LastIndex(g.scmDir, "/worktrees/")
		if worktreeIndex > -1 && g.env.HasFilesInDir(g.scmDir, "gitdir") {
			gitDir := filepath.Join(g.scmDir, "gitdir")
			realGitFolder := g.env.FileContent(gitDir)
			g.repoRootDir = strings.TrimSuffix(realGitFolder, ".git\n")
			g.scmDir = g.scmDir[:worktreeIndex]
			g.mainSCMDir = g.scmDir
			g.IsWorkTree = true
			return true
		}

		g.repoRootDir = g.scmDir
		g.mainSCMDir = g.scmDir
		return true
	}

	// convert to absolute path for worktrees only
	if strings.HasPrefix(g.mainSCMDir, "..") {
		g.mainSCMDir = filepath.Join(gitdir.ParentFolder, g.mainSCMDir)
	}

	if worktreeIndex > -1 {
		gitDir := filepath.Join(g.mainSCMDir, "gitdir")
		g.scmDir = g.mainSCMDir[:worktreeIndex]
		gitDirContent := g.env.FileContent(gitDir)
		g.repoRootDir = strings.TrimSuffix(gitDirContent, ".git\n")
		g.IsWorkTree = true
		return true
	}

	// check for separate git folder(--separate-git-dir)
	// check if the folder contains a HEAD file
	if g.env.HasFilesInDir(g.mainSCMDir, "HEAD") {
		gitFolder := strings.TrimSuffix(g.scmDir, ".git")
		g.scmDir = g.mainSCMDir
		g.mainSCMDir = gitFolder
		g.repoRootDir = gitFolder
		return true
	}

	return false
}

func (g *Git) shouldIgnoreStatus() bool {
	list := g.props.GetStringArray(IgnoreStatus, []string{})
	return g.env.DirMatchesOneOf(g.repoRootDir, list)
}

func (g *Git) setBranchStatus() {
	getBranchStatus := func() string {
		if g.Ahead > 0 && g.Behind > 0 {
			return fmt.Sprintf("%s%d %s%d", g.props.GetString(BranchAheadIcon, "\u2191"), g.Ahead, g.props.GetString(BranchBehindIcon, "\u2193"), g.Behind)
		}
		if g.Ahead > 0 {
			return fmt.Sprintf("%s%d", g.props.GetString(BranchAheadIcon, "\u2191"), g.Ahead)
		}
		if g.Behind > 0 {
			return fmt.Sprintf("%s%d", g.props.GetString(BranchBehindIcon, "\u2193"), g.Behind)
		}
		if g.UpstreamGone {
			return g.props.GetString(BranchGoneIcon, "\u2262")
		}
		if g.Behind == 0 && g.Ahead == 0 && g.Upstream != "" {
			return g.props.GetString(BranchIdenticalIcon, "\u2261")
		}
		return ""
	}
	g.BranchStatus = getBranchStatus()
}

func (g *Git) cleanUpstreamURL(url string) string {
	// Azure DevOps
	if strings.Contains(url, "dev.azure.com") {
		match := regex.FindNamedRegexMatch(`^.*@(ssh.)?dev\.azure\.com(:v3)?/(?P<ORGANIZATION>[A-Za-z0-9_-]+)/(?P<PROJECT>[A-Za-z0-9_-]+)/(_git/)?(?P<REPOSITORY>[A-Za-z0-9_-]+)$`, url)
		if len(match) == 4 {
			return fmt.Sprintf("https://dev.azure.com/%s/%s/_git/%s", match["ORGANIZATION"], match["PROJECT"], match["REPOSITORY"])
		}
	}

	if strings.HasPrefix(url, "http") {
		return url
	}

	// /path/to/repo.git/
	match := regex.FindNamedRegexMatch(`^(?P<URL>[a-z0-9./]+)$`, url)
	if len(match) != 0 {
		url := strings.Trim(match["URL"], "/")
		url = strings.TrimSuffix(url, ".git")
		return fmt.Sprintf("https://%s", strings.TrimPrefix(url, "/"))
	}

	// ssh://user@host.xz:1234/path/to/repo.git/
	match = regex.FindNamedRegexMatch(`(ssh|ftp|git|rsync)://(.*@)?(?P<URL>[a-z0-9.-]+)(:[0-9]{4})?/(?P<PATH>.*).git`, url)
	if len(match) == 0 {
		// host.xz:/path/to/repo.git/
		match = regex.FindNamedRegexMatch(`^(?P<URL>[a-z0-9.-]+):(?P<PATH>[\w.\-~/@]+)$`, url)
	}

	if len(match) != 0 {
		repoPath := strings.Trim(match["PATH"], "/")
		repoPath = strings.TrimSuffix(repoPath, ".git")
		return fmt.Sprintf("https://%s/%s", match["URL"], repoPath)
	}

	// codecommit::region-identifier-id://repo-name
	match = regex.FindNamedRegexMatch(`codecommit::(?P<URL>[a-z0-9-]+)://(?P<PATH>[\w\.@\:/\-~]+)`, url)
	if len(match) != 0 {
		return fmt.Sprintf("https://%s.console.aws.amazon.com/codesuite/codecommit/repositories/%s/browse?region=%s", match["URL"], match["PATH"], match["URL"])
	}

	// user@host.xz:/path/to/repo.git
	match = regex.FindNamedRegexMatch(`.*@(?P<URL>.*):(?P<PATH>.*)`, url)
	if len(match) == 0 {
		return ""
	}

	return fmt.Sprintf("https://%s/%s", match["URL"], strings.TrimSuffix(match["PATH"], ".git"))
}

func (g *Git) getUpstreamIcon() string {
	g.RawUpstreamURL = g.getRemoteURL()
	if len(g.RawUpstreamURL) == 0 {
		return ""
	}

	g.UpstreamURL = g.cleanUpstreamURL(g.RawUpstreamURL)

	// allow overrides first
	custom := g.props.GetKeyValueMap(UpstreamIcons, map[string]string{})
	for key, value := range custom {
		if strings.Contains(g.UpstreamURL, key) {
			return value
		}
	}

	defaults := map[string]struct {
		Icon    properties.Property
		Default string
	}{
		"github":           {GithubIcon, "\uF408"},
		"gitlab":           {GitlabIcon, "\uF296"},
		"bitbucket":        {BitbucketIcon, "\uF171"},
		"dev.azure.com":    {AzureDevOpsIcon, "\uEBE8"},
		"visualstudio.com": {AzureDevOpsIcon, "\uEBE8"},
		"codecommit":       {CodeCommit, "\uF270"},
		"codeberg":         {CodebergIcon, "\uF330"},
	}
	for key, value := range defaults {
		if strings.Contains(g.UpstreamURL, key) {
			return g.props.GetString(value.Icon, value.Default)
		}
	}
	return g.props.GetString(GitIcon, "\uE5FB ")
}

func (g *Git) setGitStatus() {
	addToStatus := func(status string) {
		const UNTRACKED = "?"
		if strings.HasPrefix(status, UNTRACKED) {
			g.Working.add(UNTRACKED)
			return
		}
		if len(status) <= 4 {
			return
		}

		// map conflicts separately when in a merge or rebase
		if g.Rebase != nil || g.Merge {
			conflict := "AA"
			full := status[2:4]
			if full == conflict {
				g.Staging.add(conflict)
				return
			}
		}

		workingCode := status[3:4]
		stagingCode := status[2:3]
		g.Working.add(workingCode)
		g.Staging.add(stagingCode)
	}

	const (
		HASH         = "# branch.oid "
		REF          = "# branch.head "
		UPSTREAM     = "# branch.upstream "
		BRANCHSTATUS = "# branch.ab "
	)

	// firstly assume that upstream is gone
	g.UpstreamGone = true
	statusFormats := g.props.GetKeyValueMap(StatusFormats, map[string]string{})

	g.Working = &GitStatus{ScmStatus: ScmStatus{Formats: statusFormats}}
	g.Staging = &GitStatus{ScmStatus: ScmStatus{Formats: statusFormats}}

	untrackedMode := g.getUntrackedFilesMode()
	args := []string{"status", untrackedMode, "--branch", "--porcelain=2"}
	ignoreSubmodulesMode := g.getIgnoreSubmodulesMode()
	if len(ignoreSubmodulesMode) > 0 {
		args = append(args, ignoreSubmodulesMode)
	}

	output := g.getGitCommandOutput(args...)
	for line := range strings.SplitSeq(output, "\n") {
		if strings.HasPrefix(line, HASH) && len(line) >= len(HASH)+7 {
			g.ShortHash = line[len(HASH) : len(HASH)+7]
			g.Hash = line[len(HASH):]
			continue
		}

		if strings.HasPrefix(line, REF) && len(line) > len(REF) {
			g.Ref = line[len(REF):]
			continue
		}

		if strings.HasPrefix(line, UPSTREAM) && len(line) > len(UPSTREAM) {
			// status reports upstream, but upstream may be gone (must check BRANCHSTATUS)
			g.Upstream = line[len(UPSTREAM):]
			g.UpstreamGone = true
			continue
		}

		if strings.HasPrefix(line, BRANCHSTATUS) && len(line) > len(BRANCHSTATUS) {
			status := line[len(BRANCHSTATUS):]
			splitted := strings.Split(status, " ")
			if len(splitted) >= 2 {
				g.Ahead, _ = strconv.Atoi(splitted[0])
				behind, _ := strconv.Atoi(splitted[1])
				g.Behind = -behind
			}
			// confirmed: upstream exists
			g.UpstreamGone = false
			continue
		}

		addToStatus(line)
	}
}

func (g *Git) getGitCommandOutput(args ...string) string {
	if len(g.command) == 0 {
		return ""
	}

	args = append([]string{"-C", g.repoRootDir, "--no-optional-locks", "-c", "core.quotepath=false", "-c", "color.status=false"}, args...)
	val, err := g.env.RunCommand(g.command, args...)
	if err != nil {
		return ""
	}

	return val
}

func (g *Git) setGitHEADContext() {
	branchIcon := g.props.GetString(BranchIcon, "\uE0A0")
	if g.Ref == DETACHED {
		g.Detached = true
		g.setHEADName()
	} else {
		head := g.formatBranch(g.Ref)
		g.HEAD = fmt.Sprintf("%s%s", branchIcon, head)
	}

	formatDetached := func() string {
		if g.Ref == DETACHED {
			return fmt.Sprintf("%sdetached at %s", branchIcon, g.HEAD)
		}
		return g.HEAD
	}

	getPrettyNameOrigin := func(file string) string {
		var origin string
		head := g.fileContent(g.mainSCMDir, file)
		if head == "detached HEAD" {
			origin = formatDetached()
		} else {
			head = strings.Replace(head, "refs/heads/", "", 1)
			origin = branchIcon + g.formatBranch(head)
		}
		return origin
	}

	parseInt := func(file string) int {
		val, _ := strconv.Atoi(g.fileContent(g.mainSCMDir, file))
		return val
	}

	if g.env.HasFolder(g.mainSCMDir + "/rebase-merge") {
		head := getPrettyNameOrigin("rebase-merge/head-name")
		onto := g.getGitRefFileSymbolicName("rebase-merge/onto")
		onto = g.formatBranch(onto)
		current := parseInt("rebase-merge/msgnum")
		total := parseInt("rebase-merge/end")
		icon := g.props.GetString(RebaseIcon, "\uE728 ")

		g.Rebase = &Rebase{
			HEAD:    head,
			Onto:    onto,
			Current: current,
			Total:   total,
		}

		g.HEAD = fmt.Sprintf("%s%s onto %s%s (%d/%d) at %s", icon, head, branchIcon, onto, current, total, g.HEAD)
		return
	}

	if g.env.HasFolder(g.mainSCMDir + "/rebase-apply") {
		head := getPrettyNameOrigin("rebase-apply/head-name")
		current := parseInt("rebase-apply/next")
		total := parseInt("rebase-apply/last")
		icon := g.props.GetString(RebaseIcon, "\uE728 ")

		g.Rebase = &Rebase{
			HEAD:    head,
			Current: current,
			Total:   total,
		}

		g.HEAD = fmt.Sprintf("%s%s (%d/%d) at %s", icon, head, current, total, g.HEAD)
		return
	}

	// merge
	commitIcon := g.props.GetString(CommitIcon, "\uF417")

	if g.hasGitFile("MERGE_MSG") {
		g.Merge = true
		icon := g.props.GetString(MergeIcon, "\uE727 ")
		mergeContext := g.fileContent(g.mainSCMDir, "MERGE_MSG")
		matches := regex.FindNamedRegexMatch(`Merge (remote-tracking )?(?P<type>branch|commit|tag) '(?P<theirs>.*)'`, mergeContext)
		// head := g.getGitRefFileSymbolicName("ORIG_HEAD")
		if matches != nil && matches["theirs"] != "" {
			var headIcon, theirs string
			switch matches["type"] {
			case "tag":
				headIcon = g.props.GetString(TagIcon, "\uF412")
				theirs = matches["theirs"]
			case "commit":
				headIcon = commitIcon
				theirs = g.formatSHA(matches["theirs"])
			default:
				headIcon = branchIcon
				theirs = g.formatBranch(matches["theirs"])
			}
			g.HEAD = fmt.Sprintf("%s%s%s into %s", icon, headIcon, theirs, formatDetached())
			return
		}
	}

	// sequencer status
	// see if a cherry-pick or revert is in progress, if the user has committed a
	// conflict resolution with 'git commit' in the middle of a sequence of picks or
	// reverts then CHERRY_PICK_HEAD/REVERT_HEAD will not exist so we have to read
	// the todo file.
	if g.hasGitFile("CHERRY_PICK_HEAD") {
		g.CherryPick = true
		sha := g.fileContent(g.mainSCMDir, "CHERRY_PICK_HEAD")
		cherry := g.props.GetString(CherryPickIcon, "\uE29B ")
		g.HEAD = fmt.Sprintf("%s%s%s onto %s", cherry, commitIcon, g.formatSHA(sha), formatDetached())
		return
	}

	if g.hasGitFile("REVERT_HEAD") {
		g.Revert = true
		sha := g.fileContent(g.mainSCMDir, "REVERT_HEAD")
		revert := g.props.GetString(RevertIcon, "\uF0E2 ")
		g.HEAD = fmt.Sprintf("%s%s%s onto %s", revert, commitIcon, g.formatSHA(sha), formatDetached())
		return
	}

	if g.hasGitFile("sequencer/todo") {
		todo := g.fileContent(g.mainSCMDir, "sequencer/todo")
		matches := regex.FindNamedRegexMatch(`^(?P<action>p|pick|revert)\s+(?P<sha>\S+)`, todo)
		if matches != nil && matches["sha"] != "" {
			action := matches["action"]
			sha := matches["sha"]
			switch action {
			case "p", "pick":
				g.CherryPick = true
				cherry := g.props.GetString(CherryPickIcon, "\uE29B ")
				g.HEAD = fmt.Sprintf("%s%s%s onto %s", cherry, commitIcon, g.formatSHA(sha), formatDetached())
				return
			case "revert":
				g.Revert = true
				revert := g.props.GetString(RevertIcon, "\uF0E2 ")
				g.HEAD = fmt.Sprintf("%s%s%s onto %s", revert, commitIcon, g.formatSHA(sha), formatDetached())
				return
			}
		}
	}

	g.HEAD = formatDetached()
}

func (g *Git) formatSHA(sha string) string {
	if len(sha) <= 7 {
		return sha
	}
	return sha[0:7]
}

func (g *Git) hasGitFile(file string) bool {
	return g.env.HasFilesInDir(g.mainSCMDir, file)
}

func (g *Git) getGitRefFileSymbolicName(refFile string) string {
	ref := g.fileContent(g.mainSCMDir, refFile)
	return g.getGitCommandOutput("name-rev", "--name-only", "--exclude=tags/*", ref)
}

func (g *Git) setHEADName() {
	// we didn't fetch status, fallback to parsing the HEAD file
	if len(g.ShortHash) == 0 {
		HEADRef := g.fileContent(g.mainSCMDir, "HEAD")
		g.Detached = !strings.HasPrefix(HEADRef, "ref:")
		if after, ok := strings.CutPrefix(HEADRef, BRANCHPREFIX); ok {
			branchName := after
			g.Ref = branchName
			g.HEAD = fmt.Sprintf("%s%s", g.props.GetString(BranchIcon, "\uE0A0"), g.formatBranch(branchName))
			return
		}
		// no branch, points to commit
		if len(HEADRef) >= 7 {
			g.ShortHash = HEADRef[0:7]
			g.Hash = HEADRef[0:]
			g.Ref = g.ShortHash
		}
	}

	// check for tag
	tagName := g.getGitCommandOutput("describe", "--tags", "--exact-match")
	if len(tagName) > 0 {
		g.Ref = tagName
		g.HEAD = fmt.Sprintf("%s%s", g.props.GetString(TagIcon, "\uF412"), tagName)
		return
	}

	// fallback to commit
	if len(g.ShortHash) == 0 {
		g.HEAD = g.props.GetString(NoCommitsIcon, "\uF594 ")
		return
	}

	g.HEAD = fmt.Sprintf("%s%s", g.props.GetString(CommitIcon, "\uF417"), g.ShortHash)
}

func (g *Git) WorktreeCount() int {
	if g.worktreeCount > 0 {
		return g.worktreeCount
	}

	worktreesFolder := filepath.Join(g.mainSCMDir, "worktrees")

	if !g.env.HasFolder(worktreesFolder) {
		return 0
	}

	worktreeFolders := g.env.LsDir(worktreesFolder)
	var count int
	for _, folder := range worktreeFolders {
		if folder.IsDir() {
			count++
		}
	}

	return count
}

func (g *Git) getRemoteURL() string {
	upstream := regex.ReplaceAllString("/.*", g.Upstream, "")
	if len(upstream) == 0 {
		upstream = "origin"
	}

	cfg, err := ini.Load(g.scmDir + "/config")
	if err != nil {
		return g.getGitCommandOutput("remote", "get-url", upstream)
	}

	url := cfg.Section("remote \"" + upstream + "\"").Key("url").String()
	if len(url) != 0 {
		log.Debug("remote url found in config:", url)
		return url
	}

	return g.getGitCommandOutput("remote", "get-url", upstream)
}

func (g *Git) Remotes() map[string]string {
	var remotes = make(map[string]string)

	location := filepath.Join(g.scmDir, "config")
	config := g.env.FileContent(location)
	cfg, err := ini.Load([]byte(config))
	if err != nil {
		return remotes
	}

	for _, section := range cfg.Sections() {
		if !strings.HasPrefix(section.Name(), "remote ") {
			continue
		}

		name := strings.TrimPrefix(section.Name(), "remote ")
		name = strings.Trim(name, "\"")
		url := section.Key("url").String()
		url = g.cleanUpstreamURL(url)
		remotes[name] = url
	}
	return remotes
}

func (g *Git) getUntrackedFilesMode() string {
	return g.getSwitchMode(UntrackedModes, "-u", "normal")
}

func (g *Git) getIgnoreSubmodulesMode() string {
	return g.getSwitchMode(IgnoreSubmodules, "--ignore-submodules=", "")
}

func (g *Git) getSwitchMode(property properties.Property, gitSwitch, mode string) string {
	repoModes := g.props.GetKeyValueMap(property, map[string]string{})
	// make use of a wildcard for all repo's
	if val := repoModes["*"]; len(val) != 0 {
		mode = val
	}
	// get the specific repo mode
	if val := repoModes[g.repoRootDir]; len(val) != 0 {
		mode = val
	}
	if len(mode) == 0 {
		return ""
	}
	return fmt.Sprintf("%s%s", gitSwitch, mode)
}

func (g *Git) repoName() string {
	if !g.IsWorkTree {
		return path.Base(g.convertToLinuxPath(g.repoRootDir))
	}

	ind := strings.LastIndex(g.mainSCMDir, ".git/worktrees")
	if ind > -1 {
		return path.Base(g.mainSCMDir[:ind])
	}

	return ""
}



================================================
FILE: src/segments/git_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

const (
	branchName      = "main"
	dotGit          = "dev/.git"
	dotGitSubmodule = "dev/.git/modules/submodule"
)

func TestEnabledGitNotFound(t *testing.T) {
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasParentFilePath", ".git", true).Return((*runtime.FileInfo)(nil), errors.New("no .git found (mock)"))
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)

	g := &Git{}
	g.Init(properties.Map{}, env)

	assert.False(t, g.Enabled())
}

func TestEnabledInWorkingDirectory(t *testing.T) {
	fileInfo := &runtime.FileInfo{
		Path:         "/dir/hello",
		ParentFolder: "/dir",
		IsDir:        true,
	}
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasCommand", "git").Return(true)
	env.On("GOOS").Return("")
	env.On("FileContent", "/dir/hello/HEAD").Return("")
	env.MockGitCommand(fileInfo.Path, "", "describe", "--tags", "--exact-match")
	env.On("IsWsl").Return(false)
	env.On("HasParentFilePath", ".git", true).Return(fileInfo, nil)
	env.On("PathSeparator").Return("/")
	env.On("Home").Return(poshHome)
	env.On("Getenv", poshGitEnv).Return("")
	env.On("DirMatchesOneOf", testify_.Anything, testify_.Anything).Return(false)

	g := &Git{}
	g.Init(properties.Map{}, env)

	assert.True(t, g.Enabled())
	assert.Equal(t, fileInfo.Path, g.mainSCMDir)
}

func TestResolveEmptyGitPath(t *testing.T) {
	base := "base"
	assert.Equal(t, base, resolveGitPath(base, ""))
}

func TestEnabledInWorktree(t *testing.T) {
	cases := []struct {
		Case                  string
		WorkingFolder         string
		WorkingFolderAddon    string
		WorkingFolderContent  string
		ExpectedRealFolder    string
		ExpectedWorkingFolder string
		ExpectedRootFolder    string
		ExpectedEnabled       bool
	}{
		{
			Case:                  "worktree",
			ExpectedEnabled:       true,
			WorkingFolder:         TestRootPath + "dev/.git/worktrees/folder_worktree",
			WorkingFolderAddon:    "gitdir",
			WorkingFolderContent:  TestRootPath + "dev/worktree.git\n",
			ExpectedWorkingFolder: TestRootPath + "dev/.git/worktrees/folder_worktree",
			ExpectedRealFolder:    TestRootPath + "dev/worktree",
			ExpectedRootFolder:    TestRootPath + dotGit,
		},
		{
			Case:                  "submodule",
			ExpectedEnabled:       true,
			WorkingFolder:         "./.git/modules/submodule",
			ExpectedWorkingFolder: TestRootPath + dotGitSubmodule,
			ExpectedRealFolder:    TestRootPath + dotGitSubmodule,
			ExpectedRootFolder:    TestRootPath + dotGitSubmodule,
		},
		{
			Case:                  "submodule with root working folder",
			ExpectedEnabled:       true,
			WorkingFolder:         TestRootPath + dotGitSubmodule,
			ExpectedWorkingFolder: TestRootPath + dotGitSubmodule,
			ExpectedRealFolder:    TestRootPath + dotGitSubmodule,
			ExpectedRootFolder:    TestRootPath + dotGitSubmodule,
		},
		{
			Case:                  "submodule with worktrees",
			ExpectedEnabled:       true,
			WorkingFolder:         TestRootPath + "dev/.git/modules/module/path/worktrees/location",
			WorkingFolderAddon:    "gitdir",
			WorkingFolderContent:  TestRootPath + "dev/worktree.git\n",
			ExpectedWorkingFolder: TestRootPath + "dev/.git/modules/module/path",
			ExpectedRealFolder:    TestRootPath + "dev/worktree",
			ExpectedRootFolder:    TestRootPath + "dev/.git/modules/module/path",
		},
		{
			Case:                  "separate git dir",
			ExpectedEnabled:       true,
			WorkingFolder:         TestRootPath + "dev/separate/.git/posh",
			ExpectedWorkingFolder: TestRootPath + "dev/",
			ExpectedRealFolder:    TestRootPath + "dev/",
			ExpectedRootFolder:    TestRootPath + "dev/separate/.git/posh",
		},
	}
	fileInfo := &runtime.FileInfo{
		Path:         TestRootPath + dotGit,
		ParentFolder: TestRootPath + "dev",
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("FileContent", TestRootPath+dotGit).Return(fmt.Sprintf("gitdir: %s", tc.WorkingFolder))
		env.On("FileContent", filepath.Join(tc.WorkingFolder, tc.WorkingFolderAddon)).Return(tc.WorkingFolderContent)
		env.On("HasFilesInDir", tc.WorkingFolder, tc.WorkingFolderAddon).Return(true)
		env.On("HasFilesInDir", tc.WorkingFolder, "HEAD").Return(true)
		env.On("PathSeparator").Return(string(os.PathSeparator))

		g := &Git{}
		g.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, g.hasWorktree(fileInfo), tc.Case)
		assert.Equal(t, tc.ExpectedWorkingFolder, g.mainSCMDir, tc.Case)
		assert.Equal(t, tc.ExpectedRealFolder, g.repoRootDir, tc.Case)
		assert.Equal(t, tc.ExpectedRootFolder, g.scmDir, tc.Case)
	}
}

func TestEnabledInBareRepo(t *testing.T) {
	cases := []struct {
		Case   string
		HEAD   string
		IsBare bool
	}{
		{
			Case:   "Bare repo on main",
			IsBare: true,
			HEAD:   "ref: refs/heads/main",
		},
		{
			Case:   "Not a bare repo",
			HEAD:   "ref: refs/heads/main",
			IsBare: false,
		},
	}
	for _, tc := range cases {
		path := "git"
		env := new(mock.Environment)
		env.On("InWSLSharedDrive").Return(false)
		env.On("GOOS").Return("")
		env.On("HasCommand", "git").Return(true)

		configData := fmt.Sprintf(`[core]
		bare = %s`, strconv.FormatBool(tc.IsBare))

		env.On("HasParentFilePath", ".git", true).Return(&runtime.FileInfo{IsDir: true, Path: path}, nil)
		env.On("FileContent", "git/config").Return(configData)
		env.On("FileContent", "git/HEAD").Return(tc.HEAD)

		props := properties.Map{
			FetchBareInfo: true,
		}

		g := &Git{}
		g.Init(props, env)

		_ = g.Enabled()

		assert.Equal(t, tc.IsBare, g.IsBare, tc.Case)
	}
}

func TestGetGitOutputForCommand(t *testing.T) {
	args := []string{"-C", "", "--no-optional-locks", "-c", "core.quotepath=false", "-c", "color.status=false"}
	commandArgs := []string{"symbolic-ref", "--short", "HEAD"}
	want := "je suis le output"
	env := new(mock.Environment)
	env.On("IsWsl").Return(false)
	env.On("RunCommand", "git", append(args, commandArgs...)).Return(want, nil)
	env.On("GOOS").Return("unix")

	g := &Git{
		scm: scm{
			command: GITCOMMAND,
		},
	}
	g.Init(properties.Map{}, env)

	got := g.getGitCommandOutput(commandArgs...)
	assert.Equal(t, want, got)
}

func TestSetGitHEADContextClean(t *testing.T) {
	cases := []struct {
		Ours        string
		Expected    string
		Ref         string
		Case        string
		Total       string
		Step        string
		Theirs      string
		RebaseMerge bool
		Sequencer   bool
		Revert      bool
		CherryPick  bool
		Merge       bool
		RebaseApply bool
	}{
		{Case: "detached on commit", Ref: DETACHED, Expected: "branch detached at commit 1234567"},
		{Case: "not detached, clean", Ref: "main", Expected: "branch main"},
		{
			Case:        "rebase merge",
			Ref:         DETACHED,
			Expected:    "rebase branch origin/main onto branch main (1/2) at commit 1234567",
			RebaseMerge: true,
			Ours:        "refs/heads/origin/main",
			Theirs:      "main",
			Step:        "1",
			Total:       "2",
		},
		{
			Case:        "rebase apply",
			Ref:         DETACHED,
			Expected:    "rebase branch origin/main (1/2) at commit 1234567",
			RebaseApply: true,
			Ours:        "refs/heads/origin/main",
			Step:        "1",
			Total:       "2",
		},
		{
			Case:     "merge branch",
			Ref:      "main",
			Expected: "merge branch feat-1 into branch main",
			Merge:    true,
			Theirs:   "branch 'feat-1'",
			Ours:     "main",
		},
		{
			Case:     "merge commit",
			Ref:      "main",
			Expected: "merge commit 1234567 into branch main",
			Merge:    true,
			Theirs:   "commit '123456789101112'",
			Ours:     "main",
		},
		{
			Case:     "merge tag",
			Ref:      "main",
			Expected: "merge tag 1.2.4 into branch main",
			Merge:    true,
			Theirs:   "tag '1.2.4'",
			Ours:     "main",
		},
		{
			Case:       "cherry pick",
			Ref:        "main",
			Expected:   "pick commit 1234567 onto branch main",
			CherryPick: true,
			Theirs:     "123456789101012",
			Ours:       "main",
		},
		{
			Case:     "revert",
			Ref:      "main",
			Expected: "revert commit 1234567 onto branch main",
			Revert:   true,
			Theirs:   "123456789101012",
			Ours:     "main",
		},
		{
			Case:      "sequencer cherry",
			Ref:       "main",
			Expected:  "pick commit 1234567 onto branch main",
			Sequencer: true,
			Theirs:    "pick 123456789101012",
			Ours:      "main",
		},
		{
			Case:      "sequencer cherry p",
			Ref:       "main",
			Expected:  "pick commit 1234567 onto branch main",
			Sequencer: true,
			Theirs:    "p 123456789101012",
			Ours:      "main",
		},
		{
			Case:      "sequencer revert",
			Ref:       "main",
			Expected:  "revert commit 1234567 onto branch main",
			Sequencer: true,
			Theirs:    "revert 123456789101012",
			Ours:      "main",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("InWSLSharedDrive").Return(false)
		env.On("GOOS").Return("unix")
		env.On("IsWsl").Return(false)
		env.MockGitCommand("", "", "describe", "--tags", "--exact-match")
		env.MockGitCommand("", tc.Theirs, "name-rev", "--name-only", "--exclude=tags/*", tc.Theirs)
		env.MockGitCommand("", tc.Ours, "name-rev", "--name-only", "--exclude=tags/*", tc.Ours)
		// rebase merge
		env.On("HasFolder", "/rebase-merge").Return(tc.RebaseMerge)
		env.On("FileContent", "/rebase-merge/head-name").Return(tc.Ours)
		env.On("FileContent", "/rebase-merge/onto").Return(tc.Theirs)
		env.On("FileContent", "/rebase-merge/msgnum").Return(tc.Step)
		env.On("FileContent", "/rebase-merge/end").Return(tc.Total)
		// rebase apply
		env.On("HasFolder", "/rebase-apply").Return(tc.RebaseApply)
		env.On("FileContent", "/rebase-apply/head-name").Return(tc.Ours)
		env.On("FileContent", "/rebase-apply/next").Return(tc.Step)
		env.On("FileContent", "/rebase-apply/last").Return(tc.Total)
		// merge
		env.On("HasFilesInDir", "", "MERGE_MSG").Return(tc.Merge)
		env.On("FileContent", "/MERGE_MSG").Return(fmt.Sprintf("Merge %s into %s", tc.Theirs, tc.Ours))
		// cherry pick
		env.On("HasFilesInDir", "", "CHERRY_PICK_HEAD").Return(tc.CherryPick)
		env.On("FileContent", "/CHERRY_PICK_HEAD").Return(tc.Theirs)
		// revert
		env.On("HasFilesInDir", "", "REVERT_HEAD").Return(tc.Revert)
		env.On("FileContent", "/REVERT_HEAD").Return(tc.Theirs)
		// sequencer
		env.On("HasFilesInDir", "", "sequencer/todo").Return(tc.Sequencer)
		env.On("FileContent", "/sequencer/todo").Return(tc.Theirs)

		props := properties.Map{
			BranchIcon:     "branch ",
			CommitIcon:     "commit ",
			RebaseIcon:     "rebase ",
			MergeIcon:      "merge ",
			CherryPickIcon: "pick ",
			TagIcon:        "tag ",
			RevertIcon:     "revert ",
		}

		g := &Git{
			scm: scm{
				command: GITCOMMAND,
			},
			ShortHash: "1234567",
			Ref:       tc.Ref,
		}
		g.Init(props, env)

		g.setGitHEADContext()
		assert.Equal(t, tc.Expected, g.HEAD, tc.Case)
	}
}

func TestSetPrettyHEADName(t *testing.T) {
	cases := []struct {
		Case      string
		Expected  string
		ShortHash string
		Tag       string
		HEAD      string
	}{
		{Case: "main", Expected: "branch main", HEAD: BRANCHPREFIX + "main"},
		{Case: "no hash", Expected: "commit 1234567", HEAD: "12345678910"},
		{Case: "hash on tag", ShortHash: "132312322321", Expected: "tag tag-1", HEAD: "12345678910", Tag: "tag-1"},
		{Case: "no hash on tag", Expected: "tag tag-1", Tag: "tag-1"},
		{Case: "hash on commit", ShortHash: "1234567", Expected: "commit 1234567"},
		{Case: "no hash on commit", Expected: "commit 1234567", HEAD: "12345678910"},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("FileContent", "/HEAD").Return(tc.HEAD)
		env.On("GOOS").Return("unix")
		env.On("IsWsl").Return(false)
		env.MockGitCommand("", tc.Tag, "describe", "--tags", "--exact-match")

		props := properties.Map{
			BranchIcon: "branch ",
			CommitIcon: "commit ",
			TagIcon:    "tag ",
		}

		g := &Git{
			scm: scm{
				command: GITCOMMAND,
			},
			ShortHash: tc.ShortHash,
		}
		g.Init(props, env)

		g.setHEADName()
		assert.Equal(t, tc.Expected, g.HEAD, tc.Case)
	}
}

func TestSetGitStatus(t *testing.T) {
	cases := []struct {
		ExpectedWorking      *GitStatus
		ExpectedStaging      *GitStatus
		Case                 string
		Output               string
		ExpectedHash         string
		ExpectedRef          string
		ExpectedUpstream     string
		ExpectedAhead        int
		ExpectedBehind       int
		ExpectedUpstreamGone bool
		Rebase               bool
		Merge                bool
	}{
		{
			Case: "all different options on working and staging, no remote",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head rework-git-status
			1 .R N...
			1 .C N...
			1 .M N...
			1 .m N...
			1 .A N...
			1 .D N...
			1 .A N...
			1 .U N...
			1 A. N...
			`,
			ExpectedWorking:      &GitStatus{ScmStatus: ScmStatus{Modified: 4, Added: 2, Deleted: 1, Unmerged: 1}},
			ExpectedStaging:      &GitStatus{ScmStatus: ScmStatus{Added: 1}},
			ExpectedHash:         "1234567",
			ExpectedRef:          "rework-git-status",
			ExpectedUpstreamGone: true,
		},
		{
			Case: "all different options on working and staging, with remote",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head rework-git-status
			# branch.upstream origin/rework-git-status
			# branch.ab +0 -0
			1 .R N...
			1 .C N...
			1 .M N...
			1 .m N...
			1 .A N...
			1 .D N...
			1 .A N...
			1 .U N...
			1 A. N...
			`,
			ExpectedWorking:  &GitStatus{ScmStatus: ScmStatus{Modified: 4, Added: 2, Deleted: 1, Unmerged: 1}},
			ExpectedStaging:  &GitStatus{ScmStatus: ScmStatus{Added: 1}},
			ExpectedUpstream: "origin/rework-git-status",
			ExpectedHash:     "1234567",
			ExpectedRef:      "rework-git-status",
		},
		{
			Case: "remote with equal branch",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head rework-git-status
			# branch.upstream origin/rework-git-status
			# branch.ab +0 -0
			`,
			ExpectedUpstream: "origin/rework-git-status",
			ExpectedHash:     "1234567",
			ExpectedRef:      "rework-git-status",
		},
		{
			Case: "remote with branch status",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head rework-git-status
			# branch.upstream origin/rework-git-status
			# branch.ab +2 -1
			`,
			ExpectedUpstream: "origin/rework-git-status",
			ExpectedHash:     "1234567",
			ExpectedRef:      "rework-git-status",
			ExpectedAhead:    2,
			ExpectedBehind:   1,
		},
		{
			Case: "untracked files",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head main
			# branch.upstream origin/main
			# branch.ab +0 -0
			? q
			? qq
			? qqq
			`,
			ExpectedUpstream: "origin/main",
			ExpectedHash:     "1234567",
			ExpectedRef:      "main",
			ExpectedWorking:  &GitStatus{ScmStatus: ScmStatus{Untracked: 3}},
		},
		{
			Case: "remote branch was deleted",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head branch-is-gone
			# branch.upstream origin/branch-is-gone
			`,
			ExpectedUpstream:     "origin/branch-is-gone",
			ExpectedHash:         "1234567",
			ExpectedRef:          "branch-is-gone",
			ExpectedUpstreamGone: true,
		},
		{
			Case: "rebase with 2 merge conflicts",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head rework-git-status
			# branch.upstream origin/rework-git-status
			# branch.ab +0 -0
			1 AA N...
			1 AA N...
			`,
			ExpectedUpstream: "origin/rework-git-status",
			ExpectedHash:     "1234567",
			ExpectedRef:      "rework-git-status",
			Rebase:           true,
			ExpectedStaging:  &GitStatus{ScmStatus: ScmStatus{Unmerged: 2}},
		},
		{
			Case: "merge with 4 merge conflicts",
			Output: `
			# branch.oid 1234567891011121314
			# branch.head rework-git-status
			# branch.upstream origin/rework-git-status
			# branch.ab +0 -0
			1 AA N...
			1 AA N...
			1 AA N...
			1 AA N...
			`,
			ExpectedUpstream: "origin/rework-git-status",
			ExpectedHash:     "1234567",
			ExpectedRef:      "rework-git-status",
			Merge:            true,
			ExpectedStaging:  &GitStatus{ScmStatus: ScmStatus{Unmerged: 4}},
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return("unix")
		env.On("IsWsl").Return(false)
		env.MockGitCommand("", strings.ReplaceAll(tc.Output, "\t", ""), "status", "-unormal", "--branch", "--porcelain=2")

		g := &Git{
			scm: scm{
				command: GITCOMMAND,
			},
		}
		g.Init(properties.Map{}, env)

		if tc.ExpectedWorking == nil {
			tc.ExpectedWorking = &GitStatus{}
		}

		if tc.ExpectedStaging == nil {
			tc.ExpectedStaging = &GitStatus{}
		}

		if tc.Rebase {
			g.Rebase = &Rebase{}
		}

		g.Merge = tc.Merge
		tc.ExpectedStaging.Formats = map[string]string{}
		tc.ExpectedWorking.Formats = map[string]string{}
		g.setGitStatus()
		assert.Equal(t, tc.ExpectedStaging, g.Staging, tc.Case)
		assert.Equal(t, tc.ExpectedWorking, g.Working, tc.Case)
		assert.Equal(t, tc.ExpectedHash, g.ShortHash, tc.Case)
		assert.Equal(t, tc.ExpectedRef, g.Ref, tc.Case)
		assert.Equal(t, tc.ExpectedUpstream, g.Upstream, tc.Case)
		assert.Equal(t, tc.ExpectedUpstreamGone, g.UpstreamGone, tc.Case)
		assert.Equal(t, tc.ExpectedAhead, g.Ahead, tc.Case)
		assert.Equal(t, tc.ExpectedBehind, g.Behind, tc.Case)
	}
}

func TestGetStashContextZeroEntries(t *testing.T) {
	cases := []struct {
		StashContent string
		Expected     int
	}{
		{Expected: 0, StashContent: ""},
		{Expected: 2, StashContent: "1\n2\n"},
		{Expected: 4, StashContent: "1\n2\n3\n4\n\n"},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("FileContent", "/logs/refs/stash").Return(tc.StashContent)

		g := &Git{
			scm: scm{
				mainSCMDir: "",
			},
		}
		g.Init(properties.Map{}, env)

		got := g.StashCount()
		assert.Equal(t, tc.Expected, got)
	}
}

func TestGitCleanSSHURL(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Upstream string
	}{
		{Case: "regular URL", Expected: "https://src.example.com/user/repo", Upstream: "/src.example.com/user/repo.git"},
		{Case: "domain:path", Expected: "https://host.xz/path/to/repo", Upstream: "host.xz:/path/to/repo.git/"},
		{Case: "ssh with port", Expected: "https://host.xz/path/to/repo", Upstream: "ssh://user@host.xz:1234/path/to/repo.git"},
		{Case: "ssh with port, trailing slash", Expected: "https://host.xz/path/to/repo", Upstream: "ssh://user@host.xz:1234/path/to/repo.git/"},
		{Case: "ssh without port", Expected: "https://host.xz/path/to/repo", Upstream: "ssh://user@host.xz/path/to/repo.git/"},
		{Case: "ssh port, no user", Expected: "https://host.xz/path/to/repo", Upstream: "ssh://host.xz:1234/path/to/repo.git"},
		{Case: "ssh no port, no user", Expected: "https://host.xz/path/to/repo", Upstream: "ssh://host.xz/path/to/repo.git"},
		{Case: "rsync no port, no user", Expected: "https://host.xz/path/to/repo", Upstream: "rsync://host.xz/path/to/repo.git/"},
		{Case: "git no port, no user", Expected: "https://host.xz/path/to/repo", Upstream: "git://host.xz/path/to/repo.git"},
		{Case: "gitea no port, no user", Expected: "https://src.example.com/user/repo", Upstream: "_gitea@src.example.com:user/repo.git"},
		{Case: "git@ with user", Expected: "https://github.com/JanDeDobbeleer/oh-my-posh", Upstream: "git@github.com:JanDeDobbeleer/oh-my-posh"},
		{Case: "unsupported", Upstream: "\\test\\repo.git"},
		{Case: "Azure DevOps, https", Expected: "https://dev.azure.com/posh/oh-my-posh/_git/website", Upstream: "https://posh@dev.azure.com/posh/oh-my-posh/_git/website"},
		{Case: "Azure DevOps, ssh", Expected: "https://dev.azure.com/posh/oh-my-posh/_git/website", Upstream: "git@ssh.dev.azure.com:v3/posh/oh-my-posh/website"},
	}
	for _, tc := range cases {
		g := &Git{}
		upstreamURL := g.cleanUpstreamURL(tc.Upstream)
		assert.Equal(t, tc.Expected, upstreamURL, tc.Case)
	}
}

func TestGitUpstream(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Upstream string
	}{
		{Case: "No upstream", Expected: "", Upstream: ""},
		{Case: "SSH url", Expected: "G", Upstream: "ssh://git@git.my.domain:3001/ADIX7/dotconfig.git"},
		{Case: "Gitea", Expected: "EX", Upstream: "_gitea@src.example.com:user/repo.git"},
		{Case: "GitHub", Expected: "GH", Upstream: "github.com/test"},
		{Case: "Gitlab", Expected: "GL", Upstream: "gitlab.com/test"},
		{Case: "Bitbucket", Expected: "BB", Upstream: "bitbucket.org/test"},
		{Case: "Azure DevOps", Expected: "AD", Upstream: "dev.azure.com/test"},
		{Case: "Azure DevOps Dos", Expected: "AD", Upstream: "test.visualstudio.com"},
		{Case: "CodeCommit", Expected: "AC", Upstream: "codecommit::eu-west-1://test-repository"},
		{Case: "Codeberg", Expected: "CB", Upstream: "codeberg.org:user/repo.git"},
		{Case: "Gitstash", Expected: "G", Upstream: "gitstash.com/test"},
		{Case: "My custom server", Expected: "CU", Upstream: "mycustom.server/test"},
		{Case: "GitHub with dash", Expected: "GH", Upstream: "github.com:pixel48/custom-reg"},
	}
	for _, tc := range cases {
		env := &mock.Environment{}
		env.On("IsWsl").Return(false)
		env.On("RunCommand", "git", []string{"-C", "", "--no-optional-locks", "-c", "core.quotepath=false",
			"-c", "color.status=false", "remote", "get-url", "origin"}).Return(tc.Upstream, nil)
		env.On("GOOS").Return("unix")
		props := properties.Map{
			GithubIcon:      "GH",
			GitlabIcon:      "GL",
			BitbucketIcon:   "BB",
			AzureDevOpsIcon: "AD",
			CodeCommit:      "AC",
			CodebergIcon:    "CB",
			GitIcon:         "G",
			UpstreamIcons: map[string]string{
				"mycustom.server": "CU",
				"src.example.com": "EX",
			},
		}

		g := &Git{
			scm: scm{
				command: GITCOMMAND,
			},
			Upstream: "origin/main",
		}
		g.Init(props, env)

		upstreamIcon := g.getUpstreamIcon()
		assert.Equal(t, tc.Expected, upstreamIcon, tc.Case)
	}
}

func TestGetBranchStatus(t *testing.T) {
	cases := []struct {
		Case         string
		Expected     string
		Upstream     string
		Ahead        int
		Behind       int
		UpstreamGone bool
	}{
		{Case: "Equal with remote", Expected: "equal", Upstream: branchName},
		{Case: "Ahead", Expected: "up2", Ahead: 2},
		{Case: "Behind", Expected: "down8", Behind: 8},
		{Case: "Behind and ahead", Expected: "up7 down8", Behind: 8, Ahead: 7},
		{Case: "Gone", Expected: "gone", Upstream: branchName, UpstreamGone: true},
		{Case: "No remote", Expected: "", Upstream: ""},
		{Case: "Default (bug)", Expected: "", Behind: -8, Upstream: "wonky"},
	}

	for _, tc := range cases {
		props := properties.Map{
			BranchAheadIcon:     "up",
			BranchBehindIcon:    "down",
			BranchIdenticalIcon: "equal",
			BranchGoneIcon:      "gone",
		}

		g := &Git{
			Ahead:        tc.Ahead,
			Behind:       tc.Behind,
			Upstream:     tc.Upstream,
			UpstreamGone: tc.UpstreamGone,
		}
		g.Init(props, new(mock.Environment))

		g.setBranchStatus()
		assert.Equal(t, tc.Expected, g.BranchStatus, tc.Case)
	}
}

func TestGitTemplateString(t *testing.T) {
	cases := []struct {
		Git      *Git
		Case     string
		Expected string
		Template string
	}{
		{
			Case:     "Only HEAD name",
			Expected: branchName,
			Template: "{{ .HEAD }}",
			Git: &Git{
				HEAD:   branchName,
				Behind: 2,
			},
		},
		{
			Case:     "Working area changes",
			Expected: "main \uF044 +2 ~3",
			Template: "{{ .HEAD }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Git: &Git{
				HEAD: branchName,
				Working: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
					},
				},
			},
		},
		{
			Case:     "No working area changes",
			Expected: branchName,
			Template: "{{ .HEAD }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Git: &Git{
				HEAD:    branchName,
				Working: &GitStatus{},
			},
		},
		{
			Case:     "Working and staging area changes",
			Expected: "main \uF046 +5 ~1 \uF044 +2 ~3",
			Template: "{{ .HEAD }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Git: &Git{
				HEAD: branchName,
				Working: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
					},
				},
				Staging: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    5,
						Modified: 1,
					},
				},
			},
		},
		{
			Case:     "Working and staging area changes with separator",
			Expected: "main \uF046 +5 ~1 | \uF044 +2 ~3",
			Template: "{{ .HEAD }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}", //nolint:lll
			Git: &Git{
				HEAD: branchName,
				Working: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
					},
				},
				Staging: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    5,
						Modified: 1,
					},
				},
			},
		},
		{
			Case:     "Working and staging area changes with separator and stash count",
			Expected: "main \uF046 +5 ~1 | \uF044 +2 ~3 \ueb4b 3",
			Template: "{{ .HEAD }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }}", //nolint:lll
			Git: &Git{
				HEAD: branchName,
				Working: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
					},
				},
				Staging: &GitStatus{
					ScmStatus: ScmStatus{
						Added:    5,
						Modified: 1,
					},
				},
				stashCount: 3,
				poshgit:    true,
			},
		},
		{
			Case:     "No local changes",
			Expected: branchName,
			Template: "{{ .HEAD }}{{ if .Staging.Changed }} \uF046{{ .Staging.String }}{{ end }}{{ if .Working.Changed }} \uF044{{ .Working.String }}{{ end }}",
			Git: &Git{
				HEAD:    branchName,
				Staging: &GitStatus{},
				Working: &GitStatus{},
			},
		},
		{
			Case:     "Upstream Icon",
			Expected: "from GitHub on main",
			Template: "from {{ .UpstreamIcon }} on {{ .HEAD }}",
			Git: &Git{
				HEAD:         branchName,
				Staging:      &GitStatus{},
				Working:      &GitStatus{},
				UpstreamIcon: "GitHub",
			},
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			FetchStatus: true,
		}
		env := new(mock.Environment)
		tc.Git.env = env
		tc.Git.props = props
		assert.Equal(t, tc.Expected, renderTemplate(env, tc.Template, tc.Git), tc.Case)
	}
}

func TestGitUntrackedMode(t *testing.T) {
	cases := []struct {
		UntrackedModes map[string]string
		Case           string
		Expected       string
	}{
		{
			Case:     "Default mode - no map",
			Expected: "-unormal",
		},
		{
			Case:     "Default mode - no match",
			Expected: "-unormal",
			UntrackedModes: map[string]string{
				"bar": "no",
			},
		},
		{
			Case:     "No mode - match",
			Expected: "-uno",
			UntrackedModes: map[string]string{
				"foo": "no",
				"bar": "normal",
			},
		},
		{
			Case:     "Global mode",
			Expected: "-uno",
			UntrackedModes: map[string]string{
				"*": "no",
			},
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			UntrackedModes: tc.UntrackedModes,
		}

		g := &Git{
			scm: scm{
				repoRootDir: "foo",
			},
		}
		g.Init(props, new(mock.Environment))

		got := g.getUntrackedFilesMode()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestGitIgnoreSubmodules(t *testing.T) {
	cases := []struct {
		IgnoreSubmodules map[string]string
		Case             string
		Expected         string
	}{
		{
			Case:     "Overide",
			Expected: "--ignore-submodules=all",
			IgnoreSubmodules: map[string]string{
				"foo": "all",
			},
		},
		{
			Case: "Default mode - empty",
			IgnoreSubmodules: map[string]string{
				"bar": "no",
			},
		},
		{
			Case:     "Global mode",
			Expected: "--ignore-submodules=dirty",
			IgnoreSubmodules: map[string]string{
				"*": "dirty",
			},
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			IgnoreSubmodules: tc.IgnoreSubmodules,
		}

		g := &Git{
			scm: scm{
				repoRootDir: "foo",
			},
		}
		g.Init(props, new(mock.Environment))

		got := g.getIgnoreSubmodulesMode()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestGitCommit(t *testing.T) {
	cases := []struct {
		Case     string
		Expected *Commit
		Output   string
	}{
		{
			Case: "Clean commit",
			Output: `
			an:Jan De Dobbeleer
			ae:jan@ohmyposh.dev
			cn:Jan De Dobbeleer
			ce:jan@ohmyposh.dev
			at:1673176335
			su:docs(error): you can't use cross segment properties
			ha:1234567891011121314
			rf:HEAD -> refs/heads/main, tag: refs/tags/tag-1, tag: refs/tags/0.3.4, refs/remotes/origin/main, refs/remotes/origin/dev, refs/heads/dev, refs/remotes/origin/HEAD
			`,
			Expected: &Commit{
				Author: &User{
					Name:  "Jan De Dobbeleer",
					Email: "jan@ohmyposh.dev",
				},
				Committer: &User{
					Name:  "Jan De Dobbeleer",
					Email: "jan@ohmyposh.dev",
				},
				Subject:   "docs(error): you can't use cross segment properties",
				Timestamp: time.Unix(1673176335, 0),
				Refs: &Refs{
					Tags:    []string{"tag-1", "0.3.4"},
					Heads:   []string{"main", "dev"},
					Remotes: []string{"origin/main", "origin/dev"},
				},
				Sha: "1234567891011121314",
			},
		},
		{
			Case: "No commit output",
			Expected: &Commit{
				Author:    &User{},
				Committer: &User{},
				Refs:      &Refs{},
			},
		},
		{
			Case: "No author",
			Output: `
			an:
			ae:
			cn:Jan De Dobbeleer
			ce:jan@ohmyposh.dev
			at:1673176335
			su:docs(error): you can't use cross segment properties
			`,
			Expected: &Commit{
				Author: &User{},
				Committer: &User{
					Name:  "Jan De Dobbeleer",
					Email: "jan@ohmyposh.dev",
				},
				Subject:   "docs(error): you can't use cross segment properties",
				Timestamp: time.Unix(1673176335, 0),
				Refs:      &Refs{},
			},
		},
		{
			Case: "No refs",
			Output: `
			rf:HEAD
			`,
			Expected: &Commit{
				Author:    &User{},
				Committer: &User{},
				Refs:      &Refs{},
			},
		},
		{
			Case: "Just tag ref",
			Output: `
			rf:HEAD, tag: refs/tags/tag-1
			`,
			Expected: &Commit{
				Author:    &User{},
				Committer: &User{},
				Refs: &Refs{
					Tags: []string{"tag-1"},
				},
			},
		},
		{
			Case: "Feature branch including slash",
			Output: `
			rf:HEAD, tag: refs/tags/feat/feat-1
			`,
			Expected: &Commit{
				Author:    &User{},
				Committer: &User{},
				Refs: &Refs{
					Tags: []string{"feat/feat-1"},
				},
			},
		},
		{
			Case: "Bad timestamp",
			Output: `
			at:err
			`,
			Expected: &Commit{
				Author:    &User{},
				Committer: &User{},
				Refs:      &Refs{},
			},
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.MockGitCommand("", tc.Output, "log", "-1", "--pretty=format:an:%an%nae:%ae%ncn:%cn%nce:%ce%nat:%at%nsu:%s%nha:%H%nrf:%D", "--decorate=full")

		g := &Git{
			scm: scm{
				command: GITCOMMAND,
			},
		}
		g.Init(properties.Map{}, env)

		got := g.Commit()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestGitRemotes(t *testing.T) {
	cases := []struct {
		Case     string
		Config   string
		Expected int
	}{
		{
			Case:     "Empty config file",
			Expected: 0,
		},
		{
			Case:     "Two remotes",
			Expected: 2,
			Config: `
[remote "origin"]
	url = git@github.com:JanDeDobbeleer/test.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[remote "upstream"]
	url = git@github.com:microsoft/test.git
	fetch = +refs/heads/*:refs/remotes/upstream/*
`,
		},
		{
			Case:     "One remote",
			Expected: 1,
			Config: `
[remote "origin"]
	url = git@github.com:JanDeDobbeleer/test.git
	fetch = +refs/heads/*:refs/remotes/origin/*
`,
		},
		{
			Case:     "Broken config",
			Expected: 0,
			Config:   "{{}}",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("FileContent", "config").Return(tc.Config)

		g := &Git{
			scm: scm{
				repoRootDir: "foo",
			},
		}
		g.Init(properties.Map{}, env)

		got := g.Remotes()
		assert.Equal(t, tc.Expected, len(got), tc.Case)
	}
}

func TestGitRepoName(t *testing.T) {
	cases := []struct {
		Case       string
		Expected   string
		WorkingDir string
		RealDir    string
		IsWorkTree bool
	}{
		{
			Case:       "In worktree",
			Expected:   "oh-my-posh",
			IsWorkTree: true,
			WorkingDir: "/Users/jan/Code/oh-my-posh/.git/worktrees/oh-my-posh2",
		},
		{
			Case:       "Not in worktree",
			Expected:   "oh-my-posh",
			IsWorkTree: false,
			RealDir:    "/Users/jan/Code/oh-my-posh",
		},
		{
			Case:       "In worktree, unexpected dir",
			Expected:   "",
			IsWorkTree: true,
			WorkingDir: "/Users/jan/Code/oh-my-posh2",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("PathSeparator").Return("/")
		env.On("GOOS").Return(runtime.LINUX)

		g := &Git{
			scm: scm{
				repoRootDir: tc.RealDir,
				mainSCMDir:  tc.WorkingDir,
			},
			IsWorkTree: tc.IsWorkTree,
		}
		g.Init(properties.Map{}, env)

		got := g.repoName()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/segments/git_unix.go
================================================
//go:build !windows

package segments

import "path/filepath"

// resolveGitPath resolves path relative to base.
func resolveGitPath(base, path string) string {
	if filepath.IsAbs(path) {
		return path
	}

	return filepath.Join(base, path)
}



================================================
FILE: src/segments/git_unix_test.go
================================================
//go:build !windows

package segments

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

const TestRootPath = "/"

func TestResolveGitPath(t *testing.T) {
	cases := []struct {
		Case     string
		Base     string
		Path     string
		Expected string
	}{
		{
			Case:     "relative path",
			Base:     "dir/",
			Path:     "sub",
			Expected: "dir/sub",
		},
		{
			Case:     "absolute path",
			Base:     "/base",
			Path:     "/absolute/path",
			Expected: "/absolute/path",
		},
	}
	for _, tc := range cases {
		assert.Equal(t, tc.Expected, resolveGitPath(tc.Base, tc.Path), tc.Case)
	}
}



================================================
FILE: src/segments/git_windows.go
================================================
package segments

import "path/filepath"

// resolveGitPath resolves path relative to base.
func resolveGitPath(base, path string) string {
	if len(path) == 0 {
		return base
	}

	if filepath.IsAbs(path) {
		return path
	}

	// Note that git on Windows uses slashes exclusively. And it's okay
	// because Windows actually accepts both directory separators. More
	// importantly, however, parts of the git segment depend on those
	// slashes.
	if path[0] == '/' {
		// path is a disk-relative path.
		return filepath.VolumeName(base) + path
	}

	return filepath.ToSlash(filepath.Join(base, path))
}



================================================
FILE: src/segments/git_windows_test.go
================================================
//go:build windows

package segments

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

const TestRootPath = "C:/"

func TestResolveGitPath(t *testing.T) {
	cases := []struct {
		Case     string
		Base     string
		Path     string
		Expected string
	}{
		{
			Case:     "relative path",
			Base:     "dir\\",
			Path:     "sub",
			Expected: "dir/sub",
		},
		{
			Case:     "absolute path",
			Base:     "C:\\base",
			Path:     "C:/absolute/path",
			Expected: "C:/absolute/path",
		},
		{
			Case:     "disk-relative path",
			Base:     "C:\\base",
			Path:     "/absolute/path",
			Expected: "C:/absolute/path",
		},
	}
	for _, tc := range cases {
		assert.Equal(t, tc.Expected, resolveGitPath(tc.Base, tc.Path), tc.Case)
	}
}



================================================
FILE: src/segments/gitversion.go
================================================
package segments

import (
	"encoding/json"
)

type gitVersion struct {
	NuGetVersionV2                  string `json:"NuGetVersionV2"`
	FullSemVer                      string `json:"FullSemVer"`
	CommitDate                      string `json:"CommitDate"`
	AssemblySemVer                  string `json:"AssemblySemVer"`
	PreReleaseTagWithDash           string `json:"PreReleaseTagWithDash"`
	PreReleaseLabel                 string `json:"PreReleaseLabel"`
	PreReleaseLabelWithDash         string `json:"PreReleaseLabelWithDash"`
	AssemblySemFileVer              string `json:"AssemblySemFileVer"`
	CommitsSinceVersionSourcePadded string `json:"CommitsSinceVersionSourcePadded"`
	VersionSourceSha                string `json:"VersionSourceSha"`
	BuildMetaDataPadded             string `json:"BuildMetaDataPadded"`
	FullBuildMetaData               string `json:"FullBuildMetaData"`
	MajorMinorPatch                 string `json:"MajorMinorPatch"`
	NuGetVersion                    string `json:"NuGetVersion"`
	LegacySemVer                    string `json:"LegacySemVer"`
	LegacySemVerPadded              string `json:"LegacySemVerPadded"`
	PreReleaseTag                   string `json:"PreReleaseTag"`
	NuGetPreReleaseTag              string `json:"NuGetPreReleaseTag"`
	SemVer                          string `json:"SemVer"`
	InformationalVersion            string `json:"InformationalVersion"`
	BranchName                      string `json:"BranchName"`
	EscapedBranchName               string `json:"EscapedBranchName"`
	Sha                             string `json:"Sha"`
	ShortSha                        string `json:"ShortSha"`
	NuGetPreReleaseTagV2            string `json:"NuGetPreReleaseTagV2"`
	BuildMetaData                   int    `json:"BuildMetaData"`
	Major                           int    `json:"Major"`
	PreReleaseNumber                int    `json:"PreReleaseNumber"`
	Minor                           int    `json:"Minor"`
	CommitsSinceVersionSource       int    `json:"CommitsSinceVersionSource"`
	WeightedPreReleaseNumber        int    `json:"WeightedPreReleaseNumber"`
	UncommittedChanges              int    `json:"UncommittedChanges"`
	Patch                           int    `json:"Patch"`
}

type GitVersion struct {
	base

	gitVersion
}

func (n *GitVersion) Template() string {
	return " {{ .MajorMinorPatch }} "
}

func (n *GitVersion) Enabled() bool {
	gitversion := "gitversion"
	if !n.env.HasCommand(gitversion) {
		return false
	}

	response, err := n.env.RunCommand(gitversion, "-output", "json")
	if err != nil {
		return false
	}

	n.gitVersion = gitVersion{}
	err = json.Unmarshal([]byte(response), &n.gitVersion)

	return err == nil
}



================================================
FILE: src/segments/gitversion_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/alecthomas/assert"
)

func TestGitversion(t *testing.T) {
	cases := []struct {
		CacheError      error
		CommandError    error
		Case            string
		ExpectedString  string
		Response        string
		CacheResponse   string
		Template        string
		CacheTimeout    int
		ExpectedEnabled bool
		HasGitversion   bool
	}{
		{Case: "GitVersion not installed"},
		{Case: "GitVersion installed, no GitVersion.yml file", HasGitversion: true, Response: "Cannot find the .git directory"},
		{
			Case:            "Version",
			ExpectedEnabled: true,
			ExpectedString:  "number",
			HasGitversion:   true,
			Response:        "{ \"FullSemVer\": \"0.1.0\", \"SemVer\": \"number\" }",
			Template:        "{{ .SemVer }}",
		},
		{
			Case:          "Command Error",
			HasGitversion: true,
			CommandError:  errors.New("error"),
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)

		env.On("HasCommand", "gitversion").Return(tc.HasGitversion)
		env.On("Pwd").Return("test-dir")
		env.On("RunCommand", "gitversion", []string{"-output", "json"}).Return(tc.Response, tc.CommandError)

		gitversion := &GitVersion{}
		gitversion.Init(properties.Map{}, env)

		if len(tc.Template) == 0 {
			tc.Template = gitversion.Template()
		}

		enabled := gitversion.Enabled()

		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if enabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, gitversion), tc.Case)
		}
	}
}



================================================
FILE: src/segments/golang.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"golang.org/x/mod/modfile"
)

type Golang struct {
	language
}

const (
	ParseModFile  properties.Property = "parse_mod_file"
	ParseWorkFile properties.Property = "parse_work_file"
)

func (g *Golang) Template() string {
	return languageTemplate
}

func (g *Golang) Enabled() bool {
	g.extensions = []string{"*.go", "go.mod", "go.sum", "go.work", "go.work.sum"}
	g.commands = []*cmd{
		{
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+)(.(?P<patch>[0-9]+))?))`,
			getVersion: g.getVersion,
		},
		{
			executable: "go",
			args:       []string{"version"},
			regex:      `(?:go(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+)(.(?P<patch>[0-9]+))?)))`,
		},
	}
	g.versionURLTemplate = "https://golang.org/doc/go{{ .Major }}.{{ .Minor }}"

	return g.language.Enabled()
}

// getVersion returns the version of the Go language
// It first checks if the go.mod file is present and if it is, it parses the file to get the version
// If the go.mod file is not present, it checks if the go.work file is present and if it is, it parses the file to get the version
// If neither file is present, it returns an empty string
func (g *Golang) getVersion() (string, error) {
	if g.props.GetBool(ParseModFile, false) {
		return g.parseModFile()
	}

	if g.props.GetBool(ParseWorkFile, false) {
		return g.parseWorkFile()
	}

	return "", nil
}

func (g *Golang) parseModFile() (string, error) {
	gomod, err := g.env.HasParentFilePath("go.mod", false)
	if err != nil {
		return "", err
	}

	contents := g.env.FileContent(gomod.Path)
	file, err := modfile.Parse(gomod.Path, []byte(contents), nil)
	if err != nil {
		return "", err
	}

	if file.Go.Version != "" {
		return file.Go.Version, nil
	}

	// ignore when no version is found in go.mod file
	return "", nil
}

func (g *Golang) parseWorkFile() (string, error) {
	goWork, err := g.env.HasParentFilePath("go.work", false)
	if err != nil {
		return "", err
	}

	contents := g.env.FileContent(goWork.Path)
	version, _ := regex.FindStringMatch(`go (\d(\.\d{1,2})?(\.\d{1,2})?)`, contents, 1)
	if len(version) > 0 {
		return version, nil
	}

	// ignore when no version is found in go.work file
	return "", nil
}



================================================
FILE: src/segments/golang_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"os"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/stretchr/testify/assert"
)

func TestGolang(t *testing.T) {
	cases := []struct {
		Case                     string
		ExpectedString           string
		Version                  string
		ParseModFile             bool
		HasModFileInParentDir    bool
		InvalidModfile           bool
		ParseGoWorkFile          bool
		HasGoWorkFileInParentDir bool
		InvalidGoWorkFile        bool
	}{
		{Case: "Go 1.15", ExpectedString: "1.15.8", Version: "go version go1.15.8 darwin/amd64"},
		{Case: "Go 1.16", ExpectedString: "1.16", Version: "go version go1.16 darwin/amd64"},
		{Case: "go.mod 1.24.4", ParseModFile: true, HasModFileInParentDir: true, ExpectedString: "1.24.4"},
		{Case: "no go.mod file fallback", ParseModFile: true, ExpectedString: "1.16", Version: "go version go1.16 darwin/amd64"},
		{
			Case:                  "invalid go.mod file fallback",
			ParseModFile:          true,
			HasModFileInParentDir: true,
			InvalidModfile:        true,
			ExpectedString:        "1.16",
			Version:               "go version go1.16 darwin/amd64",
		},
		{Case: "go.work file", ParseGoWorkFile: true, HasGoWorkFileInParentDir: true, ExpectedString: "1.21"},
		{
			Case:                     "invalid go.work file fallback",
			ParseGoWorkFile:          true,
			HasGoWorkFileInParentDir: true,
			InvalidGoWorkFile:        true,
			ExpectedString:           "1.16",
			Version:                  "go version go1.16 darwin/amd64",
		},
		{
			Case:                     "go.work file with go.mod file uses go.mod's version",
			ParseModFile:             true,
			HasModFileInParentDir:    true,
			ParseGoWorkFile:          true,
			HasGoWorkFileInParentDir: true,
			ExpectedString:           "1.24.4",
		},
		{
			Case:            "missing both go.mod and go.work file fallback",
			ParseModFile:    true,
			ParseGoWorkFile: true,
			ExpectedString:  "1.16",
			Version:         "go version go1.16 darwin/amd64",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "go",
			versionParam:  "version",
			versionOutput: tc.Version,
			extension:     "*.go",
		}
		env, props := getMockedLanguageEnv(params)

		if tc.ParseModFile {
			props[ParseModFile] = tc.ParseModFile
			fileInfo := &runtime.FileInfo{
				Path:         "../go.mod",
				ParentFolder: "./",
				IsDir:        false,
			}

			var err error
			if !tc.HasModFileInParentDir {
				err = errors.New("no match")
			}
			env.On("HasParentFilePath", "go.mod", false).Return(fileInfo, err)

			var content string
			if tc.InvalidModfile {
				content = "invalid go.mod file"
			} else {
				tmp, _ := os.ReadFile(fileInfo.Path)
				content = string(tmp)
			}

			env.On("FileContent", fileInfo.Path).Return(content)
		}

		if tc.ParseGoWorkFile {
			props[ParseWorkFile] = tc.ParseGoWorkFile
			fileInfo := &runtime.FileInfo{
				Path:         "../test/go.work",
				ParentFolder: "./",
				IsDir:        false,
			}

			var err error
			if !tc.HasGoWorkFileInParentDir {
				err = errors.New("no match")
			}

			env.On("HasParentFilePath", "go.work", false).Return(fileInfo, err)
			var content string
			if tc.InvalidGoWorkFile {
				content = "invalid go.work file"
			} else {
				tmp, _ := os.ReadFile(fileInfo.Path)
				content = string(tmp)
			}

			env.On("FileContent", fileInfo.Path).Return(content)
		}

		g := &Golang{}
		g.Init(props, env)

		assert.True(t, g.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, g.Template(), g), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/haskell.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Haskell struct {
	language

	StackGhc bool
}

const (
	StackGhcMode properties.Property = "stack_ghc_mode"
)

func (h *Haskell) Template() string {
	return languageTemplate
}

func (h *Haskell) Enabled() bool {
	ghcRegex := `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`
	ghcCmd := &cmd{
		executable: "ghc",
		args:       []string{"--numeric-version"},
		regex:      ghcRegex,
	}

	stackGhcCmd := &cmd{
		executable: "stack",
		args:       []string{"ghc", "--", "--numeric-version"},
		regex:      ghcRegex,
	}

	h.extensions = []string{"*.hs", "*.lhs", "stack.yaml", "package.yaml", "*.cabal", "cabal.project"}
	h.commands = []*cmd{ghcCmd}
	h.versionURLTemplate = "https://www.haskell.org/ghc/download_ghc_{{ .Major }}_{{ .Minor }}_{{ .Patch }}.html"

	switch h.props.GetString(StackGhcMode, "never") {
	case "always":
		h.commands = []*cmd{stackGhcCmd}
		h.StackGhc = true
	case "package":
		_, err := h.env.HasParentFilePath("stack.yaml", false)
		if err == nil {
			h.commands = []*cmd{stackGhcCmd}
			h.StackGhc = true
		}
	}

	return h.language.Enabled()
}



================================================
FILE: src/segments/haskell_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/stretchr/testify/assert"
)

func TestHaskell(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		GhcVersion      string
		StackGhcVersion string
		StackGhcMode    string
		InStackPackage  bool
		StackGhc        bool
	}{
		{
			Case:            "GHC 8.10.7",
			ExpectedString:  "8.10.7",
			GhcVersion:      "8.10.7",
			StackGhcVersion: "9.0.2",
			StackGhcMode:    "never",
		},
		{
			Case:            "Stack GHC Mode - Always",
			ExpectedString:  "9.0.2",
			GhcVersion:      "8.10.7",
			StackGhcVersion: "9.0.2",
			StackGhcMode:    "always",
			StackGhc:        true,
		},
		{
			Case:            "Stack GHC Mode - Package",
			ExpectedString:  "9.0.2",
			GhcVersion:      "8.10.7",
			StackGhcVersion: "9.0.2",
			StackGhcMode:    "package",
			InStackPackage:  true,
			StackGhc:        true,
		},
		{
			Case:            "Stack GHC Mode - Package no stack.yaml",
			ExpectedString:  "8.10.7",
			GhcVersion:      "8.10.7",
			StackGhcVersion: "9.0.2",
			StackGhcMode:    "package",
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "ghc",
			versionParam:  "--numeric-version",
			versionOutput: tc.GhcVersion,
			extension:     "*.hs",
		}
		env, props := getMockedLanguageEnv(params)

		if tc.StackGhcMode == "always" || (tc.StackGhcMode == "package" && tc.InStackPackage) {
			env.On("HasCommand", "stack").Return(true)
			env.On("RunCommand", "stack", []string{"ghc", "--", "--numeric-version"}).Return(tc.StackGhcVersion, nil)
		}

		fileInfo := &runtime.FileInfo{
			Path:         "../stack.yaml",
			ParentFolder: "./",
			IsDir:        false,
		}

		if tc.InStackPackage {
			var err error
			env.On("HasParentFilePath", "stack.yaml", false).Return(fileInfo, err)
		} else {
			env.On("HasParentFilePath", "stack.yaml", false).Return(fileInfo, errors.New("no match"))
		}

		props[StackGhcMode] = tc.StackGhcMode

		h := &Haskell{}
		h.Init(props, env)

		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, h.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, h.Template(), h), failMsg)
		assert.Equal(t, tc.StackGhc, h.StackGhc, failMsg)
	}
}



================================================
FILE: src/segments/helm.go
================================================
package segments

type Helm struct {
	base

	Version string
}

func (h *Helm) Enabled() bool {
	displayMode := h.props.GetString(DisplayMode, DisplayModeAlways)
	if displayMode != DisplayModeFiles {
		return h.getVersion()
	}

	inChart := false
	files := []string{"Chart.yml", "Chart.yaml", "helmfile.yaml", "helmfile.yml"}
	for _, file := range files {
		if _, err := h.env.HasParentFilePath(file, false); err == nil {
			inChart = true
			break
		}
	}

	return inChart && h.getVersion()
}

func (h *Helm) Template() string {
	return " Helm {{.Version}}"
}

func (h *Helm) getVersion() bool {
	cmd := "helm"
	if !h.env.HasCommand(cmd) {
		return false
	}

	result, err := h.env.RunCommand(cmd, "version", "--short", "--template={{.Version}}")
	if err != nil {
		return false
	}

	h.Version = result[1:]
	return true
}



================================================
FILE: src/segments/helm_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	testify_mock "github.com/stretchr/testify/mock"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
)

func TestHelmSegment(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		Template        string
		DisplayMode     string
		ChartFile       string
		HelmExists      bool
		ExpectedEnabled bool
	}{
		{
			Case:            "Helm not installed",
			HelmExists:      false,
			ExpectedEnabled: false,
		},
		{
			Case:            "DisplayMode always inside chart",
			HelmExists:      true,
			ExpectedEnabled: true,
			ExpectedString:  "Helm 3.12.3",
			DisplayMode:     "always",
		},
		{
			Case:            "DisplayMode always outside chart",
			HelmExists:      true,
			ExpectedEnabled: true,
			ExpectedString:  "Helm 3.12.3",
			DisplayMode:     "always",
		},
		{
			Case:            "DisplayMode files inside chart. Chart file Chart.yml",
			HelmExists:      true,
			ExpectedEnabled: true,
			ExpectedString:  "Helm 3.12.3",
			DisplayMode:     "files",
			ChartFile:       "Chart.yml",
		},
		{
			Case:            "DisplayMode always inside chart. Chart file Chart.yaml",
			HelmExists:      true,
			ExpectedEnabled: true,
			ExpectedString:  "Helm 3.12.3",
			DisplayMode:     "files",
			ChartFile:       "Chart.yaml",
		},
		{
			Case:            "DisplayMode always inside chart. Chart file helmfile.yaml",
			HelmExists:      true,
			ExpectedEnabled: true,
			ExpectedString:  "Helm 3.12.3",
			DisplayMode:     "files",
			ChartFile:       "helmfile.yaml",
		},
		{
			Case:            "DisplayMode always inside chart. Chart file helmfile.yml",
			HelmExists:      true,
			ExpectedEnabled: true,
			ExpectedString:  "Helm 3.12.3",
			DisplayMode:     "files",
			ChartFile:       "helmfile.yml",
		},
		{
			Case:            "DisplayMode always outside chart",
			HelmExists:      true,
			ExpectedEnabled: false,
			DisplayMode:     "files",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HasCommand", "helm").Return(tc.HelmExists)
		env.On("RunCommand", "helm", []string{"version", "--short", "--template={{.Version}}"}).Return("v3.12.3", nil)

		env.On("HasParentFilePath", tc.ChartFile, false).Return(&runtime.FileInfo{}, nil)
		env.On("HasParentFilePath", testify_mock.Anything, false).Return(&runtime.FileInfo{}, errors.New("no such file or directory"))

		props := properties.Map{
			DisplayMode: tc.DisplayMode,
		}

		h := &Helm{}
		h.Init(props, env)

		assert.Equal(t, tc.ExpectedEnabled, h.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, h.Template(), h), tc.Case)
		}
	}
}



================================================
FILE: src/segments/http.go
================================================
package segments

import (
	"encoding/json"

	"net/http"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

type HTTP struct {
	base

	Body map[string]any
}

const (
	METHOD properties.Property = "method"
)

func (h *HTTP) Template() string {
	return " {{ .Body }} "
}

func (h *HTTP) Enabled() bool {
	url := h.props.GetString(URL, "")
	if len(url) == 0 {
		return false
	}

	method := h.props.GetString(METHOD, "GET")

	tmpl := &template.Text{
		Template: url,
	}

	if resolved, err := tmpl.Render(); err == nil {
		url = resolved
	}

	result, err := h.getResult(url, method)
	if err != nil {
		return false
	}

	h.Body = result
	return true
}

func (h *HTTP) getResult(url, method string) (map[string]any, error) {
	setMethod := func(request *http.Request) {
		request.Method = method
	}

	resultBody, err := h.env.HTTPRequest(url, nil, 10000, setMethod)
	if err != nil {
		return nil, err
	}

	var result map[string]any
	err = json.Unmarshal(resultBody, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}



================================================
FILE: src/segments/http_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestHTTPSegmentEnabled(t *testing.T) {
	cases := []struct {
		expected    any
		name        string
		url         string
		method      string
		response    string
		shouldError bool
	}{
		{
			name:        "Valid URL with GET response",
			url:         "https://jsonplaceholder.typicode.com/posts/1",
			method:      "GET",
			response:    `{"id": "1"}`,
			expected:    "1",
			shouldError: false,
		},
		{
			name:        "Valid URL with POST response",
			url:         "https://jsonplaceholder.typicode.com/posts",
			method:      "POST",
			response:    `{"id": "101"}`,
			expected:    "101",
			shouldError: false,
		},
		{
			name:        "Valid URL with error response",
			url:         "https://api.example.com/data",
			method:      "GET",
			shouldError: true,
		},
		{
			name:        "Empty URL",
			url:         "",
			method:      "GET",
			shouldError: false,
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			env := new(mock.Environment)
			props := properties.Map{
				URL:    tc.url,
				METHOD: tc.method,
			}

			env.On("HTTPRequest", tc.url).Return([]byte(tc.response), func() error {
				if tc.shouldError {
					return errors.New("error")
				}
				return nil
			}())

			cs := &HTTP{
				base: base{
					env:   env,
					props: props,
				},
			}

			_ = cs.Enabled()
			assert.Equal(t, tc.expected, cs.Body["id"], tc.name)
		})
	}
}



================================================
FILE: src/segments/ipify.go
================================================
package segments

import (
	"net"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

type ipData struct {
	IP string `json:"ip"`
}

type IPAPI interface {
	Get() (*ipData, error)
}

type ipAPI struct {
	http.Request
}

func (i *ipAPI) Get() (*ipData, error) {
	url := "https://api.ipify.org?format=json"
	return http.Do[*ipData](&i.Request, url, nil)
}

type IPify struct {
	base

	api IPAPI
	IP  string
}

const (
	OFFLINE = "OFFLINE"
)

func (i *IPify) Template() string {
	return " {{ .IP }} "
}

func (i *IPify) Enabled() bool {
	i.initAPI()

	ip, err := i.getResult()
	if err != nil {
		return false
	}
	i.IP = ip

	return true
}

func (i *IPify) getResult() (string, error) {
	data, err := i.api.Get()
	if dnsErr, OK := err.(*net.DNSError); OK && dnsErr.IsNotFound {
		return OFFLINE, nil
	}

	if err != nil {
		return "", err
	}

	return data.IP, err
}

func (i *IPify) initAPI() {
	if i.api != nil {
		return
	}

	request := &http.Request{
		Env:         i.env,
		HTTPTimeout: i.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout),
	}

	i.api = &ipAPI{
		Request: *request,
	}
}



================================================
FILE: src/segments/ipify_test.go
================================================
package segments

import (
	"errors"
	"net"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

type mockedipAPI struct {
	testify_.Mock
}

func (s *mockedipAPI) Get() (*ipData, error) {
	args := s.Called()
	return args.Get(0).(*ipData), args.Error(1)
}

func TestIpifySegment(t *testing.T) {
	cases := []struct {
		Case            string
		IPDate          *ipData
		Error           error
		ExpectedString  string
		ExpectedEnabled bool
	}{
		{
			Case:            "IP data",
			IPDate:          &ipData{IP: "127.0.0.1"},
			ExpectedString:  "127.0.0.1",
			ExpectedEnabled: true,
		},
		{
			Case:            "Error",
			Error:           errors.New("network is unreachable"),
			ExpectedEnabled: false,
		},
		{
			Case:            "Offline",
			ExpectedString:  OFFLINE,
			Error:           &net.DNSError{IsNotFound: true},
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		api := &mockedipAPI{}
		api.On("Get").Return(tc.IPDate, tc.Error)

		ipify := &IPify{
			api: api,
		}

		enabled := ipify.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)

		if !enabled {
			continue
		}

		assert.Equal(t, tc.ExpectedString, renderTemplate(&mock.Environment{}, ipify.Template(), ipify), tc.Case)
	}
}



================================================
FILE: src/segments/java.go
================================================
package segments

import (
	"fmt"
)

type Java struct {
	language
}

func (j *Java) Template() string {
	return languageTemplate
}

func (j *Java) Enabled() bool {
	j.init()

	return j.language.Enabled()
}

func (j *Java) init() {
	javaRegex := `(?: JRE)(?: \(.*\))? \((?P<version>(?P<major>[0-9]+)(?:\.(?P<minor>[0-9]+))?(?:\.(?P<patch>[0-9]+))?).*\),`
	javaCmd := &cmd{
		executable: "java",
		args:       []string{"-Xinternalversion"},
		regex:      javaRegex,
	}

	j.extensions = []string{
		"pom.xml",
		"build.gradle.kts",
		"build.sbt",
		".java-version",
		".deps.edn",
		"project.clj",
		"build.boot",
		"*.java",
		"*.class",
		"*.gradle",
		"*.jar",
		"*.clj",
		"*.cljc",
	}

	javaHome := j.env.Getenv("JAVA_HOME")
	if len(javaHome) > 0 {
		java := fmt.Sprintf("%s/bin/java", javaHome)
		j.commands = []*cmd{
			{
				executable: java,
				args:       []string{"-Xinternalversion"},
				regex:      javaRegex,
			},
			javaCmd,
		}
		return
	}

	j.commands = []*cmd{javaCmd}
}



================================================
FILE: src/segments/java_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestJava(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		Version         string
		JavaHomeVersion string
		JavaHomeEnabled bool
	}{
		{
			Case:           "Zulu LTS",
			ExpectedString: "11.0.13",
			Version:        "OpenJDK 64-Bit Server VM (11.0.13+8-LTS) for windows-amd64 JRE (Zulu11.52+13-CA) (11.0.13+8-LTS), built on Oct 7 2021 16:00:23 by \"zulu_re\" with MS VC++ 15.9 (VS2017)", //nolint:lll
		},
		{
			Case:           "OpenJDK macOS",
			ExpectedString: "1.8.0",
			Version:        "OpenJDK 64-Bit Server VM (25.275-b01) for bsd-amd64 JRE (1.8.0_275-b01), built on Nov  9 2020 12:07:35 by \"jenkins\" with gcc 4.2.1",
		},
		{
			Case:           "OpenJDK macOS with JAVA_HOME, no executable",
			ExpectedString: "1.8.0",
			Version:        "OpenJDK 64-Bit Server VM (25.275-b01) for bsd-amd64 JRE (1.8.0_275-b01), built on Nov  9 2020 12:07:35 by \"jenkins\" with gcc 4.2.1",
		},
		{
			Case:            "OpenJDK macOS with JAVA_HOME and executable",
			ExpectedString:  "1.7.0",
			JavaHomeEnabled: true,
			JavaHomeVersion: "OpenJDK 64-Bit Server VM (25.275-b01) for bsd-amd64 JRE (1.7.0_275-b01), built on Nov  9 2020 12:07:35 by \"jenkins\" with gcc 4.2.1",
			Version:         "OpenJDK 64-Bit Server VM (25.275-b01) for bsd-amd64 JRE (1.8.0_275-b01), built on Nov  9 2020 12:07:35 by \"jenkins\" with gcc 4.2.1",
		},
		{
			Case:            "openjdk version \"15.0.2\" 2021-01-19",
			ExpectedString:  "15.0.2",
			JavaHomeEnabled: true,
			JavaHomeVersion: "OpenJDK 64-Bit Server VM (15.0.2+7) for windows-amd64 JRE (15.0.2+7), built on Jan 21 2021 05:54:57 by \"\" with MS VC++ 15.9 (VS2017)",
			Version:         "OpenJDK 64-Bit Server VM (15.0.2+7) for windows-amd64 JRE (15.0.2+7), built on Jan 21 2021 05:54:57 by \"\" with MS VC++ 15.9 (VS2017)",
		},
		{
			Case:            "openjdk version \"16\" 2021-03-16",
			ExpectedString:  "16",
			JavaHomeEnabled: true,
			JavaHomeVersion: "OpenJDK 64-Bit Server VM (16+36) for windows-amd64 JRE (16+36), built on Mar 11 2021 10:56:33 by \"\" with MS VC++ 16.7 (VS2019)",
			Version:         "OpenJDK 64-Bit Server VM (16+36) for windows-amd64 JRE (16+36), built on Mar 11 2021 10:56:33 by \"\" with MS VC++ 16.7 (VS2019)",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "java",
			versionParam:  "-Xinternalversion",
			versionOutput: tc.Version,
			extension:     "pom.xml",
		}
		env, props := getMockedLanguageEnv(params)

		if tc.JavaHomeEnabled {
			env.On("Getenv", "JAVA_HOME").Return("/usr/java")
			env.On("HasCommand", "/usr/java/bin/java").Return(true)
			env.On("RunCommand", "/usr/java/bin/java", []string{"-Xinternalversion"}).Return(tc.JavaHomeVersion, nil)
		} else {
			env.On("Getenv", "JAVA_HOME").Return("")
		}

		j := &Java{}
		j.Init(props, env)
		assert.True(t, j.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, j.Template(), j), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/jujutsu.go
================================================
package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

const (
	JUJUTSUCOMMAND = "jj"

	jjLogTemplate = `change_id.shortest() ++ "\n" ++ diff.summary()`

	IgnoreWorkingCopy properties.Property = "ignore_working_copy"
)

type JujutsuStatus struct {
	ScmStatus
}

func (s *JujutsuStatus) add(code byte) {
	switch code {
	case 'D':
		s.Deleted++
	case 'A', 'C': // added, copied
		s.Added++
	case 'M':
		s.Modified++
	case 'R': // renamed
		s.Moved++
	}
}

type Jujutsu struct {
	Working  *JujutsuStatus
	ChangeID string
	scm
}

func (jj *Jujutsu) Template() string {
	return " \uf1fa{{.ChangeID}}{{if .Working.Changed}} \uf044 {{ .Working.String }}{{ end }} "
}

func (jj *Jujutsu) Enabled() bool {
	displayStatus := jj.props.GetBool(FetchStatus, false)

	if !jj.shouldDisplay(displayStatus) {
		return false
	}

	statusFormats := jj.props.GetKeyValueMap(StatusFormats, map[string]string{})
	jj.Working = &JujutsuStatus{ScmStatus: ScmStatus{Formats: statusFormats}}

	if displayStatus {
		jj.setJujutsuStatus()
	}

	return true
}

func (jj *Jujutsu) CacheKey() (string, bool) {
	dir, err := jj.env.HasParentFilePath(".jj", true)
	if err != nil {
		return "", false
	}

	return dir.Path, true
}

func (jj *Jujutsu) shouldDisplay(displayStatus bool) bool {
	jjdir, err := jj.env.HasParentFilePath(".jj", false)
	if err != nil {
		log.Debug("Jujutsu directory not found")
		return false
	}

	if displayStatus && !jj.hasCommand(JUJUTSUCOMMAND) {
		log.Debug("Jujutsu command not found, skipping segment")
		return false
	}

	jj.setDir(jjdir.ParentFolder)

	jj.mainSCMDir = jjdir.Path
	jj.scmDir = jjdir.Path
	// convert the worktree file path to a windows one when in a WSL shared folder
	jj.repoRootDir = strings.TrimSuffix(jj.convertToWindowsPath(jjdir.Path), "/.jj")

	return true
}

func (jj *Jujutsu) setDir(dir string) {
	dir = path.ReplaceHomeDirPrefixWithTilde(dir) // align with template PWD
	if jj.env.GOOS() == runtime.WINDOWS {
		jj.Dir = strings.TrimSuffix(dir, `\.jj`)
		return
	}

	jj.Dir = strings.TrimSuffix(dir, "/.jj")
}

func (jj *Jujutsu) setJujutsuStatus() {
	// https://jj-vcs.github.io/jj/latest/templates/#commit-keywords
	statusString, err := jj.getJujutsuCommandOutput("log", "-r", "@", "--no-graph", "-T", jjLogTemplate)
	if err != nil {
		return
	}

	lines := strings.Split(statusString, "\n")
	jj.ChangeID = lines[0]

	for _, line := range lines[1:] {
		if len(line) > 0 {
			jj.Working.add(line[0])
		}
	}
}

func (jj *Jujutsu) getJujutsuCommandOutput(command string, args ...string) (string, error) {
	cli := []string{"--repository", jj.repoRootDir, "--no-pager", "--color", "never"}

	if jj.props.GetBool(IgnoreWorkingCopy, true) {
		cli = append(cli, "--ignore-working-copy")
	}

	cli = append(cli, command)
	cli = append(cli, args...)

	return jj.env.RunCommand(jj.command, cli...)
}



================================================
FILE: src/segments/jujutsu_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
)

func TestJujutsuEnabledToolNotFound(t *testing.T) {
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasParentFilePath", ".jj", false).Return(&runtime.FileInfo{}, errors.New("not found"))
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)

	jj := &Jujutsu{}
	jj.Init(properties.Map{}, env)

	assert.False(t, jj.Enabled())
}

func TestJujutsuEnabledInWorkingDirectory(t *testing.T) {
	fileInfo := &runtime.FileInfo{
		Path:         "/dir/hello",
		ParentFolder: "/dir",
		IsDir:        true,
	}
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasCommand", "jj").Return(true)
	env.On("HasParentFilePath", ".jj", false).Return(fileInfo, nil)
	env.On("GOOS").Return("")

	jj := &Jujutsu{}
	jj.Init(properties.Map{}, env)

	assert.True(t, jj.Enabled())
	assert.Equal(t, fileInfo.Path, jj.mainSCMDir)
	assert.Equal(t, fileInfo.Path, jj.repoRootDir)
}

func TestJujutsuGetIdInfo(t *testing.T) {
	cases := []struct {
		ExpectedWorking  *JujutsuStatus
		Case             string
		LogOutput        string
		ExpectedChangeID string
	}{
		{
			Case:             "nochanges",
			LogOutput:        "a\n\n",
			ExpectedChangeID: "a",
			ExpectedWorking: &JujutsuStatus{ScmStatus{
				Deleted:  0,
				Added:    0,
				Modified: 0,
				Moved:    0,
			}},
		},
		{
			Case: "changed",
			LogOutput: `b
D deleted_file
A added_file
C {copied_file => new_file}
M modified_file
R {renamed_file => new_file}
`,
			ExpectedChangeID: "b",
			ExpectedWorking: &JujutsuStatus{ScmStatus{
				Deleted:  1,
				Added:    2,
				Modified: 1,
				Moved:    1,
			}},
		},
	}

	for _, tc := range cases {
		fileInfo := &runtime.FileInfo{
			Path:         "/dir/hello",
			ParentFolder: "/dir",
			IsDir:        true,
		}

		props := properties.Map{
			FetchStatus: true,
		}

		env := new(mock.Environment)
		env.On("InWSLSharedDrive").Return(false)
		env.On("HasCommand", "jj").Return(true)
		env.On("GOOS").Return("")
		env.On("IsWsl").Return(false)
		env.On("HasParentFilePath", ".jj", false).Return(fileInfo, nil)
		env.On("PathSeparator").Return("/")
		env.On("Home").Return(poshHome)
		env.On("Getenv", poshGitEnv).Return("")
		env.MockJjCommand(fileInfo.Path, tc.LogOutput, "log", "-r", "@", "--no-graph", "-T", jjLogTemplate)

		jj := &Jujutsu{}
		jj.Init(props, env)

		if tc.ExpectedWorking != nil {
			tc.ExpectedWorking.Formats = map[string]string{}
		}

		assert.True(t, jj.Enabled())
		assert.Equal(t, fileInfo.Path, jj.mainSCMDir)
		assert.Equal(t, fileInfo.Path, jj.repoRootDir)
		assert.Equal(t, tc.ExpectedWorking, jj.Working, tc.Case)
		assert.Equal(t, tc.ExpectedChangeID, jj.ChangeID, tc.Case)
	}
}



================================================
FILE: src/segments/julia.go
================================================
package segments

type Julia struct {
	language
}

func (j *Julia) Template() string {
	return languageTemplate
}

func (j *Julia) Enabled() bool {
	j.extensions = []string{"*.jl"}
	j.commands = []*cmd{
		{
			executable: "julia",
			args:       []string{"--version"},
			regex:      `julia version (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	j.versionURLTemplate = "https://github.com/JuliaLang/julia/releases/tag/v{{ .Full }}"

	return j.language.Enabled()
}



================================================
FILE: src/segments/julia_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestJulia(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Julia 1.6.0", ExpectedString: "1.6.0", Version: "julia version 1.6.0"},
		{Case: "Julia 1.6.1", ExpectedString: "1.6.1", Version: "julia version 1.6.1"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "julia",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.jl",
		}
		env, props := getMockedLanguageEnv(params)
		j := &Julia{}
		j.Init(props, env)
		assert.True(t, j.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, j.Template(), j), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/kotlin.go
================================================
package segments

type Kotlin struct {
	language
}

func (k *Kotlin) Template() string {
	return languageTemplate
}

func (k *Kotlin) Enabled() bool {
	k.extensions = []string{"*.kt", "*.kts", "*.ktm"}
	k.commands = []*cmd{
		{
			executable: "kotlin",
			args:       []string{"-version"},
			regex:      `Kotlin version (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	k.versionURLTemplate = "https://github.com/JetBrains/kotlin/releases/tag/v{{ .Full }}"

	return k.language.Enabled()
}



================================================
FILE: src/segments/kotlin_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestKotlin(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Kotlin 1.6.10", ExpectedString: "1.6.10", Version: "Kotlin version 1.6.10-release-923 (JRE 17.0.2+0)"},
		{Case: "Kotlin 1.6.0", ExpectedString: "1.6.0", Version: "Kotlin version 1.6.0-release-915 (JRE 17.0.2+0)"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "kotlin",
			versionParam:  "-version",
			versionOutput: tc.Version,
			extension:     "*.kt",
		}
		env, props := getMockedLanguageEnv(params)
		k := &Kotlin{}
		k.Init(props, env)
		assert.True(t, k.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, k.Template(), k), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/kubectl.go
================================================
package segments

import (
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"

	"gopkg.in/yaml.v3"
)

// Whether to use kubectl or read kubeconfig ourselves
const (
	ParseKubeConfig properties.Property = "parse_kubeconfig"
	ContextAliases  properties.Property = "context_aliases"
	kubectlCacheKey                     = "kubectl"
)

type Kubectl struct {
	base

	KubeContext
	Context string
	dirty   bool
}

type KubeConfig struct {
	CurrentContext string `yaml:"current-context"`
	Contexts       []struct {
		Context *KubeContext `yaml:"context"`
		Name    string       `yaml:"name"`
	} `yaml:"contexts"`
}

type KubeContext struct {
	Cluster   string `yaml:"cluster"`
	User      string `yaml:"user"`
	Namespace string `yaml:"namespace"`
}

func (k *Kubectl) Template() string {
	return " {{ .Context }}{{ if .Namespace }} :: {{ .Namespace }}{{ end }} "
}

func (k *Kubectl) Enabled() bool {
	parseKubeConfig := k.props.GetBool(ParseKubeConfig, true)

	if parseKubeConfig {
		return k.doParseKubeConfig()
	}

	return k.doCallKubectl()
}

func (k *Kubectl) doParseKubeConfig() bool {
	// Follow kubectl search rules (see https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)
	// TL;DR: KUBECONFIG can contain a list of files. If it's empty ~/.kube/config is used. First file in list wins when merging keys.
	kubeconfigs := filepath.SplitList(k.env.Getenv("KUBECONFIG"))
	if len(kubeconfigs) == 0 {
		kubeconfigs = []string{filepath.Join(k.env.Home(), ".kube/config")}
	}

	contexts := make(map[string]*KubeContext)
	k.Context = ""

	for _, kubeconfig := range kubeconfigs {
		if len(kubeconfig) == 0 {
			continue
		}

		content := k.env.FileContent(kubeconfig)

		var config KubeConfig
		err := yaml.Unmarshal([]byte(content), &config)
		if err != nil {
			continue
		}

		for _, context := range config.Contexts {
			if _, exists := contexts[context.Name]; !exists {
				contexts[context.Name] = context.Context
			}
		}

		if len(k.Context) == 0 {
			k.Context = config.CurrentContext
		}

		context, exists := contexts[k.Context]
		if !exists {
			continue
		}

		if context != nil {
			k.KubeContext = *context
		}

		k.SetContextAlias()
		k.dirty = true

		return true
	}

	displayError := k.props.GetBool(properties.DisplayError, false)
	if !displayError {
		return false
	}
	k.setError("KUBECONFIG ERR")
	return true
}

func (k *Kubectl) doCallKubectl() bool {
	cmd := "kubectl"
	if !k.env.HasCommand(cmd) {
		return false
	}

	result, err := k.env.RunCommand(cmd, "config", "view", "--output", "yaml", "--minify")
	displayError := k.props.GetBool(properties.DisplayError, false)
	if err != nil && displayError {
		k.setError("KUBECTL ERR")
		return true
	}

	if err != nil {
		return false
	}

	var config KubeConfig
	err = yaml.Unmarshal([]byte(result), &config)
	if err != nil {
		return false
	}

	k.Context = config.CurrentContext
	k.SetContextAlias()
	k.dirty = true

	if len(config.Contexts) > 0 {
		k.KubeContext = *config.Contexts[0].Context
	}

	return true
}

func (k *Kubectl) setError(message string) {
	if len(k.Context) == 0 {
		k.Context = message
	}

	k.Namespace = message
	k.User = message
	k.Cluster = message
}

func (k *Kubectl) SetContextAlias() {
	aliases := k.props.GetKeyValueMap(ContextAliases, map[string]string{})
	if alias, exists := aliases[k.Context]; exists {
		k.Context = alias
	}
}



================================================
FILE: src/segments/kubectl_test.go
================================================
package segments

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

const (
	testKubectlAllInfoTemplate = "{{.Context}} :: {{.Namespace}} :: {{.User}} :: {{.Cluster}}"
	contextMarker              = "currentcontextmarker"
)

func TestKubectlSegment(t *testing.T) {
	standardTemplate := "{{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}}"
	lsep := string(filepath.ListSeparator)

	cases := []struct {
		Files           map[string]string
		ContextAliases  map[string]string
		Cluster         string
		Kubeconfig      string
		Context         string
		Namespace       string
		UserName        string
		Case            string
		ExpectedString  string
		Template        string
		KubectlExists   bool
		ParseKubeConfig bool
		KubectlErr      bool
		ExpectedEnabled bool
		DisplayError    bool
	}{
		{
			Case:            "kubeconfig incomplete",
			Template:        testKubectlAllInfoTemplate,
			ParseKubeConfig: true,
			Kubeconfig:      contextMarker + lsep + "contextdefinitionincomplete",
			Files:           testKubeConfigFiles,
			ExpectedString:  "ctx ::  ::  ::",
			ExpectedEnabled: true,
		},
		{Case: "disabled", Template: standardTemplate, KubectlExists: false, Context: "aaa", Namespace: "bbb", ExpectedEnabled: false},
		{
			Case:            "all information",
			Template:        testKubectlAllInfoTemplate,
			KubectlExists:   true,
			Context:         "aaa",
			Namespace:       "bbb",
			UserName:        "ccc",
			Cluster:         "ddd",
			ExpectedString:  "aaa :: bbb :: ccc :: ddd",
			ExpectedEnabled: true,
		},
		{Case: "no namespace", Template: standardTemplate, KubectlExists: true, Context: "aaa", ExpectedString: "aaa", ExpectedEnabled: true},
		{
			Case:            "kubectl context alias",
			Template:        standardTemplate,
			KubectlExists:   true,
			Context:         "aaa",
			Namespace:       "bbb",
			ContextAliases:  map[string]string{"aaa": "ccc"},
			ExpectedString:  "ccc :: bbb",
			ExpectedEnabled: true,
		},
		{
			Case:            "kubectl error",
			Template:        standardTemplate,
			DisplayError:    true,
			KubectlExists:   true,
			Context:         "aaa",
			Namespace:       "bbb",
			KubectlErr:      true,
			ExpectedString:  "KUBECTL ERR :: KUBECTL ERR",
			ExpectedEnabled: true,
		},
		{Case: "kubectl error hidden", Template: standardTemplate, DisplayError: false, KubectlExists: true, Context: "aaa", Namespace: "bbb", KubectlErr: true, ExpectedEnabled: false},
		{
			Case:            "kubeconfig home",
			Template:        testKubectlAllInfoTemplate,
			ParseKubeConfig: true,
			Files:           testKubeConfigFiles,
			ExpectedString:  "aaa :: bbb :: ccc :: ddd",
			ExpectedEnabled: true,
		},
		{
			Case:            "kubeconfig context alias",
			Template:        standardTemplate,
			ParseKubeConfig: true,
			Files:           testKubeConfigFiles,
			ContextAliases:  map[string]string{"aaa": "ccc"},
			ExpectedString:  "ccc :: bbb",
			ExpectedEnabled: true,
		},
		{
			Case:            "kubeconfig multiple current marker first",
			Template:        testKubectlAllInfoTemplate,
			ParseKubeConfig: true,
			Kubeconfig:      "" + lsep + contextMarker + lsep + "contextdefinition" + lsep + "contextredefinition",
			Files:           testKubeConfigFiles,
			ExpectedString:  "ctx :: ns :: usr :: cl",
			ExpectedEnabled: true,
		},
		{
			Case:     "kubeconfig multiple context first",
			Template: testKubectlAllInfoTemplate, ParseKubeConfig: true,
			Kubeconfig:      "contextdefinition" + lsep + "contextredefinition" + lsep + contextMarker + lsep,
			Files:           testKubeConfigFiles,
			ExpectedString:  "ctx :: ns :: usr :: cl",
			ExpectedEnabled: true,
		},
		{
			Case: "kubeconfig error hidden", Template: testKubectlAllInfoTemplate, ParseKubeConfig: true, Kubeconfig: "invalid", Files: testKubeConfigFiles, ExpectedEnabled: false},
		{
			Case:            "kubeconfig error",
			Template:        testKubectlAllInfoTemplate,
			ParseKubeConfig: true,
			Kubeconfig:      "invalid",
			Files:           testKubeConfigFiles,
			DisplayError:    true,
			ExpectedString:  "KUBECONFIG ERR :: KUBECONFIG ERR :: KUBECONFIG ERR :: KUBECONFIG ERR",
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HasCommand", "kubectl").Return(tc.KubectlExists)

		var kubeconfig string
		content, err := os.ReadFile("../test/kubectl.yml")
		if err == nil {
			kubeconfig = fmt.Sprintf(string(content), tc.Cluster, tc.UserName, tc.Namespace, tc.Context)
		}

		var kubectlErr error
		if tc.KubectlErr {
			kubectlErr = &runtime.CommandError{
				Err:      "oops",
				ExitCode: 1,
			}
		}

		env.On("RunCommand", "kubectl", []string{"config", "view", "--output", "yaml", "--minify"}).Return(kubeconfig, kubectlErr)
		env.On("Getenv", "KUBECONFIG").Return(tc.Kubeconfig)

		for path, content := range tc.Files {
			env.On("FileContent", path).Return(content)
		}

		env.On("Home").Return("testhome")

		props := properties.Map{
			properties.DisplayError: tc.DisplayError,
			ParseKubeConfig:         tc.ParseKubeConfig,
			ContextAliases:          tc.ContextAliases,
		}

		k := &Kubectl{}
		k.Init(props, env)

		assert.Equal(t, tc.ExpectedEnabled, k.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, k), tc.Case)
		}
	}
}

var testKubeConfigFiles = map[string]string{
	filepath.Join("testhome", ".kube/config"): `
apiVersion: v1
contexts:
  - context:
      cluster: ddd
      user: ccc
      namespace: bbb
    name: aaa
current-context: aaa
`,
	"contextdefinition": `
apiVersion: v1
contexts:
  - context:
      cluster: cl
      user: usr
      namespace: ns
    name: ctx
`,
	contextMarker: `
apiVersion: v1
current-context: ctx
`,
	"invalid": "this is not yaml",
	"contextdefinitionincomplete": `
apiVersion: v1
contexts:
  - name: ctx
`,
	"contextredefinition": `
apiVersion: v1
contexts:
  - context:
      cluster: wrongcl
      user: wrongu
      namespace: wrongns
    name: ctx
`,
}



================================================
FILE: src/segments/language.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"fmt"
	"path/filepath"
	runtime_ "runtime"

	"slices"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

const (
	languageTemplate = " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
	noVersion        = "NO VERSION"
)

type loadContext func()

type inContext func() bool

type getVersion func() (string, error)
type matchesVersionFile func() (string, bool)

type version struct {
	Full          string
	Major         string
	Minor         string
	Patch         string
	Prerelease    string
	BuildMetadata string
	URL           string
	Executable    string
	Expected      string
}

type cmd struct {
	getVersion         getVersion
	executable         string
	regex              string
	versionURLTemplate string
	args               []string
}

func (c *cmd) parse(versionInfo string) (*version, error) {
	values := regex.FindNamedRegexMatch(c.regex, versionInfo)
	if len(values) == 0 {
		return nil, errors.New("cannot parse version string")
	}

	version := &version{
		Full:          values["version"],
		Major:         values["major"],
		Minor:         values["minor"],
		Patch:         values["patch"],
		Prerelease:    values["prerelease"],
		BuildMetadata: values["buildmetadata"],
	}
	return version, nil
}

type language struct {
	base

	projectRoot        *runtime.FileInfo
	loadContext        loadContext
	inContext          inContext
	matchesVersionFile matchesVersionFile
	version
	displayMode        string
	Error              string
	versionURLTemplate string
	name               string
	commands           []*cmd
	projectFiles       []string
	folders            []string
	extensions         []string
	exitCode           int
	homeEnabled        bool
	Mismatch           bool
}

const (
	// DisplayMode sets the display mode (always, when_in_context, never)
	DisplayMode properties.Property = "display_mode"
	// DisplayModeAlways displays the segment always
	DisplayModeAlways string = "always"
	// DisplayModeFiles displays the segment when the current folder contains certain extensions
	DisplayModeFiles string = "files"
	// DisplayModeEnvironment displays the segment when the environment has a language's context
	DisplayModeEnvironment string = "environment"
	// DisplayModeContext displays the segment when the environment or files is active
	DisplayModeContext string = "context"
	// MissingCommandText sets the text to display when the command is not present in the system
	MissingCommandText properties.Property = "missing_command_text"
	// HomeEnabled displays the segment in the HOME folder or not
	HomeEnabled properties.Property = "home_enabled"
	// LanguageExtensions the list of extensions to validate
	LanguageExtensions properties.Property = "extensions"
	// LanguageFolders the list of folders to validate
	LanguageFolders properties.Property = "folders"
)

func (l *language) getName() string {
	_, file, _, _ := runtime_.Caller(2)
	base := filepath.Base(file)
	return base[:len(base)-3]
}

func (l *language) Enabled() bool {
	l.name = l.getName()
	// override default extensions if needed
	l.extensions = l.props.GetStringArray(LanguageExtensions, l.extensions)
	l.folders = l.props.GetStringArray(LanguageFolders, l.folders)
	inHomeDir := func() bool {
		return l.env.Pwd() == l.env.Home()
	}

	var enabled bool

	homeEnabled := l.props.GetBool(HomeEnabled, l.homeEnabled)
	if inHomeDir() && !homeEnabled {
		return false
	}

	if len(l.projectFiles) != 0 && l.hasProjectFiles() {
		enabled = true
	}

	if !enabled {
		// set default mode when not set
		if len(l.displayMode) == 0 {
			l.displayMode = l.props.GetString(DisplayMode, DisplayModeFiles)
		}

		l.loadLanguageContext()

		switch l.displayMode {
		case DisplayModeAlways:
			enabled = true
		case DisplayModeEnvironment:
			enabled = l.inLanguageContext()
		case DisplayModeFiles:
			enabled = l.hasLanguageFiles() || l.hasLanguageFolders()
		case DisplayModeContext:
			fallthrough
		default:
			enabled = l.hasLanguageFiles() || l.hasLanguageFolders() || l.inLanguageContext() || l.hasProjectFiles()
		}
	}

	if !enabled || !l.props.GetBool(properties.FetchVersion, true) {
		return enabled
	}

	err := l.setVersion()
	if err != nil {
		l.Error = err.Error()
	}

	if l.matchesVersionFile != nil {
		expected, match := l.matchesVersionFile()
		if !match {
			l.Mismatch = true
			l.Expected = expected
		}
	}

	return enabled
}

func (l *language) hasLanguageFiles() bool {
	return slices.ContainsFunc(l.extensions, l.env.HasFiles)
}

func (l *language) hasProjectFiles() bool {
	for _, extension := range l.projectFiles {
		if configPath, err := l.env.HasParentFilePath(extension, false); err == nil {
			l.projectRoot = configPath
			return true
		}
	}

	return false
}

func (l *language) hasLanguageFolders() bool {
	return slices.ContainsFunc(l.folders, l.env.HasFolder)
}

// setVersion parses the version string returned by the command
func (l *language) setVersion() error {
	var lastError error

	cacheKey := fmt.Sprintf("version_%s", l.name)

	if versionCache, OK := l.env.Cache().Get(cacheKey); OK {
		var version version
		err := json.Unmarshal([]byte(versionCache), &version)
		if err == nil {
			log.Debugf("version cache restored for %s: %s", l.name, version)
			l.version = version
			return nil
		}
	}

	for _, command := range l.commands {
		versionStr, err := l.runCommand(command)
		if err != nil {
			log.Error(err)
			lastError = err
			continue
		}

		version, err := command.parse(versionStr)
		if err != nil {
			log.Error(err)
			lastError = fmt.Errorf("err parsing info from %s with %s", command.executable, versionStr)
			continue
		}

		l.version = *version
		if command.versionURLTemplate != "" {
			l.versionURLTemplate = command.versionURLTemplate
		}

		l.buildVersionURL()
		l.Executable = command.executable

		if marchalled, err := json.Marshal(l.version); err == nil {
			duration := l.props.GetString(properties.CacheDuration, string(cache.NONE))
			l.env.Cache().Set(cacheKey, string(marchalled), cache.Duration(duration))
		}

		return nil
	}

	if lastError != nil {
		return lastError
	}

	return errors.New(l.props.GetString(MissingCommandText, ""))
}

func (l *language) runCommand(command *cmd) (string, error) {
	if command.getVersion == nil {
		if !l.env.HasCommand(command.executable) {
			return "", errors.New(noVersion)
		}

		versionStr, err := l.env.RunCommand(command.executable, command.args...)
		if exitErr, ok := err.(*runtime.CommandError); ok {
			l.exitCode = exitErr.ExitCode
			return "", fmt.Errorf("err executing %s with %s", command.executable, command.args)
		}

		return versionStr, nil
	}

	versionStr, err := command.getVersion()
	if err != nil {
		return "", err
	}

	if len(versionStr) == 0 {
		return "", errors.New("no version found")
	}

	return versionStr, nil
}

func (l *language) loadLanguageContext() {
	if l.loadContext == nil {
		return
	}
	l.loadContext()
}

func (l *language) inLanguageContext() bool {
	if l.inContext == nil {
		return false
	}
	return l.inContext()
}

func (l *language) buildVersionURL() {
	versionURLTemplate := l.props.GetString(properties.VersionURLTemplate, l.versionURLTemplate)
	if len(versionURLTemplate) == 0 {
		return
	}

	tmpl := &template.Text{
		Template: versionURLTemplate,
		Context:  l.version,
	}

	url, err := tmpl.Render()
	if err != nil {
		return
	}

	l.URL = url
}

func (l *language) hasNodePackage(name string) bool {
	packageJSON := l.env.FileContent("package.json")

	var packageData map[string]any
	if err := json.Unmarshal([]byte(packageJSON), &packageData); err != nil {
		return false
	}

	dependencies, ok := packageData["dependencies"].(map[string]any)
	if !ok {
		return false
	}

	if _, exists := dependencies[name]; !exists {
		return false
	}

	return true
}

func (l *language) nodePackageVersion(name string) (string, error) {
	folder := filepath.Join(l.env.Pwd(), "node_modules", name)

	const fileName string = "package.json"
	if !l.env.HasFilesInDir(folder, fileName) {
		return "", fmt.Errorf("%s not found in %s", fileName, folder)
	}

	content := l.env.FileContent(filepath.Join(folder, fileName))
	var data ProjectData
	err := json.Unmarshal([]byte(content), &data)

	if err != nil {
		return "", err
	}

	return data.Version, nil
}



================================================
FILE: src/segments/language_test.go
================================================
package segments

import (
	"path/filepath"
	"slices"
	"testing"

	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
	mock_ "github.com/stretchr/testify/mock"
)

const (
	universion = "1.3.307"
	uni        = "*.uni"
	corn       = "*.corn"
)

type languageArgs struct {
	expectedError      error
	properties         properties.Properties
	matchesVersionFile matchesVersionFile
	version            string
	versionURLTemplate string
	extensions         []string
	enabledExtensions  []string
	commands           []*cmd
	enabledCommands    []string
	inHome             bool
}

func (l *languageArgs) hasvalue(value string, list []string) bool {
	return slices.Contains(list, value)
}

func bootStrapLanguageTest(args *languageArgs) *language {
	env := new(mock.Environment)

	for _, command := range args.commands {
		env.On("HasCommand", command.executable).Return(args.hasvalue(command.executable, args.enabledCommands))
		env.On("RunCommand", command.executable, command.args).Return(args.version, args.expectedError)
	}

	for _, extension := range args.extensions {
		env.On("HasFiles", extension).Return(args.hasvalue(extension, args.enabledExtensions))
	}

	home := "/usr/home"
	cwd := "/usr/home/project"
	if args.inHome {
		cwd = home
	}

	env.On("Pwd").Return(cwd)
	env.On("Home").Return(home)

	cache := &cache_.Cache{}
	cache.On("Get", mock_.Anything).Return("", false)
	cache.On("Set", mock_.Anything, mock_.Anything, mock_.Anything).Return(nil)
	env.On("Cache").Return(cache)

	if args.properties == nil {
		args.properties = properties.Map{}
	}

	l := &language{
		extensions:         args.extensions,
		commands:           args.commands,
		versionURLTemplate: args.versionURLTemplate,
		matchesVersionFile: args.matchesVersionFile,
	}
	l.Init(args.properties, env)

	return l
}

func TestLanguageFilesFoundButNoCommandAndVersionAndDisplayVersion(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
			},
		},
		extensions:        []string{uni},
		enabledExtensions: []string{uni},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, noVersion, lang.Error, "unicorn is not available")
}

func TestLanguageFilesFoundButNoCommandAndVersionAndDontDisplayVersion(t *testing.T) {
	props := properties.Map{
		properties.FetchVersion: false,
	}
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
			},
		},
		extensions:        []string{uni},
		enabledExtensions: []string{uni},
		properties:        props,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled(), "unicorn is not available")
}

func TestLanguageFilesFoundButNoCommandAndNoVersion(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
			},
		},
		extensions:        []string{uni},
		enabledExtensions: []string{uni},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled(), "unicorn is not available")
}

func TestLanguageDisabledNoFiles(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
			},
		},
		extensions:        []string{uni},
		enabledExtensions: []string{},
		enabledCommands:   []string{"unicorn"},
	}
	lang := bootStrapLanguageTest(args)
	assert.False(t, lang.Enabled(), "no files in the current directory")
}

func TestLanguageEnabledOneExtensionFound(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, universion, lang.Full, "unicorn is available and uni files are found")
	assert.Equal(t, "unicorn", lang.Executable, "unicorn was used")
}

func TestLanguageEnabledMismatch(t *testing.T) {
	expectedVersion := "1.2.009"

	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
		matchesVersionFile: func() (string, bool) {
			return expectedVersion, false
		},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, expectedVersion, lang.Expected, "the expected unicorn version is 1.2.009")
	assert.True(t, lang.Mismatch, "we require a different version of unicorn")
}

func TestLanguageDisabledInHome(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
		inHome:            true,
	}
	lang := bootStrapLanguageTest(args)
	assert.False(t, lang.Enabled())
}

func TestLanguageEnabledSecondExtensionFound(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{corn},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, universion, lang.Full, "unicorn is available and corn files are found")
	assert.Equal(t, "unicorn", lang.Executable, "unicorn was used")
}

func TestLanguageEnabledSecondCommand(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "uni",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
			{
				executable: "corn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{corn},
		enabledCommands:   []string{"corn"},
		version:           universion,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, universion, lang.Full, "unicorn is available and corn files are found")
	assert.Equal(t, "corn", lang.Executable, "corn was used")
}

func TestLanguageEnabledAllExtensionsFound(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, universion, lang.Full, "unicorn is available and uni and corn files are found")
	assert.Equal(t, "unicorn", lang.Executable, "unicorn was used")
}

func TestLanguageEnabledNoVersion(t *testing.T) {
	props := properties.Map{
		properties.FetchVersion: false,
	}
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "unicorn",
				args:       []string{"--version"},
				regex:      "(?P<version>.*)",
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
		properties:        props,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "", lang.Full, "unicorn is available and uni and corn files are found")
	assert.Equal(t, "", lang.Executable, "no version was found")
}

func TestLanguageEnabledMissingCommand(t *testing.T) {
	props := properties.Map{
		properties.FetchVersion: false,
	}
	args := &languageArgs{
		commands:          []*cmd{},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
		properties:        props,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "", lang.Full, "unicorn is unavailable and uni and corn files are found")
	assert.Equal(t, "", lang.Executable, "no executable was found")
}

func TestLanguageEnabledNoVersionData(t *testing.T) {
	props := properties.Map{
		properties.FetchVersion: true,
	}
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "uni",
				args:       []string{"--version"},
				regex:      `(?:Python (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"uni"},
		version:           "",
		properties:        props,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "", lang.Full)
	assert.Equal(t, "", lang.Executable, "no version was found")
}

func TestLanguageEnabledMissingCommandCustomText(t *testing.T) {
	expected := "missing"
	props := properties.Map{
		MissingCommandText: expected,
	}
	args := &languageArgs{
		commands:          []*cmd{},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
		properties:        props,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, expected, lang.Error, "unicorn is available and uni and corn files are found")
}

func TestLanguageEnabledMissingCommandCustomTextHideError(t *testing.T) {
	props := properties.Map{MissingCommandText: "missing"}
	args := &languageArgs{
		commands:          []*cmd{},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"unicorn"},
		version:           universion,
		properties:        props,
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "", lang.Full)
}

func TestLanguageEnabledCommandExitCode(t *testing.T) {
	expected := 200
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "uni",
				args:       []string{"--version"},
				regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
			},
		},
		extensions:        []string{uni, corn},
		enabledExtensions: []string{uni, corn},
		enabledCommands:   []string{"uni"},
		version:           universion,
		expectedError:     &runtime.CommandError{ExitCode: expected},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "err executing uni with [--version]", lang.Error)
	assert.Equal(t, expected, lang.exitCode)
}

func TestLanguageHyperlinkEnabled(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "uni",
				args:       []string{"--version"},
				regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
			},
			{
				executable: "corn",
				args:       []string{"--version"},
				regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
			},
		},
		versionURLTemplate: "https://unicor.org/doc/{{ .Full }}",
		extensions:         []string{uni, corn},
		enabledExtensions:  []string{corn},
		enabledCommands:    []string{"corn"},
		version:            universion,
		properties:         properties.Map{},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "https://unicor.org/doc/1.3.307", lang.URL)
}

func TestLanguageHyperlinkEnabledWrongRegex(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable: "uni",
				args:       []string{"--version"},
				regex:      `wrong`,
			},
			{
				executable: "corn",
				args:       []string{"--version"},
				regex:      `wrong`,
			},
		},
		versionURLTemplate: "https://unicor.org/doc/{{ .Full }}",
		extensions:         []string{uni, corn},
		enabledExtensions:  []string{corn},
		enabledCommands:    []string{"corn"},
		version:            universion,
		properties:         properties.Map{},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "err parsing info from corn with 1.3.307", lang.Error)
}

func TestLanguageEnabledInHome(t *testing.T) {
	cases := []struct {
		Case            string
		HomeEnabled     bool
		ExpectedEnabled bool
	}{
		{Case: "Always enabled", HomeEnabled: true, ExpectedEnabled: true},
		{Case: "Context disabled", HomeEnabled: false, ExpectedEnabled: false},
	}
	for _, tc := range cases {
		props := properties.Map{
			HomeEnabled: tc.HomeEnabled,
		}
		args := &languageArgs{
			commands: []*cmd{
				{
					executable: "uni",
					args:       []string{"--version"},
					regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
				},
			},
			extensions:        []string{uni, corn},
			enabledExtensions: []string{corn},
			enabledCommands:   []string{"corn"},
			version:           universion,
			properties:        props,
			inHome:            true,
		}
		lang := bootStrapLanguageTest(args)
		assert.Equal(t, tc.ExpectedEnabled, lang.Enabled(), tc.Case)
	}
}

func TestLanguageInnerHyperlink(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable:         "uni",
				args:               []string{"--version"},
				regex:              `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
				versionURLTemplate: "https://uni.org/release/{{ .Full }}",
			},
			{
				executable:         "corn",
				args:               []string{"--version"},
				regex:              `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
				versionURLTemplate: "https://unicor.org/doc/{{ .Full }}",
			},
		},
		versionURLTemplate: "This gets replaced with inner template",
		extensions:         []string{uni, corn},
		enabledExtensions:  []string{corn},
		enabledCommands:    []string{"corn"},
		version:            universion,
		properties:         properties.Map{},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "https://unicor.org/doc/1.3.307", lang.URL)
}

func TestLanguageHyperlinkTemplatePropertyTakesPriority(t *testing.T) {
	args := &languageArgs{
		commands: []*cmd{
			{
				executable:         "uni",
				args:               []string{"--version"},
				regex:              `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
				versionURLTemplate: "https://uni.org/release/{{ .Full }}",
			},
		},
		extensions:        []string{uni},
		enabledExtensions: []string{uni},
		enabledCommands:   []string{"uni"},
		version:           universion,
		properties: properties.Map{
			properties.VersionURLTemplate: "https://custom/url/template/{{ .Major }}.{{ .Minor }}",
		},
	}
	lang := bootStrapLanguageTest(args)
	assert.True(t, lang.Enabled())
	assert.Equal(t, "https://custom/url/template/1.3", lang.URL)
}

type mockedLanguageParams struct {
	cmd           string
	versionParam  string
	versionOutput string
	extension     string
}

func getMockedLanguageEnv(params *mockedLanguageParams) (*mock.Environment, properties.Map) {
	env := new(mock.Environment)
	env.On("HasCommand", params.cmd).Return(true)
	env.On("RunCommand", params.cmd, []string{params.versionParam}).Return(params.versionOutput, nil)
	env.On("HasFiles", params.extension).Return(true)
	env.On("Pwd").Return("/usr/home/project")
	env.On("Home").Return("/usr/home")

	cache := &cache_.Cache{}
	cache.On("Get", mock_.Anything).Return("", false)
	cache.On("Set", mock_.Anything, mock_.Anything, mock_.Anything).Return(nil)
	env.On("Cache").Return(cache)

	props := properties.Map{
		properties.FetchVersion: true,
	}

	return env, props
}

func TestNodePackageVersion(t *testing.T) {
	cases := []struct {
		Case        string
		PackageJSON string
		Version     string
		ShouldFail  bool
		NoFiles     bool
	}{
		{Case: "14.1.5", Version: "14.1.5", PackageJSON: "{ \"name\": \"nx\",\"version\": \"14.1.5\"}"},
		{Case: "14.0.0", Version: "14.0.0", PackageJSON: "{ \"name\": \"nx\",\"version\": \"14.0.0\"}"},
		{Case: "no files", NoFiles: true, ShouldFail: true},
		{Case: "bad data", ShouldFail: true, PackageJSON: "bad data"},
	}

	for _, tc := range cases {
		var env = new(mock.Environment)
		env.On("Pwd").Return("posh")
		path := filepath.Join("posh", "node_modules", "nx")
		env.On("HasFilesInDir", path, "package.json").Return(!tc.NoFiles)
		env.On("FileContent", filepath.Join(path, "package.json")).Return(tc.PackageJSON)

		a := &language{}
		a.Init(properties.Map{}, env)
		got, err := a.nodePackageVersion("nx")

		if tc.ShouldFail {
			assert.Error(t, err, tc.Case)
			return
		}

		assert.Nil(t, err, tc.Case)
		assert.Equal(t, tc.Version, got, tc.Case)
	}
}



================================================
FILE: src/segments/lastfm.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type LastFM struct {
	base

	Artist string
	Track  string
	Full   string
	Icon   string
	Status string
}

const (
	// LastFM username
	Username properties.Property = "username"
)

type lmfDate struct {
	UnixString string `json:"uts"`
}

type lfmTrackInfo struct {
	IsPlaying *string `json:"nowplaying,omitempty"`
}

type Artist struct {
	Name string `json:"#text"`
}

type lfmTrack struct {
	Artist `json:"artist"`
	Name   string        `json:"name"`
	Info   *lfmTrackInfo `json:"@attr"`
	Date   lmfDate       `json:"date"`
}

type tracks struct {
	Tracks []*lfmTrack `json:"track"`
}

type lfmDataResponse struct {
	TracksInfo tracks `json:"recenttracks"`
}

func (d *LastFM) Enabled() bool {
	err := d.setStatus()

	if err != nil {
		log.Error(err)
		return false
	}

	return true
}

func (d *LastFM) Template() string {
	return " {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Full }}{{ end }} "
}

func (d *LastFM) getResult() (*lfmDataResponse, error) {
	response := new(lfmDataResponse)

	apikey := d.props.GetString(APIKey, ".")
	username := d.props.GetString(Username, ".")
	httpTimeout := d.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	url := fmt.Sprintf("https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&api_key=%s&user=%s&format=json&limit=1", apikey, username)

	body, err := d.env.HTTPRequest(url, nil, httpTimeout)
	if err != nil {
		return new(lfmDataResponse), err
	}

	err = json.Unmarshal(body, &response)
	if err != nil {
		return new(lfmDataResponse), err
	}

	return response, nil
}

func (d *LastFM) setStatus() error {
	q, err := d.getResult()
	if err != nil {
		return err
	}

	if len(q.TracksInfo.Tracks) == 0 {
		return errors.New("no data found")
	}

	track := q.TracksInfo.Tracks[0]

	d.Artist = track.Artist.Name
	d.Track = track.Name
	d.Full = fmt.Sprintf("%s - %s", d.Artist, d.Track)

	isPlaying := track.Info != nil && track.Info.IsPlaying != nil && *track.Info.IsPlaying == "true"

	if isPlaying {
		d.Icon = d.props.GetString(PlayingIcon, "\uE602 ")
		d.Status = "playing"
	} else {
		d.Icon = d.props.GetString(StoppedIcon, "\uF04D ")
		d.Status = "stopped"
	}

	return nil
}



================================================
FILE: src/segments/lastfm_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

const (
	LFMAPIURL = "https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&api_key=key&user=KibbeWater&format=json&limit=1"
)

func TestLFMSegmentSingle(t *testing.T) {
	cases := []struct {
		Error           error
		Case            string
		APIJSONResponse string
		ExpectedString  string
		Template        string
		ExpectedEnabled bool
	}{
		{
			Case:            "All Defaults",
			APIJSONResponse: `{"recenttracks":{"track":[{"artist":{"#text":"C.Gambino"},"name":"Automatic","@attr":{"nowplaying":"true"}}]}}`,
			ExpectedString:  "\uE602 C.Gambino - Automatic",
			ExpectedEnabled: true,
		},
		{
			Case:            "Custom Template",
			APIJSONResponse: `{"recenttracks":{"track":[{"artist":{"#text":"C.Gambino"},"name":"Automatic","@attr":{"nowplaying":"true"}}]}}`,
			ExpectedString:  "\uE602 C.Gambino - Automatic",
			ExpectedEnabled: true,
			Template:        "{{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Full }}{{ end }}",
		},
		{
			Case:            "Song Stopped",
			APIJSONResponse: `{"recenttracks":{"track":[{"artist":{"#text":"C.Gambino"},"name":"Automatic","date":{"uts":"1699350223"}}]}}`,
			ExpectedString:  "\uF04D",
			ExpectedEnabled: true,
			Template:        "{{ .Icon }}",
		},
		{
			Case:            "Error in retrieving data",
			APIJSONResponse: "nonsense",
			Error:           errors.New("Something went wrong"),
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		props := properties.Map{
			APIKey:                 "key",
			Username:               "KibbeWater",
			properties.HTTPTimeout: 20000,
		}

		env.On("HTTPRequest", LFMAPIURL).Return([]byte(tc.APIJSONResponse), tc.Error)

		lfm := &LastFM{}
		lfm.Init(props, env)

		enabled := lfm.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = lfm.Template()
		}
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, lfm), tc.Case)
	}
}



================================================
FILE: src/segments/lua.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Lua struct {
	language
}

const (
	PreferredExecutable properties.Property = "preferred_executable"
)

func (l *Lua) Template() string {
	return languageTemplate
}

func (l *Lua) Enabled() bool {
	l.extensions = []string{"*.lua", "*.rockspec"}
	l.folders = []string{"lua"}
	l.commands = []*cmd{
		{
			executable:         "lua",
			args:               []string{"-v"},
			regex:              `Lua (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+)(.(?P<patch>[0-9]+))?))`,
			versionURLTemplate: "https://www.lua.org/manual/{{ .Major }}.{{ .Minor }}/readme.html#changes",
		},
		{
			executable:         "luajit",
			args:               []string{"-v"},
			regex:              `LuaJIT (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+)(.(?P<patch>[0-9]+))?))`,
			versionURLTemplate: "https://github.com/LuaJIT/LuaJIT/tree/v{{ .Major}}.{{ .Minor}}",
		},
	}

	if l.props.GetString(PreferredExecutable, "lua") == "luajit" {
		l.commands = []*cmd{l.commands[1], l.commands[0]}
	}

	return l.language.Enabled()
}



================================================
FILE: src/segments/lua_test.go
================================================
package segments

import (
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestLua(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
		Prefer         string
		ExpectedURL    string
		HasLua         bool
		HasLuaJit      bool
	}{
		{
			Case:           "Lua 5.4.4 - Prefer Lua",
			ExpectedString: "5.4.4",
			Version:        "Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio",
			ExpectedURL:    "https://www.lua.org/manual/5.4/readme.html#changes",
			HasLua:         true,
			HasLuaJit:      true,
			Prefer:         "lua",
		},
		{
			Case:           "Lua 5.0 - Prefer luajit but missing so fallback to lua",
			ExpectedString: "5.0",
			Version:        "Lua 5.0  Copyright (C) 1994-2003 Tecgraf, PUC-Rio",
			ExpectedURL:    "https://www.lua.org/manual/5.0/readme.html#changes",
			HasLua:         true,
			Prefer:         "luajit",
		},
		{
			Case:           "LuaJIT 2.0.5 - Prefer LuaJIT",
			ExpectedString: "2.0.5",
			Version:        "LuaJIT 2.0.5 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/",
			HasLuaJit:      true,
			HasLua:         true,
			ExpectedURL:    "https://github.com/LuaJIT/LuaJIT/tree/v2.0",
			Prefer:         "luajit",
		},
		{
			Case:           "LuaJIT 2.1.0-beta3 - Prefer Lua but missing so try luajit",
			ExpectedString: "2.1.0",
			Version:        "LuaJIT 2.1.0-beta3 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/",
			HasLuaJit:      true,
			ExpectedURL:    "https://github.com/LuaJIT/LuaJIT/tree/v2.1",
			Prefer:         "lua",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "lua",
			versionParam:  "-v",
			versionOutput: tc.Version,
			extension:     "*.lua",
		}
		env, props := getMockedLanguageEnv(params)

		if !tc.HasLua {
			env.Unset("HasCommand")
			env.On("HasCommand", "lua").Return(false)
		}

		env.On("HasCommand", "luajit").Return(tc.HasLuaJit)
		env.On("RunCommand", "luajit", []string{"-v"}).Return(tc.Version, nil)

		props[PreferredExecutable] = tc.Prefer

		l := &Lua{}
		l.Init(props, env)

		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, l.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, l.Template(), l), failMsg)
		assert.Equal(t, tc.ExpectedURL, l.URL, failMsg)
		assert.Equal(t, strings.ToLower(strings.Split(tc.Case, " ")[0]), l.Executable, failMsg)
	}
}



================================================
FILE: src/segments/mercurial.go
================================================
package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

const (
	MERCURIALCOMMAND = "hg"

	hgLogTemplate = "{rev}|{node}|{branch}|{tags}|{bookmarks}"
)

type MercurialStatus struct {
	ScmStatus
}

func (s *MercurialStatus) add(code string) {
	switch code {
	case "R", "!":
		s.Deleted++
	case "A":
		s.Added++
	case "?":
		s.Untracked++
	case "M":
		s.Modified++
	}
}

type Mercurial struct {
	Working           *MercurialStatus
	LocalCommitNumber string
	ChangeSetID       string
	ChangeSetIDShort  string
	Branch            string
	scm
	Bookmarks []string
	Tags      []string
	IsTip     bool
}

func (hg *Mercurial) Template() string {
	return "hg {{.Branch}} {{if .LocalCommitNumber}}({{.LocalCommitNumber}}:{{.ChangeSetIDShort}}){{end}}{{range .Bookmarks }} \uf02e {{.}}{{end}}{{range .Tags}} \uf02b {{.}}{{end}}{{if .Working.Changed}} \uf044 {{ .Working.String }}{{ end }}" //nolint: lll
}

func (hg *Mercurial) Enabled() bool {
	if !hg.shouldDisplay() {
		return false
	}

	statusFormats := hg.props.GetKeyValueMap(StatusFormats, map[string]string{})
	hg.Working = &MercurialStatus{ScmStatus: ScmStatus{Formats: statusFormats}}

	displayStatus := hg.props.GetBool(FetchStatus, false)
	if displayStatus {
		hg.setMercurialStatus()
	}

	return true
}

func (hg *Mercurial) CacheKey() (string, bool) {
	dir, err := hg.env.HasParentFilePath(".hg", true)
	if err != nil {
		return "", false
	}

	return dir.Path, true
}

func (hg *Mercurial) shouldDisplay() bool {
	if !hg.hasCommand(MERCURIALCOMMAND) {
		return false
	}

	hgdir, err := hg.env.HasParentFilePath(".hg", false)
	if err != nil {
		return false
	}

	hg.setDir(hgdir.ParentFolder)

	hg.mainSCMDir = hgdir.Path
	hg.scmDir = hgdir.Path
	// convert the worktree file path to a windows one when in a WSL shared folder
	hg.repoRootDir = strings.TrimSuffix(hg.convertToWindowsPath(hgdir.Path), "/.hg")
	return true
}

func (hg *Mercurial) setDir(dir string) {
	dir = path.ReplaceHomeDirPrefixWithTilde(dir) // align with template PWD
	if hg.env.GOOS() == runtime.WINDOWS {
		hg.Dir = strings.TrimSuffix(dir, `\.hg`)
		return
	}
	hg.Dir = strings.TrimSuffix(dir, "/.hg")
}

func (hg *Mercurial) setMercurialStatus() {
	hg.Branch = hg.command

	idString := hg.getHgCommandOutput("log", "-r", ".", "--template", hgLogTemplate)
	if len(idString) == 0 {
		return
	}

	idSplit := strings.Split(idString, "|")
	if len(idSplit) != 5 {
		return
	}

	hg.LocalCommitNumber = idSplit[0]
	hg.ChangeSetID = idSplit[1]

	if len(hg.ChangeSetID) >= 12 {
		hg.ChangeSetIDShort = hg.ChangeSetID[:12]
	}
	hg.Branch = idSplit[2]

	hg.Tags = doSplit(idSplit[3])
	hg.Bookmarks = doSplit(idSplit[4])

	hg.IsTip = false
	tipIndex := 0
	for i, tag := range hg.Tags {
		if tag == "tip" {
			hg.IsTip = true
			tipIndex = i
			break
		}
	}

	if hg.IsTip {
		hg.Tags = RemoveAtIndex(hg.Tags, tipIndex)
	}

	statusString := hg.getHgCommandOutput("status")

	if len(statusString) == 0 {
		return
	}

	statusLines := strings.SplitSeq(statusString, "\n")

	for status := range statusLines {
		hg.Working.add(status[:1])
	}
}

func doSplit(s string) []string {
	if len(s) == 0 {
		return []string{}
	}

	return strings.Split(s, " ")
}

func RemoveAtIndex(s []string, index int) []string {
	ret := make([]string, 0)
	ret = append(ret, s[:index]...)
	return append(ret, s[index+1:]...)
}

func (hg *Mercurial) getHgCommandOutput(command string, args ...string) string {
	args = append([]string{"-R", hg.repoRootDir, command}, args...)
	val, err := hg.env.RunCommand(hg.command, args...)
	if err != nil {
		return ""
	}
	return strings.TrimSpace(val)
}



================================================
FILE: src/segments/mercurial_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
)

func TestMercurialEnabledToolNotFound(t *testing.T) {
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasCommand", "hg").Return(false)
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)

	hg := &Mercurial{}
	hg.Init(properties.Map{}, env)

	assert.False(t, hg.Enabled())
}

func TestMercurialEnabledInWorkingDirectory(t *testing.T) {
	fileInfo := &runtime.FileInfo{
		Path:         "/dir/hello",
		ParentFolder: "/dir",
		IsDir:        true,
	}
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasCommand", "hg").Return(true)
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)
	env.On("HasParentFilePath", ".hg", false).Return(fileInfo, nil)
	env.On("PathSeparator").Return("/")
	env.On("Home").Return(poshHome)
	env.On("Getenv", poshGitEnv).Return("")

	hg := &Mercurial{}
	hg.Init(properties.Map{}, env)

	assert.True(t, hg.Enabled())
	assert.Equal(t, fileInfo.Path, hg.mainSCMDir)
	assert.Equal(t, fileInfo.Path, hg.repoRootDir)
}

func TestMercurialGetIdInfo(t *testing.T) {
	cases := []struct {
		ExpectedWorking           *MercurialStatus
		Case                      string
		LogOutput                 string
		StatusOutput              string
		ExpectedBranch            string
		ExpectedChangeSetID       string
		ExpectedShortID           string
		ExpectedLocalCommitNumber string
		ExpectedBookmarks         []string
		ExpectedTags              []string
		ExpectedIsTip             bool
	}{
		{
			Case:         "nochanges_tip",
			LogOutput:    "123|b6cb23dcb79fe5c2215f1ae8f1a85326a7fed500|branchname|tip|",
			StatusOutput: "",
			ExpectedWorking: &MercurialStatus{ScmStatus{
				Modified:   0,
				Added:      0,
				Deleted:    0,
				Moved:      0,
				Untracked:  0,
				Conflicted: 0,
			}},
			ExpectedBranch:            "branchname",
			ExpectedChangeSetID:       "b6cb23dcb79fe5c2215f1ae8f1a85326a7fed500",
			ExpectedShortID:           "b6cb23dcb79f",
			ExpectedLocalCommitNumber: "123",
			ExpectedIsTip:             true,
			ExpectedBookmarks:         []string{},
			ExpectedTags:              []string{},
		},
		{
			Case:         "nochanges",
			LogOutput:    "123|b6cb23dcb79fe5c2215f1ae8f1a85326a7fed500|branchname||",
			StatusOutput: "",
			ExpectedWorking: &MercurialStatus{ScmStatus{
				Modified:   0,
				Added:      0,
				Deleted:    0,
				Moved:      0,
				Untracked:  0,
				Conflicted: 0,
			}},
			ExpectedBranch:            "branchname",
			ExpectedChangeSetID:       "b6cb23dcb79fe5c2215f1ae8f1a85326a7fed500",
			ExpectedShortID:           "b6cb23dcb79f",
			ExpectedLocalCommitNumber: "123",
			ExpectedIsTip:             false,
			ExpectedBookmarks:         []string{},
			ExpectedTags:              []string{},
		},
		{
			Case:      "changed",
			LogOutput: "3|11a953bf0288663b530dd6d65f3c8e0d5f7fddb5|default|tip mytag mytag2|bm1 bm2",
			StatusOutput: `
M Modified.File
? Untracked.File
R Removed.File
! AlsoRemoved.File
A Added.File
`,
			ExpectedWorking: &MercurialStatus{ScmStatus{
				Modified:   1,
				Added:      1,
				Deleted:    2,
				Moved:      0,
				Untracked:  1,
				Conflicted: 0,
			}},
			ExpectedBranch:            "default",
			ExpectedChangeSetID:       "11a953bf0288663b530dd6d65f3c8e0d5f7fddb5",
			ExpectedShortID:           "11a953bf0288",
			ExpectedLocalCommitNumber: "3",
			ExpectedIsTip:             true,
			ExpectedBookmarks:         []string{"bm1", "bm2"},
			ExpectedTags:              []string{"mytag", "mytag2"},
		},
	}

	for _, tc := range cases {
		fileInfo := &runtime.FileInfo{
			Path:         "/dir/hello",
			ParentFolder: "/dir",
			IsDir:        true,
		}

		props := properties.Map{
			FetchStatus: true,
		}

		env := new(mock.Environment)
		env.On("InWSLSharedDrive").Return(false)
		env.On("HasCommand", "hg").Return(true)
		env.On("GOOS").Return("")
		env.On("IsWsl").Return(false)
		env.On("HasParentFilePath", ".hg", false).Return(fileInfo, nil)
		env.On("PathSeparator").Return("/")
		env.On("Home").Return(poshHome)
		env.On("Getenv", poshGitEnv).Return("")
		env.MockHgCommand(fileInfo.Path, tc.LogOutput, "log", "-r", ".", "--template", hgLogTemplate)
		env.MockHgCommand(fileInfo.Path, tc.StatusOutput, "status")

		hg := &Mercurial{}
		hg.Init(props, env)

		if tc.ExpectedWorking != nil {
			tc.ExpectedWorking.Formats = map[string]string{}
		}

		assert.True(t, hg.Enabled())
		assert.Equal(t, fileInfo.Path, hg.mainSCMDir)
		assert.Equal(t, fileInfo.Path, hg.repoRootDir)
		assert.Equal(t, tc.ExpectedWorking, hg.Working, tc.Case)
		assert.Equal(t, tc.ExpectedBranch, hg.Branch, tc.Case)
		assert.Equal(t, tc.ExpectedChangeSetID, hg.ChangeSetID, tc.Case)
		assert.Equal(t, tc.ExpectedShortID, hg.ChangeSetIDShort, tc.Case)
		assert.Equal(t, tc.ExpectedLocalCommitNumber, hg.LocalCommitNumber, tc.Case)
		assert.Equal(t, tc.ExpectedIsTip, hg.IsTip, tc.Case)
		assert.Equal(t, tc.ExpectedBookmarks, hg.Bookmarks, tc.Case)
		assert.Equal(t, tc.ExpectedTags, hg.Tags, tc.Case)
	}
}



================================================
FILE: src/segments/mojo.go
================================================
package segments

import (
	"slices"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Mojo struct {
	Venv string
	language
}

func (m *Mojo) Template() string {
	return " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} "
}

func (m *Mojo) Enabled() bool {
	m.extensions = []string{"*.🔥", "*.mojo", "mojoproject.toml"}
	m.commands = []*cmd{
		{
			executable: "mojo",
			args:       []string{"--version"},
			regex:      `(?:mojo (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	m.displayMode = m.props.GetString(DisplayMode, DisplayModeEnvironment)
	m.language.loadContext = m.loadContext
	m.language.inContext = m.inContext

	return m.language.Enabled()
}

func (m *Mojo) loadContext() {
	if !m.props.GetBool(FetchVirtualEnv, true) {
		return
	}

	// Magic, the official package manager and virtual env manager,
	// is built on top of pixi: https://github.com/prefix-dev/pixi
	venv := m.env.Getenv("PIXI_ENVIRONMENT_NAME")
	if len(venv) > 0 && m.canUseVenvName(venv) {
		m.Venv = venv
	}
}

func (m *Mojo) inContext() bool {
	return m.Venv != ""
}

func (m *Mojo) canUseVenvName(name string) bool {
	defaultNames := []string{"default"}

	if m.props.GetBool(properties.DisplayDefault, true) ||
		!slices.Contains(defaultNames, name) {
		return true
	}

	return false
}



================================================
FILE: src/segments/mojo_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"

	"github.com/alecthomas/assert"
)

func TestMojoTemplate(t *testing.T) {
	cases := []struct {
		Case            string
		Expected        string
		VirtualEnvName  string
		FetchVirtualEnv bool
		DisplayDefault  bool
		FetchVersion    bool
	}{
		{
			Case:            "Virtual environment is present",
			Expected:        "foo 24.5.0",
			VirtualEnvName:  "foo",
			FetchVirtualEnv: true,
			DisplayDefault:  true,
			FetchVersion:    true,
		},
		{
			Case:            "No virtual environment present",
			Expected:        "24.5.0",
			VirtualEnvName:  "",
			FetchVirtualEnv: true,
			DisplayDefault:  true,
			FetchVersion:    true,
		},
		{
			Case:            "Hide the virtual environment, but show the version",
			Expected:        "24.5.0",
			VirtualEnvName:  "foo",
			FetchVirtualEnv: false,
			DisplayDefault:  true,
			FetchVersion:    true,
		},
		{
			Case:            "Show the virtual environment, but hide the version",
			Expected:        "foo",
			VirtualEnvName:  "foo",
			FetchVirtualEnv: true,
			DisplayDefault:  true,
			FetchVersion:    false,
		},
		{
			Case:            "Show the default virtual environment",
			Expected:        "default 24.5.0",
			VirtualEnvName:  "default",
			FetchVirtualEnv: true,
			DisplayDefault:  true,
			FetchVersion:    true,
		},
		{
			Case:            "Hide the default virtual environment",
			Expected:        "24.5.0",
			VirtualEnvName:  "default",
			FetchVirtualEnv: true,
			DisplayDefault:  false,
			FetchVersion:    true,
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "mojo",
			versionParam:  "--version",
			versionOutput: "mojo 24.5.0 (e8aacb95)",
			extension:     "*.mojo",
		}
		env, props := getMockedLanguageEnv(params)
		env.On("Getenv", "PIXI_ENVIRONMENT_NAME").Return(tc.VirtualEnvName)
		props[properties.DisplayDefault] = tc.DisplayDefault
		props[properties.FetchVersion] = tc.FetchVersion
		props[FetchVirtualEnv] = tc.FetchVirtualEnv
		props[DisplayMode] = DisplayModeAlways

		mojo := &Mojo{}
		mojo.Init(props, env)
		assert.True(t, mojo.Enabled())
		assert.Equal(t, tc.Expected, renderTemplate(env, mojo.Template(), mojo), tc.Case)
	}
}



================================================
FILE: src/segments/mvn.go
================================================
package segments

type Mvn struct {
	language
}

func (m *Mvn) Enabled() bool {
	m.extensions = []string{"pom.xml"}
	m.commands = []*cmd{
		{
			executable: "mvn",
			args:       []string{"--version"},
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)(?:-(?P<prerelease>[a-z]+-[0-9]+))?))`,
		},
	}
	m.versionURLTemplate = "https://github.com/apache/maven/releases/tag/maven-{{ .Full }}"

	mvnw, err := m.env.HasParentFilePath("mvnw", false)
	if err == nil {
		m.commands[0].executable = mvnw.Path
	}

	return m.language.Enabled()
}

func (m *Mvn) Template() string {
	return languageTemplate
}



================================================
FILE: src/segments/mvn_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"

	"github.com/alecthomas/assert"
)

func TestMvn(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		MvnVersion     string
		MvnwVersion    string
		HasMvnw        bool
	}{
		{
			Case:           "Maven version",
			ExpectedString: "1.0.0",
			MvnVersion:     "Apache Maven 1.0.0",
			HasMvnw:        false,
			MvnwVersion:    ""},
		{
			Case:           "Local Maven version from wrapper",
			ExpectedString: "1.1.0-beta-9",
			MvnVersion:     "Apache Maven 1.0.0",
			HasMvnw:        true,
			MvnwVersion:    "Apache Maven 1.1.0-beta-9"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "mvn",
			versionParam:  "--version",
			versionOutput: tc.MvnVersion,
			extension:     "pom.xml",
		}
		env, props := getMockedLanguageEnv(params)

		fileInfo := &runtime.FileInfo{
			Path:         "../mvnw",
			ParentFolder: "./",
			IsDir:        false,
		}
		var err error
		if !tc.HasMvnw {
			err = errors.New("no match")
		}
		env.On("HasParentFilePath", "mvnw", false).Return(fileInfo, err)
		env.On("HasCommand", fileInfo.Path).Return(tc.HasMvnw)
		env.On("RunCommand", fileInfo.Path, []string{"--version"}).Return(tc.MvnwVersion, nil)

		m := &Mvn{}
		m.Init(props, env)
		assert.True(t, m.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, m.Template(), m), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/nba.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

// segment struct, makes templating easier
type Nba struct {
	base

	NBAData
}

// NBA struct contains parsed API data that care about for the segment
type NBAData struct {
	HomeTeam       string
	AwayTeam       string
	Time           string
	GameDate       string
	StartTimeUTC   string
	GameStatus     GameStatus // 1 = scheduled, 2 = in progress, 3 = finished
	HomeScore      int
	AwayScore      int
	HomeTeamWins   int
	HomeTeamLosses int
	AwayTeamWins   int
	AwayTeamLosses int
}

func (nba *NBAData) HasStats() bool {
	return nba.HomeTeamWins != 0 || nba.HomeTeamLosses != 0 || nba.AwayTeamWins != 0 || nba.AwayTeamLosses != 0
}

func (nba *NBAData) Started() bool {
	return nba.GameStatus == InProgress || nba.GameStatus == Finished
}

const (
	NBASeason  properties.Property = "season"
	TeamName   properties.Property = "team"
	DaysOffset properties.Property = "days_offset"

	ScheduledTemplate  properties.Property = "scheduled_template"
	InProgressTemplate properties.Property = "in_progress_template"
	FinishedTemplate   properties.Property = "finished_template"

	NBAScoreURL    string = "https://cdn.nba.com/static/json/liveData/scoreboard/todaysScoreboard_00.json"
	NBAScheduleURL string = "https://stats.nba.com/stats/internationalbroadcasterschedule?LeagueID=00&Season=%s&Date=%s&RegionID=1&EST=Y"

	UNKNOWN = "unknown"

	currentNBASeason = "2023"
	NBADateFormat    = "02/01/2006"
)

// Custom type for GameStatus
type GameStatus int

// Constants for GameStatus values
const (
	Scheduled  GameStatus = 1
	InProgress GameStatus = 2
	Finished   GameStatus = 3
	NotFound   GameStatus = 4
)

// Int() method for GameStatus to get its integer representation
// This is a helpful method if people want to come up with their own templates
func (gs GameStatus) Int() int {
	return int(gs)
}

func (gs GameStatus) Valid() bool {
	return gs == Scheduled || gs == InProgress || gs == Finished
}

func (gs GameStatus) String() string {
	switch gs {
	case Scheduled:
		return "Scheduled"
	case InProgress:
		return "In Progress"
	case Finished:
		return "Finished"
	case NotFound:
		return "Not Found"
	default:
		return UNKNOWN
	}
}

// All of the structs needed to retrieve data from the live score endpoint
type ScoreboardResponse struct {
	Scoreboard Scoreboard `json:"scoreboard"`
}

type Scoreboard struct {
	GameDate string `json:"gameDate"`
	Games    []Game `json:"games"`
}

type Game struct {
	GameStatusText string `json:"gameStatusText"`
	GameTimeUTC    string `json:"gameTimeUTC"`
	HomeTeam       Team   `json:"homeTeam"`
	AwayTeam       Team   `json:"awayTeam"`
	GameStatus     int    `json:"gameStatus"`
}

type Team struct {
	TeamTricode string `json:"teamTricode"`
	Wins        int    `json:"wins"`
	Losses      int    `json:"losses"`
	Score       int    `json:"score"`
}

// All the structs needed to get data from the schedule endpoint
type ScheduleResponse struct {
	ResultSets []ResultSet `json:"resultSets"`
}

type ResultSet struct {
	CompleteGameList []ScheduledGame `json:"CompleteGameList,omitempty"`
}

type ScheduledGame struct {
	VtAbbreviation string `json:"vtAbbreviation"`
	HtAbbreviation string `json:"htAbbreviation"`
	Date           string `json:"date"`
	Time           string `json:"time"`
}

func (nba *Nba) Template() string {
	return " \U000F0806 {{ .HomeTeam}}{{ if .HasStats }} ({{.HomeTeamWins}}-{{.HomeTeamLosses}}){{ end }}{{ if .Started }}:{{.HomeScore}}{{ end }} vs {{ .AwayTeam}}{{ if .HasStats }} ({{.AwayTeamWins}}-{{.AwayTeamLosses}}){{ end }}{{ if .Started }}:{{.AwayScore}}{{ end }} | {{ if not .Started }}{{.GameDate}} | {{ end }}{{.Time}} " //nolint:lll
}

func (nba *Nba) Enabled() bool {
	data, err := nba.getResult()
	if err != nil || !data.GameStatus.Valid() {
		return false
	}

	nba.NBAData = *data

	return true
}

// parses through a set of games from the score endpoint and looks for props.team in away or home team
func (nba *Nba) findGameScoreByTeamTricode(games []Game, teamTricode string) (*Game, error) {
	for _, game := range games {
		if game.HomeTeam.TeamTricode == teamTricode || game.AwayTeam.TeamTricode == teamTricode {
			return &game, nil
		}
	}

	return nil, errors.New("no game score found for team")
}

// parses through a set of games from the schedule endpoint and looks for props.team in away or home team
func (nba *Nba) findGameSchedulebyTeamTricode(games []ScheduledGame, teamTricode string) (*ScheduledGame, error) {
	for _, game := range games {
		if game.VtAbbreviation == teamTricode || game.HtAbbreviation == teamTricode {
			return &game, nil
		}
	}

	return nil, errors.New("no scheduled game found for team")
}

// parses the time and date from the schedule endpoint into a UTC time
func (nba *Nba) parseTimetoUTC(timeEST, date string) string {
	combinedTime := date + " " + timeEST
	timeUTC, err := time.Parse("01/02/2006 03:04 PM", combinedTime)
	if err != nil {
		return ""
	}

	return timeUTC.UTC().Format("2006-01-02T15:04:05Z")
}

// retrieves data from the score endpoint
func (nba *Nba) retrieveScoreData(teamName string, httpTimeout int) (*NBAData, error) {
	body, err := nba.env.HTTPRequest(NBAScoreURL, nil, httpTimeout)
	if err != nil {
		return nil, err
	}

	var scoreboardResponse ScoreboardResponse
	err = json.Unmarshal(body, &scoreboardResponse)
	if err != nil {
		return nil, err
	}

	gameInfo, err := nba.findGameScoreByTeamTricode(scoreboardResponse.Scoreboard.Games, teamName)
	if err != nil {
		return nil, err
	}

	return &NBAData{
		AwayTeam:       gameInfo.AwayTeam.TeamTricode,
		HomeTeam:       gameInfo.HomeTeam.TeamTricode,
		Time:           gameInfo.GameStatusText,
		GameDate:       scoreboardResponse.Scoreboard.GameDate,
		StartTimeUTC:   gameInfo.GameTimeUTC,
		GameStatus:     GameStatus(gameInfo.GameStatus),
		HomeScore:      gameInfo.HomeTeam.Score,
		AwayScore:      gameInfo.AwayTeam.Score,
		HomeTeamWins:   gameInfo.HomeTeam.Wins,
		HomeTeamLosses: gameInfo.HomeTeam.Losses,
		AwayTeamWins:   gameInfo.AwayTeam.Wins,
		AwayTeamLosses: gameInfo.AwayTeam.Losses,
	}, nil
}

// Retrieves the data from the schedule endpoint
func (nba *Nba) retrieveScheduleData(teamName string, httpTimeout int) (*NBAData, error) {
	// How many days into the future should we look for a game.
	numDaysToSearch := nba.props.GetInt(DaysOffset, 8)
	nbaSeason := nba.props.GetString(NBASeason, currentNBASeason)
	// Get the current date in America/New_York
	nowNYC := time.Now().In(time.FixedZone("America/New_York", -5*60*60))

	// Check to see if a game is scheduled while the numDaysToSearch is greater than 0
	for numDaysToSearch > 0 {
		dateStr := nowNYC.Format(NBADateFormat)
		urlEndpoint := fmt.Sprintf(NBAScheduleURL, nbaSeason, dateStr)

		body, err := nba.env.HTTPRequest(urlEndpoint, nil, httpTimeout)
		if err != nil {
			return nil, err
		}

		var scheduleResponse *ScheduleResponse
		err = json.Unmarshal(body, &scheduleResponse)
		if err != nil {
			return nil, err
		}

		// Check if we can find a game for the team
		gameInfo, err := nba.findGameSchedulebyTeamTricode(scheduleResponse.ResultSets[1].CompleteGameList, teamName)
		if err != nil {
			// We didn't find a game for the team on this day, so we need to check the next day
			nowNYC = nowNYC.AddDate(0, 0, 1)
			numDaysToSearch--
			continue
		}

		return &NBAData{
			AwayTeam:       gameInfo.VtAbbreviation,
			HomeTeam:       gameInfo.HtAbbreviation,
			Time:           gameInfo.Time + " ET",
			GameDate:       gameInfo.Date,
			StartTimeUTC:   nba.parseTimetoUTC(gameInfo.Time, gameInfo.Date),
			GameStatus:     Scheduled,
			HomeScore:      0,
			AwayScore:      0,
			HomeTeamWins:   0,
			HomeTeamLosses: 0,
			AwayTeamWins:   0,
			AwayTeamLosses: 0,
		}, nil
	}

	return nil, errors.New("no scheduled game found for team within DaysOffset days")
}

// First try to get the data from the score endpoint, if that fails, try the schedule endpoint
// The score endpoint usually goes live within 12 hours of a game starting
func (nba *Nba) getAvailableGameData(teamName string, httpTimeout int) (*NBAData, error) {
	// Get the info from the score endpoint
	data, err := nba.retrieveScoreData(teamName, httpTimeout)
	if err == nil {
		return data, nil
	}

	// If the score endpoint doesn't have anything get data from the schedule endpoint
	data, err = nba.retrieveScheduleData(teamName, httpTimeout)
	if err == nil {
		return data, nil
	}

	return nil, err
}

func (nba *Nba) getResult() (*NBAData, error) {
	teamName := nba.props.GetString(TeamName, "")

	httpTimeout := nba.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	log.Debug("fetching available data for " + teamName)

	data, err := nba.getAvailableGameData(teamName, httpTimeout)
	if err != nil {
		log.Error(errors.Join(err, fmt.Errorf("unable to get data for team %s", teamName)))
		return nil, err
	}

	if !data.GameStatus.Valid() {
		err := fmt.Errorf("%d is not a valid game status", data.GameStatus)
		log.Error(err)
		return nil, err
	}

	return data, nil
}



================================================
FILE: src/segments/nba_test.go
================================================
package segments

import (
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func getTestData(file string) string {
	content, _ := os.ReadFile(fmt.Sprintf("../test/%s", file))
	return string(content)
}

// create Test segment for NBA segment
func TestNBASegment(t *testing.T) {
	jsonScheduleData := getTestData("nba/schedule.json")
	jsonScoreData := getTestData("nba/score.json")

	cases := []struct {
		Error           error
		Case            string
		JSONResponse    string
		ExpectedString  string
		TeamName        string
		CacheTimeout    int
		DaysOffset      int
		ExpectedEnabled bool
		CacheFoundFail  bool
	}{
		{
			Case:            "Team (Home Team) Scheduled Game",
			JSONResponse:    jsonScheduleData,
			TeamName:        "LAL",
			ExpectedString:  "󰠆 LAL vs PHX | 10/26/2023 | 10:00 PM ET",
			ExpectedEnabled: true,
			DaysOffset:      8,
		},
		{
			Case:            "Team (Away Team) Scheduled Game",
			JSONResponse:    jsonScheduleData,
			TeamName:        "PHX",
			ExpectedString:  "󰠆 LAL vs PHX | 10/26/2023 | 10:00 PM ET",
			DaysOffset:      4,
			ExpectedEnabled: true,
		},
		{
			Case:            "Team (Home Team) Live Game",
			JSONResponse:    jsonScoreData,
			TeamName:        "CHA",
			ExpectedString:  "󰠆 CHA (1-0):13 vs BOS (0-1):8 | Q1 8:23",
			ExpectedEnabled: true,
		},
		{
			Case:            "Team (Away Team) Live Game",
			JSONResponse:    jsonScoreData,
			TeamName:        "BOS",
			ExpectedString:  "󰠆 CHA (1-0):13 vs BOS (0-1):8 | Q1 8:23",
			ExpectedEnabled: true,
		},
		{
			Case:            "Team not Found",
			JSONResponse:    jsonScheduleData,
			DaysOffset:      8,
			TeamName:        "INVALID",
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		props := properties.Map{
			TeamName:   tc.TeamName,
			DaysOffset: tc.DaysOffset,
		}

		env.On("HTTPRequest", NBAScoreURL).Return([]byte(tc.JSONResponse), tc.Error)

		// Add all the daysOffset to the http request responses
		for i := 0; i < tc.DaysOffset; i++ {
			currTime := time.Now().In(time.FixedZone("America/New_York", -5*60*60))
			// add offset days to currTime so we can query for games in the future
			currTime = currTime.AddDate(0, 0, i)
			dateStr := currTime.Format(NBADateFormat)
			scheduleURLEndpoint := fmt.Sprintf(NBAScheduleURL, currentNBASeason, dateStr)
			env.On("HTTPRequest", scheduleURLEndpoint).Return([]byte(tc.JSONResponse), tc.Error)
		}

		nba := &Nba{}
		nba.Init(props, env)

		enabled := nba.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		assert.Equal(t, tc.ExpectedString, renderTemplate(env, nba.Template(), nba), tc.Case)
	}
}



================================================
FILE: src/segments/nbgv.go
================================================
package segments

import (
	"encoding/json"
)

type Nbgv struct {
	base

	VersionInfo
}

type VersionInfo struct {
	Version                      string `json:"Version"`
	AssemblyVersion              string `json:"AssemblyVersion"`
	AssemblyInformationalVersion string `json:"AssemblyInformationalVersion"`
	NuGetPackageVersion          string `json:"NuGetPackageVersion"`
	ChocolateyPackageVersion     string `json:"ChocolateyPackageVersion"`
	NpmPackageVersion            string `json:"NpmPackageVersion"`
	SimpleVersion                string `json:"SimpleVersion"`
	VersionFileFound             bool   `json:"VersionFileFound"`
}

func (n *Nbgv) Template() string {
	return " {{ .Version }} "
}

func (n *Nbgv) Enabled() bool {
	nbgv := "nbgv"
	if !n.env.HasCommand(nbgv) {
		return false
	}

	response, err := n.env.RunCommand(nbgv, "get-version", "--format=json")
	if err != nil {
		return false
	}

	n.VersionInfo = VersionInfo{}
	err = json.Unmarshal([]byte(response), &n.VersionInfo)

	if err != nil {
		return false
	}

	return n.VersionFileFound
}



================================================
FILE: src/segments/nbgv_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/alecthomas/assert"
)

func TestNbgv(t *testing.T) {
	cases := []struct {
		Error           error
		Case            string
		ExpectedString  string
		Response        string
		Template        string
		ExpectedEnabled bool
		HasNbgv         bool
	}{
		{Case: "nbgv not installed"},
		{Case: "nbgv installed, no version file", HasNbgv: true, Response: "{ \"VersionFileFound\": false }"},
		{Case: "nbgv installed with version file", ExpectedEnabled: true, HasNbgv: true, Response: "{ \"VersionFileFound\": true }"},
		{
			Case:            "invalid template",
			ExpectedEnabled: true,
			ExpectedString:  "invalid template text",
			HasNbgv:         true,
			Response:        "{ \"VersionFileFound\": true }",
			Template:        "{{ err }}",
		},
		{
			Case:    "command error",
			HasNbgv: true,
			Error:   errors.New("oh noes"),
		},
		{
			Case:     "invalid json",
			HasNbgv:  true,
			Response: "><<<>>>",
		},
		{
			Case:            "Version",
			ExpectedEnabled: true,
			ExpectedString:  "bump",
			HasNbgv:         true,
			Response:        "{ \"VersionFileFound\": true, \"Version\": \"bump\" }",
			Template:        "{{ .Version }}",
		},
		{
			Case:            "AssemblyVersion",
			ExpectedEnabled: true,
			ExpectedString:  "bump",
			HasNbgv:         true,
			Response:        "{ \"VersionFileFound\": true, \"AssemblyVersion\": \"bump\" }",
			Template:        "{{ .AssemblyVersion }}",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HasCommand", "nbgv").Return(tc.HasNbgv)
		env.On("RunCommand", "nbgv", []string{"get-version", "--format=json"}).Return(tc.Response, tc.Error)

		nbgv := &Nbgv{}
		nbgv.Init(properties.Map{}, env)

		enabled := nbgv.Enabled()

		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if tc.Template == "" {
			tc.Template = nbgv.Template()
		}
		if enabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, nbgv), tc.Case)
		}
	}
}



================================================
FILE: src/segments/nightscout.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	http2 "net/http"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

// segment struct, makes templating easier
type Nightscout struct {
	base

	TrendIcon string
	NightscoutData
}

const (
	// Your complete Nightscout URL and APIKey like this
	URL     properties.Property = "url"
	Headers properties.Property = "headers"

	DoubleUpIcon      properties.Property = "doubleup_icon"
	SingleUpIcon      properties.Property = "singleup_icon"
	FortyFiveUpIcon   properties.Property = "fortyfiveup_icon"
	FlatIcon          properties.Property = "flat_icon"
	FortyFiveDownIcon properties.Property = "fortyfivedown_icon"
	SingleDownIcon    properties.Property = "singledown_icon"
	DoubleDownIcon    properties.Property = "doubledown_icon"
)

// NightscoutData struct contains the API data
type NightscoutData struct {
	DateString time.Time `json:"dateString"`
	SysTime    time.Time `json:"sysTime"`
	ID         string    `json:"_id"`
	Direction  string    `json:"direction"`
	Device     string    `json:"device"`
	Type       string    `json:"type"`
	Sgv        int       `json:"sgv"`
	Date       int64     `json:"date"`
	Trend      int       `json:"trend"`
	UtcOffset  int       `json:"utcOffset"`
	Mills      int64     `json:"mills"`
}

func (ns *Nightscout) Template() string {
	return " {{ .Sgv }} "
}

func (ns *Nightscout) Enabled() bool {
	data, err := ns.getResult()
	if err != nil {
		return false
	}
	ns.NightscoutData = *data
	ns.TrendIcon = ns.getTrendIcon()

	return true
}

func (ns *Nightscout) getTrendIcon() string {
	switch ns.Direction {
	case "DoubleUp":
		return ns.props.GetString(DoubleUpIcon, "↑↑")
	case "SingleUp":
		return ns.props.GetString(SingleUpIcon, "↑")
	case "FortyFiveUp":
		return ns.props.GetString(FortyFiveUpIcon, "↗")
	case "Flat":
		return ns.props.GetString(FlatIcon, "→")
	case "FortyFiveDown":
		return ns.props.GetString(FortyFiveDownIcon, "↘")
	case "SingleDown":
		return ns.props.GetString(SingleDownIcon, "↓")
	case "DoubleDown":
		return ns.props.GetString(DoubleDownIcon, "↓↓")
	default:
		return ""
	}
}

func (ns *Nightscout) getResult() (*NightscoutData, error) {
	parseSingleElement := func(data []byte) (*NightscoutData, error) {
		var result []*NightscoutData
		err := json.Unmarshal(data, &result)
		if err != nil {
			return nil, err
		}
		if len(result) == 0 {
			return nil, errors.New("no elements in the array")
		}
		return result[0], nil
	}

	url := ns.props.GetString(URL, "")
	httpTimeout := ns.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	headers := ns.props.GetKeyValueMap(Headers, map[string]string{})
	modifiers := func(request *http2.Request) {
		for key, value := range headers {
			request.Header.Add(key, value)
		}
	}

	body, err := ns.env.HTTPRequest(url, nil, httpTimeout, modifiers)
	if err != nil {
		return nil, err
	}

	var arr []*NightscoutData
	err = json.Unmarshal(body, &arr)
	if err != nil {
		return nil, err
	}

	data, err := parseSingleElement(body)
	if err != nil {
		return nil, err
	}

	return data, nil
}



================================================
FILE: src/segments/nightscout_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

const (
	FAKEAPIURL = "FAKE"
)

func TestNSSegment(t *testing.T) {
	cases := []struct {
		Error           error
		Case            string
		JSONResponse    string
		ExpectedString  string
		Template        string
		CacheTimeout    int
		ExpectedEnabled bool
		CacheFoundFail  bool
	}{
		{
			Case: "Flat 150",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":150,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"Flat","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 150→",
			ExpectedEnabled: true,
		},
		{
			Case: "DoubleDown 50",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":50,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"DoubleDown","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 50↓↓",
			ExpectedEnabled: true,
		},
		{
			Case: "DoubleUp 250",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":250,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"DoubleUp","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 250↑↑",
			ExpectedEnabled: true,
		},
		{
			Case: "SingleUp 130",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":130,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"SingleUp","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 130↑",
			ExpectedEnabled: true,
		},
		{
			Case: "FortyFiveUp 174",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":174,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"FortyFiveUp","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 174↗",
			ExpectedEnabled: true,
		},
		{
			Case: "FortyFiveDown 61",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":61,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"FortyFiveDown","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 61↘",
			ExpectedEnabled: true,
		},
		{
			Case: "DoubleDown 50",
			JSONResponse: `
			[{"_id":"619d6fa819696e8ded5b2206","sgv":50,"date":1637707537000,"dateString":"2021-11-23T22:45:37.000Z","trend":4,"direction":"DoubleDown","device":"share2","type":"sgv","utcOffset":0,"sysTime":"2021-11-23T22:45:37.000Z","mills":1637707537000}]`, //nolint:lll
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 50↓↓",
			ExpectedEnabled: true,
		},
		{
			Case:            "Error in retrieving data",
			JSONResponse:    "nonsense",
			Error:           errors.New("Something went wrong"),
			ExpectedEnabled: false,
		},
		{
			Case:            "Empty array",
			JSONResponse:    "[]",
			ExpectedEnabled: false,
		},
		{
			Case: "Error parsing response",
			JSONResponse: `
			4tffgt4e4567`,
			Template:        "\ue2a1 {{.Sgv}}{{.TrendIcon}}",
			ExpectedString:  "\ue2a1 50↓↓",
			ExpectedEnabled: false,
		},
		{
			Case: "Faulty template",
			JSONResponse: `
			[{"sgv":50,"direction":"DoubleDown"}]`,
			Template:        "\ue2a1 {{.Sgv}}{{.Burp}}",
			ExpectedString:  template.IncorrectTemplate,
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		props := properties.Map{
			URL:     "FAKE",
			Headers: map[string]string{"Fake-Header": "xxxxx"},
		}

		env.On("HTTPRequest", FAKEAPIURL).Return([]byte(tc.JSONResponse), tc.Error)

		ns := &Nightscout{}
		ns.Init(props, env)

		enabled := ns.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = ns.Template()
		}
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, ns), tc.Case)
	}
}



================================================
FILE: src/segments/nim.go
================================================
package segments

type Nim struct {
	language
}

func (n *Nim) Template() string {
	return languageTemplate
}

func (n *Nim) Enabled() bool {
	n.extensions = []string{"*.nim", "*.nims"}

	n.commands = []*cmd{
		{
			executable: "nim",
			args:       []string{"--version"},
			regex:      `Nim Compiler Version (?P<version>(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+))`,
		},
	}
	return n.language.Enabled()
}



================================================
FILE: src/segments/nim_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNim(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{
			Case:           "Nim 2.2.0",
			ExpectedString: "2.2.0",
			Version:        "Nim Compiler Version 2.2.0 [MacOSX: arm64]\nCompiled at 2024-11-30\nCopyright (c) 2006-2024 by Andreas Rumpf",
		},
		{
			Case:           "Nim 1.6.12",
			ExpectedString: "1.6.12",
			Version:        "Nim Compiler Version 1.6.12 [Linux: amd64]\nCompiled at 2023-06-15\nCopyright (c) 2006-2023 by Andreas Rumpf",
		},
		{
			Case:           "Nim 2.0.0",
			ExpectedString: "2.0.0",
			Version:        "Nim Compiler Version 2.0.0 [Windows: amd64]\nCompiled at 2023-12-25\nCopyright (c) 2006-2023 by Andreas Rumpf",
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "nim",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.nim",
		}
		env, props := getMockedLanguageEnv(params)
		n := &Nim{}
		n.Init(props, env)
		assert.True(t, n.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, n.Template(), n), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/nixshell.go
================================================
package segments

import (
	"path/filepath"
	"strings"
)

const (
	NONE = "none"
)

type NixShell struct {
	base

	Type string
}

func (n *NixShell) Template() string {
	return "via {{ .Type }}-shell"
}

func (n *NixShell) DetectType() string {
	shellType := n.env.Getenv("IN_NIX_SHELL")

	switch shellType {
	case "pure", "impure":
		return shellType
	default:
		if n.InNewNixShell() {
			return UNKNOWN
		}

		return NONE
	}
}

// Hack to detect if we're in a `nix shell` (in contrast to a `nix-shell`).
// A better way to do this will be enabled by https://github.com/NixOS/nix/issues/6677
// so we check if the PATH contains a nix store.
func (n *NixShell) InNewNixShell() bool {
	paths := filepath.SplitList(n.env.Getenv("PATH"))

	for _, p := range paths {
		if strings.Contains(p, "/nix/store") {
			return true
		}
	}

	return false
}

func (n *NixShell) Enabled() bool {
	n.Type = n.DetectType()

	return n.Type != NONE
}



================================================
FILE: src/segments/nixshell_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/alecthomas/assert"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
)

const (
	nixPath     = "/nix/store/zznw8fnzss1vaqfg5hmv3y79s3hkqczi-devshell-dir/bin"
	defaultPath = "/users/xyz/testing"
	fullNixPath = defaultPath + ":" + nixPath
)

func TestNixShellSegment(t *testing.T) {
	cases := []struct {
		name           string
		expectedString string
		shellType      string
		enabled        bool
	}{
		{
			name:           "Pure Nix Shell",
			expectedString: "via pure-shell",
			shellType:      "pure",
			enabled:        true,
		},
		{
			name:           "Impure Nix Shell",
			expectedString: "via impure-shell",
			shellType:      "impure",
			enabled:        true,
		},
		{
			name:           "Unknown Nix Shell",
			expectedString: "via unknown-shell",
			shellType:      "unknown",
			enabled:        true,
		},
		{
			name:           "No Nix Shell",
			expectedString: "",
			shellType:      "",
			enabled:        false,
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			env := new(mock.Environment)
			env.On("Getenv", "IN_NIX_SHELL").Return(tc.shellType)

			path := defaultPath
			if tc.shellType != "" {
				path = fullNixPath
			}

			env.On("Getenv", "PATH").Return(path)

			n := NixShell{}
			n.Init(properties.Map{}, env)

			assert.Equal(t, tc.enabled, n.Enabled(), fmt.Sprintf("Failed in case: %s", tc.name))

			if tc.enabled {
				assert.Equal(t, tc.expectedString, renderTemplate(env, n.Template(), n), tc.name)
			}
		})
	}
}



================================================
FILE: src/segments/node.go
================================================
package segments

import (
	"fmt"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
)

type Node struct {
	PackageManagerIcon string
	PackageManagerName string

	language
}

const (
	// PnpmIcon illustrates PNPM is used
	PnpmIcon properties.Property = "pnpm_icon"
	// YarnIcon illustrates Yarn is used
	YarnIcon properties.Property = "yarn_icon"
	// NPMIcon illustrates NPM is used
	NPMIcon properties.Property = "npm_icon"
	// BunIcon illustrates Bun is used
	BunIcon properties.Property = "bun_icon"
	// FetchPackageManager shows if Bun, NPM, PNPM, or Yarn is used
	FetchPackageManager properties.Property = "fetch_package_manager"
)

func (n *Node) Template() string {
	return " {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} "
}

func (n *Node) Enabled() bool {
	n.extensions = []string{"*.js", "*.ts", "package.json", ".nvmrc", "pnpm-workspace.yaml", ".pnpmfile.cjs", ".vue"}
	n.commands = []*cmd{
		{
			executable: "node",
			args:       []string{"--version"},
			regex:      `(?:v(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	n.versionURLTemplate = "https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V{{ .Major }}.md#{{ .Full }}"
	n.language.matchesVersionFile = n.matchesVersionFile
	n.language.loadContext = n.loadContext

	return n.language.Enabled()
}

func (n *Node) loadContext() {
	if !n.props.GetBool(FetchPackageManager, false) {
		return
	}

	packageManagerDefinitions := []struct {
		fileName     string
		name         string
		iconProperty properties.Property
		defaultIcon  string
	}{
		{
			fileName:     "pnpm-lock.yaml",
			name:         "pnpm",
			iconProperty: PnpmIcon,
			defaultIcon:  "\U000F02C1",
		},
		{
			fileName:     "yarn.lock",
			name:         "yarn",
			iconProperty: YarnIcon,
			defaultIcon:  "\U000F011B",
		},
		{
			fileName:     "bun.lockb",
			name:         "bun",
			iconProperty: BunIcon,
			defaultIcon:  "\ue76f",
		},
		{
			fileName:     "bun.lock",
			name:         "bun",
			iconProperty: BunIcon,
			defaultIcon:  "\ue76f",
		},
		{
			fileName:     "package-lock.json",
			name:         "npm",
			iconProperty: NPMIcon,
			defaultIcon:  "\uE71E",
		},
		{
			fileName:     "package.json",
			name:         "npm",
			iconProperty: NPMIcon,
			defaultIcon:  "\uE71E",
		},
	}

	for _, pm := range packageManagerDefinitions {
		if n.env.HasFiles(pm.fileName) {
			n.PackageManagerName = pm.name
			n.PackageManagerIcon = n.props.GetString(pm.iconProperty, pm.defaultIcon)
			break
		}
	}
}

func (n *Node) matchesVersionFile() (string, bool) {
	fileVersion := n.env.FileContent(".nvmrc")
	if len(fileVersion) == 0 {
		return "", true
	}

	fileVersion = strings.TrimSpace(fileVersion)

	if strings.HasPrefix(fileVersion, "lts/") {
		fileVersion = strings.ToLower(fileVersion)
		codeName := strings.TrimPrefix(fileVersion, "lts/")
		switch codeName {
		case "argon":
			fileVersion = "4.9.1"
		case "boron":
			fileVersion = "6.17.1"
		case "carbon":
			fileVersion = "8.17.0"
		case "dubnium":
			fileVersion = "10.24.1"
		case "erbium":
			fileVersion = "12.22.12"
		case "fermium":
			fileVersion = "14.21.3"
		case "gallium":
			fileVersion = "16.20.2"
		case "hydrogen":
			fileVersion = "18.20.8"
		case "iron":
			fileVersion = "20.19.2"
		case "jod":
			fileVersion = "22.16.0"
		}
	}

	re := fmt.Sprintf(
		`(?im)^v?%s(\.?%s)?(\.?%s)?$`,
		n.Major,
		n.Minor,
		n.Patch,
	)

	version := strings.TrimSpace(fileVersion)
	version = strings.TrimPrefix(version, "v")

	return version, regex.MatchString(re, fileVersion)
}



================================================
FILE: src/segments/node_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/alecthomas/assert"
)

func TestNodeMatchesVersionFile(t *testing.T) {
	nodeVersion := version{
		Full:  "22.16.0",
		Major: "22",
		Minor: "16",
		Patch: "0",
	}
	cases := []struct {
		Case            string
		ExpectedVersion string
		RCVersion       string
		Expected        bool
	}{
		{Case: "no file context", Expected: true, RCVersion: ""},
		{Case: "version match", Expected: true, ExpectedVersion: "22.16.0", RCVersion: "22.16.0"},
		{Case: "version match with newline", Expected: true, ExpectedVersion: "22.16.0", RCVersion: "22.16.0\n"},
		{Case: "version mismatch", Expected: false, ExpectedVersion: "3.2.1", RCVersion: "3.2.1"},
		{Case: "version match in other format", Expected: true, ExpectedVersion: "22.16.0", RCVersion: "v22.16.0"},
		{Case: "version match without patch", Expected: true, ExpectedVersion: "22.16", RCVersion: "22.16"},
		{Case: "version match without patch in other format", Expected: true, ExpectedVersion: "22.16", RCVersion: "v22.16"},
		{Case: "version match without minor", Expected: true, ExpectedVersion: "22", RCVersion: "22"},
		{Case: "version match without minor in other format", Expected: true, ExpectedVersion: "22", RCVersion: "v22"},
		{Case: "lts match", Expected: true, ExpectedVersion: "22.16.0", RCVersion: "lts/jod"},
		{Case: "lts match upper case", Expected: true, ExpectedVersion: "22.16.0", RCVersion: "lts/Jod"},
		{Case: "lts mismatch", Expected: false, ExpectedVersion: "8.17.0", RCVersion: "lts/carbon"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("FileContent", ".nvmrc").Return(tc.RCVersion)

		node := &Node{
			language: language{
				version: nodeVersion,
			},
		}
		node.Init(properties.Map{}, env)

		version, match := node.matchesVersionFile()
		assert.Equal(t, tc.Expected, match, tc.Case)
		assert.Equal(t, tc.ExpectedVersion, version, tc.Case)
	}
}

func TestNodeInContext(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		hasPNPM        bool
		hasYarn        bool
		hasNPM         bool
		hasDefault     bool
		hasBun         bool
		PkgMgrEnabled  bool
	}{
		{Case: "no package manager file", ExpectedString: "", PkgMgrEnabled: true},
		{Case: "pnpm", hasPNPM: true, ExpectedString: "pnpm", PkgMgrEnabled: true},
		{Case: "yarn", hasYarn: true, ExpectedString: "yarn", PkgMgrEnabled: true},
		{Case: "npm", hasNPM: true, ExpectedString: "npm", PkgMgrEnabled: true},
		{Case: "default", hasDefault: true, ExpectedString: "npm", PkgMgrEnabled: true},
		{Case: "disabled by pnpm", hasPNPM: true, ExpectedString: "", PkgMgrEnabled: false},
		{Case: "disabled by yarn", hasYarn: true, ExpectedString: "", PkgMgrEnabled: false},
		{Case: "pnpm and npm", hasPNPM: true, hasNPM: true, ExpectedString: "pnpm", PkgMgrEnabled: true},
		{Case: "yarn and npm", hasYarn: true, hasNPM: true, ExpectedString: "yarn", PkgMgrEnabled: true},
		{Case: "pnpm, yarn, and npm", hasPNPM: true, hasYarn: true, hasNPM: true, ExpectedString: "pnpm", PkgMgrEnabled: true},
		{Case: "bun", hasBun: true, ExpectedString: "bun", PkgMgrEnabled: true},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HasFiles", "pnpm-lock.yaml").Return(tc.hasPNPM)
		env.On("HasFiles", "yarn.lock").Return(tc.hasYarn)
		env.On("HasFiles", "package-lock.json").Return(tc.hasNPM)
		env.On("HasFiles", "package.json").Return(tc.hasDefault)
		env.On("HasFiles", "bun.lockb").Return(tc.hasBun)
		env.On("HasFiles", "bun.lock").Return(tc.hasBun)

		props := properties.Map{
			PnpmIcon:            "pnpm",
			YarnIcon:            "yarn",
			NPMIcon:             "npm",
			BunIcon:             "bun",
			FetchPackageManager: tc.PkgMgrEnabled,
		}

		node := &Node{}
		node.Init(props, env)

		node.loadContext()
		assert.Equal(t, tc.ExpectedString, node.PackageManagerIcon, tc.Case)
	}
}



================================================
FILE: src/segments/npm.go
================================================
package segments

type Npm struct {
	language
}

func (n *Npm) Enabled() bool {
	n.extensions = []string{"package.json", "package-lock.json"}
	n.commands = []*cmd{
		{
			executable: "npm",
			args:       []string{"--version"},
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	n.versionURLTemplate = "https://github.com/npm/cli/releases/tag/v{{ .Full }}"

	return n.language.Enabled()
}

func (n *Npm) Template() string {
	return " \ue71e {{.Full}} "
}



================================================
FILE: src/segments/npm_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/alecthomas/assert"
)

func TestNpm(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "1.0.0", ExpectedString: "\ue71e 1.0.0", Version: "1.0.0"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "npm",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "package.json",
		}
		env, props := getMockedLanguageEnv(params)
		npm := &Npm{}
		npm.Init(props, env)
		assert.True(t, npm.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, npm.Template(), npm), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/nx.go
================================================
package segments

type Nx struct {
	language
}

func (a *Nx) Template() string {
	return languageTemplate
}

func (a *Nx) Enabled() bool {
	a.extensions = []string{"workspace.json", "nx.json"}
	a.commands = []*cmd{
		{
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
			getVersion: a.getVersion,
		},
	}
	a.versionURLTemplate = "https://github.com/nrwl/nx/releases/tag/{{.Full}}"

	return a.language.Enabled()
}

func (a *Nx) getVersion() (string, error) {
	return a.nodePackageVersion("nx")
}



================================================
FILE: src/segments/ocaml.go
================================================
package segments

type OCaml struct {
	language
}

func (o *OCaml) Template() string {
	return languageTemplate
}

func (o *OCaml) Enabled() bool {
	o.extensions = []string{"*.ml", "*.mli", "dune", "dune-project", "dune-workspace"}
	o.commands = []*cmd{
		{
			executable: "ocaml",
			args:       []string{"-version"},
			regex:      `The OCaml toplevel, version (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))(-(?P<prerelease>[a-z]+))?)`,
		},
	}

	return o.language.Enabled()
}



================================================
FILE: src/segments/ocaml_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestOCaml(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "OCaml 4.12.0", ExpectedString: "4.12.0", Version: "The OCaml toplevel, version 4.12.0"},
		{Case: "OCaml 4.11.0", ExpectedString: "4.11.0", Version: "The OCaml toplevel, version 4.11.0"},
		{Case: "OCaml 4.13.0", ExpectedString: "4.13.0", Version: "The OCaml toplevel, version 4.13.0"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "ocaml",
			versionParam:  "-version",
			versionOutput: tc.Version,
			extension:     "*.ml",
		}
		env, props := getMockedLanguageEnv(params)
		o := &OCaml{}
		o.Init(props, env)
		assert.True(t, o.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, o.Template(), o), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/os.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type Os struct {
	base

	Icon string
}

const (
	// MacOS the string/icon to use for MacOS
	MacOS properties.Property = "macos"
	// Linux the string/icon to use for linux
	Linux properties.Property = "linux"
	// Windows the string/icon to use for windows
	Windows properties.Property = "windows"
	// DisplayDistroName display the distro name or not
	DisplayDistroName properties.Property = "display_distro_name"
)

func (oi *Os) Template() string {
	return " {{ if .WSL }}WSL at {{ end }}{{.Icon}} "
}

func (oi *Os) Enabled() bool {
	goos := oi.env.GOOS()
	switch goos {
	case runtime.WINDOWS:
		oi.Icon = oi.props.GetString(Windows, "\uE62A")
	case runtime.DARWIN:
		oi.Icon = oi.props.GetString(MacOS, "\uF179")
	case runtime.LINUX, runtime.FREEBSD:
		pf := oi.env.Platform()
		displayDistroName := oi.props.GetBool(DisplayDistroName, false)
		if displayDistroName {
			oi.Icon = oi.props.GetString(properties.Property(pf), pf)
			break
		}
		oi.Icon = oi.getDistroIcon(pf)
	default:
		oi.Icon = goos
	}
	return true
}

func (oi *Os) getDistroIcon(distro string) string {
	iconMap := map[string]string{
		"alma":                "\uF31D",
		"almalinux":           "\uF31D",
		"almalinux9":          "\uF31D",
		"alpine":              "\uF300",
		"android":             "\uF17b",
		"aosc":                "\uF301",
		"arch":                "\uF303",
		"centos":              "\uF304",
		"coreos":              "\uF305",
		"debian":              "\uF306",
		"deepin":              "\uF321",
		"devuan":              "\uF307",
		"elementary":          "\uF309",
		"endeavouros":         "\uF322",
		"fedora":              "\uF30a",
		"freebsd":             "\U000f08e0",
		"gentoo":              "\uF30d",
		"kali":                "\uf327",
		"mageia":              "\uF310",
		"manjaro":             "\uF312",
		"mint":                "\uF30e",
		"nixos":               "\uF313",
		"opensuse":            "\uF314",
		"opensuse-tumbleweed": "\uF314",
		"raspbian":            "\uF315",
		"redhat":              "\uF316",
		"rocky":               "\uF32B",
		"sabayon":             "\uF317",
		"slackware":           "\uF319",
		"ubuntu":              "\uF31b",
		"neon":                "\uf331",
	}

	if icon, ok := iconMap[distro]; ok {
		return oi.props.GetString(properties.Property(distro), icon)
	}

	icon := oi.props.GetString(properties.Property(distro), "")
	if len(icon) > 0 {
		return icon
	}

	return oi.props.GetString(Linux, "\uF17C")
}



================================================
FILE: src/segments/os_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

func TestOSInfo(t *testing.T) {
	cases := []struct {
		Case              string
		ExpectedString    string
		GOOS              string
		Platform          string
		Icon              string
		IsWSL             bool
		DisplayDistroName bool
	}{
		{
			Case:           "WSL debian - icon",
			ExpectedString: "WSL at \uf306",
			GOOS:           "linux",
			IsWSL:          true,
			Platform:       "debian",
		},
		{
			Case:              "WSL debian - name",
			ExpectedString:    "WSL at debian",
			GOOS:              "linux",
			IsWSL:             true,
			Platform:          "debian",
			DisplayDistroName: true,
		},
		{
			Case:           "plain linux - icon",
			ExpectedString: "\uf306",
			GOOS:           "linux",
			Platform:       "debian",
		},
		{
			Case:              "plain linux - name",
			ExpectedString:    "debian",
			GOOS:              "linux",
			Platform:          "debian",
			DisplayDistroName: true,
		},
		{
			Case:           "windows",
			ExpectedString: "windows",
			GOOS:           "windows",
		},
		{
			Case:           "darwin",
			ExpectedString: "darwin",
			GOOS:           "darwin",
		},
		{
			Case:           "unknown",
			ExpectedString: "unknown",
			GOOS:           "unknown",
		},
		{
			Case:           "crazy distro, specific icon",
			ExpectedString: "crazy distro",
			GOOS:           "linux",
			Platform:       "crazy",
			Icon:           "crazy distro",
		},
		{
			Case:           "crazy distro, not mapped",
			ExpectedString: "\uf17c",
			GOOS:           "linux",
			Platform:       "crazy",
		},
		{
			Case:              "show distro name, mapped",
			ExpectedString:    "<3",
			DisplayDistroName: true,
			GOOS:              "linux",
			Icon:              "<3",
			Platform:          "love",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return(tc.GOOS)
		env.On("Platform").Return(tc.Platform)

		props := properties.Map{
			DisplayDistroName: tc.DisplayDistroName,
			Windows:           "windows",
			MacOS:             "darwin",
		}

		if len(tc.Icon) != 0 {
			props[properties.Property(tc.Platform)] = tc.Icon
		}

		osInfo := &Os{}
		osInfo.Init(props, env)

		template.Cache = &cache.Template{
			WSL: tc.IsWSL,
		}

		_ = osInfo.Enabled()
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, osInfo.Template(), osInfo), tc.Case)
	}
}



================================================
FILE: src/segments/owm.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"fmt"
	"math"
	"net/url"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Owm struct {
	base

	Weather     string
	URL         string
	units       string
	UnitIcon    string
	Temperature int
}

const (
	// APIKey openweathermap api key
	APIKey properties.Property = "api_key"
	// Location openweathermap location
	Location properties.Property = "location"
	// Units openweathermap units
	Units properties.Property = "units"
	// CacheKeyResponse key used when caching the response
	CacheKeyResponse string = "owm_response"
	// CacheKeyURL key used when caching the url responsible for the response
	CacheKeyURL string = "owm_url"
	// Environmental variable to dynamically set the Open Map API key
	OWMAPIKey string = "POSH_OWM_API_KEY"
	// Environmental variable to dynamically set the location string
	OWMLocationKey string = "POSH_OWM_LOCATION"
)

type weather struct {
	ShortDescription string `json:"main"`
	Description      string `json:"description"`
	TypeID           string `json:"icon"`
}
type temperature struct {
	Value float64 `json:"temp"`
}

type owmDataResponse struct {
	Data        []weather `json:"weather"`
	temperature `json:"main"`
}

func (d *Owm) Enabled() bool {
	err := d.setStatus()

	if err != nil {
		log.Error(err)
		return false
	}

	return true
}

func (d *Owm) Template() string {
	return " {{ .Weather }} ({{ .Temperature }}{{ .UnitIcon }}) "
}

func (d *Owm) getResult() (*owmDataResponse, error) {
	response := new(owmDataResponse)

	apikey := properties.OneOf(d.props, d.env.Getenv(OWMAPIKey), APIKey, "apiKey")
	if len(apikey) == 0 {
		apikey = "."
	}

	if len(apikey) == 0 {
		return nil, errors.New("no api key found")
	}

	location := d.props.GetString(Location, d.env.Getenv(OWMLocationKey))
	if len(location) == 0 {
		return nil, errors.New("no location found")
	}

	location = url.QueryEscape(location)

	units := d.props.GetString(Units, "standard")
	httpTimeout := d.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	d.URL = fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?q=%s&units=%s&appid=%s", location, units, apikey)

	body, err := d.env.HTTPRequest(d.URL, nil, httpTimeout)
	if err != nil {
		return new(owmDataResponse), err
	}

	err = json.Unmarshal(body, &response)
	if err != nil {
		return new(owmDataResponse), err
	}

	return response, nil
}

func (d *Owm) setStatus() error {
	units := d.props.GetString(Units, "standard")

	q, err := d.getResult()
	if err != nil {
		return err
	}

	if len(q.Data) == 0 {
		return errors.New("no data found")
	}

	id := q.Data[0].TypeID

	d.Temperature = int(math.Round(q.Value))
	icon := ""
	switch id {
	case "01n":
		icon = "\ue32b"
	case "01d":
		icon = "\ue30d"
	case "02n":
		icon = "\ue37e"
	case "02d":
		icon = "\ue302"
	case "03n":
		fallthrough
	case "03d":
		icon = "\ue33d"
	case "04n":
		fallthrough
	case "04d":
		icon = "\ue312"
	case "09n":
		fallthrough
	case "09d":
		icon = "\ue319"
	case "10n":
		icon = "\ue325"
	case "10d":
		icon = "\ue308"
	case "11n":
		icon = "\ue32a"
	case "11d":
		icon = "\ue30f"
	case "13n":
		fallthrough
	case "13d":
		icon = "\ue31a"
	case "50n":
		fallthrough
	case "50d":
		icon = "\ue313"
	}
	d.Weather = icon
	d.units = units
	d.UnitIcon = "\ue33e"
	switch d.units {
	case "imperial":
		d.UnitIcon = "°F" // \ue341"
	case "metric":
		d.UnitIcon = "°C" // \ue339"
	case "":
		fallthrough
	case "standard":
		d.UnitIcon = "°K" // <b>K</b>"
	}
	return nil
}



================================================
FILE: src/segments/owm_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"net/url"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

const (
	OWMWEATHERAPIURL = "https://api.openweathermap.org/data/2.5/weather?q=%s&units=metric&appid=key"
)

func TestOWMSegmentSingle(t *testing.T) {
	cases := []struct {
		Error               error
		Case                string
		Location            string
		WeatherJSONResponse string
		ExpectedString      string
		Template            string
		ExpectedEnabled     bool
	}{
		{
			Case:                "Sunny Display",
			Location:            "AMSTERDAM,NL",
			WeatherJSONResponse: `{"weather":[{"icon":"01d"}],"main":{"temp":20}}`,
			ExpectedString:      "\ue30d (20°C)",
			ExpectedEnabled:     true,
		},
		{
			Case:                "Sunny Display",
			Location:            "AMSTERDAM,NL",
			WeatherJSONResponse: `{"weather":[{"icon":"01d"}],"main":{"temp":20}}`,
			ExpectedString:      "\ue30d (20°C)",
			ExpectedEnabled:     true,
			Template:            "{{.Weather}} ({{.Temperature}}{{.UnitIcon}})",
		},
		{
			Case:                "Sunny Display",
			Location:            "AMSTERDAM,NL",
			WeatherJSONResponse: `{"weather":[{"icon":"01d"}],"main":{"temp":20}}`,
			ExpectedString:      "\ue30d",
			ExpectedEnabled:     true,
			Template:            "{{.Weather}} ",
		},
		{
			Case:                "Config Skip Geocoding Check With Location",
			Location:            "AMSTERDAM,NL",
			WeatherJSONResponse: `{"weather":[{"icon":"01d"}],"main":{"temp":20}}`,
			ExpectedString:      "\ue30d (20°C)",
			ExpectedEnabled:     true,
		},
		{
			Case:                "Config Skip Geocoding Check Without Location",
			WeatherJSONResponse: `{"weather":[{"icon":"01d"}],"main":{"temp":20}}`,
			ExpectedEnabled:     false,
		},
		{
			Case:                "Error in retrieving data",
			Location:            "AMSTERDAM,NL",
			WeatherJSONResponse: "nonsense",
			Error:               errors.New("Something went wrong"),
			ExpectedEnabled:     false,
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		props := properties.Map{
			APIKey:   "key",
			Location: tc.Location,
			Units:    "metric",
		}

		location := url.QueryEscape(tc.Location)
		testURL := fmt.Sprintf(OWMWEATHERAPIURL, location)
		env.On("HTTPRequest", testURL).Return([]byte(tc.WeatherJSONResponse), tc.Error)
		env.On("Getenv", OWMLocationKey).Return("")
		env.On("Getenv", OWMAPIKey).Return("")

		o := &Owm{}
		o.Init(props, env)

		enabled := o.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = o.Template()
		}
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, o), tc.Case)
	}
}

func TestOWMSegmentIcons(t *testing.T) {
	cases := []struct {
		Case               string
		IconID             string
		ExpectedIconString string
	}{
		{
			Case:               "Sunny Display day",
			IconID:             "01d",
			ExpectedIconString: "\ue30d",
		},
		{
			Case:               "Light clouds Display day",
			IconID:             "02d",
			ExpectedIconString: "\ue302",
		},
		{
			Case:               "Cloudy Display day",
			IconID:             "03d",
			ExpectedIconString: "\ue33d",
		},
		{
			Case:               "Broken Clouds Display day",
			IconID:             "04d",
			ExpectedIconString: "\ue312",
		},
		{
			Case:               "Shower Rain Display day",
			IconID:             "09d",
			ExpectedIconString: "\ue319",
		},
		{
			Case:               "Rain Display day",
			IconID:             "10d",
			ExpectedIconString: "\ue308",
		},
		{
			Case:               "Thunderstorm Display day",
			IconID:             "11d",
			ExpectedIconString: "\ue30f",
		},
		{
			Case:               "Snow Display day",
			IconID:             "13d",
			ExpectedIconString: "\ue31a",
		},
		{
			Case:               "Fog Display day",
			IconID:             "50d",
			ExpectedIconString: "\ue313",
		},

		{
			Case:               "Sunny Display night",
			IconID:             "01n",
			ExpectedIconString: "\ue32b",
		},
		{
			Case:               "Light clouds Display night",
			IconID:             "02n",
			ExpectedIconString: "\ue37e",
		},
		{
			Case:               "Cloudy Display night",
			IconID:             "03n",
			ExpectedIconString: "\ue33d",
		},
		{
			Case:               "Broken Clouds Display night",
			IconID:             "04n",
			ExpectedIconString: "\ue312",
		},
		{
			Case:               "Shower Rain Display night",
			IconID:             "09n",
			ExpectedIconString: "\ue319",
		},
		{
			Case:               "Rain Display night",
			IconID:             "10n",
			ExpectedIconString: "\ue325",
		},
		{
			Case:               "Thunderstorm Display night",
			IconID:             "11n",
			ExpectedIconString: "\ue32a",
		},
		{
			Case:               "Snow Display night",
			IconID:             "13n",
			ExpectedIconString: "\ue31a",
		},
		{
			Case:               "Fog Display night",
			IconID:             "50n",
			ExpectedIconString: "\ue313",
		},
	}

	location := url.QueryEscape("AMSTERDAM,NL")
	testURL := fmt.Sprintf(OWMWEATHERAPIURL, location)

	for _, tc := range cases {
		env := &mock.Environment{}

		weatherResponse := fmt.Sprintf(`{"weather":[{"icon":"%s"}],"main":{"temp":20.3}}`, tc.IconID)
		expectedString := fmt.Sprintf("%s (20°C)", tc.ExpectedIconString)

		env.On("HTTPRequest", testURL).Return([]byte(weatherResponse), nil)
		env.On("Getenv", OWMLocationKey).Return("")
		env.On("Getenv", OWMAPIKey).Return("")

		props := properties.Map{
			APIKey:   "key",
			Location: "AMSTERDAM,NL",
			Units:    "metric",
		}

		o := &Owm{}
		o.Init(props, env)

		assert.Nil(t, o.setStatus())
		assert.Equal(t, expectedString, renderTemplate(env, o.Template(), o), tc.Case)
	}
}



================================================
FILE: src/segments/path.go
================================================
package segments

import (
	"fmt"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

const (
	regexPrefix = "re:"
)

type Folder struct {
	Name    string
	Path    string
	Display bool
}

type Folders []*Folder

func (f Folders) List() []string {
	var list []string

	for _, folder := range f {
		list = append(list, folder.Name)
	}

	return list
}

func (f Folders) Last() *Folder {
	return f[len(f)-1]
}

type Path struct {
	base

	mappedLocations map[string]string
	root            string
	relative        string
	pwd             string
	Location        string
	pathSeparator   string
	Path            string
	Folders         Folders
	StackCount      int
	windowsPath     bool
	Writable        bool
	RootDir         bool
	cygPath         bool
}

const (
	// FolderSeparatorIcon the path which is split will be separated by this icon
	FolderSeparatorIcon properties.Property = "folder_separator_icon"
	// FolderSeparatorTemplate the path which is split will be separated by this template
	FolderSeparatorTemplate properties.Property = "folder_separator_template"
	// HomeIcon indicates the $HOME location
	HomeIcon properties.Property = "home_icon"
	// FolderIcon identifies one folder
	FolderIcon properties.Property = "folder_icon"
	// WindowsRegistryIcon indicates the registry location on Windows
	WindowsRegistryIcon properties.Property = "windows_registry_icon"
	// Agnoster displays a short path with separator icon, this the default style
	Agnoster string = "agnoster"
	// AgnosterFull displays all the folder names with the folder_separator_icon
	AgnosterFull string = "agnoster_full"
	// AgnosterShort displays the folder names with one folder_separator_icon, regardless of depth
	AgnosterShort string = "agnoster_short"
	// Short displays a shorter path
	Short string = "short"
	// Full displays the full path
	Full string = "full"
	// FolderType displays the current folder
	FolderType string = "folder"
	// Mixed like agnoster, but if a folder name is short enough, it is displayed as-is
	Mixed string = "mixed"
	// Letter like agnoster, but with the first letter of each folder name
	Letter string = "letter"
	// Unique like agnoster, but with the first unique letters of each folder name
	Unique string = "unique"
	// AgnosterLeft like agnoster, but keeps the left side of the path
	AgnosterLeft string = "agnoster_left"
	// Powerlevel tries to mimic the powerlevel10k path,
	// used in combination with max_width.
	Powerlevel string = "powerlevel"
	// MixedThreshold the threshold of the length of the path Mixed will display
	MixedThreshold properties.Property = "mixed_threshold"
	// MappedLocations allows overriding certain location with an icon
	MappedLocations properties.Property = "mapped_locations"
	// MappedLocationsEnabled enables overriding certain locations with an icon
	MappedLocationsEnabled properties.Property = "mapped_locations_enabled"
	// MaxDepth Maximum path depth to display whithout shortening
	MaxDepth properties.Property = "max_depth"
	// MaxWidth Maximum path width to display for powerlevel style
	MaxWidth properties.Property = "max_width"
	// Hides the root location if it doesn't fit in max_depth. Used in Agnoster Short
	HideRootLocation properties.Property = "hide_root_location"
	// A color override cycle
	Cycle properties.Property = "cycle"
	// Color the path separators within the cycle
	CycleFolderSeparator properties.Property = "cycle_folder_separator"
	// format to use on the folder names
	FolderFormat properties.Property = "folder_format"
	// format to use on the first and last folder of the path
	EdgeFormat properties.Property = "edge_format"
	// format to use on first folder of the path
	LeftFormat properties.Property = "left_format"
	// format to use on the last folder of the path
	RightFormat properties.Property = "right_format"
	// GitDirFormat format to use on the git directory
	GitDirFormat properties.Property = "gitdir_format"
	// DisplayCygpath transforms the path to a cygpath format
	DisplayCygpath properties.Property = "display_cygpath"
	// DisplayRoot indicates if the linux root slash should be displayed
	DisplayRoot properties.Property = "display_root"
	// Fish displays the path in a fish-like style
	Fish string = "fish"
	// DirLength the length of the directory name to display in fish style
	DirLength properties.Property = "dir_length"
	// FullLengthDirs indicates how many full length directory names should be displayed in fish style
	FullLengthDirs properties.Property = "full_length_dirs"
)

func (pt *Path) Template() string {
	return " {{ .Path }} "
}

func (pt *Path) Enabled() bool {
	pt.setPaths()
	if len(pt.pwd) == 0 {
		return false
	}

	pt.setStyle()
	pwd := pt.env.Pwd()

	pt.Location = pt.env.Flags().AbsolutePWD
	if pt.env.GOOS() == runtime.WINDOWS {
		pt.Location = strings.ReplaceAll(pt.Location, `\`, `/`)
	}

	pt.StackCount = pt.env.StackCount()
	pt.Writable = pt.env.DirIsWritable(pwd)
	return true
}

func (pt *Path) setPaths() {
	defer func() {
		pt.Folders = pt.splitPath()
	}()

	displayCygpath := func() bool {
		enableCygpath := pt.props.GetBool(DisplayCygpath, false)
		if !enableCygpath {
			return false
		}

		return pt.env.IsCygwin()
	}

	pt.cygPath = displayCygpath()
	pt.windowsPath = pt.env.GOOS() == runtime.WINDOWS && !pt.cygPath

	if len(pt.pathSeparator) == 0 {
		pt.pathSeparator = path.Separator()
	}

	pt.pwd = pt.env.Pwd()
	if (pt.env.Shell() == shell.PWSH || pt.env.Shell() == shell.PWSH5) && len(pt.env.Flags().PSWD) != 0 {
		pt.pwd = pt.env.Flags().PSWD
	}

	if len(pt.pwd) == 0 {
		return
	}

	// ensure a clean path
	pt.root, pt.relative = pt.replaceMappedLocations(pt.pwd)
	pt.pwd = pt.join(pt.root, pt.relative)
}

func (pt *Path) Parent() string {
	if len(pt.pwd) == 0 {
		return ""
	}

	folders := pt.Folders.List()
	if len(folders) == 0 {
		// No parent.
		return ""
	}

	sb := new(strings.Builder)
	folderSeparator := pt.getFolderSeparator()

	sb.WriteString(pt.root)
	if !pt.endWithSeparator(pt.root) {
		sb.WriteString(folderSeparator)
	}

	for _, folder := range folders[:len(folders)-1] {
		sb.WriteString(folder)
		sb.WriteString(folderSeparator)
	}

	return sb.String()
}

func (pt *Path) Format(inputPath string) string {
	separator := path.Separator()

	elements := strings.Split(inputPath, separator)
	if len(elements) == 0 {
		return inputPath
	}

	if len(elements) == 1 {
		return pt.colorizePath(elements[0], nil)
	}

	return pt.colorizePath(elements[0], elements[1:])
}

func (pt *Path) setStyle() {
	if len(pt.relative) == 0 {
		root := pt.root

		// Only append a separator to a non-filesystem PSDrive root or a Windows drive root.
		if (len(pt.env.Flags().PSWD) != 0 || pt.windowsPath) && strings.HasSuffix(root, ":") {
			root += pt.getFolderSeparator()
		}

		pt.Path = pt.colorizePath(root, nil)
		return
	}

	switch style := pt.props.GetString(properties.Style, Agnoster); style {
	case Agnoster:
		maxWidth := pt.getMaxWidth()
		pt.Path = pt.getAgnosterPath(maxWidth)
	case AgnosterFull:
		pt.Path = pt.getAgnosterFullPath()
	case AgnosterShort:
		pt.Path = pt.getAgnosterShortPath()
	case Mixed:
		pt.Path = pt.getMixedPath()
	case Letter:
		pt.Path = pt.getLetterPath()
	case Unique:
		pt.Path = pt.getUniqueLettersPath(0)
	case AgnosterLeft:
		pt.Path = pt.getAgnosterLeftPath()
	case Full, Short: // "short" is a duplicate of "full", just here for backwards compatibility
		pt.Path = pt.getFullPath()
	case FolderType:
		pt.Path = pt.getFolderPath()
	case Powerlevel:
		maxWidth := pt.getMaxWidth()
		pt.Path = pt.getUniqueLettersPath(maxWidth)
	case Fish:
		pt.Path = pt.getFishPath()
	default:
		pt.Path = fmt.Sprintf("Path style: %s is not available", style)
	}

	// make sure we resolve all templates
	tmpl := &template.Text{
		Template: pt.Path,
		Context:  pt,
	}

	if text, err := tmpl.Render(); err == nil {
		pt.Path = text
	}
}

func (pt *Path) getMaxWidth() int {
	width := pt.props.GetString(MaxWidth, "")
	if len(width) == 0 {
		return 0
	}

	tmpl := &template.Text{
		Template: width,
		Context:  pt,
	}

	text, err := tmpl.Render()
	if err != nil {
		log.Error(err)
		return 0
	}

	value, err := strconv.Atoi(text)
	if err != nil {
		log.Error(err)
		return 0
	}

	return value
}

func (pt *Path) getFolderSeparator() string {
	separatorTemplate := pt.props.GetString(FolderSeparatorTemplate, "")
	if len(separatorTemplate) == 0 {
		separator := pt.props.GetString(FolderSeparatorIcon, pt.pathSeparator)
		// if empty, use the default separator
		if len(separator) == 0 {
			return pt.pathSeparator
		}

		return separator
	}

	tmpl := &template.Text{
		Template: separatorTemplate,
		Context:  pt,
	}

	text, err := tmpl.Render()
	if err != nil {
		log.Error(err)
	}

	if len(text) == 0 {
		return pt.pathSeparator
	}

	return text
}

func (pt *Path) getMixedPath() string {
	threshold := int(pt.props.GetFloat64(MixedThreshold, 4))
	folderIcon := pt.props.GetString(FolderIcon, "..")

	root, folders := pt.getPaths()

	var elements []string

	for i, n := 0, len(folders); i < n; i++ {
		folderName := folders[i].Name
		if len(folderName) > threshold && i != n-1 && !folders[i].Display {
			elements = append(elements, folderIcon)
			continue
		}

		elements = append(elements, folderName)
	}

	return pt.colorizePath(root, elements)
}

func (pt *Path) getAgnosterPath(maxWidth int) string {
	if maxWidth > 0 {
		return pt.getAgnosterMaxWidth(maxWidth)
	}

	folderIcon := pt.props.GetString(FolderIcon, "..")

	root, folders := pt.getPaths()

	var elements []string

	for i, n := 0, len(folders); i < n; i++ {
		if folders[i].Display || i == n-1 {
			elements = append(elements, folders[i].Name)
			continue
		}

		elements = append(elements, folderIcon)
	}

	return pt.colorizePath(root, elements)
}

func (pt *Path) getAgnosterLeftPath() string {
	folderIcon := pt.props.GetString(FolderIcon, "..")

	root, folders := pt.getPaths()

	var elements []string
	if len(folders) == 0 {
		return pt.colorizePath(root, elements)
	}

	elements = append(elements, folders[0].Name)
	for i, n := 1, len(folders); i < n; i++ {
		if folders[i].Display {
			elements = append(elements, folders[i].Name)
			continue
		}

		elements = append(elements, folderIcon)
	}

	return pt.colorizePath(root, elements)
}

func (pt *Path) findFirstLetterOrNumber(text string) (letter string, index int) {
	for i, char := range text {
		if unicode.IsLetter(char) || unicode.IsNumber(char) {
			return string(char), i
		}
	}

	return text, 0
}

func (pt *Path) getRelevantLetter(folder *Folder) string {
	if folder.Display {
		return folder.Name
	}

	letter, index := pt.findFirstLetterOrNumber(folder.Name)
	if index == 0 {
		return letter
	}

	// handle non-letter characters before the first found letter
	return folder.Name[0:index] + letter
}

func (pt *Path) getLetterPath() string {
	root, folders := pt.getPaths()

	root = pt.getRelevantLetter(&Folder{Name: root})

	var elements []string
	for i, n := 0, len(folders); i < n; i++ {
		if folders[i].Display || i == n-1 {
			elements = append(elements, folders[i].Name)
			continue
		}

		letter := pt.getRelevantLetter(folders[i])
		elements = append(elements, letter)
	}

	return pt.colorizePath(root, elements)
}

func (pt *Path) getFishPath() string {
	root, folders := pt.getPaths()
	folders = append(Folders{&Folder{Name: root, Display: false}}, folders...)

	dirLength := pt.props.GetInt(DirLength, 1)
	fullLengthDirs := max(pt.props.GetInt(FullLengthDirs, 1), 1)

	folderCount := len(folders)
	stopAt := folderCount - fullLengthDirs

	var elements []string
	for i := range folderCount {
		name := folders[i].Name
		if folders[i].Display || dirLength <= 0 || len(name) < dirLength || i >= stopAt {
			elements = append(elements, name)
			continue
		}

		elements = append(elements, name[:dirLength])
	}

	if len(elements) == 1 {
		return pt.colorizePath(elements[0], nil)
	}

	return pt.colorizePath(elements[0], elements[1:])
}

func (pt *Path) getUniqueLettersPath(maxWidth int) string {
	dr := pt.props.GetBool(DisplayRoot, false)
	log.Debugf("%t", dr)
	separator := pt.getFolderSeparator()

	root, folders := pt.getPaths()

	folderNames := folders.List()

	usePowerlevelStyle := func(root, relative string) bool {
		length := len(root) + len(relative)
		if !pt.endWithSeparator(root) {
			length += len(separator)
		}
		return length <= maxWidth
	}

	if maxWidth > 0 {
		relative := strings.Join(folderNames, separator)
		if usePowerlevelStyle(root, relative) {
			return pt.colorizePath(root, folderNames)
		}
	}

	root = pt.getRelevantLetter(&Folder{Name: root})

	var elements []string
	letters := make(map[string]bool)
	letters[root] = true

	for i, n := 0, len(folders); i < n; i++ {
		folderName := folderNames[i]

		if i == n-1 {
			elements = append(elements, folderName)
			break
		}

		letter := pt.getRelevantLetter(folders[i])

		for letters[letter] {
			if letter == folderName {
				break
			}
			letter += folderName[len(letter) : len(letter)+1]
		}

		letters[letter] = true
		elements = append(elements, letter)

		// only return early on maxWidth > 0
		// this enables the powerlevel10k behavior
		if maxWidth > 0 {
			list := elements
			list = append(list, folderNames[i+1:]...)
			relative := strings.Join(list, separator)
			if usePowerlevelStyle(root, relative) {
				return pt.colorizePath(root, list)
			}
		}
	}

	return pt.colorizePath(root, elements)
}

func (pt *Path) getAgnosterMaxWidth(maxWidth int) string {
	separator := pt.getFolderSeparator()
	folderIcon := pt.props.GetString(FolderIcon, "..")

	root, folders := pt.getPaths()
	folderNames := append([]string{root}, folders.List()...)

	// this assumes that the root is never a single character
	// except when it really is / on unix systems
	if len(root) == 1 {
		maxWidth++ // add one for the separator
	}

	if len(folderNames) == 0 {
		return pt.colorizePath(root, nil)
	}

	fullPath := strings.Join(folderNames, separator)

	for i := 0; i < len(folderNames)-1 && utf8.RuneCountInString(fullPath) > maxWidth; i++ {
		folderNames[i] = folderIcon
		fullPath = strings.Join(folderNames, separator)
	}

	for len(folderNames) > 1 && utf8.RuneCountInString(fullPath) > maxWidth {
		// remove every folder until the path is short enough
		folderNames = folderNames[1:]
		fullPath = strings.Join(folderNames, separator)
	}

	if len(folderNames) == 1 {
		return pt.colorizePath(template.TruncE(maxWidth, folderNames[0]), nil)
	}

	return pt.colorizePath(folderNames[0], folderNames[1:])
}

func (pt *Path) getAgnosterFullPath() string {
	root, folders := pt.getPaths()

	return pt.colorizePath(root, folders.List())
}

func (pt *Path) getAgnosterShortPath() string {
	root, folders := pt.getPaths()

	maxDepth := max(pt.props.GetInt(MaxDepth, 1), 1)

	pathDepth := len(folders)
	hideRootLocation := pt.props.GetBool(HideRootLocation, false)
	folderIcon := pt.props.GetString(FolderIcon, "..")

	// No need to shorten.
	if pathDepth < maxDepth || (pathDepth == maxDepth && !hideRootLocation) {
		return pt.getAgnosterFullPath()
	}

	elements := []string{folderIcon}

	for i := pathDepth - maxDepth; i < pathDepth; i++ {
		elements = append(elements, folders[i].Name)
	}

	if hideRootLocation {
		return pt.colorizePath(elements[0], elements[1:])
	}

	return pt.colorizePath(root, elements)
}

func (pt *Path) getFullPath() string {
	return pt.colorizePath(pt.root, pt.Folders.List())
}

func (pt *Path) getFolderPath() string {
	folderName := pt.Folders[len(pt.Folders)-1].Name
	return pt.colorizePath(folderName, nil)
}

func (pt *Path) join(root, relative string) string {
	// this is a full replacement of the parent
	if len(root) == 0 {
		return relative
	}

	if !pt.endWithSeparator(root) && len(relative) > 0 {
		return root + pt.pathSeparator + relative
	}

	return root + relative
}

func (pt *Path) setMappedLocations() {
	if pt.mappedLocations != nil {
		return
	}

	mappedLocations := make(map[string]string)

	// predefined mapped locations, can be disabled
	if pt.props.GetBool(MappedLocationsEnabled, true) {
		mappedLocations["hkcu:"] = pt.props.GetString(WindowsRegistryIcon, "\uF013")
		mappedLocations["hklm:"] = pt.props.GetString(WindowsRegistryIcon, "\uF013")
		mappedLocations[pt.normalize(pt.env.Home())] = pt.props.GetString(HomeIcon, "~")
	}

	// merge custom locations with mapped locations
	// mapped locations can override predefined locations
	keyValues := pt.props.GetKeyValueMap(MappedLocations, make(map[string]string))
	for key, value := range keyValues {
		if len(key) == 0 {
			continue
		}

		tmpl := &template.Text{
			Template: key,
			Context:  pt,
		}

		location, err := tmpl.Render()
		if err != nil {
			log.Error(err)
		}

		if len(location) == 0 {
			continue
		}

		if !strings.HasPrefix(location, regexPrefix) {
			location = pt.normalize(location)
		}

		// When two templates resolve to the same key, the values are compared in ascending order and the latter is taken.
		if v, exist := mappedLocations[location]; exist && value <= v {
			continue
		}

		mappedLocations[location] = value
	}

	pt.mappedLocations = mappedLocations
}

func (pt *Path) replaceMappedLocations(inputPath string) (string, string) {
	root, relative := pt.parsePath(inputPath)
	if len(relative) == 0 {
		pt.RootDir = true
	}

	pt.setMappedLocations()
	if len(pt.mappedLocations) == 0 {
		return root, relative
	}

	// sort map keys in reverse order
	// fixes case when a subfoder and its parent are mapped
	// ex /users/test and /users/test/dev
	keys := make([]string, 0, len(pt.mappedLocations))
	for k := range pt.mappedLocations {
		keys = append(keys, k)
	}
	sort.Sort(sort.Reverse(sort.StringSlice(keys)))

	rootN := pt.normalize(root)
	relativeN := pt.normalize(relative)

	escape := func(path string) string {
		// Escape chevron characters to avoid applying unexpected text styles.
		return strings.NewReplacer("<", "<<>", ">", "<>>").Replace(path)
	}

	handleRegex := func(key string) (string, bool) {
		if !strings.HasPrefix(key, regexPrefix) {
			return "", false
		}

		input := strings.ReplaceAll(inputPath, `\`, `/`)
		pattern := key[len(regexPrefix):]

		// Add (?i) at the start of the pattern for case-insensitive matching on Windows
		if pt.windowsPath || (pt.env.IsWsl() && strings.HasPrefix(input, "/mnt/")) {
			pattern = "(?i)" + pattern
		}

		match, OK := regex.FindStringMatch(pattern, input, 1)
		if !OK {
			return "", false
		}

		// Replace the first match with the mapped location.
		input = strings.Replace(input, match, pt.mappedLocations[key], 1)
		input = path.Clean(input)

		return input, true
	}

	for _, key := range keys {
		if input, OK := handleRegex(key); OK {
			return pt.parsePath(input)
		}

		keyRoot, keyRelative := pt.parsePath(key)

		matchSubFolders := strings.HasSuffix(keyRelative, pt.pathSeparator+"*")

		if matchSubFolders {
			// Remove the trailing wildcard (*).
			keyRelative = keyRelative[:len(keyRelative)-1]
		}

		if keyRoot != rootN || !strings.HasPrefix(relativeN, keyRelative) {
			continue
		}

		value := pt.mappedLocations[key]
		overflow := relative[len(keyRelative):]

		// exactly match the full path
		if len(overflow) == 0 {
			return value, ""
		}

		// only match the root
		if len(keyRelative) == 0 {
			return value, strings.Trim(escape(relative), pt.pathSeparator)
		}

		// match several prefix elements
		if matchSubFolders || overflow[:1] == pt.pathSeparator {
			return value, strings.Trim(escape(overflow), pt.pathSeparator)
		}
	}

	return escape(root), strings.Trim(escape(relative), pt.pathSeparator)
}

// parsePath parses a clean input path into a root and a relative.
func (pt *Path) parsePath(inputPath string) (string, string) {
	var root, relative string

	if len(inputPath) == 0 {
		return root, relative
	}

	if pt.cygPath {
		cygPath, err := pt.env.RunCommand("cygpath", "-u", inputPath)
		if len(cygPath) != 0 {
			inputPath = cygPath
			pt.pathSeparator = "/"
		}

		if err != nil {
			pt.cygPath = false
			pt.windowsPath = true
		}
	}

	if pt.env.GOOS() == runtime.WINDOWS {
		// Handle a UNC path, if any.
		pattern := fmt.Sprintf(`^\%[1]s{2}(?P<hostname>[^\%[1]s]+)\%[1]s(?P<sharename>[^\%[1]s]+)(\%[1]s(?P<path>[\s\S]*))?$`, pt.pathSeparator)
		matches := regex.FindNamedRegexMatch(pattern, inputPath)
		if len(matches) > 0 {
			root = fmt.Sprintf(`%[1]s%[1]s%[2]s%[1]s%[3]s`, pt.pathSeparator, matches["hostname"], matches["sharename"])
			relative = matches["path"]
			return root, relative
		}
	}

	s := strings.SplitAfterN(inputPath, pt.pathSeparator, 2)
	root = s[0]

	if len(s) == 2 {
		if len(root) > 1 {
			root = root[:len(root)-1]
		}

		relative = s[1]
	}

	return root, relative
}

func (pt *Path) getPaths() (string, Folders) {
	root := pt.root
	folders := pt.Folders

	isRootFS := func(inputPath string) bool {
		displayRoot := pt.props.GetBool(DisplayRoot, false)
		if displayRoot {
			return false
		}

		return len(inputPath) == 1 && path.IsSeparator(inputPath[0])
	}

	if isRootFS(root) && len(folders) > 0 {
		root = folders[0].Name
		folders = folders[1:]
	}

	return root, folders
}

func (pt *Path) endWithSeparator(inputPath string) bool {
	if len(inputPath) == 0 {
		return false
	}

	return path.IsSeparator(inputPath[len(inputPath)-1])
}

func (pt *Path) normalize(inputPath string) string {
	normalized := inputPath

	if strings.HasPrefix(normalized, "~") && (len(normalized) == 1 || path.IsSeparator(normalized[1])) {
		normalized = pt.env.Home() + normalized[1:]
	}

	normalized = path.Clean(normalized)

	if pt.env.GOOS() == runtime.WINDOWS || pt.env.GOOS() == runtime.DARWIN {
		normalized = strings.ToLower(normalized)
	}

	if pt.cygPath {
		return strings.ReplaceAll(normalized, `\`, "/")
	}

	return normalized
}

func (pt *Path) colorizePath(root string, elements []string) string {
	cycle := pt.props.GetStringArray(Cycle, []string{})
	skipColorize := len(cycle) == 0
	folderSeparator := pt.getFolderSeparator()
	colorSeparator := pt.props.GetBool(CycleFolderSeparator, false)
	folderFormat := pt.props.GetString(FolderFormat, "%s")

	edgeFormat := pt.props.GetString(EdgeFormat, folderFormat)
	leftFormat := pt.props.GetString(LeftFormat, edgeFormat)
	rightFormat := pt.props.GetString(RightFormat, edgeFormat)

	colorizeElement := func(element string) string {
		if skipColorize || len(element) == 0 {
			return element
		}

		defer func() {
			cycle = append(cycle[1:], cycle[0])
		}()

		return fmt.Sprintf("<%s>%s</>", cycle[0], element)
	}

	if len(elements) == 0 {
		formattedRoot := fmt.Sprintf(leftFormat, root)
		return colorizeElement(formattedRoot)
	}

	colorizeSeparator := func() string {
		if skipColorize || !colorSeparator {
			return folderSeparator
		}
		return fmt.Sprintf("<%s>%s</>", cycle[0], folderSeparator)
	}

	sb := new(strings.Builder)

	formattedRoot := fmt.Sprintf(leftFormat, root)
	sb.WriteString(colorizeElement(formattedRoot))

	if !pt.endWithSeparator(root) {
		sb.WriteString(colorizeSeparator())
	}

	for i, element := range elements {
		if len(element) == 0 {
			continue
		}

		format := folderFormat
		if i == len(elements)-1 {
			format = rightFormat
		}

		formattedElement := fmt.Sprintf(format, element)
		sb.WriteString(colorizeElement(formattedElement))
		if i != len(elements)-1 {
			sb.WriteString(colorizeSeparator())
		}
	}

	return sb.String()
}

func (pt *Path) splitPath() Folders {
	folders := Folders{}

	if len(pt.relative) == 0 {
		return folders
	}

	elements := strings.SplitSeq(pt.relative, pt.pathSeparator)
	folderFormatMap := pt.makeFolderFormatMap()
	currentPath := pt.root

	if !pt.endWithSeparator(pt.root) {
		currentPath += pt.pathSeparator
	}

	var display bool

	for element := range elements {
		currentPath += element

		if format := folderFormatMap[currentPath]; len(format) != 0 {
			element = fmt.Sprintf(format, element)
			display = true
		}

		folders = append(folders, &Folder{Name: element, Path: currentPath, Display: display})

		currentPath += pt.pathSeparator

		display = false
	}

	return folders
}

func (pt *Path) makeFolderFormatMap() map[string]string {
	folderFormatMap := make(map[string]string)

	if gitDirFormat := pt.props.GetString(GitDirFormat, ""); len(gitDirFormat) != 0 {
		dir, err := pt.env.HasParentFilePath(".git", false)
		if err == nil && dir.IsDir {
			// Make it consistent with the modified parent.
			parent := pt.join(pt.replaceMappedLocations(dir.ParentFolder))
			folderFormatMap[parent] = gitDirFormat
		}
	}

	return folderFormatMap
}



================================================
FILE: src/segments/path_test.go
================================================
package segments

import (
	"strings"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

const (
	homeDir        = "/home/someone"
	homeDirWindows = "C:\\Users\\someone"
	fooBarMan      = "\\foo\\bar\\man"
	abc            = "/abc"
	abcd           = "/a/b/c/d"
	cdefg          = "/c/d/e/f/g"
)

func renderTemplateNoTrimSpace(env *mock.Environment, segmentTemplate string, context any) string {
	env.On("Shell").Return("foo")

	if template.Cache == nil {
		template.Cache = &cache.Template{}
	}
	template.Init(env, nil, nil)

	tmpl := &template.Text{
		Template: segmentTemplate,
		Context:  context,
	}

	text, err := tmpl.Render()
	if err != nil {
		return err.Error()
	}

	return text
}

func renderTemplate(env *mock.Environment, segmentTemplate string, context any) string {
	return strings.TrimSpace(renderTemplateNoTrimSpace(env, segmentTemplate, context))
}

type testParentCase struct {
	Case                string
	Expected            string
	HomePath            string
	Pwd                 string
	GOOS                string
	PathSeparator       string
	FolderSeparatorIcon string
}

func TestParent(t *testing.T) {
	for _, tc := range testParentCases {
		env := new(mock.Environment)
		env.On("Home").Return(tc.HomePath)
		env.On("Pwd").Return(tc.Pwd)
		env.On("Flags").Return(&runtime.Flags{})
		env.On("Shell").Return(shell.GENERIC)
		env.On("PathSeparator").Return(tc.PathSeparator)
		env.On("GOOS").Return(tc.GOOS)

		props := properties.Map{
			FolderSeparatorIcon: tc.FolderSeparatorIcon,
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()

		got := path.Parent()
		assert.EqualValues(t, tc.Expected, got, tc.Case)
	}
}

type testAgnosterPathStyleCase struct {
	CygpathError        error
	GOOS                string
	Shell               string
	Pswd                string
	Pwd                 string
	PathSeparator       string
	HomeIcon            string
	HomePath            string
	Style               string
	FolderSeparatorIcon string
	Cygpath             string
	Expected            string
	MaxDepth            int
	MaxWidth            int
	HideRootLocation    bool
	Cygwin              bool
	DisplayRoot         bool
}

func TestAgnosterPathStyles(t *testing.T) {
	for _, tc := range testAgnosterPathStyleCases {
		env := new(mock.Environment)
		env.On("PathSeparator").Return(tc.PathSeparator)
		env.On("Home").Return(tc.HomePath)
		env.On("Pwd").Return(tc.Pwd)
		env.On("GOOS").Return(tc.GOOS)
		env.On("IsCygwin").Return(tc.Cygwin)
		env.On("StackCount").Return(0)
		env.On("IsWsl").Return(false)
		args := &runtime.Flags{
			PSWD: tc.Pswd,
		}
		env.On("Flags").Return(args)

		if len(tc.Shell) == 0 {
			tc.Shell = shell.PWSH
		}
		env.On("Shell").Return(tc.Shell)

		displayCygpath := tc.Cygwin
		if displayCygpath {
			env.On("RunCommand", "cygpath", []string{"-u", tc.Pwd}).Return(tc.Cygpath, tc.CygpathError)
			env.On("RunCommand", "cygpath", testify_.Anything).Return("brrrr", nil)
		}

		props := properties.Map{
			FolderSeparatorIcon: tc.FolderSeparatorIcon,
			properties.Style:    tc.Style,
			MaxDepth:            tc.MaxDepth,
			MaxWidth:            tc.MaxWidth,
			HideRootLocation:    tc.HideRootLocation,
			DisplayCygpath:      displayCygpath,
			DisplayRoot:         tc.DisplayRoot,
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()
		path.setStyle()
		got := renderTemplateNoTrimSpace(env, "{{ .Path }}", path)
		assert.Equal(t, tc.Expected, got)
	}
}

type testFullAndFolderPathCase struct {
	Style                  string
	HomePath               string
	FolderSeparatorIcon    string
	Pwd                    string
	Pswd                   string
	Expected               string
	GOOS                   string
	PathSeparator          string
	Template               string
	StackCount             int
	DisableMappedLocations bool
}

func TestFullAndFolderPath(t *testing.T) {
	for _, tc := range testFullAndFolderPathCases {
		env := new(mock.Environment)
		if len(tc.PathSeparator) == 0 {
			tc.PathSeparator = "/"
		}
		env.On("PathSeparator").Return(tc.PathSeparator)
		if tc.GOOS == runtime.WINDOWS {
			env.On("Home").Return(homeDirWindows)
		} else {
			env.On("Home").Return(homeDir)
		}
		env.On("Pwd").Return(tc.Pwd)
		env.On("GOOS").Return(tc.GOOS)
		env.On("StackCount").Return(tc.StackCount)
		env.On("IsWsl").Return(false)
		args := &runtime.Flags{
			PSWD: tc.Pswd,
		}
		env.On("Flags").Return(args)
		env.On("Shell").Return(shell.GENERIC)
		if len(tc.Template) == 0 {
			tc.Template = "{{ if gt .StackCount 0 }}{{ .StackCount }} {{ end }}{{ .Path }}"
		}
		props := properties.Map{
			properties.Style: tc.Style,
		}
		if tc.FolderSeparatorIcon != "" {
			props[FolderSeparatorIcon] = tc.FolderSeparatorIcon
		}
		if tc.DisableMappedLocations {
			props[MappedLocationsEnabled] = false
		}

		path := &Path{
			StackCount: env.StackCount(),
		}
		path.Init(props, env)

		path.setPaths()
		path.setStyle()
		got := renderTemplateNoTrimSpace(env, tc.Template, path)
		assert.Equal(t, tc.Expected, got)
	}
}

type testFullPathCustomMappedLocationsCase struct {
	Pwd             string
	MappedLocations map[string]string
	GOOS            string
	PathSeparator   string
	Expected        string
}

func TestFullPathCustomMappedLocations(t *testing.T) {
	for _, tc := range testFullPathCustomMappedLocationsCases {
		env := new(mock.Environment)
		env.On("Home").Return(homeDir)
		env.On("Pwd").Return(tc.Pwd)

		if len(tc.GOOS) == 0 {
			tc.GOOS = runtime.DARWIN
		}

		env.On("GOOS").Return(tc.GOOS)

		if len(tc.PathSeparator) == 0 {
			tc.PathSeparator = "/"
		}

		env.On("PathSeparator").Return(tc.PathSeparator)
		args := &runtime.Flags{
			PSWD: tc.Pwd,
		}

		env.On("Flags").Return(args)
		env.On("Shell").Return(shell.GENERIC)
		env.On("Getenv", "HOME").Return(homeDir)

		template.Cache = new(cache.Template)
		template.Init(env, nil, nil)

		props := properties.Map{
			properties.Style:       Full,
			MappedLocationsEnabled: false,
			MappedLocations:        tc.MappedLocations,
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()
		path.setStyle()

		got := renderTemplateNoTrimSpace(env, "{{ .Path }}", path)
		assert.Equal(t, tc.Expected, got)
	}
}

type testAgnosterPathCase struct {
	Case           string
	Expected       string
	Home           string
	PWD            string
	GOOS           string
	PathSeparator  string
	Cycle          []string
	ColorSeparator bool
}

func TestAgnosterPath(t *testing.T) {
	for _, tc := range testAgnosterPathCases {
		env := new(mock.Environment)
		env.On("Home").Return(tc.Home)
		env.On("PathSeparator").Return(tc.PathSeparator)
		env.On("Pwd").Return(tc.PWD)
		env.On("GOOS").Return(tc.GOOS)
		args := &runtime.Flags{
			PSWD: tc.PWD,
		}
		env.On("Flags").Return(args)
		env.On("Shell").Return(shell.PWSH)

		props := properties.Map{
			properties.Style:     Agnoster,
			FolderSeparatorIcon:  " > ",
			FolderIcon:           "f",
			HomeIcon:             "~",
			Cycle:                tc.Cycle,
			CycleFolderSeparator: tc.ColorSeparator,
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()
		path.setStyle()
		got := renderTemplateNoTrimSpace(env, "{{ .Path }}", path)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

type testAgnosterLeftPathCase struct {
	Case          string
	Expected      string
	Home          string
	PWD           string
	GOOS          string
	PathSeparator string
}

func TestAgnosterLeftPath(t *testing.T) {
	for _, tc := range testAgnosterLeftPathCases {
		env := new(mock.Environment)
		env.On("Home").Return(tc.Home)
		env.On("PathSeparator").Return(tc.PathSeparator)
		env.On("Pwd").Return(tc.PWD)
		env.On("GOOS").Return(tc.GOOS)
		args := &runtime.Flags{
			PSWD: tc.PWD,
		}
		env.On("Flags").Return(args)
		env.On("Shell").Return(shell.PWSH)

		props := properties.Map{
			properties.Style:    AgnosterLeft,
			FolderSeparatorIcon: " > ",
			FolderIcon:          "f",
			HomeIcon:            "~",
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()
		path.setStyle()
		got := renderTemplateNoTrimSpace(env, "{{ .Path }}", path)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestGetFolderSeparator(t *testing.T) {
	cases := []struct {
		Case                    string
		FolderSeparatorIcon     string
		FolderSeparatorTemplate string
		Expected                string
	}{
		{Case: "default", Expected: "/"},
		{Case: "icon - no template", FolderSeparatorIcon: "\ue5fe", Expected: "\ue5fe"},
		{Case: "template", FolderSeparatorTemplate: "{{ if eq .Shell \"bash\" }}\\{{ end }}", Expected: "\\"},
		{Case: "template empty", FolderSeparatorTemplate: "{{ if eq .Shell \"pwsh\" }}\\{{ end }}", Expected: "/"},
		{Case: "invalid template", FolderSeparatorTemplate: "{{ if eq .Shell \"pwsh\" }}", Expected: "/"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Shell").Return(shell.GENERIC)

		template.Cache = &cache.Template{
			Shell: "bash",
		}
		template.Init(env, nil, nil)

		props := properties.Map{}

		if len(tc.FolderSeparatorTemplate) > 0 {
			props[FolderSeparatorTemplate] = tc.FolderSeparatorTemplate
		}

		if len(tc.FolderSeparatorIcon) > 0 {
			props[FolderSeparatorIcon] = tc.FolderSeparatorIcon
		}

		path := &Path{
			pathSeparator: "/",
		}
		path.Init(props, env)

		got := path.getFolderSeparator()
		assert.Equal(t, tc.Expected, got)
	}
}

type testNormalizePathCase struct {
	Case          string
	Input         string
	HomeDir       string
	GOOS          string
	PathSeparator string
	Expected      string
	Cygwin        bool
}

func TestNormalizePath(t *testing.T) {
	for _, tc := range testNormalizePathCases {
		env := new(mock.Environment)
		env.On("Home").Return(tc.HomeDir)
		env.On("GOOS").Return(tc.GOOS)

		if len(tc.PathSeparator) == 0 {
			tc.PathSeparator = "/"
		}

		env.On("PathSeparator").Return(tc.PathSeparator)

		pt := &Path{cygPath: tc.Cygwin}
		pt.Init(properties.Map{}, env)

		got := pt.normalize(tc.Input)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

type testSplitPathCase struct {
	Case         string
	GOOS         string
	Relative     string
	Root         string
	GitDir       *runtime.FileInfo
	GitDirFormat string
	Expected     Folders
}

func TestSplitPath(t *testing.T) {
	for _, tc := range testSplitPathCases {
		env := new(mock.Environment)
		env.On("PathSeparator").Return("/")
		env.On("Home").Return("/a/b")
		env.On("HasParentFilePath", ".git", false).Return(tc.GitDir, nil)
		env.On("GOOS").Return(tc.GOOS)

		props := properties.Map{
			GitDirFormat: tc.GitDirFormat,
		}

		path := &Path{
			root:          tc.Root,
			relative:      tc.Relative,
			pathSeparator: "/",
			windowsPath:   tc.GOOS == runtime.WINDOWS,
		}
		path.Init(props, env)

		got := path.splitPath()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestGetMaxWidth(t *testing.T) {
	cases := []struct {
		MaxWidth any
		Case     string
		Expected int
	}{
		{
			Case:     "Nil",
			Expected: 0,
		},
		{
			Case:     "Empty string",
			MaxWidth: "",
			Expected: 0,
		},
		{
			Case:     "Invalid template",
			MaxWidth: "{{ .Unknown }}",
			Expected: 0,
		},
		{
			Case:     "Environment variable",
			MaxWidth: "{{ .Env.MAX_WIDTH }}",
			Expected: 120,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", "MAX_WIDTH").Return("120")
		env.On("Shell").Return(shell.BASH)

		template.Cache = new(cache.Template)
		template.Init(env, nil, nil)

		props := properties.Map{
			MaxWidth: tc.MaxWidth,
		}

		path := &Path{}
		path.Init(props, env)

		got := path.getMaxWidth()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestAgnosterMaxWidth(t *testing.T) {
	cases := []struct {
		name        string
		pwd         string
		folderIcon  string
		separator   string
		expected    string
		goos        string
		maxWidth    int
		displayRoot bool
	}{
		{
			name:        "path shorter than maxWidth",
			pwd:         "/foob/user/docs",
			maxWidth:    20,
			displayRoot: false,
			separator:   "/",
			folderIcon:  `..`,
			expected:    "foob/user/docs",
			goos:        runtime.LINUX,
		},
		{
			name:        "path shorter than maxWidth, Windows",
			pwd:         `C:\Users\john\Documents`,
			maxWidth:    20,
			displayRoot: true,
			folderIcon:  `..`,
			separator:   `\`,
			expected:    `..\..\john\Documents`,
			goos:        runtime.WINDOWS,
		},
		{
			name:        "path shorter than maxWidth, wth root",
			pwd:         "/foob/user/docs",
			maxWidth:    20,
			displayRoot: true,
			folderIcon:  `..`,
			separator:   "/",
			expected:    "/foob/user/docs",
			goos:        runtime.LINUX,
		},
		{
			name:        "path exactly maxWidth",
			pwd:         "/foob/user/docs",
			maxWidth:    15,
			displayRoot: true,
			folderIcon:  `..`,
			separator:   "/",
			expected:    "/foob/user/docs",
			goos:        runtime.LINUX,
		},
		{
			name:        "path longer than maxWidth with folder icons",
			pwd:         "/foob/user/documents/projects",
			maxWidth:    15,
			displayRoot: false,
			folderIcon:  "..",
			separator:   "/",
			expected:    "../../projects",
			goos:        runtime.LINUX,
		},
		{
			name:        "very long path requiring multiple folder replacements",
			pwd:         "/foob/user/documents/projects/myproject/src/main",
			maxWidth:    21,
			displayRoot: false,
			folderIcon:  "..",
			separator:   "/",
			expected:    "../../../../../main",
			goos:        runtime.LINUX,
		},
		{
			name:        "path requiring final folder truncation",
			pwd:         "/foob/verylongfoldername",
			maxWidth:    15,
			displayRoot: false,
			separator:   "/",
			expected:    "verylongfolder…",
			goos:        runtime.LINUX,
		},
		{
			name:        "Windows path with custom separator",
			pwd:         `C:\Users\john\Documents`,
			maxWidth:    15,
			displayRoot: false,
			folderIcon:  "…",
			separator:   `\`,
			expected:    `…\…\…\Documents`,
			goos:        runtime.WINDOWS,
		},
		{
			name:        "single folder path",
			pwd:         "/foob",
			maxWidth:    10,
			displayRoot: false,
			separator:   "/",
			expected:    "foob",
			goos:        runtime.LINUX,
		},
		{
			name:        "empty relative path",
			pwd:         "/",
			maxWidth:    10,
			displayRoot: true,
			separator:   "/",
			expected:    "/",
			goos:        runtime.LINUX,
		},
		{
			name:        "custom folder icon",
			pwd:         "/foob/user/documents/projects",
			maxWidth:    15,
			displayRoot: false,
			folderIcon:  "⋯",
			separator:   "/",
			expected:    "⋯/⋯/⋯/projects",
			goos:        runtime.LINUX,
		},
		{
			name:        "maxwidth is smaller than folder name",
			pwd:         "/foob/user/documents/projects",
			maxWidth:    2,
			displayRoot: false,
			folderIcon:  "⋯",
			separator:   "/",
			expected:    "p…",
			goos:        runtime.LINUX,
		},
		{
			name:        "maxwidth is 0",
			pwd:         "/foob/user/documents/projects",
			maxWidth:    0,
			displayRoot: false,
			folderIcon:  "⋯",
			separator:   "/",
			expected:    "…",
			goos:        runtime.LINUX,
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			env := &mock.Environment{}
			env.On("Pwd").Return(tc.pwd)
			env.On("Home").Return("/home")
			env.On("GOOS").Return(tc.goos)
			env.On("Shell").Return(shell.BASH)

			path := &Path{
				base: base{
					env: env,
					props: properties.Map{
						DisplayRoot:         tc.displayRoot,
						FolderIcon:          tc.folderIcon,
						FolderSeparatorIcon: tc.separator,
					},
				},
				pathSeparator: tc.separator,
			}

			// Set up the path state
			path.setPaths()

			got := path.getAgnosterMaxWidth(tc.maxWidth)
			assert.Equal(t, tc.expected, got, tc.name)
		})
	}
}

func TestFishPath(t *testing.T) {
	cases := []struct {
		name           string
		pwd            string
		separator      string
		goos           string
		expected       string
		dirLength      int
		fullLengthDirs int
	}{
		{
			name:           "default settings",
			pwd:            "/home/user/documents/projects",
			dirLength:      1,
			fullLengthDirs: 1,
			expected:       "h/u/d/projects",
			separator:      "/",
		},
		{
			name:           "dir length 2",
			pwd:            "/home/user/documents/projects",
			dirLength:      2,
			fullLengthDirs: 1,
			expected:       "ho/us/do/projects",
			separator:      "/",
		},
		{
			name:           "full length dirs 2",
			pwd:            "/home/user/documents/projects/myproject",
			dirLength:      1,
			fullLengthDirs: 2,
			expected:       "h/u/d/projects/myproject",
			separator:      "/",
		},
		{
			name:           "dir length 3, full length dirs 2",
			pwd:            "/home/user/documents/projects/myproject",
			dirLength:      3,
			fullLengthDirs: 2,
			expected:       "hom/use/doc/projects/myproject",
			separator:      "/",
		},
		{
			name:           "full length dirs 2 - Windows",
			pwd:            `C:\Users\Jan\Documents\Projects\Myproject`,
			dirLength:      1,
			fullLengthDirs: 2,
			expected:       `C\U\J\D\Projects\Myproject`,
			separator:      `\`,
		},
		{
			name:           "dir length 3, full length dirs 2 - Windows",
			pwd:            `C:\Users\Jan\Documents\Projects\Myproject`,
			dirLength:      3,
			fullLengthDirs: 2,
			expected:       `C:\Use\Jan\Doc\Projects\Myproject`,
			separator:      `\`,
		},
		{
			name:           "single folder",
			pwd:            "/home",
			dirLength:      1,
			fullLengthDirs: 1,
			expected:       "home",
			separator:      "/",
		},
		{
			name:           "two folders with full length dirs 1",
			pwd:            "/home/user",
			dirLength:      1,
			fullLengthDirs: 1,
			expected:       "h/user",
			separator:      "/",
		},
		{
			name:           "root only",
			pwd:            "/",
			dirLength:      1,
			fullLengthDirs: 1,
			expected:       "/",
			separator:      "/",
		},
		{
			name:           "dir length 0 should disable shortening",
			pwd:            "/home/user/documents",
			dirLength:      0,
			fullLengthDirs: 1,
			expected:       "home/user/documents",
			separator:      "/",
		},
		{
			name:           "dir length negative should disable shortening",
			pwd:            "/home/user/documents",
			dirLength:      -1,
			fullLengthDirs: 1,
			expected:       "home/user/documents",
			separator:      "/",
		},
		{
			name:           "full length dirs 0 should fallback to 1",
			pwd:            "/home/user/documents",
			dirLength:      1,
			fullLengthDirs: 0,
			expected:       "h/u/documents",
			separator:      "/",
		},
		{
			name:           "full length dirs negative should fallback to 1",
			pwd:            "/home/user/documents",
			dirLength:      1,
			fullLengthDirs: -1,
			expected:       "h/u/documents",
			separator:      "/",
		},
		{
			name:           "full length dirs greater than total folders",
			pwd:            "/home/user",
			dirLength:      1,
			fullLengthDirs: 5,
			expected:       "home/user",
			separator:      "/",
		},
		{
			name:           "dir length greater than folder name",
			pwd:            "/a/b/c",
			dirLength:      10,
			fullLengthDirs: 1,
			expected:       "a/b/c",
			separator:      "/",
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			env := &mock.Environment{}
			env.On("Pwd").Return(tc.pwd)
			env.On("Home").Return("/foob")
			env.On("GOOS").Return(tc.goos)
			env.On("Shell").Return(shell.BASH)

			path := &Path{
				base: base{
					env: env,
					props: properties.Map{
						DirLength:      tc.dirLength,
						FullLengthDirs: tc.fullLengthDirs,
					},
				},
				pathSeparator: tc.separator,
			}

			path.setPaths()
			result := path.getFishPath()

			assert.Equal(t, result, tc.expected, tc.name)
		})
	}
}



================================================
FILE: src/segments/path_unix_test.go
================================================
//go:build !windows

package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
	"github.com/stretchr/testify/assert"
)

var testParentCases = []testParentCase{
	{
		Case:          "Inside Home folder",
		Expected:      "~/",
		HomePath:      homeDir,
		Pwd:           homeDir + "/test",
		GOOS:          runtime.DARWIN,
		PathSeparator: "/",
	},
	{
		Case:          "Home folder",
		HomePath:      homeDir,
		Pwd:           homeDir,
		GOOS:          runtime.DARWIN,
		PathSeparator: "/",
	},
	{
		Case:          "Home folder with a trailing separator",
		HomePath:      homeDir,
		Pwd:           homeDir + "/",
		GOOS:          runtime.DARWIN,
		PathSeparator: "/",
	},
	{
		Case:          "Root",
		HomePath:      homeDir,
		Pwd:           "/",
		GOOS:          runtime.DARWIN,
		PathSeparator: "/",
	},
	{
		Case:          "Root + 1",
		Expected:      "/",
		HomePath:      homeDir,
		Pwd:           "/usr",
		GOOS:          runtime.DARWIN,
		PathSeparator: "/",
	},
}

var testAgnosterPathStyleCases = []testAgnosterPathStyleCase{
	{
		Style:               Unique,
		Expected:            "~ > a > ab > abcd",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/ab/abc/abcd",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Unique,
		Expected:            "~ > a > .a > abcd",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/ab/.abc/abcd",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Unique,
		Expected:            "~ > a > ab > abcd",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/ab/ab/abcd",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Unique,
		Expected:            "a",
		HomePath:            homeDir,
		Pwd:                 "/ab",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Unique,
		Expected:            "/a > c > ef",
		HomePath:            homeDir,
		Pwd:                 "/ab/cd/ef",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		DisplayRoot:         true,
	},

	{
		Style:               Powerlevel,
		Expected:            "t > w > o > a > v > l > p > wh > we > i > wa > th > the > d > f > u > it > c > to > a > co > stream",
		HomePath:            homeDir,
		Pwd:                 "/there/was/once/a/very/long/path/which/wended/its/way/through/the/dark/forest/until/it/came/to/a/cold/stream",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxWidth:            20,
	},
	{
		Style:               Powerlevel,
		Expected:            "t > w > o > a > v > l > p > which > wended > its > way > through > the",
		HomePath:            homeDir,
		Pwd:                 "/there/was/once/a/very/long/path/which/wended/its/way/through/the",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxWidth:            70,
	},
	{
		Style:               Powerlevel,
		Expected:            "var/cache/pacman",
		HomePath:            homeDir,
		Pwd:                 "/var/cache/pacman",
		PathSeparator:       "/",
		FolderSeparatorIcon: "/",
		MaxWidth:            50,
	},
	{
		Style:               Powerlevel,
		Expected:            "/var/cache/pacman",
		HomePath:            homeDir,
		Pwd:                 "/var/cache/pacman",
		PathSeparator:       "/",
		FolderSeparatorIcon: "/",
		MaxWidth:            50,
		DisplayRoot:         true,
	},

	{
		Style:               Letter,
		Expected:            "~",
		HomePath:            homeDir,
		Pwd:                 homeDir,
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "~ > a > w > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/ab/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > b > a > w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/burp/ab/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .b > a > w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.burp/ab/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .b > a > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.burp/ab/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .b > a > ._w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.burp/ab/._whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .ä > ū > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.äufbau/ūmgebung/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .b > 1 > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.burp/12345/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .b > 1 > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.burp/12345abc/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "u > .b > __p > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/.burp/__pycache__/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "➼ > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/➼/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "➼ s > .w > man",
		HomePath:            homeDir,
		Pwd:                 "/➼ something/.whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "w",
		HomePath:            homeDir,
		Pwd:                 "/whatever",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},

	{
		Style:               Mixed,
		Expected:            "~ > .. > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Mixed,
		Expected:            "~ > ab > .. > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/ab/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Mixed,
		Expected:            "usr > foo > bar > .. > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/foo/bar/foobar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Mixed,
		Expected:            "whatever > .. > foo > bar",
		HomePath:            homeDir,
		Pwd:                 "/whatever/foobar/foo/bar",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterFull,
		Expected:            "usr > location > whatever",
		HomePath:            homeDir,
		Pwd:                 "/usr/location/whatever",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterFull,
		Expected:            "PSDRIVE: | src",
		HomePath:            homeDir,
		Pwd:                 "/foo",
		Pswd:                "PSDRIVE:/src",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
	},

	{
		Style:               AgnosterShort,
		Expected:            ".. | src | init",
		HomePath:            homeDir,
		Pwd:                 "/foo",
		Pswd:                "PSDRIVE:/src/init",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "usr > foo > bar > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/foo/bar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            3,
	},
	{
		Style:               AgnosterShort,
		Expected:            "PSDRIVE: | src",
		HomePath:            homeDir,
		Pwd:                 "/foo",
		Pswd:                "PSDRIVE:/src",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > projects",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/projects",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            "~",
		HomePath:            homeDir,
		Pwd:                 homeDir,
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            1,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "usr > .. > bar > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/foo/bar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > .. > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            "usr > .. > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/location/whatever/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > .. > bar > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/foo/bar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > foo > bar > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/foo/bar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            3,
	},
	{
		Style:               AgnosterShort,
		Expected:            "PSDRIVE: | .. | init",
		HomePath:            homeDir,
		Pwd:                 "/foo",
		Pswd:                "PSDRIVE:/src/init",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
	},
	{
		Style:               AgnosterShort,
		Expected:            ".. > foo",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/foo",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            1,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            ".. > bar > man",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/bar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            ".. > foo > bar > man",
		HomePath:            homeDir,
		Pwd:                 "/usr/foo/bar/man",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            3,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > foo",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/foo",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > foo > bar",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/foo/bar",
		PathSeparator:       "/",
		FolderSeparatorIcon: " > ",
		MaxDepth:            3,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "C: | ",
		HomePath:            homeDir,
		Pwd:                 "/mnt/c",
		Pswd:                "C:",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ | space foo",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/space foo",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            ".. | space foo",
		HomePath:            homeDir,
		Pwd:                 homeDir + "/space foo",
		PathSeparator:       "/",
		FolderSeparatorIcon: " | ",
		MaxDepth:            1,
		HideRootLocation:    true,
	},
}

var testAgnosterPathCases = []testAgnosterPathCase{
	{
		Case:          "Unix outside home",
		Expected:      "mnt > f > f > location",
		Home:          homeDir,
		PWD:           "/mnt/go/test/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix inside home",
		Expected:      "~ > f > f > location",
		Home:          homeDir,
		PWD:           homeDir + "/docs/jan/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix outside home zero levels",
		Expected:      "mnt > location",
		Home:          homeDir,
		PWD:           "/mnt/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix outside home one level",
		Expected:      "mnt > f > location",
		Home:          homeDir,
		PWD:           "/mnt/folder/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix, colorize",
		Expected:      "<blue>mnt</> > <yellow>f</> > <blue>location</>",
		Home:          homeDir,
		PWD:           "/mnt/folder/location",
		PathSeparator: "/",
		Cycle:         []string{"blue", "yellow"},
	},
	{
		Case:           "Unix, colorize with folder separator",
		Expected:       "<blue>mnt</><yellow> > </><yellow>f</><blue> > </><blue>location</>",
		Home:           homeDir,
		PWD:            "/mnt/folder/location",
		PathSeparator:  "/",
		Cycle:          []string{"blue", "yellow"},
		ColorSeparator: true,
	},
	{
		Case:          "Unix one level",
		Expected:      "mnt",
		Home:          homeDir,
		PWD:           "/mnt",
		PathSeparator: "/",
	},
}

var testAgnosterLeftPathCases = []testAgnosterLeftPathCase{
	{
		Case:          "Unix outside home",
		Expected:      "mnt > go > f > f",
		Home:          homeDir,
		PWD:           "/mnt/go/test/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix inside home",
		Expected:      "~ > docs > f > f",
		Home:          homeDir,
		PWD:           homeDir + "/docs/jan/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix outside home zero levels",
		Expected:      "mnt > location",
		Home:          homeDir,
		PWD:           "/mnt/location",
		PathSeparator: "/",
	},
	{
		Case:          "Unix outside home one level",
		Expected:      "mnt > folder > f",
		Home:          homeDir,
		PWD:           "/mnt/folder/location",
		PathSeparator: "/",
	},
}

var testFullAndFolderPathCases = []testFullAndFolderPathCase{
	{Style: Full, FolderSeparatorIcon: "|", Pwd: "/", Expected: "/"},
	{Style: Full, Pwd: "/", Expected: "/"},
	{Style: Full, Pwd: homeDir, Expected: "~"},
	{Style: Full, Pwd: homeDir + abc, Expected: "~/abc"},
	{Style: Full, Pwd: homeDir + abc, Expected: homeDir + abc, DisableMappedLocations: true},
	{Style: Full, Pwd: abcd, Expected: abcd},

	{Style: Full, FolderSeparatorIcon: "|", Pwd: homeDir, Expected: "~"},
	{Style: Full, FolderSeparatorIcon: "|", Pwd: homeDir, Expected: "/home|someone", DisableMappedLocations: true},
	{Style: Full, FolderSeparatorIcon: "|", Pwd: homeDir + abc, Expected: "~|abc"},
	{Style: Full, FolderSeparatorIcon: "|", Pwd: abcd, Expected: "/a|b|c|d"},

	{Style: FolderType, Pwd: "/", Expected: "/"},
	{Style: FolderType, Pwd: homeDir, Expected: "~"},
	{Style: FolderType, Pwd: homeDir, Expected: "someone", DisableMappedLocations: true},
	{Style: FolderType, Pwd: homeDir + abc, Expected: "abc"},
	{Style: FolderType, Pwd: abcd, Expected: "d"},

	{Style: FolderType, FolderSeparatorIcon: "|", Pwd: "/", Expected: "/"},
	{Style: FolderType, FolderSeparatorIcon: "|", Pwd: homeDir, Expected: "~"},
	{Style: FolderType, FolderSeparatorIcon: "|", Pwd: homeDir, Expected: "someone", DisableMappedLocations: true},
	{Style: FolderType, FolderSeparatorIcon: "|", Pwd: homeDir + abc, Expected: "abc"},
	{Style: FolderType, FolderSeparatorIcon: "|", Pwd: abcd, Expected: "d"},

	// StackCountEnabled=true and StackCount=2
	{Style: Full, FolderSeparatorIcon: "|", Pwd: "/", StackCount: 2, Expected: "2 /"},
	{Style: Full, Pwd: "/", StackCount: 2, Expected: "2 /"},
	{Style: Full, Pwd: homeDir, StackCount: 2, Expected: "2 ~"},
	{Style: Full, Pwd: homeDir + abc, StackCount: 2, Expected: "2 ~/abc"},
	{Style: Full, Pwd: homeDir + abc, StackCount: 2, Expected: "2 " + homeDir + abc, DisableMappedLocations: true},
	{Style: Full, Pwd: abcd, StackCount: 2, Expected: "2 /a/b/c/d"},

	// StackCountEnabled=false and StackCount=2
	{Style: Full, FolderSeparatorIcon: "|", Pwd: "/", Template: "{{ .Path }}", StackCount: 2, Expected: "/"},
	{Style: Full, Pwd: "/", Template: "{{ .Path }}", StackCount: 2, Expected: "/"},
	{Style: Full, Pwd: homeDir, Template: "{{ .Path }}", StackCount: 2, Expected: "~"},

	{Style: Full, Pwd: homeDir + abc, Template: "{{ .Path }}", StackCount: 2, Expected: homeDir + abc, DisableMappedLocations: true},
	{Style: Full, Pwd: abcd, Template: "{{ .Path }}", StackCount: 2, Expected: abcd},

	// StackCountEnabled=true and StackCount=0
	{Style: Full, FolderSeparatorIcon: "|", Pwd: "/", StackCount: 0, Expected: "/"},
	{Style: Full, Pwd: "/", StackCount: 0, Expected: "/"},
	{Style: Full, Pwd: homeDir, StackCount: 0, Expected: "~"},
	{Style: Full, Pwd: homeDir + abc, StackCount: 0, Expected: "~/abc"},
	{Style: Full, Pwd: homeDir + abc, StackCount: 0, Expected: homeDir + abc, DisableMappedLocations: true},
	{Style: Full, Pwd: abcd, StackCount: 0, Expected: abcd},

	// StackCountEnabled=true and StackCount<0
	{Style: Full, FolderSeparatorIcon: "|", Pwd: "/", StackCount: -1, Expected: "/"},
	{Style: Full, Pwd: "/", StackCount: -1, Expected: "/"},
	{Style: Full, Pwd: homeDir, StackCount: -1, Expected: "~"},
	{Style: Full, Pwd: homeDir + abc, StackCount: -1, Expected: "~/abc"},
	{Style: Full, Pwd: homeDir + abc, StackCount: -1, Expected: homeDir + abc, DisableMappedLocations: true},
	{Style: Full, Pwd: abcd, StackCount: -1, Expected: abcd},

	// StackCountEnabled=true and StackCount not set
	{Style: Full, FolderSeparatorIcon: "|", Pwd: "/", Expected: "/"},
	{Style: Full, Pwd: "/", Expected: "/"},
	{Style: Full, Pwd: homeDir, Expected: "~"},
	{Style: Full, Pwd: homeDir + abc, Expected: "~/abc"},
	{Style: Full, Pwd: homeDir + abc, Expected: homeDir + abc, DisableMappedLocations: true},
	{Style: Full, Pwd: abcd, Expected: abcd},
}

var testFullPathCustomMappedLocationsCases = []testFullPathCustomMappedLocationsCase{
	{Pwd: homeDir + "/d", MappedLocations: map[string]string{"{{ .Env.HOME }}/d": "#"}, Expected: "#"},
	{Pwd: abcd, MappedLocations: map[string]string{abcd: "#"}, Expected: "#"},
	{Pwd: abcd, MappedLocations: map[string]string{"/a/b": "#"}, Expected: "#/c/d"},
	{Pwd: abcd, MappedLocations: map[string]string{"/a/b": "/e/f"}, Expected: "/e/f/c/d"},
	{Pwd: homeDir + abcd, MappedLocations: map[string]string{"~/a/b": "#"}, Expected: "#/c/d"},
	{Pwd: "/a" + homeDir + "/b/c/d", MappedLocations: map[string]string{"/a~": "#"}, Expected: "/a" + homeDir + "/b/c/d"},
	{Pwd: homeDir + abcd, MappedLocations: map[string]string{"/a/b": "#"}, Expected: homeDir + abcd},
}

var testSplitPathCases = []testSplitPathCase{
	{Case: "Root directory", Root: "/", Expected: Folders{}},
	{
		Case:     "Regular directory",
		Root:     "/",
		Relative: "c/d",
		GOOS:     runtime.DARWIN,
		Expected: Folders{
			{Name: "c", Path: "/c"},
			{Name: "d", Path: "/c/d"},
		},
	},
	{
		Case:         "Home directory - git folder",
		Root:         "~",
		Relative:     "c/d",
		GOOS:         runtime.DARWIN,
		GitDir:       &runtime.FileInfo{IsDir: true, ParentFolder: "/a/b/c"},
		GitDirFormat: "<b>%s</b>",
		Expected: Folders{
			{Name: "<b>c</b>", Path: "~/c", Display: true},
			{Name: "d", Path: "~/c/d"},
		},
	},
}

var testNormalizePathCases = []testNormalizePathCase{
	{
		Case:     "Linux: home prefix, backslash included",
		Input:    "~/Bob\\Foo",
		HomeDir:  homeDir,
		GOOS:     runtime.LINUX,
		Expected: homeDir + "/Bob\\Foo",
	},
	{
		Case:     "macOS: home prefix, backslash included",
		Input:    "~/Bob\\Foo",
		HomeDir:  homeDir,
		GOOS:     runtime.DARWIN,
		Expected: homeDir + "/bob\\foo",
	},
	{
		Case:     "Linux: absolute",
		Input:    "/foo/~/bar",
		HomeDir:  homeDir,
		GOOS:     runtime.LINUX,
		Expected: "/foo/~/bar",
	},
	{
		Case:     "Linux: home prefix",
		Input:    "~/baz",
		HomeDir:  homeDir,
		GOOS:     runtime.LINUX,
		Expected: homeDir + "/baz",
	},
}

func TestFolderPathCustomMappedLocations(t *testing.T) {
	pwd := abcd
	env := new(mock.Environment)
	env.On("PathSeparator").Return("/")
	env.On("Home").Return(homeDir)
	env.On("Pwd").Return(pwd)
	env.On("GOOS").Return("")
	args := &runtime.Flags{
		PSWD: pwd,
	}
	env.On("Flags").Return(args)
	env.On("Shell").Return(shell.GENERIC)

	template.Cache = new(cache.Template)
	template.Init(env, nil, nil)

	props := properties.Map{
		properties.Style: FolderType,
		MappedLocations: map[string]string{
			abcd: "#",
		},
	}

	path := &Path{}
	path.Init(props, env)

	path.setPaths()
	path.setStyle()

	got := renderTemplateNoTrimSpace(env, "{{ .Path }}", path)
	assert.Equal(t, "#", got)
}

func TestReplaceMappedLocations(t *testing.T) {
	cases := []struct {
		Case                   string
		Pwd                    string
		Expected               string
		MappedLocationsEnabled bool
	}{
		{Pwd: "/c/l/k/f", Expected: "f"},
		{Pwd: "/f/g/h", Expected: "/f/g/h"},
		{Pwd: "/f/g/h/e", Expected: "^/e"},
		{Pwd: abcd, Expected: "#"},
		{Pwd: "/a/b/c/d/e", Expected: "#/e"},
		{Pwd: "/a/b/c/D/e", Expected: "#/e"},
		{Pwd: "/a/b/k/j/e", Expected: "e"},
		{Pwd: "/a/b/k/l", Expected: "@/l"},
		{Pwd: "/a/b/k/l", MappedLocationsEnabled: true, Expected: "~/l"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("PathSeparator").Return("/")
		env.On("Pwd").Return(tc.Pwd)
		env.On("Shell").Return(shell.FISH)
		env.On("GOOS").Return(runtime.DARWIN)
		env.On("Home").Return("/a/b/k")

		template.Cache = new(cache.Template)
		template.Init(env, nil, nil)

		props := properties.Map{
			MappedLocationsEnabled: tc.MappedLocationsEnabled,
			MappedLocations: map[string]string{
				abcd:       "#",
				"/f/g/h/*": "^",
				"/c/l/k/*": "",
				"~":        "@",
				"~/j/*":    "",
			},
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()
		assert.Equal(t, tc.Expected, path.pwd)
	}
}

func TestGetPwd(t *testing.T) {
	cases := []struct {
		Pwd                    string
		Pswd                   string
		Expected               string
		MappedLocationsEnabled bool
	}{
		{MappedLocationsEnabled: true, Pwd: homeDir, Expected: "~"},
		{MappedLocationsEnabled: true, Pwd: homeDir + "-test", Expected: homeDir + "-test"},
		{MappedLocationsEnabled: true},
		{MappedLocationsEnabled: true, Pwd: "/usr", Expected: "/usr"},
		{MappedLocationsEnabled: true, Pwd: homeDir + abc, Expected: "~/abc"},
		{MappedLocationsEnabled: true, Pwd: abcd, Expected: "#"},
		{MappedLocationsEnabled: true, Pwd: "/a/b/c/d/e/f/g", Expected: "#/e/f/g"},
		{MappedLocationsEnabled: true, Pwd: "/z/y/x/w", Expected: "/z/y/x/w"},

		{MappedLocationsEnabled: false},
		{MappedLocationsEnabled: false, Pwd: homeDir + abc, Expected: homeDir + abc},
		{MappedLocationsEnabled: false, Pwd: "/a/b/c/d/e/f/g", Expected: "#/e/f/g"},
		{MappedLocationsEnabled: false, Pwd: homeDir + cdefg, Expected: homeDir + cdefg},
		{MappedLocationsEnabled: true, Pwd: homeDir + cdefg, Expected: "~/c/d/e/f/g"},

		{MappedLocationsEnabled: true, Pwd: "/w/d/x/w", Pswd: "/z/y/x/w", Expected: "/z/y/x/w"},
		{MappedLocationsEnabled: false, Pwd: "/f/g/k/d/e/f/g", Pswd: "/a/b/c/d/e/f/g", Expected: "#/e/f/g"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("PathSeparator").Return("/")
		env.On("Home").Return(homeDir)
		env.On("Pwd").Return(tc.Pwd)
		env.On("GOOS").Return("")
		args := &runtime.Flags{
			PSWD: tc.Pswd,
		}
		env.On("Flags").Return(args)
		env.On("Shell").Return(shell.PWSH)

		template.Cache = new(cache.Template)
		template.Init(env, nil, nil)

		props := properties.Map{
			MappedLocationsEnabled: tc.MappedLocationsEnabled,
			MappedLocations: map[string]string{
				abcd: "#",
			},
		}

		path := &Path{}
		path.Init(props, env)

		path.setPaths()
		assert.Equal(t, tc.Expected, path.pwd)
	}
}



================================================
FILE: src/segments/path_windows_test.go
================================================
package segments

import (
	"errors"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
)

var testParentCases = []testParentCase{
	{
		Case:          "Windows Home folder",
		HomePath:      homeDirWindows,
		Pwd:           homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows drive root",
		HomePath:      homeDirWindows,
		Pwd:           "C:",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows drive root with a trailing separator",
		HomePath:      homeDirWindows,
		Pwd:           "C:\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows drive root + 1",
		Expected:      "C:\\",
		HomePath:      homeDirWindows,
		Pwd:           "C:\\test",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "PSDrive root",
		HomePath:      homeDirWindows,
		Pwd:           "HKLM:",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
}

var testAgnosterPathStyleCases = []testAgnosterPathStyleCase{
	{
		Style:               Unique,
		Expected:            "C > a > ab > abcd",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\ab\\ab\\abcd",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "C: > ",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "C > s > .w > man",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\something\\.whatever\\man",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Letter,
		Expected:            "~ > s > man",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows + "\\something\\man",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Mixed,
		Expected:            "C: > .. > foo > .. > man",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\Users\\foo\\foobar\\man",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Mixed,
		Expected:            "c > .. > foo > .. > man",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\Users\\foo\\foobar\\man",
		GOOS:                runtime.WINDOWS,
		Shell:               shell.BASH,
		Cygwin:              true,
		Cygpath:             "/c/Users/foo/foobar/man",
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               Mixed,
		Expected:            "C: > .. > foo > .. > man",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\Users\\foo\\foobar\\man",
		GOOS:                runtime.WINDOWS,
		Shell:               shell.BASH,
		CygpathError:        errors.New("oh no"),
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            "\\\\localhost\\c$ > some",
		HomePath:            homeDirWindows,
		Pwd:                 "\\\\localhost\\c$\\some",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            "\\\\localhost\\c$",
		HomePath:            homeDirWindows,
		Pwd:                 "\\\\localhost\\c$",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            ".. > bar > man",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows + fooBarMan,
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "C: > ",
		HomePath:            homeDirWindows,
		Pwd:                 "C:",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
	},
	{
		Style:               AgnosterShort,
		Expected:            "C: > .. > bar > man",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\usr\\foo\\bar\\man",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
	},
	{
		Style:               AgnosterShort,
		Expected:            "C: > .. > foo > bar > man",
		HomePath:            homeDirWindows,
		Pwd:                 "C:\\usr\\foo\\bar\\man",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            3,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > .. > bar > man",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows + fooBarMan,
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > foo > bar > man",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows + fooBarMan,
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            3,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows,
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            1,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            ".. > foo",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows + "\\foo",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            1,
		HideRootLocation:    true,
	},
	{
		Style:               AgnosterShort,
		Expected:            "~ > foo",
		HomePath:            homeDirWindows,
		Pwd:                 homeDirWindows + "\\foo",
		GOOS:                runtime.WINDOWS,
		PathSeparator:       `\`,
		FolderSeparatorIcon: " > ",
		MaxDepth:            2,
		HideRootLocation:    true,
	},
}

var testAgnosterPathCases = []testAgnosterPathCase{
	{
		Case:          "Windows registry drive case sensitive",
		Expected:      "\uf013 > f > magnetic:TOAST",
		Home:          homeDirWindows,
		PWD:           "HKLM:\\SOFTWARE\\magnetic:TOAST\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows outside home",
		Expected:      "C: > f > f > location",
		Home:          homeDirWindows,
		PWD:           "C:\\Program Files\\Go\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows oustide home",
		Expected:      "~ > f > f > location",
		Home:          homeDirWindows,
		PWD:           homeDirWindows + "\\Documents\\Bill\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows inside home zero levels",
		Expected:      "C: > location",
		Home:          homeDirWindows,
		PWD:           "C:\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows inside home one level",
		Expected:      "C: > f > location",
		Home:          homeDirWindows,
		PWD:           "C:\\Program Files\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower case drive letter",
		Expected:      "C: > Windows",
		Home:          homeDirWindows,
		PWD:           "C:\\Windows\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower case drive letter (other)",
		Expected:      "P: > Other",
		Home:          homeDirWindows,
		PWD:           "P:\\Other\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower word drive",
		Expected:      "some: > some",
		Home:          homeDirWindows,
		PWD:           "some:\\some\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower word drive (ending with c)",
		Expected:      "src: > source",
		Home:          homeDirWindows,
		PWD:           "src:\\source\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower word drive (arbitrary cases)",
		Expected:      "sRc: > source",
		Home:          homeDirWindows,
		PWD:           "sRc:\\source\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows registry drive",
		Expected:      "\uf013 > f > magnetic:test",
		Home:          homeDirWindows,
		PWD:           "HKLM:\\SOFTWARE\\magnetic:test\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
}

var testAgnosterLeftPathCases = []testAgnosterLeftPathCase{
	{
		Case:          "Windows inside home",
		Expected:      "~ > Documents > f > f",
		Home:          homeDirWindows,
		PWD:           homeDirWindows + "\\Documents\\Bill\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows outside home",
		Expected:      "C: > Program Files > f > f",
		Home:          homeDirWindows,
		PWD:           "C:\\Program Files\\Go\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows inside home zero levels",
		Expected:      "C: > location",
		Home:          homeDirWindows,
		PWD:           "C:\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows inside home one level",
		Expected:      "C: > Program Files > f",
		Home:          homeDirWindows,
		PWD:           "C:\\Program Files\\location",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower case drive letter",
		Expected:      "C: > Windows",
		Home:          homeDirWindows,
		PWD:           "C:\\Windows\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower case drive letter (other)",
		Expected:      "P: > Other",
		Home:          homeDirWindows,
		PWD:           "P:\\Other\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower word drive",
		Expected:      "some: > some",
		Home:          homeDirWindows,
		PWD:           "some:\\some\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower word drive (ending with c)",
		Expected:      "src: > source",
		Home:          homeDirWindows,
		PWD:           "src:\\source\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows lower word drive (arbitrary cases)",
		Expected:      "sRc: > source",
		Home:          homeDirWindows,
		PWD:           "sRc:\\source\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows registry drive",
		Expected:      "\uf013 > SOFTWARE > f",
		Home:          homeDirWindows,
		PWD:           "HKLM:\\SOFTWARE\\magnetic:test\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
	{
		Case:          "Windows registry drive case sensitive",
		Expected:      "\uf013 > SOFTWARE > f",
		Home:          homeDirWindows,
		PWD:           "HKLM:\\SOFTWARE\\magnetic:TOAST\\",
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
	},
}

var testFullAndFolderPathCases = []testFullAndFolderPathCase{
	{Style: FolderType, FolderSeparatorIcon: `\`, Pwd: "C:\\", Expected: "C:\\", PathSeparator: `\`, GOOS: runtime.WINDOWS},
	{Style: FolderType, FolderSeparatorIcon: `\`, Pwd: "\\\\localhost\\d$", Expected: "\\\\localhost\\d$", PathSeparator: `\`, GOOS: runtime.WINDOWS},
	{Style: FolderType, FolderSeparatorIcon: `\`, Pwd: homeDirWindows, Expected: "~", PathSeparator: `\`, GOOS: runtime.WINDOWS},
	{Style: Full, FolderSeparatorIcon: `\`, Pwd: homeDirWindows, Expected: "~", PathSeparator: `\`, GOOS: runtime.WINDOWS},
	{Style: Full, FolderSeparatorIcon: `\`, Pwd: homeDirWindows + "\\abc", Expected: "~\\abc", PathSeparator: `\`, GOOS: runtime.WINDOWS},
	{Style: Full, FolderSeparatorIcon: `\`, Pwd: "C:\\Users\\posh", Expected: "C:\\Users\\posh", PathSeparator: `\`, GOOS: runtime.WINDOWS},
}

var testFullPathCustomMappedLocationsCases = []testFullPathCustomMappedLocationsCase{
	{
		Pwd:             `\a\b\c\d`,
		MappedLocations: map[string]string{`\a\b`: "#"},
		GOOS:            runtime.WINDOWS,
		PathSeparator:   `\`,
		Expected:        `#\c\d`,
	},
	{
		Pwd:             `\a\b\1234\d\e`,
		MappedLocations: map[string]string{`re:(/a/b/[0-9]+/d).*`: "#"},
		GOOS:            runtime.WINDOWS,
		PathSeparator:   `\`,
		Expected:        `#\e`,
	},
	{
		Pwd:             `\a\b\1234\f\e`,
		MappedLocations: map[string]string{`re:(/a/b/[0-9]+/d).*`: "#"},
		GOOS:            runtime.WINDOWS,
		PathSeparator:   `\`,
		Expected:        `\a\b\1234\f\e`,
	},
	{
		Pwd:             `C:\Users\taylo\Documents\github\project`,
		MappedLocations: map[string]string{`re:(.*Users/taylo/Documents/GitHub).*`: "github"},
		GOOS:            runtime.WINDOWS,
		PathSeparator:   `\`,
		Expected:        `github\project`,
	},
}

var testSplitPathCases = []testSplitPathCase{
	{
		Case:         "Home directory - git folder on Windows",
		Root:         "C:",
		Relative:     "a/b/c/d",
		GOOS:         runtime.WINDOWS,
		GitDir:       &runtime.FileInfo{IsDir: true, ParentFolder: "C:/a/b/c"},
		GitDirFormat: "<b>%s</b>",
		Expected: Folders{
			{Name: "a", Path: "C:/a"},
			{Name: "b", Path: "C:/a/b"},
			{Name: "<b>c</b>", Path: "C:/a/b/c", Display: true},
			{Name: "d", Path: "C:/a/b/c/d"},
		},
	},
}

var testNormalizePathCases = []testNormalizePathCase{
	{
		Case:          "Windows: absolute w/o drive letter, forward slash included",
		Input:         "/foo/~/bar",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\foo\\~\\bar",
	},
	{
		Case:          "Windows: absolute",
		Input:         homeDirWindows + "\\Foo",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "c:\\users\\someone\\foo",
	},
	{
		Case:          "Windows: home prefix",
		Input:         "~\\Bob\\Foo",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "c:\\users\\someone\\bob\\foo",
	},
	{
		Case:          "Windows: home prefix",
		Input:         "~/baz",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "c:\\users\\someone\\baz",
	},
	{
		Case:          "Windows: UNC root w/ prefix",
		Input:         `\\.\UNC\localhost\c$`,
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\\\localhost\\c$",
	},
	{
		Case:          "Windows: UNC root w/ prefix, forward slash included",
		Input:         "//./UNC/localhost/c$",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\\\localhost\\c$",
	},
	{
		Case:          "Windows: UNC root",
		Input:         `\\localhost\c$\`,
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\\\localhost\\c$",
	},
	{
		Case:          "Windows: UNC root, forward slash included",
		Input:         "//localhost/c$",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\\\localhost\\c$",
	},
	{
		Case:          "Windows: UNC",
		Input:         `\\localhost\c$\some`,
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\\\localhost\\c$\\some",
	},
	{
		Case:          "Windows: UNC, forward slash included",
		Input:         "//localhost/c$/some",
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "\\\\localhost\\c$\\some",
	},
	{
		Case:          "Windows: display Cygwin path",
		Input:         fooBarMan,
		HomeDir:       homeDirWindows,
		GOOS:          runtime.WINDOWS,
		PathSeparator: `\`,
		Expected:      "/foo/bar/man",
		Cygwin:        true,
	},
}



================================================
FILE: src/segments/perl.go
================================================
package segments

type Perl struct {
	language
}

func (p *Perl) Template() string {
	return languageTemplate
}

func (p *Perl) Enabled() bool {
	perlRegex := `This is perl.*v(?P<version>(?P<major>[0-9]+)(?:\.(?P<minor>[0-9]+))(?:\.(?P<patch>[0-9]+))?).* built for .+`
	p.extensions = []string{
		".perl-version",
		"*.pl",
		"*.pm",
		"*.t",
	}
	p.commands = []*cmd{
		{
			executable: "perl",
			args:       []string{"-version"},
			regex:      perlRegex,
		},
	}

	return p.language.Enabled()
}



================================================
FILE: src/segments/perl_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPerl(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		Version         string
		PerlHomeVersion string
		PerlHomeEnabled bool
	}{
		{
			Case:           "v5.12+",
			ExpectedString: "5.32.1",
			Version:        "This is perl 5, version 32, subversion 1 (v5.32.1) built for MSWin32-x64-multi-thread",
		},
		{
			Case:           "v5.6 - v5.10",
			ExpectedString: "5.6.1",
			Version:        "This is perl, v5.6.1 built for MSWin32-x86-multi-thread",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "perl",
			versionParam:  "-version",
			versionOutput: tc.Version,
			extension:     ".perl-version",
		}
		env, props := getMockedLanguageEnv(params)

		p := &Perl{}
		p.Init(props, env)
		assert.True(t, p.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, p.Template(), p), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/php.go
================================================
package segments

type Php struct {
	language
}

func (p *Php) Template() string {
	return languageTemplate
}

func (p *Php) Enabled() bool {
	p.extensions = []string{"*.php", "composer.json", "composer.lock", ".php-version", "blade.php"}
	p.commands = []*cmd{
		{
			executable: "php",
			args:       []string{"--version"},
			regex:      `(?:PHP (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	p.versionURLTemplate = "https://www.php.net/ChangeLog-{{ .Major }}.php#PHP_{{ .Major }}_{{ .Minor }}"

	return p.language.Enabled()
}



================================================
FILE: src/segments/php_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPhp(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "PHP 6.1.0", ExpectedString: "6.1.0", Version: "PHP 6.1.0(cli) (built: Jul  2 2021 03:59:48) ( NTS )"},
		{Case: "php 7.4.21", ExpectedString: "7.4.21", Version: "PHP 7.4.21 (cli) (built: Jul  2 2021 03:59:48) ( NTS )"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "php",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.php",
		}
		env, props := getMockedLanguageEnv(params)
		j := &Php{}
		j.Init(props, env)
		assert.True(t, j.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, j.Template(), j), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/plastic.go
================================================
package segments

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type PlasticStatus struct {
	ScmStatus
}

func (s *PlasticStatus) add(code string) {
	switch code {
	case "LD":
		s.Deleted++
	case "AD", "PR":
		s.Added++
	case "LM":
		s.Moved++
	case "CH", "CO":
		s.Modified++
	}
}

type Plastic struct {
	Status                 *PlasticStatus
	Selector               string
	plasticWorkspaceFolder string
	scm
	Behind       bool
	MergePending bool
}

func (p *Plastic) Init(props properties.Properties, env runtime.Environment) {
	p.props = props
	p.env = env
}

func (p *Plastic) Template() string {
	return " {{ .Selector }} "
}

func (p *Plastic) Enabled() bool {
	if !p.env.HasCommand("cm") {
		return false
	}

	wkdir, err := p.env.HasParentFilePath(".plastic", false)
	if err != nil {
		return false
	}

	if !wkdir.IsDir {
		return false
	}

	p.plasticWorkspaceFolder = wkdir.ParentFolder
	displayStatus := p.props.GetBool(FetchStatus, false)
	p.setSelector()
	if displayStatus {
		p.setPlasticStatus()
	}
	return true
}

func (p *Plastic) CacheKey() (string, bool) {
	dir, err := p.env.HasParentFilePath(".plastic", true)
	if err != nil {
		return "", false
	}

	return dir.Path, true
}

func (p *Plastic) setPlasticStatus() {
	output := p.getCmCommandOutput("status", "--all", "--machinereadable")
	splittedOutput := strings.Split(output, "\n")
	// compare to head
	currentChangeset := p.parseStatusChangeset(splittedOutput[0])
	headChangeset := p.getHeadChangeset()
	p.Behind = headChangeset > currentChangeset

	statusFormats := p.props.GetKeyValueMap(StatusFormats, map[string]string{})
	p.Status = &PlasticStatus{ScmStatus: ScmStatus{Formats: statusFormats}}

	// parse file state
	p.MergePending = false
	p.parseFilesStatus(splittedOutput)
}

func (p *Plastic) parseFilesStatus(output []string) {
	if len(output) <= 1 {
		return
	}
	for _, line := range output[1:] {
		if len(line) < 3 {
			continue
		}

		if strings.Contains(line, "NO_MERGES") {
			p.Status.Unmerged++
			continue
		}

		p.MergePending = p.MergePending || regex.MatchString(`(?i)\smerge\s+from\s+[0-9]+\s*$`, line)

		code := line[:2]
		p.Status.add(code)
	}
}

func (p *Plastic) parseStringPattern(output, pattern, name string) string {
	match := regex.FindNamedRegexMatch(pattern, output)
	if sValue, ok := match[name]; ok {
		return sValue
	}
	return ""
}

func (p *Plastic) parseIntPattern(output, pattern, name string, defValue int) int {
	sValue := p.parseStringPattern(output, pattern, name)
	if len(sValue) > 0 {
		iValue, _ := strconv.Atoi(sValue)
		return iValue
	}
	return defValue
}

func (p *Plastic) parseStatusChangeset(status string) int {
	return p.parseIntPattern(status, `STATUS\s+(?P<cs>[0-9]+?)\s`, "cs", 0)
}

func (p *Plastic) getHeadChangeset() int {
	output := p.getCmCommandOutput("status", "--head", "--machinereadable")
	return p.parseIntPattern(output, `\bcs:(?P<cs>[0-9]+?)\s`, "cs", 0)
}

func (p *Plastic) setSelector() {
	var ref string
	selector := p.fileContent(p.plasticWorkspaceFolder+"/.plastic/", "plastic.selector")

	// changeset
	ref = p.parseChangesetSelector(selector)
	if len(ref) > 0 {
		p.Selector = fmt.Sprintf("%s%s", p.props.GetString(CommitIcon, "\uF417"), ref)
		return
	}

	// fallback to label
	ref = p.parseLabelSelector(selector)
	if len(ref) > 0 {
		p.Selector = fmt.Sprintf("%s%s", p.props.GetString(TagIcon, "\uF412"), ref)
		return
	}

	// fallback to branch/smartbranch
	ref = p.parseBranchSelector(selector)
	if len(ref) > 0 {
		ref = p.formatBranch(ref)
	}

	p.Selector = fmt.Sprintf("%s%s", p.props.GetString(BranchIcon, "\uE0A0"), ref)
}

func (p *Plastic) parseChangesetSelector(selector string) string {
	return p.parseStringPattern(selector, `\bchangeset "(?P<cs>[0-9]+?)"`, "cs")
}

func (p *Plastic) parseLabelSelector(selector string) string {
	return p.parseStringPattern(selector, `label "(?P<label>[a-zA-Z0-9\-\_]+?)"`, "label")
}

func (p *Plastic) parseBranchSelector(selector string) string {
	return p.parseStringPattern(selector, `branch "(?P<branch>[\/a-zA-Z0-9\-\_]+?)"`, "branch")
}

func (p *Plastic) getCmCommandOutput(args ...string) string {
	val, _ := p.env.RunCommand("cm", args...)
	return val
}



================================================
FILE: src/segments/plastic_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestPlasticEnabledNotFound(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "cm").Return(false)
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)

	p := &Plastic{}
	p.Init(properties.Map{}, env)

	assert.False(t, p.Enabled())
}

func TestPlasticEnabledInWorkspaceDirectory(t *testing.T) {
	env := new(mock.Environment)
	env.On("HasCommand", "cm").Return(true)
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)
	env.On("FileContent", "/dir/.plastic//plastic.selector").Return("")
	fileInfo := &runtime.FileInfo{
		Path:         "/dir/hello",
		ParentFolder: "/dir",
		IsDir:        true,
	}
	env.On("HasParentFilePath", ".plastic", false).Return(fileInfo, nil)

	p := &Plastic{}
	p.Init(properties.Map{}, env)

	assert.True(t, p.Enabled())
	assert.Equal(t, fileInfo.ParentFolder, p.plasticWorkspaceFolder)
}

func setupCmStatusEnv(status, headStatus string) *Plastic {
	env := new(mock.Environment)
	env.On("RunCommand", "cm", []string{"status", "--all", "--machinereadable"}).Return(status, nil)
	env.On("RunCommand", "cm", []string{"status", "--head", "--machinereadable"}).Return(headStatus, nil)

	p := &Plastic{}
	p.Init(properties.Map{}, env)

	return p
}

func TestPlasticGetCmOutputForCommand(t *testing.T) {
	want := "je suis le output"
	p := setupCmStatusEnv(want, "")
	got := p.getCmCommandOutput("status", "--all", "--machinereadable")
	assert.Equal(t, want, got)
}

func TestPlasticStatusBehind(t *testing.T) {
	cases := []struct {
		Case     string
		Status   string
		Head     string
		Expected bool
	}{
		{
			Case:     "Not behind",
			Expected: false,
			Status:   "STATUS 20 default localhost:8087",
			Head:     "STATUS cs:20 rep:default repserver:localhost:8087",
		},
		{
			Case:     "Behind",
			Expected: true,
			Status:   "STATUS 2 default localhost:8087",
			Head:     "STATUS cs:20 rep:default repserver:localhost:8087",
		},
	}

	for _, tc := range cases {
		p := setupCmStatusEnv(tc.Status, tc.Head)
		p.setPlasticStatus()
		assert.Equal(t, tc.Expected, p.Behind, tc.Case)
	}
}

func TestPlasticStatusChanged(t *testing.T) {
	cases := []struct {
		Case     string
		Status   string
		Expected bool
	}{
		{
			Case:     "No changes",
			Expected: false,
			Status:   "STATUS 1 default localhost:8087",
		},
		{
			Case:     "Changed file",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nCH /some.file",
		},
		{
			Case:     "Added file",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nAD /some.file",
		},
		{
			Case:     "Added (pivate) file",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nPR /some.file",
		},
		{
			Case:     "Moved file",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nLM /some.file",
		},
		{
			Case:     "Deleted file",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nLD /some.file",
		},
		{
			Case:     "Unmerged file",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nCO /some.file NO_MERGES",
		},
	}

	for _, tc := range cases {
		p := setupCmStatusEnv(tc.Status, "")
		p.setPlasticStatus()
		assert.Equal(t, tc.Expected, p.Status.Changed(), tc.Case)
	}
}

func TestPlasticStatusCounts(t *testing.T) {
	status := "STATUS 1 default localhost:8087" +
		"\r\nCO /some.file NO_MERGES" +
		"\r\nAD /some.file" +
		"\r\nCH /some.file\r\nCH /some.file" +
		"\r\nLD /some.file\r\nLD /some.file\r\nLD /some.file" +
		"\r\nLM /some.file\r\nLM /some.file\r\nLM /some.file\r\nLM /some.file"
	p := setupCmStatusEnv(status, "")
	p.setPlasticStatus()
	s := p.Status
	assert.Equal(t, 1, s.Unmerged)
	assert.Equal(t, 1, s.Added)
	assert.Equal(t, 2, s.Modified)
	assert.Equal(t, 3, s.Deleted)
	assert.Equal(t, 4, s.Moved)
}

func TestPlasticMergePending(t *testing.T) {
	cases := []struct {
		Case     string
		Status   string
		Expected bool
	}{
		{
			Case:     "No pending merge",
			Expected: false,
			Status:   "STATUS 1 default localhost:8087",
		},
		{
			Case:     "Pending merge",
			Expected: true,
			Status:   "STATUS 1 default localhost:8087\r\nCH /some.file merge from 8",
		},
	}
	for _, tc := range cases {
		p := setupCmStatusEnv(tc.Status, "")
		p.setPlasticStatus()
		assert.Equal(t, tc.Expected, p.MergePending, tc.Case)
	}
}

func TestPlasticParseIntPattern(t *testing.T) {
	cases := []struct {
		Case     string
		Text     string
		Pattern  string
		Name     string
		Expected int
		Default  int
	}{
		{
			Case:     "int found",
			Expected: 123,
			Text:     "Some number 123 in text",
			Pattern:  `\s(?P<x>[0-9]+?)\s`,
			Name:     "x",
			Default:  0,
		},
		{
			Case:     "int not found",
			Expected: 0,
			Text:     "No number in text",
			Pattern:  `\s(?P<x>[0-9]+?)\s`,
			Name:     "x",
			Default:  0,
		},
		{
			Case:     "empty text",
			Expected: 0,
			Text:     "",
			Pattern:  `\s(?P<x>[0-9]+?)\s`,
			Name:     "x",
			Default:  0,
		},
	}

	p := &Plastic{}
	for _, tc := range cases {
		value := p.parseIntPattern(tc.Text, tc.Pattern, tc.Name, tc.Default)
		assert.Equal(t, tc.Expected, value, tc.Case)
	}
}

func TestPlasticParseStatusChangeset(t *testing.T) {
	p := &Plastic{}
	cs := p.parseStatusChangeset("STATUS 321 default localhost:8087")
	assert.Equal(t, 321, cs)
}

func TestPlasticGetHeadChangeset(t *testing.T) {
	head := "STATUS cs:321 rep:default repserver:localhost:8087"
	p := setupCmStatusEnv("", head)
	cs := p.getHeadChangeset()
	assert.Equal(t, 321, cs)
}

func TestPlasticParseChangesetSelector(t *testing.T) {
	content := "repository \"default\"\r\n	path \"/\"\r\n	  smartbranch \"/main\" changeset \"321\""
	p := &Plastic{}
	selector := p.parseChangesetSelector(content)
	assert.Equal(t, "321", selector)
}

func TestPlasticParseLabelSelector(t *testing.T) {
	content := "repository \"default\"\r\n	path \"/\"\r\n	  label \"BL003\""
	p := &Plastic{}
	selector := p.parseLabelSelector(content)
	assert.Equal(t, "BL003", selector)
}

func TestPlasticParseBranchSelector(t *testing.T) {
	content := "repository \"default\"\r\n	path \"/\"\r\n	  branch \"/main/fix-004\""
	p := &Plastic{}
	selector := p.parseBranchSelector(content)
	assert.Equal(t, "/main/fix-004", selector)
}

func TestPlasticParseSmartbranchSelector(t *testing.T) {
	content := "repository \"default\"\r\n	path \"/\"\r\n	  smartbranch \"/main/fix-002\""
	p := &Plastic{}
	selector := p.parseBranchSelector(content)
	assert.Equal(t, "/main/fix-002", selector)
}

func TestPlasticStatus(t *testing.T) {
	p := &Plastic{
		Status: &PlasticStatus{
			ScmStatus: ScmStatus{
				Added:    1,
				Modified: 2,
				Deleted:  3,
				Moved:    4,
				Unmerged: 5,
			},
		},
	}
	status := p.Status.String()
	expected := "+1 ~2 -3 >4 x5"
	assert.Equal(t, expected, status)
}

func TestPlasticTemplateString(t *testing.T) {
	cases := []struct {
		Plastic  *Plastic
		Case     string
		Expected string
		Template string
	}{
		{
			Case:     "Default template",
			Expected: "/main",
			Template: "{{ .Selector }}",
			Plastic: &Plastic{
				Selector: "/main",
				Behind:   false,
			},
		},
		{
			Case:     "Workspace changes",
			Expected: "/main \uF044 +2 ~3 -1 >4",
			Template: "{{ .Selector }}{{ if .Status.Changed }} \uF044 {{ .Status.String }}{{ end }}",
			Plastic: &Plastic{
				Selector: "/main",
				Status: &PlasticStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
						Deleted:  1,
						Moved:    4,
					},
				},
			},
		},
		{
			Case:     "No workspace changes",
			Expected: "/main",
			Template: "{{ .Selector }}{{ if .Status.Changed }} \uF044 {{ .Status.String }}{{ end }}",
			Plastic: &Plastic{
				Selector: "/main",
				Status:   &PlasticStatus{},
			},
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			FetchStatus: true,
		}
		tc.Plastic.props = props
		env := new(mock.Environment)
		tc.Plastic.env = env
		assert.Equal(t, tc.Expected, renderTemplate(env, tc.Template, tc.Plastic), tc.Case)
	}
}



================================================
FILE: src/segments/pnpm.go
================================================
package segments

type Pnpm struct {
	language
}

func (n *Pnpm) Enabled() bool {
	n.extensions = []string{"package.json", "pnpm-lock.yaml"}
	n.commands = []*cmd{
		{
			executable: "pnpm",
			args:       []string{"--version"},
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	n.versionURLTemplate = "https://github.com/pnpm/pnpm/releases/tag/v{{ .Full }}"

	return n.language.Enabled()
}

func (n *Pnpm) Template() string {
	return " \U000F02C1 {{.Full}} "
}



================================================
FILE: src/segments/pnpm_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/alecthomas/assert"
)

func TestPnpm(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "1.0.0", ExpectedString: "\U000F02C1 1.0.0", Version: "1.0.0"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "pnpm",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "package.json",
		}
		env, props := getMockedLanguageEnv(params)
		pnpm := &Pnpm{}
		pnpm.Init(props, env)
		assert.True(t, pnpm.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, pnpm.Template(), pnpm), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/posh_git.go
================================================
package segments

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

const (
	poshGitEnv = "POSH_GIT_STATUS"
)

type poshGit struct {
	Index        *poshGitStatus `json:"Index"`
	Working      *poshGitStatus `json:"Working"`
	RepoName     string         `json:"RepoName"`
	Branch       string         `json:"Branch"`
	GitDir       string         `json:"GitDir"`
	Upstream     string         `json:"Upstream"`
	StashCount   int            `json:"StashCount"`
	AheadBy      int            `json:"AheadBy"`
	BehindBy     int            `json:"BehindBy"`
	HasWorking   bool           `json:"HasWorking"`
	HasIndex     bool           `json:"HasIndex"`
	HasUntracked bool           `json:"HasUntracked"`
}

type poshGitStatus struct {
	Added    []string `json:"Added"`
	Modified []string `json:"Modified"`
	Deleted  []string `json:"Deleted"`
	Unmerged []string `json:"Unmerged"`
}

func (s *GitStatus) parsePoshGitStatus(p *poshGitStatus) {
	if p == nil {
		return
	}

	s.Added = len(p.Added)
	s.Deleted = len(p.Deleted)
	s.Modified = len(p.Modified)
	s.Unmerged = len(p.Unmerged)
}

func (g *Git) hasPoshGitStatus() bool {
	envStatus := g.env.Getenv(poshGitEnv)
	if len(envStatus) == 0 {
		log.Error(fmt.Errorf("%s environment variable not set, do you have the posh-git module installed?", poshGitEnv))
		return false
	}

	var posh poshGit
	err := json.Unmarshal([]byte(envStatus), &posh)
	if err != nil {
		log.Error(err)
		return false
	}

	g.setDir(posh.GitDir)
	g.Working = &GitStatus{}
	g.Working.parsePoshGitStatus(posh.Working)
	g.Staging = &GitStatus{}
	g.Staging.parsePoshGitStatus(posh.Index)
	g.HEAD = g.parsePoshGitHEAD(posh.Branch)
	g.stashCount = posh.StashCount
	g.Ahead = posh.AheadBy
	g.Behind = posh.BehindBy
	g.UpstreamGone = len(posh.Upstream) == 0
	g.Upstream = posh.Upstream

	g.setBranchStatus()

	if len(g.Upstream) != 0 && g.props.GetBool(FetchUpstreamIcon, false) {
		g.UpstreamIcon = g.getUpstreamIcon()
	}

	g.poshgit = true
	return true
}

func (g *Git) parsePoshGitHEAD(head string) string {
	// commit
	if strings.HasSuffix(head, "...)") {
		head = strings.TrimLeft(head, "(")
		head = strings.TrimRight(head, ".)")
		return fmt.Sprintf("%s%s", g.props.GetString(CommitIcon, "\uF417"), head)
	}
	// tag
	if strings.HasPrefix(head, "(") {
		head = strings.TrimLeft(head, "(")
		head = strings.TrimRight(head, ")")
		return fmt.Sprintf("%s%s", g.props.GetString(TagIcon, "\uF412"), head)
	}
	// regular branch
	return fmt.Sprintf("%s%s", g.props.GetString(BranchIcon, "\uE0A0"), g.formatBranch(head))
}



================================================
FILE: src/segments/posh_git_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestPoshGitSegment(t *testing.T) {
	cases := []struct {
		Case              string
		PoshGitJSON       string
		Template          string
		ExpectedString    string
		FetchUpstreamIcon bool
		ExpectedEnabled   bool
	}{
		{
			Case:            "no status",
			PoshGitJSON:     "",
			ExpectedString:  "my prompt",
			ExpectedEnabled: false,
		},
		{
			Case:            "invalid data",
			PoshGitJSON:     "{",
			ExpectedString:  "my prompt",
			ExpectedEnabled: false,
		},
		{
			Case: "Changes in Working",
			PoshGitJSON: `
			{
				"RepoName": "oh-my-posh",
				"HasIndex": false,
				"GitDir": "/Users/bill/Code/oh-my-posh/.git",
				"Upstream": "origin/posh-git-json",
				"UpstreamGone": false,
				"HasUntracked": false,
				"AheadBy": 0,
				"StashCount": 0,
				"HasWorking": true,
				"BehindBy": 0,
				"Index": {
					"value": [],
					"Added": [],
					"Modified": [],
					"Deleted": [],
					"Unmerged": []
				},
				"Working": {
					"value": [
						"../src/segments/git_test.go",
						"../src/segments/posh_git_test.go"
					],
					"Added": [],
					"Modified": [
						"../src/segments/git_test.go",
						"../src/segments/posh_git_test.go"
					],
					"Deleted": [],
					"Unmerged": []
				},
				"Branch": "posh-git-json"
			}
			`,
			ExpectedString:  "\ue0a0posh-git-json ≡ \uf044 ~2",
			ExpectedEnabled: true,
		},
		{
			Case: "Changes in Working and Staging, branch ahead an behind",
			PoshGitJSON: `
			{
				"RepoName": "oh-my-posh",
				"HasIndex": false,
				"GitDir": "/Users/bill/Code/oh-my-posh/.git",
				"Upstream": "origin/posh-git-json",
				"UpstreamGone": false,
				"HasUntracked": false,
				"AheadBy": 1,
				"StashCount": 2,
				"HasWorking": true,
				"BehindBy": 1,
				"Index": {
					"value": [
						"../src/segments/git_test.go",
						"../src/segments/posh_git_test.go"
					],
					"Added": [],
					"Deleted": [
					"../src/segments/git_test.go",
					"../src/segments/posh_git_test.go"
					],
					"Modified": [],
					"Unmerged": []
				},
				"Working": {
					"value": [
						"../src/segments/git_test.go",
						"../src/segments/posh_git_test.go"
					],
					"Added": [],
					"Modified": [
						"../src/segments/git_test.go",
						"../src/segments/posh_git_test.go"
					],
					"Deleted": [],
					"Unmerged": []
				},
				"Branch": "posh-git-json"
			}
			`,
			ExpectedString:  "\ue0a0posh-git-json ↑1 ↓1 \uf044 ~2 | \uf046 -2",
			ExpectedEnabled: true,
		},
		{
			Case: "Clean branch, no upstream and stash count",
			PoshGitJSON: `
			{
				"RepoName": "oh-my-posh",
				"GitDir": "/Users/bill/Code/oh-my-posh/.git",
				"StashCount": 2,
				"Index": {
					"value": [],
					"Added": [],
					"Modified": [],
					"Deleted": [],
					"Unmerged": []
				},
				"Working": {
					"value": [],
					"Added": [],
					"Modified": [],
					"Deleted": [],
					"Unmerged": []
				},
				"Branch": "posh-git-json"
			}
			`,
			ExpectedString:  "\ue0a0posh-git-json ≢",
			ExpectedEnabled: true,
		},
		{
			Case: "No working data",
			PoshGitJSON: `
			{
				"RepoName": "oh-my-posh",
				"GitDir": "/Users/bill/Code/oh-my-posh/.git",
				"StashCount": 2,
				"Index": {
					"value": [],
					"Added": [],
					"Modified": [],
					"Deleted": [],
					"Unmerged": []
				},
				"Branch": "posh-git-json"
			}
			`,
			ExpectedString:  "\ue0a0posh-git-json ≢",
			ExpectedEnabled: true,
		},
		{
			Case:     "Fetch upstream icon (GitHub)",
			Template: "{{ .UpstreamIcon }}",
			PoshGitJSON: `
			{
				"RepoName": "oh-my-posh",
				"GitDir": "/Users/bill/Code/oh-my-posh/.git",
				"Branch": "\ue0a0posh-git-json",
				"Upstream": "origin/posh-git-json"
			}
			`,
			ExpectedString:    "\uf408",
			FetchUpstreamIcon: true,
			ExpectedEnabled:   true,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Getenv", poshGitEnv).Return(tc.PoshGitJSON)
		env.On("Home").Return("/Users/bill")
		env.On("GOOS").Return(runtime.LINUX)
		env.On("RunCommand", "git", []string{"-C", "", "--no-optional-locks", "-c", "core.quotepath=false",
			"-c", "color.status=false", "remote", "get-url", "origin"}).Return("github.com/cli", nil)

		props := &properties.Map{
			FetchUpstreamIcon: tc.FetchUpstreamIcon,
		}

		g := &Git{
			scm: scm{
				command: GITCOMMAND,
			},
		}
		g.Init(props, env)

		if len(tc.Template) == 0 {
			tc.Template = g.Template()
		}

		assert.Equal(t, tc.ExpectedEnabled, g.hasPoshGitStatus(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, g), tc.Case)
		}
	}
}

func TestParsePoshGitHEAD(t *testing.T) {
	cases := []struct {
		Case           string
		HEAD           string
		ExpectedString string
	}{
		{
			Case:           "branch",
			HEAD:           "main",
			ExpectedString: "\ue0a0main",
		},
		{
			Case:           "tag",
			HEAD:           "(tag)",
			ExpectedString: "\uf412tag",
		},
		{
			Case:           "commit",
			HEAD:           "(commit...)",
			ExpectedString: "\uf417commit",
		},
	}

	for _, tc := range cases {
		g := &Git{}
		g.Init(&properties.Map{}, new(mock.Environment))

		assert.Equal(t, tc.ExpectedString, g.parsePoshGitHEAD(tc.HEAD), tc.Case)
	}
}



================================================
FILE: src/segments/project.go
================================================
package segments

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"path/filepath"
	"slices"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"

	toml "github.com/pelletier/go-toml/v2"
	yaml "gopkg.in/yaml.v3"
)

type ProjectItem struct {
	Fetcher func(item ProjectItem) *ProjectData
	Name    string
	Files   []string
}

type ProjectData struct {
	Type    string
	Version string
	Name    string
	Target  string
}

// Rust Cargo package
type CargoTOML struct {
	Package ProjectData
}

// Python package
type PyProjectTOML struct {
	Project ProjectData
	Tool    PyProjectToolTOML
}

type PyProjectToolTOML struct {
	Poetry ProjectData
}

type NuSpec struct {
	XMLName  xml.Name `xml:"package"`
	MetaData struct {
		Title   string `xml:"title"`
		Version string `xml:"version"`
	} `xml:"metadata"`
}

type Project struct {
	base

	ProjectData
	Error    string
	projects []*ProjectItem
}

func (n *Project) Enabled() bool {
	n.projects = []*ProjectItem{
		{
			Name:    "node",
			Files:   []string{"package.json"},
			Fetcher: n.getNodePackage,
		},
		{
			Name:    "cargo",
			Files:   []string{"Cargo.toml"},
			Fetcher: n.getCargoPackage,
		},
		{
			Name:    "python",
			Files:   []string{"pyproject.toml"},
			Fetcher: n.getPythonPackage,
		},
		{
			Name:    "mojo",
			Files:   []string{"mojoproject.toml"},
			Fetcher: n.getPythonPackage,
		},
		{
			Name:    "php",
			Files:   []string{"composer.json"},
			Fetcher: n.getNodePackage,
		},
		{
			Name:    "dart",
			Files:   []string{"pubspec.yaml"},
			Fetcher: n.getDartPackage,
		},
		{
			Name:    "nuspec",
			Files:   []string{"*.nuspec"},
			Fetcher: n.getNuSpecPackage,
		},
		{
			Name:    "dotnet",
			Files:   []string{"*.sln", "*.slnf", "*.vbproj", "*.fsproj", "*.csproj"},
			Fetcher: n.getDotnetProject,
		},
		{
			Name:    "julia",
			Files:   []string{"JuliaProject.toml", "Project.toml"},
			Fetcher: n.getProjectData,
		},
		{
			Name:    "powershell",
			Files:   []string{"*.psd1"},
			Fetcher: n.getPowerShellModuleData,
		},
	}

	for _, item := range n.projects {
		// allow files override
		property := properties.Property(fmt.Sprintf("%s_files", item.Name))
		item.Files = n.props.GetStringArray(property, item.Files)

		if !n.hasProjectFile(item) {
			continue
		}

		data := item.Fetcher(*item)
		if data == nil {
			continue
		}

		n.ProjectData = *data
		n.Type = item.Name
		return true
	}

	return n.props.GetBool(properties.AlwaysEnabled, false)
}

func (n *Project) Template() string {
	return " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Version }}\uf487 {{.Version}} {{ end }}{{ if .Name }}{{ .Name }} {{ end }}{{ if .Target }}\uf4de {{.Target}} {{ end }}{{ end }}" //nolint:lll
}

func (n *Project) hasProjectFile(p *ProjectItem) bool {
	return slices.ContainsFunc(p.Files, n.env.HasFiles)
}

func (n *Project) getNodePackage(item ProjectItem) *ProjectData {
	content := n.env.FileContent(item.Files[0])

	var data ProjectData
	err := json.Unmarshal([]byte(content), &data)
	if err != nil {
		n.Error = err.Error()
		return nil
	}

	return &data
}

func (n *Project) getCargoPackage(item ProjectItem) *ProjectData {
	content := n.env.FileContent(item.Files[0])

	var data CargoTOML
	err := toml.Unmarshal([]byte(content), &data)
	if err != nil {
		n.Error = err.Error()
		return nil
	}

	return &ProjectData{
		Version: data.Package.Version,
		Name:    data.Package.Name,
	}
}

func (n *Project) getPythonPackage(item ProjectItem) *ProjectData {
	content := n.env.FileContent(item.Files[0])

	var data PyProjectTOML
	err := toml.Unmarshal([]byte(content), &data)
	if err != nil {
		n.Error = err.Error()
		return nil
	}

	if len(data.Tool.Poetry.Version) != 0 || len(data.Tool.Poetry.Name) != 0 {
		return &ProjectData{
			Version: data.Tool.Poetry.Version,
			Name:    data.Tool.Poetry.Name,
		}
	}
	return &ProjectData{
		Version: data.Project.Version,
		Name:    data.Project.Name,
	}
}

func (n *Project) getDartPackage(item ProjectItem) *ProjectData {
	content := n.env.FileContent(item.Files[0])
	var data ProjectData
	err := yaml.Unmarshal([]byte(content), &data)
	if err != nil {
		n.Error = err.Error()
		return nil
	}

	return &data
}

func (n *Project) getNuSpecPackage(_ ProjectItem) *ProjectData {
	files := n.env.LsDir(n.env.Pwd())
	var content string
	// get the first match only
	for _, file := range files {
		if filepath.Ext(file.Name()) == ".nuspec" {
			content = n.env.FileContent(file.Name())
			break
		}
	}

	var data NuSpec
	err := xml.Unmarshal([]byte(content), &data)
	if err != nil {
		n.Error = err.Error()
		return nil
	}

	return &ProjectData{
		Version: data.MetaData.Version,
		Name:    data.MetaData.Title,
	}
}

func (n *Project) getDotnetProject(item ProjectItem) *ProjectData {
	var name string
	var content string
	var extension string

	files := n.env.LsDir(n.env.Pwd())

	extensions := make([]string, len(item.Files))
	for i, file := range item.Files {
		// Remove leading * and keep only the extension
		extensions[i] = strings.TrimPrefix(file, "*")
	}

	// get the first match only
	for _, file := range files {
		extension = filepath.Ext(file.Name())
		if slices.Contains(extensions, extension) {
			name = strings.TrimSuffix(file.Name(), filepath.Ext(file.Name()))
			content = n.env.FileContent(file.Name())
			break
		}
	}

	// the name of the parameter may differ depending on the version,
	// so instead of xml.Unmarshal() we use regex:
	var target string
	tag := "(?P<TAG><.*TargetFramework.*>(?P<TFM>.*)</.*TargetFramework.*>)"

	values := regex.FindNamedRegexMatch(tag, content)
	if len(values) != 0 {
		target = values["TFM"]
	}

	if len(target) == 0 {
		log.Error(fmt.Errorf("cannot extract TFM from %s project file", name))
	}

	return &ProjectData{
		Target: target,
		Name:   name,
	}
}

func (n *Project) getPowerShellModuleData(_ ProjectItem) *ProjectData {
	files := n.env.LsDir(n.env.Pwd())
	var content string
	// get the first match only
	// excluding PSScriptAnalyzerSettings.psd1
	for _, file := range files {
		if filepath.Ext(file.Name()) == ".psd1" && file.Name() != "PSScriptAnalyzerSettings.psd1" {
			content = n.env.FileContent(file.Name())
			break
		}
	}

	if len(content) == 0 {
		return nil
	}

	data := &ProjectData{}
	lines := strings.SplitSeq(content, "\n")

	for line := range lines {
		splitted := strings.SplitN(line, "=", 2)
		if len(splitted) < 2 {
			continue
		}
		key := strings.TrimSpace(splitted[0])
		value := strings.TrimSpace(splitted[1])
		value = strings.Trim(value, "'\"")

		switch key {
		case "ModuleVersion":
			data.Version = value
		case "RootModule":
			data.Name = strings.TrimRight(value, ".psm1")
		}
	}

	return data
}

func (n *Project) getProjectData(item ProjectItem) *ProjectData {
	content := n.env.FileContent(item.Files[0])

	var data ProjectData
	err := toml.Unmarshal([]byte(content), &data)
	if err != nil {
		n.Error = err.Error()
		return nil
	}

	return &data
}



================================================
FILE: src/segments/project_test.go
================================================
package segments

import (
	"io/fs"
	"os"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/alecthomas/assert"

	testify_ "github.com/stretchr/testify/mock"
)

const (
	hasFiles = "HasFiles"
)

type MockDirEntry struct {
	fileInfo fs.FileInfo
	err      error
	name     string
	fileMode fs.FileMode
	isDir    bool
}

func (m *MockDirEntry) Name() string {
	return m.name
}

func (m *MockDirEntry) IsDir() bool {
	return m.isDir
}

func (m *MockDirEntry) Type() fs.FileMode {
	return m.fileMode
}

func (m *MockDirEntry) Info() (fs.FileInfo, error) {
	return m.fileInfo, m.err
}

func TestPackage(t *testing.T) {
	cases := []struct {
		Name            string
		Case            string
		File            string
		PackageContents string
		ExpectedString  string
		ExpectedEnabled bool
	}{
		{
			Case:            "1.0.0 node.js",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "node",
			File:            "package.json",
			PackageContents: "{\"version\":\"1.0.0\",\"name\":\"test\"}",
		},
		{
			Case:            "1.0.0 php",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "php",
			File:            "composer.json",
			PackageContents: "{\"version\":\"1.0.0\",\"name\":\"test\"}",
		},
		{
			Case:            "3.2.1 node.js",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 3.2.1 test",
			Name:            "node", File: "package.json",
			PackageContents: "{\"version\":\"3.2.1\",\"name\":\"test\"}",
		},
		{
			Case:            "1.0.0 dart",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "dart",
			File:            "pubspec.yaml",
			PackageContents: "name: test\nversion: 1.0.0",
		},
		{
			Case:            "3.2.1 dart",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 3.2.1 test",
			Name:            "dart",
			File:            "pubspec.yaml",
			PackageContents: "name: test\nversion: 3.2.1",
		},
		{
			Case:            "1.0.0 cargo",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "cargo",
			File:            "Cargo.toml",
			PackageContents: "[package]\nname=\"test\"\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "3.2.1 cargo",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 3.2.1 test",
			Name:            "cargo",
			File:            "Cargo.toml",
			PackageContents: "[package]\nname=\"test\"\nversion=\"3.2.1\"\n",
		},
		{
			Case:            "1.0.0 python (poetry)",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[tool.poetry]\nname=\"test\"\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "3.2.1 python (poetry)",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 3.2.1 test",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[tool.poetry]\nname=\"test\"\nversion=\"3.2.1\"\n",
		},
		{
			Case:            "1.0.0 python (pep621)",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[project]\nname=\"test\"\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "3.2.1 python (pep621)",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 3.2.1 test",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[project]\nname=\"test\"\nversion=\"3.2.1\"\n",
		},
		{
			Case:            "1.0.0 mojo",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0 test",
			Name:            "mojo",
			File:            "mojoproject.toml",
			PackageContents: "[project]\nname=\"test\"\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "3.2.1 mojo",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 3.2.1 test",
			Name:            "mojo",
			File:            "mojoproject.toml",
			PackageContents: "[project]\nname=\"test\"\nversion=\"3.2.1\"\n",
		},
		{
			Case:            "No version present node.js",
			ExpectedEnabled: true,
			ExpectedString:  "test",
			Name:            "node",
			File:            "package.json",
			PackageContents: "{\"name\":\"test\"}",
		},
		{
			Case:            "No version present dart",
			ExpectedEnabled: true,
			ExpectedString:  "test",
			Name:            "dart",
			File:            "pubspec.yaml",
			PackageContents: "name: test",
		},
		{
			Case:            "No version present cargo",
			ExpectedEnabled: true,
			ExpectedString:  "test",
			Name:            "cargo",
			File:            "Cargo.toml",
			PackageContents: "[package]\nname=\"test\"\n",
		},
		{
			Case:            "No version present python (poetry)",
			ExpectedEnabled: true,
			ExpectedString:  "test",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[tool.poetry]\nname=\"test\"\n",
		},
		{
			Case:            "No version present python (pep621)",
			ExpectedEnabled: true,
			ExpectedString:  "test",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[project]\nname=\"test\"\n",
		},
		{
			Case:            "No version present mojo",
			ExpectedEnabled: true,
			ExpectedString:  "test",
			Name:            "mojo",
			File:            "mojoproject.toml",
			PackageContents: "[project]\nname=\"test\"\n",
		},
		{
			Case:            "No name present node.js",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0",
			Name:            "node",
			File:            "package.json",
			PackageContents: "{\"version\":\"1.0.0\"}",
		},
		{
			Case:            "No name present dart",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0",
			Name:            "dart",
			File:            "pubspec.yaml",
			PackageContents: "version: 1.0.0",
		},
		{
			Case:            "No name present cargo",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0",
			Name:            "cargo",
			File:            "Cargo.toml",
			PackageContents: "[package]\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "No name present python (poetry)",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[tool.poetry]\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "No name present python (pep621)",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0",
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "[project]\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "No name present mojo",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0",
			Name:            "mojo",
			File:            "mojoproject.toml",
			PackageContents: "[project]\nversion=\"1.0.0\"\n",
		},
		{
			Case:            "Empty project package node.js",
			ExpectedEnabled: true,
			Name:            "node",
			File:            "package.json",
			PackageContents: "{}",
		},
		{
			Case:            "Empty project package dart",
			ExpectedEnabled: true,
			Name:            "dart",
			File:            "pubspec.yaml",
			PackageContents: "",
		},
		{
			Case:            "Empty project package cargo",
			ExpectedEnabled: true,
			Name:            "cargo",
			File:            "Cargo.toml",
			PackageContents: "",
		},
		{
			Case:            "Empty project package python",
			ExpectedEnabled: true,
			Name:            "python",
			File:            "pyproject.toml",
			PackageContents: "",
		},
		{
			Case:            "Empty project package mojo",
			ExpectedEnabled: true,
			Name:            "mojo",
			File:            "mojoproject.toml",
			PackageContents: "",
		},
		{
			Case:            "Invalid json",
			ExpectedString:  "invalid character '}' looking for beginning of value",
			Name:            "node",
			File:            "package.json",
			PackageContents: "}",
		},
		{
			Case:            "Invalid toml",
			ExpectedString:  "toml: line 1: unexpected end of table name (table names cannot be empty)",
			Name:            "cargo",
			File:            "Cargo.toml",
			PackageContents: "[",
		},
		{
			Case:            "Invalid yaml",
			ExpectedString:  "[1:1] sequence was used where mapping is expected\n>  1 | [\n       ^",
			Name:            "dart",
			File:            "pubspec.yaml",
			PackageContents: "[",
		},
		{
			Case:            "Julia project",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 0.1.0 ProjectEuler",
			Name:            "julia",
			File:            "JuliaProject.toml",
			PackageContents: "name = \"ProjectEuler\"\nversion = \"0.1.0\"",
		},
		{
			Case:            "Julia project no name",
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 0.1.0",
			Name:            "julia",
			File:            "JuliaProject.toml",
			PackageContents: "version = \"0.1.0\"",
		},
		{
			Case:            "Julia project no version",
			ExpectedEnabled: true,
			ExpectedString:  "ProjectEuler",
			Name:            "julia",
			File:            "JuliaProject.toml",
			PackageContents: "name = \"ProjectEuler\"",
		},
		{
			Case:            "Julia project invalid toml",
			ExpectedString:  "toml: line 1: unexpected end of table name (table names cannot be empty)",
			Name:            "julia",
			File:            "JuliaProject.toml",
			PackageContents: "[",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On(hasFiles, testify_.Anything).Run(func(args testify_.Arguments) {
			for _, c := range env.ExpectedCalls {
				if c.Method == hasFiles {
					c.ReturnArguments = testify_.Arguments{args.Get(0).(string) == tc.File}
				}
			}
		})
		env.On("FileContent", tc.File).Return(tc.PackageContents)
		pkg := &Project{}
		pkg.Init(properties.Map{}, env)
		assert.Equal(t, tc.ExpectedEnabled, pkg.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, pkg.Template(), pkg), tc.Case)
		}
	}
}

func TestNuspecPackage(t *testing.T) {
	cases := []struct {
		Case            string
		FileName        string
		ExpectedString  string
		HasFiles        bool
		ExpectedEnabled bool
	}{
		{
			Case:            "valid file",
			FileName:        "../test/valid.nuspec",
			HasFiles:        true,
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 0.1.0 Az.Compute",
		},
		{
			Case:            "invalid file",
			FileName:        "../test/invalid.nuspec",
			HasFiles:        true,
			ExpectedEnabled: false,
		},
		{
			Case:            "no info in file",
			FileName:        "../test/empty.nuspec",
			HasFiles:        true,
			ExpectedEnabled: true,
		},
		{
			Case:            "no files",
			HasFiles:        false,
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On(hasFiles, testify_.Anything).Run(func(args testify_.Arguments) {
			for _, c := range env.ExpectedCalls {
				if c.Method != hasFiles {
					continue
				}
				if args.Get(0).(string) == "*.nuspec" {
					c.ReturnArguments = testify_.Arguments{tc.HasFiles}
					continue
				}
				c.ReturnArguments = testify_.Arguments{false}
			}
		})
		env.On("Pwd").Return("posh")
		env.On("LsDir", "posh").Return([]fs.DirEntry{
			&MockDirEntry{
				name: tc.FileName,
			},
		})
		content, _ := os.ReadFile(tc.FileName)
		env.On("FileContent", tc.FileName).Return(string(content))
		pkg := &Project{}
		pkg.Init(properties.Map{}, env)
		assert.Equal(t, tc.ExpectedEnabled, pkg.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, pkg.Template(), pkg), tc.Case)
		}
	}
}

func TestDotnetProject(t *testing.T) {
	cases := []struct {
		Case            string
		FileName        string
		ProjectContents string
		ExpectedString  string
		HasFiles        bool
		ExpectedEnabled bool
	}{
		{
			Case:            "valid .csproj file",
			FileName:        "Valid.csproj",
			HasFiles:        true,
			ProjectContents: "...<TargetFramework>net7.0</TargetFramework>...",
			ExpectedEnabled: true,
			ExpectedString:  "Valid \uf4de net7.0",
		},
		{
			Case:            "valid .fsproj file",
			FileName:        "Valid.fsproj",
			HasFiles:        true,
			ProjectContents: "...<TargetFramework>net6.0</TargetFramework>...",
			ExpectedEnabled: true,
			ExpectedString:  "Valid \uf4de net6.0",
		},
		{
			Case:            "valid .vbproj file",
			FileName:        "Valid.vbproj",
			HasFiles:        true,
			ProjectContents: "...<TargetFramework>net5.0</TargetFramework>...",
			ExpectedEnabled: true,
			ExpectedString:  "Valid \uf4de net5.0",
		},
		{
			Case:            "invalid or empty contents",
			FileName:        "Invalid.csproj",
			HasFiles:        true,
			ExpectedEnabled: true,
			ExpectedString:  "Invalid",
		},
		{
			Case:            "no files",
			HasFiles:        false,
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On(hasFiles, testify_.Anything).Run(func(args testify_.Arguments) {
			for _, c := range env.ExpectedCalls {
				if c.Method == hasFiles {
					pattern := "*" + filepath.Ext(tc.FileName)
					c.ReturnArguments = testify_.Arguments{args.Get(0).(string) == pattern}
				}
			}
		})
		env.On("Pwd").Return("posh")
		env.On("LsDir", "posh").Return([]fs.DirEntry{
			&MockDirEntry{
				name: tc.FileName,
			},
		})
		env.On("FileContent", tc.FileName).Return(tc.ProjectContents)
		pkg := &Project{}
		pkg.Init(properties.Map{}, env)
		assert.Equal(t, tc.ExpectedEnabled, pkg.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, pkg.Template(), pkg), tc.Case)
		}
	}
}

func TestPowerShellModuleProject(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedString  string
		HasFiles        bool
		ExpectedEnabled bool
	}{
		{
			Case:            "valid PowerShell module file",
			HasFiles:        true,
			ExpectedEnabled: true,
			ExpectedString:  "\uf487 1.0.0.0 oh-my-posh",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On(hasFiles, testify_.Anything).Run(func(args testify_.Arguments) {
			for _, c := range env.ExpectedCalls {
				if c.Method == hasFiles {
					c.ReturnArguments = testify_.Arguments{args.Get(0).(string) == "*.psd1"}
				}
			}
		})
		env.On("Pwd").Return("posh")
		env.On("LsDir", "posh").Return([]fs.DirEntry{
			&MockDirEntry{
				name: "oh-my-posh.psd1",
			},
		})
		var moduleContent string
		if tc.HasFiles {
			content, _ := os.ReadFile("../test/oh-my-posh.psd1")
			moduleContent = string(content)
		}
		env.On("FileContent", "oh-my-posh.psd1").Return(moduleContent)
		pkg := &Project{}
		pkg.Init(properties.Map{}, env)
		assert.Equal(t, tc.ExpectedEnabled, pkg.Enabled(), tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, pkg.Template(), pkg), tc.Case)
		}
	}
}



================================================
FILE: src/segments/pulumi.go
================================================
package segments

import (
	"crypto/sha1"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
	"gopkg.in/yaml.v3"
)

const (
	FetchStack properties.Property = "fetch_stack"
	FetchAbout properties.Property = "fetch_about"

	JSON string = "json"
	YAML string = "yaml"

	pulumiJSON string = "Pulumi.json"
	pulumiYAML string = "Pulumi.yaml"
)

type Pulumi struct {
	base

	Stack string
	Name  string

	workspaceSHA1 string

	backend
}

type backend struct {
	URL  string `json:"url"`
	User string `json:"user"`
}

type pulumiFileSpec struct {
	Name string `yaml:"name" json:"name"`
}

type pulumiWorkSpaceFileSpec struct {
	Stack string `json:"stack"`
}

func (p *Pulumi) Template() string {
	return "\U000f0d46 {{ .Stack }}{{if .User }} :: {{ .User }}@{{ end }}{{ if .URL }}{{ .URL }}{{ end }}"
}

func (p *Pulumi) Enabled() bool {
	if !p.env.HasCommand("pulumi") {
		return false
	}

	err := p.getProjectName()
	if err != nil {
		log.Error(err)
		return false
	}

	if p.props.GetBool(FetchStack, false) {
		p.getPulumiStackName()
	}

	if p.props.GetBool(FetchAbout, false) {
		p.getPulumiAbout()
	}

	return true
}

func (p *Pulumi) getPulumiStackName() {
	if len(p.Name) == 0 || len(p.workspaceSHA1) == 0 {
		log.Debug("pulumi project name or workspace sha1 is empty")
		return
	}

	stackNameFile := p.Name + "-" + p.workspaceSHA1 + "-" + "workspace.json"

	homedir := p.env.Home()

	workspaceCacheDir := filepath.Join(homedir, ".pulumi", "workspaces")
	if !p.env.HasFolder(workspaceCacheDir) || !p.env.HasFilesInDir(workspaceCacheDir, stackNameFile) {
		return
	}

	workspaceCacheFile := filepath.Join(workspaceCacheDir, stackNameFile)
	workspaceCacheFileContent := p.env.FileContent(workspaceCacheFile)

	var pulumiWorkspaceSpec pulumiWorkSpaceFileSpec
	err := json.Unmarshal([]byte(workspaceCacheFileContent), &pulumiWorkspaceSpec)
	if err != nil {
		log.Error(fmt.Errorf("pulumi workspace file decode error"))
		return
	}

	log.Debugf("pulumi stack name: %s", pulumiWorkspaceSpec.Stack)
	p.Stack = pulumiWorkspaceSpec.Stack
}

func (p *Pulumi) getProjectName() error {
	var kind, fileName string
	for _, file := range []string{pulumiYAML, pulumiJSON} {
		if p.env.HasFiles(file) {
			fileName = file
			kind = filepath.Ext(file)[1:]
		}
	}

	if len(kind) == 0 {
		return fmt.Errorf("no pulumi spec file found")
	}

	var pulumiFileSpec pulumiFileSpec
	var err error

	pulumiFile := p.env.FileContent(fileName)

	switch kind {
	case YAML:
		err = yaml.Unmarshal([]byte(pulumiFile), &pulumiFileSpec)
	case JSON:
		err = json.Unmarshal([]byte(pulumiFile), &pulumiFileSpec)
	default:
		err = fmt.Errorf("unknown pulumi spec file format")
	}

	if err != nil {
		log.Error(err)
		return nil
	}

	p.Name = pulumiFileSpec.Name

	p.workspaceSHA1 = p.sha1HexString(p.env.Pwd() + path.Separator() + fileName)

	return nil
}

func (p *Pulumi) sha1HexString(s string) string {
	h := sha1.New()

	_, err := h.Write([]byte(s))
	if err != nil {
		log.Error(err)
		return ""
	}

	return hex.EncodeToString(h.Sum(nil))
}

func (p *Pulumi) getPulumiAbout() {
	if len(p.Stack) == 0 {
		log.Error(fmt.Errorf("pulumi stack name is empty, use `fetch_stack` property to enable stack fetching"))
		return
	}

	aboutOutput, err := p.env.RunCommand("pulumi", "about", "--json")

	if err != nil {
		log.Error(fmt.Errorf("unable to get pulumi about output"))
		return
	}

	var about struct {
		Backend *backend `json:"backend"`
	}

	err = json.Unmarshal([]byte(aboutOutput), &about)
	if err != nil {
		log.Error(fmt.Errorf("pulumi about output decode error"))
		return
	}

	if about.Backend == nil {
		log.Debug("pulumi about backend is not set")
		return
	}

	p.backend = *about.Backend
}



================================================
FILE: src/segments/pulumi_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
	"github.com/stretchr/testify/assert"
)

func TestPulumi(t *testing.T) {
	cases := []struct {
		StackError         error
		AboutError         error
		About              string
		YAMLConfig         string
		JSONConfig         string
		Case               string
		ExpectedString     string
		Stack              string
		AboutCache         string
		WorkSpaceFile      string
		HasCommand         bool
		FetchAbout         bool
		HasWorkspaceFolder bool
		FetchStack         bool
		ExpectedEnabled    bool
	}{
		{
			Case:            "no pulumi command",
			ExpectedEnabled: false,
			HasCommand:      false,
		},
		{
			Case:            "pulumi command is present, but no pulumi file",
			ExpectedEnabled: false,
			HasCommand:      true,
		},
		{
			Case:            "pulumi file YAML is present",
			ExpectedString:  "\U000f0d46",
			ExpectedEnabled: true,
			HasCommand:      true,
			YAMLConfig: `
name: oh-my-posh
runtime: golang
description: A Console App
`,
		},
		{
			Case:            "pulumi file JSON is present",
			ExpectedString:  "\U000f0d46",
			ExpectedEnabled: true,
			HasCommand:      true,
			JSONConfig:      `{ "name": "oh-my-posh" }`,
		},
		{
			Case:               "no stack present",
			ExpectedString:     "\U000f0d46 1337",
			ExpectedEnabled:    true,
			HasCommand:         true,
			HasWorkspaceFolder: true,
			FetchStack:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{ "stack": "1337" }`,
		},
		{
			Case:               "pulumi stack",
			ExpectedString:     "\U000f0d46 1337",
			ExpectedEnabled:    true,
			HasCommand:         true,
			HasWorkspaceFolder: true,
			FetchStack:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{ "stack": "1337" }`,
		},
		{
			Case:               "pulumi URL",
			ExpectedString:     "\U000f0d46 1337 :: posh-user@s3://test-pulumi-state-test",
			ExpectedEnabled:    true,
			HasCommand:         true,
			HasWorkspaceFolder: true,
			FetchStack:         true,
			FetchAbout:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{ "stack": "1337" }`,
			About:              `{ "backend": { "url": "s3://test-pulumi-state-test", "user":"posh-user" } }`,
		},
		// Error flows
		{
			Case:            "pulumi file JSON error",
			ExpectedString:  "\U000f0d46",
			ExpectedEnabled: true,
			FetchStack:      true,
			HasCommand:      true,
			JSONConfig:      `{`,
		},
		{
			Case:               "pulumi workspace file JSON error",
			ExpectedString:     "\U000f0d46",
			ExpectedEnabled:    true,
			FetchStack:         true,
			HasCommand:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{`,
			HasWorkspaceFolder: true,
		},
		{
			Case:            "pulumi URL, no fetch_stack set",
			ExpectedString:  "\U000f0d46",
			ExpectedEnabled: true,
			HasCommand:      true,
			FetchAbout:      true,
			JSONConfig:      `{ "name": "oh-my-posh" }`,
		},
		{
			Case:               "pulumi URL - about error",
			ExpectedString:     "\U000f0d46 1337",
			ExpectedEnabled:    true,
			HasCommand:         true,
			HasWorkspaceFolder: true,
			FetchStack:         true,
			FetchAbout:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{ "stack": "1337" }`,
			AboutError:         errors.New("error"),
		},
		{
			Case:               "pulumi URL - about decode error",
			ExpectedString:     "\U000f0d46 1337",
			ExpectedEnabled:    true,
			HasCommand:         true,
			HasWorkspaceFolder: true,
			FetchStack:         true,
			FetchAbout:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{ "stack": "1337" }`,
			About:              `{`,
		},
		{
			Case:               "pulumi URL - about backend is nil",
			ExpectedString:     "\U000f0d46 1337",
			ExpectedEnabled:    true,
			HasCommand:         true,
			HasWorkspaceFolder: true,
			FetchStack:         true,
			FetchAbout:         true,
			JSONConfig:         `{ "name": "oh-my-posh" }`,
			WorkSpaceFile:      `{ "stack": "1337" }`,
			About:              `{}`,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)

		env.On("HasCommand", "pulumi").Return(tc.HasCommand)
		env.On("RunCommand", "pulumi", []string{"stack", "ls", "--json"}).Return(tc.Stack, tc.StackError)
		env.On("RunCommand", "pulumi", []string{"about", "--json"}).Return(tc.About, tc.AboutError)

		pwd := "/home/foobar/Work/oh-my-posh/pulumi/projects/awesome-project"
		env.On("Pwd").Return(pwd)
		env.On("Home").Return(filepath.Clean("/home/foobar"))

		env.On("HasFiles", pulumiYAML).Return(len(tc.YAMLConfig) > 0)
		env.On("FileContent", pulumiYAML).Return(tc.YAMLConfig, nil)

		env.On("HasFiles", pulumiJSON).Return(len(tc.JSONConfig) > 0)
		env.On("FileContent", pulumiJSON).Return(tc.JSONConfig, nil)

		env.On("HasFolder", filepath.Clean("/home/foobar/.pulumi/workspaces")).Return(tc.HasWorkspaceFolder)

		pulumi := &Pulumi{}

		var fileName string
		if len(tc.JSONConfig) > 0 {
			fileName = pulumiJSON
		} else {
			fileName = pulumiYAML
		}

		sha1 := pulumi.sha1HexString(pwd + path.Separator() + fileName)
		workspaceFile := fmt.Sprintf("oh-my-posh-%s-workspace.json", sha1)

		env.On("HasFilesInDir", filepath.Clean("/home/foobar/.pulumi/workspaces"), workspaceFile).Return(len(tc.WorkSpaceFile) > 0)

		env.On("FileContent", filepath.Clean("/home/foobar/.pulumi/workspaces/"+workspaceFile)).Return(tc.WorkSpaceFile, nil)

		props := properties.Map{
			FetchStack: tc.FetchStack,
			FetchAbout: tc.FetchAbout,
		}

		pulumi.Init(props, env)

		assert.Equal(t, tc.ExpectedEnabled, pulumi.Enabled(), tc.Case)

		if !tc.ExpectedEnabled {
			continue
		}

		var got = renderTemplate(env, pulumi.Template(), pulumi)
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
	}
}



================================================
FILE: src/segments/python.go
================================================
package segments

import (
	"errors"
	"fmt"
	"path/filepath"
	"slices"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

type Python struct {
	Venv string
	language
}

const (
	// FetchVirtualEnv fetches the virtual env
	FetchVirtualEnv      properties.Property = "fetch_virtual_env"
	UsePythonVersionFile properties.Property = "use_python_version_file"
	FolderNameFallback   properties.Property = "folder_name_fallback"
	DefaultVenvNames     properties.Property = "default_venv_names"
)

func (p *Python) Template() string {
	return " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} "
}

func (p *Python) Enabled() bool {
	p.extensions = []string{"*.py", "*.ipynb", "pyproject.toml", "venv.bak"}
	p.folders = []string{".venv", "venv", "virtualenv", "venv-win", "pyenv-win"}
	p.commands = []*cmd{
		{
			getVersion: p.pyenvVersion,
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
		{
			executable: "python",
			args:       []string{"--version"},
			regex:      `(?:Python (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
		{
			executable: "python3",
			args:       []string{"--version"},
			regex:      `(?:Python (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
		{
			executable: "py",
			args:       []string{"--version"},
			regex:      `(?:Python (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	p.versionURLTemplate = "https://docs.python.org/release/{{ .Major }}.{{ .Minor }}.{{ .Patch }}/whatsnew/changelog.html#python-{{ .Major }}-{{ .Minor }}-{{ .Patch }}"
	p.displayMode = p.props.GetString(DisplayMode, DisplayModeEnvironment)
	p.language.loadContext = p.loadContext
	p.language.inContext = p.inContext

	return p.language.Enabled()
}

func (p *Python) loadContext() {
	if !p.props.GetBool(FetchVirtualEnv, true) {
		return
	}
	if prompt := p.pyvenvCfgPrompt(); len(prompt) > 0 {
		p.Venv = prompt
		return
	}

	venvVars := []string{
		"VIRTUAL_ENV",
		"CONDA_ENV_PATH",
		"CONDA_DEFAULT_ENV",
	}

	folderNameFallback := p.props.GetBool(FolderNameFallback, true)
	defaultVenvNames := p.props.GetStringArray(DefaultVenvNames, []string{
		".venv",
		"venv",
	})

	var venv string
	for _, venvVar := range venvVars {
		venv = p.env.Getenv(venvVar)
		if len(venv) == 0 {
			continue
		}

		name := path.Base(venv)
		log.Debugf("virtual env name: %s", name)
		if folderNameFallback && slices.Contains(defaultVenvNames, name) {
			venv = strings.TrimSuffix(venv, name)
			name = path.Base(venv)
			log.Debugf("virtual env name (fallback): %s", name)
		}

		if p.canUseVenvName(name) {
			p.Venv = name
			break
		}
	}
}

func (p *Python) inContext() bool {
	return p.Venv != ""
}

func (p *Python) canUseVenvName(name string) bool {
	if p.props.GetBool(properties.DisplayDefault, true) {
		return true
	}

	invalidNames := [2]string{"system", "base"}
	for _, a := range invalidNames {
		if a == name {
			log.Debugf("virtual env name %s is invalid", name)
			return false
		}
	}

	return true
}

func (p *Python) pyenvVersion() (string, error) {
	// Use `pyenv root` instead of $PYENV_ROOT?
	// Is our Python executable at $PYENV_ROOT/bin/python ?
	// Should p.env expose command paths?
	cmdPath := p.env.CommandPath("python")
	if len(cmdPath) == 0 {
		cmdPath = p.env.CommandPath("python3")
	}

	if len(cmdPath) == 0 {
		return "", errors.New("no python executable found")
	}

	pyEnvRoot := p.env.Getenv("PYENV_ROOT")
	if len(pyEnvRoot) == 0 || !strings.HasPrefix(cmdPath, pyEnvRoot) {
		return "", fmt.Errorf("executable at %s is not a pyenv shim", cmdPath)
	}

	// pyenv version-name will return current version or virtualenv
	cmdOutput, err := p.env.RunCommand("pyenv", "version-name")
	if err != nil {
		return "", err
	}

	versionString := strings.Split(cmdOutput, ":")[0]
	if len(versionString) == 0 {
		return "", errors.New("no pyenv version-name found")
	}

	// $PYENV_ROOT/versions + versionString (symlinks resolved) == $PYENV_ROOT/versions/(version)[/envs/(virtualenv)]
	realPath, err := p.env.ResolveSymlink(filepath.Join(pyEnvRoot, "versions", versionString))
	if err != nil {
		return "", err
	}

	// ../versions/(version)[/envs/(virtualenv)]
	shortPath, err := filepath.Rel(filepath.Join(pyEnvRoot, "versions"), realPath)
	if err != nil {
		return "", err
	}

	// override virtualenv if pyenv set one
	parts := strings.Split(shortPath, string(filepath.Separator))
	if len(parts) > 2 && p.canUseVenvName(parts[2]) {
		p.Venv = parts[2]
	}

	return parts[0], nil
}

func (p *Python) pyvenvCfgPrompt() string {
	cmdPath := p.env.CommandPath("python")
	if len(cmdPath) == 0 {
		cmdPath = p.env.CommandPath("python3")
	}

	if len(cmdPath) == 0 {
		return ""
	}

	pyvenvDir := filepath.Dir(cmdPath)
	if !p.env.HasFilesInDir(pyvenvDir, "pyvenv.cfg") {
		pyvenvDir = filepath.Dir(pyvenvDir)
	}

	if !p.env.HasFilesInDir(pyvenvDir, "pyvenv.cfg") {
		return ""
	}

	pyvenvCfg := p.env.FileContent(filepath.Join(pyvenvDir, "pyvenv.cfg"))
	for line := range strings.SplitSeq(pyvenvCfg, "\n") {
		lineSplit := strings.SplitN(line, "=", 2)
		if len(lineSplit) != 2 {
			continue
		}

		key := strings.TrimSpace(lineSplit[0])
		if key == "prompt" {
			value := strings.TrimSpace(lineSplit[1])
			return value
		}
	}

	return ""
}



================================================
FILE: src/segments/python_test.go
================================================
package segments

import (
	"errors"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/alecthomas/assert"
	testify_ "github.com/stretchr/testify/mock"
)

func TestPythonTemplate(t *testing.T) {
	type ResolveSymlink struct {
		Err  error
		Path string
	}
	cases := []struct {
		ResolveSymlink   ResolveSymlink
		Case             string
		Expected         string
		Template         string
		VirtualEnvName   string
		PythonPath       string
		PyvenvCfg        string
		ExpectedDisabled bool
		FetchVersion     bool
	}{
		{Case: "No virtual env present", FetchVersion: true, Expected: "3.8.4", Template: "{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}"},
		{Case: "Virtual env present", FetchVersion: true, Expected: "VENV 3.8.4", VirtualEnvName: "VENV", Template: "{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}"},
		{
			Case:           "Virtual env major and minor dot",
			FetchVersion:   true,
			Expected:       "VENV 3.8",
			VirtualEnvName: "VENV",
			Template:       "{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}",
		},
		{
			Case:           "Virtual env hide on default",
			FetchVersion:   true,
			Expected:       "3.8",
			VirtualEnvName: "default",
			Template:       "{{ if ne .Venv \"default\" }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}",
		},
		{
			Case:           "Virtual env show non default",
			FetchVersion:   true,
			Expected:       "billy 3.8",
			VirtualEnvName: "billy",
			Template:       "{{ if ne .Venv \"default\" }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}",
		},
		{
			Case:           "Pyenv show env",
			FetchVersion:   true,
			Expected:       "VENV 3.8",
			PythonPath:     "/home/user/.pyenv/shims/python",
			VirtualEnvName: "VENV",
			Template:       "{{ if ne .Venv \"default\" }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}",
			ResolveSymlink: ResolveSymlink{Path: "/home/user/.pyenv/versions/3.8.8/envs/VENV", Err: nil},
		},
		{
			Case:           "Pyenv no venv",
			FetchVersion:   true,
			Expected:       "3.8",
			PythonPath:     "/home/user/.pyenv/shims/python",
			Template:       "{{ if ne .Venv \"default\" }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}",
			ResolveSymlink: ResolveSymlink{Path: "/home/user.pyenv/versions/3.8.8", Err: nil},
		},
		{
			Case:           "Pyenv virtual env version name",
			FetchVersion:   true,
			VirtualEnvName: "demo",
			Expected:       "demo 3.8.4",
			PythonPath:     "/home/user/.pyenv/shims/python",
			Template:       "{{ .Venv }} {{ .Full }}",
			ResolveSymlink: ResolveSymlink{Path: "/home/user/.pyenv/versions/demo", Err: nil},
		},
		{
			Case:           "pyvenv.cfg prompt",
			FetchVersion:   true,
			VirtualEnvName: "VENV",
			PythonPath:     "/home/user/.pyenv/shims/python",
			Template:       "{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}",
			PyvenvCfg:      "home = /usr/bin/\nprompt = pyvenvCfgPrompt\n",
			Expected:       "pyvenvCfgPrompt 3.8",
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "python",
			versionParam:  "--version",
			versionOutput: "Python 3.8.4",
			extension:     "*.py",
		}
		env, props := getMockedLanguageEnv(params)

		env.On("GOOS").Return("")
		env.On("CommandPath", testify_.Anything).Return(tc.PythonPath)
		env.On("RunCommand", "pyenv", []string{"version-name"}).Return(tc.VirtualEnvName, nil)
		env.On("HasFilesInDir", testify_.Anything, "pyvenv.cfg").Return(len(tc.PyvenvCfg) > 0)
		env.On("FileContent", filepath.Join(filepath.Dir(tc.PythonPath), "pyvenv.cfg")).Return(tc.PyvenvCfg)
		env.On("Getenv", "VIRTUAL_ENV").Return(tc.VirtualEnvName)
		env.On("Getenv", "CONDA_ENV_PATH").Return(tc.VirtualEnvName)
		env.On("Getenv", "CONDA_DEFAULT_ENV").Return(tc.VirtualEnvName)
		env.On("Getenv", "PYENV_ROOT").Return("/home/user/.pyenv")
		env.On("PathSeparator").Return("")
		env.On("ResolveSymlink", testify_.Anything).Return(tc.ResolveSymlink.Path, tc.ResolveSymlink.Err)

		props[properties.FetchVersion] = tc.FetchVersion
		props[UsePythonVersionFile] = true
		props[DisplayMode] = DisplayModeAlways

		python := &Python{}
		python.Init(props, env)
		assert.Equal(t, !tc.ExpectedDisabled, python.Enabled(), tc.Case)
		assert.Equal(t, tc.Expected, renderTemplate(env, tc.Template, python), tc.Case)
	}
}

func TestPythonPythonInContext(t *testing.T) {
	cases := []struct {
		VirtualEnvName string
		Expected       bool
	}{
		{Expected: true, VirtualEnvName: "VENV"},
		{Expected: false, VirtualEnvName: ""},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return("")
		env.On("PathSeparator").Return("/")
		env.On("CommandPath", testify_.Anything).Return("")
		env.On("HasFilesInDir", testify_.Anything, "pyvenv.cfg").Return(false)
		env.On("Getenv", "VIRTUAL_ENV").Return(tc.VirtualEnvName)
		env.On("Getenv", "CONDA_ENV_PATH").Return("")
		env.On("Getenv", "CONDA_DEFAULT_ENV").Return("")
		env.On("Getenv", "PYENV_VERSION").Return("")
		env.On("HasParentFilePath", ".python-version", false).Return(&runtime.FileInfo{}, errors.New("no match at root level"))
		python := &Python{}
		python.Init(properties.Map{}, env)
		python.loadContext()
		assert.Equal(t, tc.Expected, python.inContext())
	}
}

func TestPythonVirtualEnvIgnoreDefaultVenvNames(t *testing.T) {
	cases := []struct {
		Expected           string
		VirtualEnvName     string
		FolderNameFallback bool
	}{
		{
			Expected:           "folder",
			FolderNameFallback: true,
			VirtualEnvName:     "/path/to/folder/.venv",
		},
		{
			Expected:           "folder",
			FolderNameFallback: true,
			VirtualEnvName:     "/path/to/folder/venv",
		},
		{
			Expected:           ".venv",
			FolderNameFallback: false,
			VirtualEnvName:     "/path/to/folder/.venv",
		},
		{
			Expected:           "venv",
			FolderNameFallback: false,
			VirtualEnvName:     "/path/to/folder/venv",
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{}
		env, props := getMockedLanguageEnv(params)

		env.On("GOOS").Return("")
		env.On("PathSeparator").Return("/")
		env.On("CommandPath", testify_.Anything).Return("")
		env.On("HasFilesInDir", testify_.Anything, "pyvenv.cfg").Return(false)
		env.On("Getenv", "VIRTUAL_ENV").Return(tc.VirtualEnvName)
		env.On("Getenv", "CONDA_ENV_PATH").Return("")
		env.On("Getenv", "CONDA_DEFAULT_ENV").Return("")
		env.On("Getenv", "PYENV_VERSION").Return("")
		env.On("HasParentFilePath", ".python-version", false).Return(&runtime.FileInfo{}, errors.New("no match at root level"))

		props[FolderNameFallback] = tc.FolderNameFallback

		python := &Python{}
		python.Init(props, env)
		python.loadContext()
		assert.Equal(t, tc.Expected, python.Venv)
	}
}

func TestPythonVirtualEnvIgnoreCustomVenvNames(t *testing.T) {
	cases := []struct {
		Expected           string
		VirtualEnvName     string
		DefaultVenvNames   []string
		FolderNameFallback bool
	}{
		{
			Expected:           "folder",
			FolderNameFallback: true,
			DefaultVenvNames:   []string{"env"},
			VirtualEnvName:     "/path/to/folder/env",
		},
		{
			Expected:           "venv",
			FolderNameFallback: true,
			DefaultVenvNames:   []string{"env"},
			VirtualEnvName:     "/path/to/folder/venv",
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{}
		env, props := getMockedLanguageEnv(params)

		env.On("GOOS").Return("")
		env.On("PathSeparator").Return("/")
		env.On("CommandPath", testify_.Anything).Return("")
		env.On("HasFilesInDir", testify_.Anything, "pyvenv.cfg").Return(false)
		env.On("Getenv", "VIRTUAL_ENV").Return(tc.VirtualEnvName)
		env.On("Getenv", "CONDA_ENV_PATH").Return("")
		env.On("Getenv", "CONDA_DEFAULT_ENV").Return("")
		env.On("Getenv", "PYENV_VERSION").Return("")
		env.On("HasParentFilePath", ".python-version", false).Return(&runtime.FileInfo{}, errors.New("no match at root level"))

		props[FolderNameFallback] = tc.FolderNameFallback
		props[DefaultVenvNames] = tc.DefaultVenvNames

		python := &Python{}
		python.Init(props, env)
		python.loadContext()
		assert.Equal(t, tc.Expected, python.Venv)
	}
}



================================================
FILE: src/segments/quasar.go
================================================
package segments

import (
	"encoding/json"
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

const (
	FetchDependencies properties.Property = "fetch_dependencies"
)

type Package struct {
	Version string `json:"version"`
	Dev     bool   `json:"dev"`
}

type Quasar struct {
	Vite    *Package
	AppVite *Package
	language
	HasVite bool
}

func (q *Quasar) Enabled() bool {
	q.projectFiles = []string{"quasar.config", "quasar.config.js"}
	q.commands = []*cmd{
		{
			executable: "quasar",
			args:       []string{"--version"},
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	q.versionURLTemplate = "https://github.com/quasarframework/quasar/releases/tag/quasar-v{{ .Full }}"

	if !q.language.Enabled() {
		return false
	}

	if q.props.GetBool(FetchDependencies, false) {
		q.fetchDependencies()
	}

	return true
}

func (q *Quasar) Template() string {
	return " \uea6a {{.Full}}{{ if .HasVite }} \ueb29 {{ .Vite.Version }}{{ end }} "
}

func (q *Quasar) fetchDependencies() {
	if !q.env.HasFilesInDir(q.projectRoot.ParentFolder, "package-lock.json") {
		return
	}

	packageFilePath := filepath.Join(q.projectRoot.ParentFolder, "package-lock.json")
	content := q.env.FileContent(packageFilePath)

	var objmap map[string]json.RawMessage
	if err := json.Unmarshal([]byte(content), &objmap); err != nil {
		return
	}

	var dependencies map[string]*Package
	if err := json.Unmarshal(objmap["dependencies"], &dependencies); err != nil {
		return
	}

	if p, ok := dependencies["vite"]; ok {
		q.HasVite = true
		q.Vite = p
	}

	if p, ok := dependencies["@quasar/app-vite"]; ok {
		q.AppVite = p
	}
}



================================================
FILE: src/segments/quasar_test.go
================================================
package segments

import (
	"fmt"
	"path/filepath"
	"testing"

	"github.com/alecthomas/assert"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

func TestQuasar(t *testing.T) {
	packageLockFile := `{
		"name": "quasar-project",
		"version": "0.0.1",
		"lockfileVersion": 2,
		"requires": true,
		"dependencies": {
			"@quasar/app-vite": {
				"version": "1.4.3",
				"resolved": "https://registry.npmjs.org/@quasar/app-vite/-/app-vite-1.4.3.tgz",
				"integrity": "sha512-5iMs1sk6fyYTFoRVySwFXWL/PS23UEsdk+YSFejhXnSs5fVDmb2GQMguCHwDl3jPIHjZ7A+XKkb2iWx9pjiPXw==",
				"dev": true
			},
			"vite": {
				"version": "2.9.16",
				"resolved": "https://registry.npmjs.org/vite/-/vite-2.9.16.tgz",
				"integrity": "sha512-X+6q8KPyeuBvTQV8AVSnKDvXoBMnTx8zxh54sOwmmuOdxkjMmEJXH2UEchA+vTMps1xw9vL64uwJOWryULg7nA==",
				"dev": true,
				"requires": {
					"esbuild": "^0.14.27",
					"fsevents": "~2.3.2",
					"postcss": "^8.4.13",
					"resolve": "^1.22.0",
					"rollup": ">=2.59.0 <2.78.0"
				}
			}
		}
	}`

	cases := []struct {
		Case               string
		ExpectedString     string
		Version            string
		HasPackageLockFile bool
		FetchDependencies  bool
	}{
		{Case: "@quasar/cli v2.2.1", ExpectedString: "\uea6a 2.2.1", Version: "@quasar/cli v2.2.1"},
		{
			Case:               "@quasar/cli v2.2.1 with vite",
			Version:            "@quasar/cli v2.2.1",
			HasPackageLockFile: true,
			FetchDependencies:  true,
			ExpectedString:     "\uea6a 2.2.1 \ueb29 2.9.16",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "quasar",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "quasar.config",
		}
		env, props := getMockedLanguageEnv(params)

		env.On("HasFilesInDir", "/usr/home/project", "package-lock.json").Return(tc.HasPackageLockFile)
		fileInfo := &runtime.FileInfo{ParentFolder: "/usr/home/project", IsDir: true}
		env.On("HasParentFilePath", "quasar.config", false).Return(fileInfo, nil)
		env.On("FileContent", filepath.Join(fileInfo.ParentFolder, "package-lock.json")).Return(packageLockFile)

		props[FetchDependencies] = tc.FetchDependencies

		quasar := &Quasar{}
		quasar.Init(props, env)

		assert.True(t, quasar.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, quasar.Template(), quasar), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/r.go
================================================
package segments

type R struct {
	language
}

func (r *R) Template() string {
	return languageTemplate
}

func (r *R) Enabled() bool {
	rRegex := `version (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`
	r.extensions = []string{"*.R", "*.Rmd", "*.Rsx", "*.Rda", "*.Rd", "*.Rproj", ".Rproj.user"}
	r.commands = []*cmd{
		{
			executable: "Rscript",
			args:       []string{"--version"},
			regex:      rRegex,
		},
		{
			executable: "R",
			args:       []string{"--version"},
			regex:      rRegex,
		},
		{
			executable: "R.exe",
			args:       []string{"--version"},
			regex:      rRegex,
		},
	}
	r.versionURLTemplate = "https://www.r-project.org/"

	return r.language.Enabled()
}



================================================
FILE: src/segments/r_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestR(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
		HasRscript     bool
		HasR           bool
		HasRexe        bool
	}{
		{Case: "Rscript 4.2.0", ExpectedString: "4.2.0", HasRscript: true, Version: "Rscript (R) version 4.2.0 (2022-04-22)"},
		{Case: "Rscript 4.1.3", ExpectedString: "4.1.3", HasRscript: true, Version: "R scripting front-end version 4.1.3 (2022-03-10)"},
		{Case: "Rscript 4.1.3 patched", ExpectedString: "4.1.3", HasRscript: true, Version: "R scripting front-end version 4.1.3 Patched (2022-03-10 r81896)"},
		{Case: "Rscript 4.0.0", ExpectedString: "4.0.0", HasRscript: true, Version: "R scripting front-end version 4.0.0 (2020-04-24)"},
		{Case: "Rscript devel", ExpectedString: "4.2.0", HasRscript: true, Version: "R scripting front-end version 4.2.0 Under development (unstable) (2022-03-14 r81896)"},

		{Case: "R 4.1.2", ExpectedString: "4.1.2", HasR: true, Version: "R version 4.1.2 (2021-11-01) -- \"Bird Hippie\""},
		{Case: "R 4.1.3 patched", ExpectedString: "4.1.3", HasR: true, Version: "R version 4.1.3 Patched (2022-03-10 r81896) -- \"One Push-Up\""},
		{Case: "R 4.0.0", ExpectedString: "4.0.0", HasR: true, Version: "R version 4.0.0 (2020-04-24) -- \"Arbor Day\""},

		{Case: "R.exe 4.1.2", ExpectedString: "4.1.2", HasRexe: true, Version: "R version 4.1.2 (2021-11-01) -- \"Bird Hippie\""},
		{Case: "R.exe 4.1.3 patched", ExpectedString: "4.1.3", HasRexe: true, Version: "R version 4.1.3 Patched (2022-03-10 r81896) -- \"One Push-Up\""},
		{Case: "R.exe 4.0.0", ExpectedString: "4.0.0", HasRexe: true, Version: "R version 4.0.0 (2020-04-24) -- \"Arbor Day\""},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "R",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.R",
		}
		env, props := getMockedLanguageEnv(params)

		env.On("HasCommand", "Rscript").Return(tc.HasRscript)
		env.On("RunCommand", "Rscript", []string{"--version"}).Return(tc.Version, nil)
		env.On("HasCommand", "R.exe").Return(tc.HasRexe)
		env.On("RunCommand", "R.exe", []string{"--version"}).Return(tc.Version, nil)

		r := &R{}
		r.Init(props, env)

		assert.True(t, r.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, r.Template(), r), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/react.go
================================================
package segments

type React struct {
	language
}

func (r *React) Template() string {
	return languageTemplate
}

func (r *React) Enabled() bool {
	r.extensions = []string{"package.json"}
	r.commands = []*cmd{
		{
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
			getVersion: r.getVersion,
		},
	}
	r.versionURLTemplate = "https://github.com/facebook/react/releases/tag/v{{.Full}}"

	if !r.hasNodePackage("react") {
		return false
	}

	return r.language.Enabled()
}

func (r *React) getVersion() (string, error) {
	return r.nodePackageVersion("react")
}



================================================
FILE: src/segments/root.go
================================================
package segments

type Root struct {
	base
}

func (rt *Root) Template() string {
	return " \uF0E7 "
}

func (rt *Root) Enabled() bool {
	return rt.env.Root()
}



================================================
FILE: src/segments/ruby.go
================================================
package segments

type Ruby struct {
	language
}

func (r *Ruby) Template() string {
	return languageTemplate
}

func (r *Ruby) Enabled() bool {
	r.extensions = []string{"*.rb", "Rakefile", "Gemfile"}
	r.commands = []*cmd{
		{
			executable: "rbenv",
			args:       []string{"version-name"},
			regex:      `(?P<version>.+)`,
		},
		{
			executable: "rvm-prompt",
			args:       []string{"i", "v", "g"},
			regex:      `(?P<version>.+)`,
		},
		{
			executable: "chruby",
			args:       []string(nil),
			regex:      `\* (?P<version>.+)\n`,
		},
		{
			executable: "asdf",
			args:       []string{"current", "ruby"},
			regex:      `ruby\s+(?P<version>[^\s]+)\s+`,
		},
		{
			executable: "ruby",
			args:       []string{"--version"},
			regex:      `ruby\s+(?P<version>[^\s]+)\s+`,
		},
	}

	enabled := r.language.Enabled()

	// this happens when no version is set
	if r.Full == "______" {
		r.Full = ""
	}

	return enabled
}



================================================
FILE: src/segments/ruby_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"

	"github.com/stretchr/testify/assert"
)

func TestRuby(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
		HasRbenv       bool
		HasRvmprompt   bool
		HasChruby      bool
		HasAsdf        bool
		HasRuby        bool
		HasRubyFiles   bool
		HasRakeFile    bool
		HasGemFile     bool
		FetchVersion   bool
	}{
		{Case: "Ruby files", ExpectedString: "", FetchVersion: false, HasRubyFiles: true},
		{Case: "Rakefile", ExpectedString: "", FetchVersion: false, HasRakeFile: true},
		{Case: "Gemfile", ExpectedString: "", FetchVersion: false, HasGemFile: true},
		{Case: "Gemfile with version", ExpectedString: "err parsing info from ruby with", FetchVersion: true, HasGemFile: true},
		{
			Case:           "Version with chruby",
			ExpectedString: "ruby-2.6.3",
			FetchVersion:   true,
			HasRubyFiles:   true,
			HasChruby:      true,
			Version: ` * ruby-2.6.3
			ruby-1.9.3-p392
			jruby-1.7.0
			rubinius-2.0.0-rc1`,
		},
		{
			Case:           "Version with chruby line 2",
			ExpectedString: "ruby-1.9.3-p392",
			FetchVersion:   true,
			HasRubyFiles:   true,
			HasChruby:      true,
			Version: ` ruby-2.6.3
			* ruby-1.9.3-p392
			jruby-1.7.0
			rubinius-2.0.0-rc1`,
		},
		{
			Case:           "Version with asdf",
			ExpectedString: "2.6.3",
			FetchVersion:   true,
			HasRubyFiles:   true,
			HasAsdf:        true,
			Version:        "ruby            2.6.3           /Users/jan/Projects/oh-my-posh/.tool-versions",
		},
		{
			Case:           "Version with asdf not set",
			ExpectedString: "",
			FetchVersion:   true,
			HasRubyFiles:   true,
			HasAsdf:        true,
			Version:        "ruby            ______          No version set. Run \"asdf <global|shell|local> ruby <version>\"",
		},
		{
			Case:           "Version with ruby",
			ExpectedString: "2.6.3",
			FetchVersion:   true,
			HasRubyFiles:   true,
			HasRuby:        true,
			Version:        "ruby  2.6.3 (2019-04-16 revision 67580) [universal.x86_64-darwin20]",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "ruby",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.rb",
		}
		env, props := getMockedLanguageEnv(params)

		env.On("HasCommand", "rbenv").Return(tc.HasRbenv)
		env.On("RunCommand", "rbenv", []string{"version-name"}).Return(tc.Version, nil)
		env.On("HasCommand", "rvm-prompt").Return(tc.HasRvmprompt)
		env.On("RunCommand", "rvm-prompt", []string{"i", "v", "g"}).Return(tc.Version, nil)
		env.On("HasCommand", "chruby").Return(tc.HasChruby)
		env.On("RunCommand", "chruby", []string(nil)).Return(tc.Version, nil)
		env.On("HasCommand", "asdf").Return(tc.HasAsdf)
		env.On("RunCommand", "asdf", []string{"current", "ruby"}).Return(tc.Version, nil)
		env.On("HasFiles", "Rakefile").Return(tc.HasRakeFile)
		env.On("HasFiles", "Gemfile").Return(tc.HasGemFile)

		props[properties.FetchVersion] = tc.FetchVersion

		ruby := &Ruby{}
		ruby.Init(props, env)

		assert.True(t, ruby.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, ruby.Template(), ruby), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/rust.go
================================================
package segments

type Rust struct {
	language
}

func (r *Rust) Template() string {
	return languageTemplate
}

func (r *Rust) Enabled() bool {
	r.extensions = []string{"*.rs", "Cargo.toml", "Cargo.lock"}
	r.commands = []*cmd{
		{
			executable: "rustc",
			args:       []string{"--version"},
			regex:      `rustc (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))(-(?P<prerelease>[a-z]+))?)(( \((?P<buildmetadata>[0-9a-f]+ [0-9]+-[0-9]+-[0-9]+)\))?)`,
		},
	}

	return r.language.Enabled()
}



================================================
FILE: src/segments/rust_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestRust(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Rust 1.64.0", ExpectedString: "1.64.0", Version: "rustc 1.64.0"},
		{Case: "Rust 1.53.0", ExpectedString: "1.53.0", Version: "rustc 1.53.0 (4369396ce 2021-04-27)"},
		{Case: "Rust 1.66.0", ExpectedString: "1.66.0-nightly", Version: "rustc 1.66.0-nightly (01af5040f 2022-10-04)"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "rustc",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.rs",
		}
		env, props := getMockedLanguageEnv(params)
		r := &Rust{}
		r.Init(props, env)
		assert.True(t, r.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, r.Template(), r), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/sapling.go
================================================
package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

// SaplingStatus represents part of the status of a Sapling repository
type SaplingStatus struct {
	ScmStatus
}

func (s *SaplingStatus) add(code string) {
	// M = modified
	// A = added
	// R = removed/deleted
	// C = clean
	// ! = missing (deleted by a non-sl command, but still tracked)
	// ? = not tracked
	// I = ignored
	//   = origin of the previous file (with --copies)
	switch code {
	case "M":
		s.Modified++
	case "A":
		s.Added++
	case "R":
		s.Deleted++
	case "C":
		s.Clean++
	case "!":
		s.Missing++
	case "?":
		s.Untracked++
	case "I":
		s.Ignored++
	}
}

const (
	SAPLINGCOMMAND   = "sl"
	SLCOMMITTEMPLATE = "no:{node}\nns:{sl_node}\nnd:{sl_date}\nun:{sl_user}\nbm:{activebookmark}\ndn:{desc|firstline}"
)

type Sapling struct {
	Working     *SaplingStatus
	ShortHash   string
	Hash        string
	When        string
	Author      string
	Bookmark    string
	Description string
	scm
	New bool
}

func (sl *Sapling) Template() string {
	return " {{ if .Bookmark }}\uf097 {{ .Bookmark }}*{{ else }}\ue729 {{ .ShortHash }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }} "
}

func (sl *Sapling) Enabled() bool {
	if !sl.shouldDisplay() {
		return false
	}

	sl.setHeadContext()

	return true
}

func (sl *Sapling) shouldDisplay() bool {
	sl.command = SAPLINGCOMMAND

	if !sl.hasCommand(SAPLINGCOMMAND) {
		return false
	}

	slDir, err := sl.env.HasParentFilePath(".sl", false)
	if err != nil {
		return false
	}

	sl.mainSCMDir = slDir.Path
	sl.scmDir = slDir.Path
	// convert the worktree file path to a windows one when in a WSL shared folder
	sl.repoRootDir = strings.TrimSuffix(sl.convertToWindowsPath(slDir.Path), "/.sl")
	sl.RepoName = path.Base(sl.convertToLinuxPath(sl.repoRootDir))
	sl.setDir(slDir.Path)

	return true
}

func (sl *Sapling) CacheKey() (string, bool) {
	dir, err := sl.env.HasParentFilePath(".sl", true)
	if err != nil {
		return "", false
	}

	return dir.Path, true
}

func (sl *Sapling) setDir(dir string) {
	dir = path.ReplaceHomeDirPrefixWithTilde(dir) // align with template PWD

	if sl.env.GOOS() == runtime.WINDOWS {
		sl.Dir = strings.TrimSuffix(dir, `\.sl`)
		return
	}

	sl.Dir = strings.TrimSuffix(dir, "/.sl")
}

func (sl *Sapling) setHeadContext() {
	sl.setCommitContext()

	statusFormats := sl.props.GetKeyValueMap(StatusFormats, map[string]string{})
	sl.Working = &SaplingStatus{ScmStatus: ScmStatus{Formats: statusFormats}}

	displayStatus := sl.props.GetBool(FetchStatus, true)
	if !displayStatus {
		return
	}

	changes := sl.getSaplingCommandOutput("status")
	if len(changes) == 0 {
		return
	}
	lines := strings.SplitSeq(changes, "\n")
	for line := range lines {
		line = strings.TrimSpace(line)
		if len(line) == 0 {
			continue
		}
		// element is the element from someSlice for where we are
		sl.Working.add(line[0:1])
	}
}

func (sl *Sapling) setCommitContext() {
	body := sl.getSaplingCommandOutput("log", "--limit", "1", "--template", SLCOMMITTEMPLATE)
	if len(body) == 0 {
		sl.New = true
		return
	}
	splitted := strings.SplitSeq(strings.TrimSpace(body), "\n")
	for line := range splitted {
		line = strings.TrimSpace(line)
		if len(line) <= 3 {
			continue
		}
		anchor := line[:3]
		line = line[3:]
		switch anchor {
		case "no:":
			sl.Hash = line
		case "ns:":
			sl.ShortHash = line
		case "nd:":
			sl.When = line
		case "un:":
			sl.Author = line
		case "bm:":
			sl.Bookmark = line
		case "dn:":
			sl.Description = line
		}
	}
}

func (sl *Sapling) getSaplingCommandOutput(command string, args ...string) string {
	args = append([]string{command}, args...)
	val, err := sl.env.RunCommand(sl.command, args...)
	if err != nil {
		return ""
	}
	return strings.TrimSpace(val)
}



================================================
FILE: src/segments/sapling_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/alecthomas/assert"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
)

func TestSetDir(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Path     string
		GOOS     string
	}{
		{
			Case:     "Linux",
			Expected: "/usr/sapling/repo",
			Path:     "/usr/sapling/repo/.sl",
			GOOS:     runtime.LINUX,
		},
		{
			Case:     "Windows",
			Expected: "\\usr\\sapling\\repo",
			Path:     "\\usr\\sapling\\repo\\.sl",
			GOOS:     runtime.WINDOWS,
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return(tc.GOOS)
		home := "/usr/home"
		if tc.GOOS == runtime.WINDOWS {
			home = "\\usr\\home"
		}
		env.On("Home").Return(home)

		sl := &Sapling{}
		sl.Init(properties.Map{}, env)

		sl.setDir(tc.Path)
		assert.Equal(t, tc.Expected, sl.Dir, tc.Case)
	}
}

func TestSetCommitContext(t *testing.T) {
	cases := []struct {
		Case   string
		Output string
		Error  error

		ExpectedHash      string
		ExpectedShortHash string
		ExpectedWhen      string
		ExpectedAuthor    string
		ExpectedBookmark  string
	}{
		{
			Case:  "Error",
			Error: errors.New("error"),
		},
		{
			Case: "No output",
		},
		{
			Case: "All output",
			Output: `
			no:734349e9f1abd229ec6e9bbebed35aed56b26a9e
    		ns:734349e9f
    		nd:23 minutes ago
    		un:jan
    		bm:sapling-segment
			`,
			ExpectedHash:      "734349e9f1abd229ec6e9bbebed35aed56b26a9e",
			ExpectedShortHash: "734349e9f",
			ExpectedWhen:      "23 minutes ago",
			ExpectedAuthor:    "jan",
			ExpectedBookmark:  "sapling-segment",
		},
		{
			Case:   "Short line",
			Output: "er",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("RunCommand", "sl", []string{"log", "--limit", "1", "--template", SLCOMMITTEMPLATE}).Return(tc.Output, tc.Error)

		sl := &Sapling{
			scm: scm{
				command: SAPLINGCOMMAND,
			},
		}
		sl.Init(properties.Map{}, env)

		sl.setCommitContext()

		assert.Equal(t, tc.ExpectedHash, sl.Hash, tc.Case)
		assert.Equal(t, tc.ExpectedShortHash, sl.ShortHash, tc.Case)
		assert.Equal(t, tc.ExpectedWhen, sl.When, tc.Case)
		assert.Equal(t, tc.ExpectedAuthor, sl.Author, tc.Case)
		assert.Equal(t, tc.ExpectedBookmark, sl.Bookmark, tc.Case)
	}
}

func TestShouldDisplay(t *testing.T) {
	cases := []struct {
		Case       string
		HasSapling bool
		InRepo     bool
		Expected   bool
	}{
		{
			Case: "Sapling not installed",
		},
		{
			Case:       "Sapling installed, not in repo",
			HasSapling: true,
		},
		{
			Case:       "Sapling installed, in repo",
			HasSapling: true,
			InRepo:     true,
			Expected:   true,
		},
	}
	fileInfo := &runtime.FileInfo{
		Path:         "/sapling/repo/.sl",
		ParentFolder: "/sapling/repo",
		IsDir:        true,
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HasCommand", "sl").Return(tc.HasSapling)
		env.On("InWSLSharedDrive").Return(false)
		env.On("GOOS").Return(runtime.LINUX)
		env.On("Home").Return("/usr/home/sapling")
		if tc.InRepo {
			env.On("HasParentFilePath", ".sl", false).Return(fileInfo, nil)
		} else {
			env.On("HasParentFilePath", ".sl", false).Return(&runtime.FileInfo{}, errors.New("error"))
		}

		sl := &Sapling{}
		sl.Init(&properties.Map{}, env)

		got := sl.shouldDisplay()
		assert.Equal(t, tc.Expected, got, tc.Case)
		if tc.Expected {
			assert.Equal(t, "/sapling/repo/.sl", sl.mainSCMDir, tc.Case)
			assert.Equal(t, "/sapling/repo/.sl", sl.scmDir, tc.Case)
			assert.Equal(t, "/sapling/repo", sl.repoRootDir, tc.Case)
			assert.Equal(t, "repo", sl.RepoName, tc.Case)
		}
	}
}

func TestSetHeadContext(t *testing.T) {
	cases := []struct {
		Case        string
		Output      string
		Expected    string
		FetchStatus bool
	}{
		{
			Case: "Do not fetch status",
		},
		{
			Case:        "Fetch status, no output",
			FetchStatus: true,
		},
		{
			Case:        "Fetch status, changed files",
			FetchStatus: true,
			Output: `
			M file.go
			M file2.go
			`,
			Expected: "~2",
		},
		{
			Case:        "Fetch status, all cases",
			FetchStatus: true,
			Output: `
			M file.go
			R file2.go
			A file3.go
			C file4.go
			! missing.go
			? untracked.go
			? untracked.go
			I ignored.go
			I ignored.go
			`,
			Expected: "?2 +1 ~1 -1 !1 =1 Ø2",
		},
	}
	output := `
	no:734349e9f1abd229ec6e9bbebed35aed56b26a9e
	ns:734349e9f
	nd:23 minutes ago
	un:jan
	bm:sapling-segment
	`
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("RunCommand", "sl", []string{"log", "--limit", "1", "--template", SLCOMMITTEMPLATE}).Return(output, nil)
		env.On("RunCommand", "sl", []string{"status"}).Return(tc.Output, nil)

		props := &properties.Map{
			FetchStatus: tc.FetchStatus,
		}

		sl := &Sapling{
			scm: scm{
				command: SAPLINGCOMMAND,
			},
		}
		sl.Init(props, env)

		sl.setHeadContext()
		got := sl.Working.String()
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/segments/scm.go
================================================
package segments

import (
	"fmt"
	"path/filepath"
	"sort"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

const (
	// Fallback to native command
	NativeFallback properties.Property = "native_fallback"
	// Override the built-in status formats
	StatusFormats properties.Property = "status_formats"
)

// ScmStatus represents part of the status of a repository
type ScmStatus struct {
	Formats    map[string]string
	Unmerged   int
	Deleted    int
	Added      int
	Modified   int
	Moved      int
	Conflicted int
	Untracked  int
	Clean      int
	Missing    int
	Ignored    int
}

func (s *ScmStatus) Changed() bool {
	return s.Unmerged > 0 ||
		s.Added > 0 ||
		s.Deleted > 0 ||
		s.Modified > 0 ||
		s.Moved > 0 ||
		s.Conflicted > 0 ||
		s.Untracked > 0 ||
		s.Clean > 0 ||
		s.Missing > 0 ||
		s.Ignored > 0
}

func (s *ScmStatus) String() string {
	var status strings.Builder

	if s.Formats == nil {
		s.Formats = make(map[string]string)
	}

	stringIfValue := func(value int, name, prefix string) {
		if value <= 0 {
			return
		}

		// allow user override for prefix
		if _, ok := s.Formats[name]; ok {
			status.WriteString(fmt.Sprintf(s.Formats[name], value))
			return
		}

		status.WriteString(fmt.Sprintf(" %s%d", prefix, value))
	}

	stringIfValue(s.Untracked, "Untracked", "?")
	stringIfValue(s.Added, "Added", "+")
	stringIfValue(s.Modified, "Modified", "~")
	stringIfValue(s.Deleted, "Deleted", "-")
	stringIfValue(s.Moved, "Moved", ">")
	stringIfValue(s.Unmerged, "Unmerged", "x")
	stringIfValue(s.Conflicted, "Conflicted", "!")
	stringIfValue(s.Missing, "Missing", "!")
	stringIfValue(s.Clean, "Clean", "=")
	stringIfValue(s.Ignored, "Ignored", "Ø")

	return strings.TrimSpace(status.String())
}

type scm struct {
	base

	Dir             string
	RepoName        string
	mainSCMDir      string
	scmDir          string
	repoRootDir     string
	command         string
	IsWslSharedPath bool
	CommandMissing  bool
	nativeFallback  bool
}

const (
	// BranchTemplate allows to specify a template for the branch name
	BranchTemplate properties.Property = "branch_template"
)

func (s *scm) RelativeDir() string {
	if len(s.Dir) == 0 {
		return ""
	}

	pwd := s.env.Pwd()
	log.Debug("scm.Dir:", s.Dir, "pwd:", pwd)

	rel, err := filepath.Rel(s.Dir, pwd)
	if err != nil {
		log.Error(err)
	}

	if rel == "." || len(rel) == 0 {
		log.Debug("scm.Dir is the same as the current working directory, returning empty string")
		return ""
	}

	return rel
}

func (s *scm) formatBranch(branch string) string {
	mappedBranches := s.props.GetKeyValueMap(MappedBranches, make(map[string]string))

	// sort the keys alphabetically
	keys := make([]string, 0, len(mappedBranches))
	for k := range mappedBranches {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	const wildcard = "*"

	for _, key := range keys {
		if key == wildcard {
			branch = mappedBranches[key]
			break
		}

		matchSubFolders := strings.HasSuffix(key, wildcard)
		subfolderKey := strings.TrimSuffix(key, wildcard)

		if matchSubFolders && strings.HasPrefix(branch, subfolderKey) {
			branch = strings.Replace(branch, subfolderKey, mappedBranches[key], 1)
			break
		}

		if matchSubFolders || branch != key {
			continue
		}

		branch = strings.Replace(branch, key, mappedBranches[key], 1)
		break
	}

	branchTemplate := s.props.GetString(BranchTemplate, "")
	if len(branchTemplate) == 0 {
		return branch
	}

	tmpl := &template.Text{
		Template: branchTemplate,
		Context:  struct{ Branch string }{Branch: branch},
	}

	text, err := tmpl.Render()
	if err != nil {
		return branch
	}

	return text
}

func (s *scm) fileContent(folder, file string) string {
	return strings.Trim(s.env.FileContent(folder+"/"+file), " \r\n")
}

func (s *scm) convertToWindowsPath(path string) string {
	// only convert when in Windows, or when in a WSL shared folder and not using the native fallback
	if s.env.GOOS() == runtime.WINDOWS || (s.IsWslSharedPath && !s.nativeFallback) {
		return s.env.ConvertToWindowsPath(path)
	}

	return path
}

func (s *scm) convertToLinuxPath(path string) string {
	if !s.IsWslSharedPath {
		return path
	}

	return s.env.ConvertToLinuxPath(path)
}

func (s *scm) hasCommand(command string) bool {
	if len(s.command) > 0 {
		return true
	}

	// when in a WSL shared folder, we must use command.exe and convert paths accordingly
	// for worktrees, stashes, and path to work, except when native_fallback is set
	s.IsWslSharedPath = s.env.InWSLSharedDrive()
	if s.env.GOOS() == runtime.WINDOWS || s.IsWslSharedPath {
		command += ".exe"
	}

	if s.env.HasCommand(command) {
		s.command = command
		return true
	}

	s.CommandMissing = true

	// only use the native fallback when set by the user
	if s.IsWslSharedPath && s.props.GetBool(NativeFallback, false) {
		command = strings.TrimSuffix(command, ".exe")
		if s.env.HasCommand(command) {
			s.command = command
			s.nativeFallback = true
			return true
		}
	}

	return false
}



================================================
FILE: src/segments/scm_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

func TestScmStatusChanged(t *testing.T) {
	cases := []struct {
		Case     string
		Status   ScmStatus
		Expected bool
	}{
		{
			Case:     "No changes",
			Expected: false,
			Status:   ScmStatus{},
		},
		{
			Case:     "Added",
			Expected: true,
			Status: ScmStatus{
				Added: 1,
			},
		},
		{
			Case:     "Moved",
			Expected: true,
			Status: ScmStatus{
				Moved: 1,
			},
		},
		{
			Case:     "Modified",
			Expected: true,
			Status: ScmStatus{
				Modified: 1,
			},
		},
		{
			Case:     "Deleted",
			Expected: true,
			Status: ScmStatus{
				Deleted: 1,
			},
		},
		{
			Case:     "Unmerged",
			Expected: true,
			Status: ScmStatus{
				Unmerged: 1,
			},
		},
	}

	for _, tc := range cases {
		assert.Equal(t, tc.Expected, tc.Status.Changed(), tc.Case)
	}
}

func TestScmStatusString(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Status   ScmStatus
	}{
		{
			Case:     "Unmerged",
			Expected: "x1",
			Status: ScmStatus{
				Unmerged: 1,
			},
		},
		{
			Case:     "Unmerged and Modified",
			Expected: "~3 x1",
			Status: ScmStatus{
				Unmerged: 1,
				Modified: 3,
			},
		},
		{
			Case:   "Empty",
			Status: ScmStatus{},
		},
		{
			Case:     "Format override",
			Expected: "Added: 1",
			Status: ScmStatus{
				Added: 1,
				Formats: map[string]string{
					"Added": "Added: %d",
				},
			},
		},
	}

	for _, tc := range cases {
		assert.Equal(t, tc.Expected, tc.Status.String(), tc.Case)
	}
}

func TestHasCommand(t *testing.T) {
	cases := []struct {
		Case            string
		ExpectedCommand string
		Command         string
		GOOS            string
		IsWslSharedPath bool
		NativeFallback  bool
	}{
		{Case: "On Windows", ExpectedCommand: "git.exe", GOOS: runtime.WINDOWS},
		{Case: "Cache", ExpectedCommand: "git.exe", Command: "git.exe"},
		{Case: "Non Windows", ExpectedCommand: "git"},
		{Case: "Iside WSL2, non shared", ExpectedCommand: "git"},
		{Case: "Iside WSL2, shared", ExpectedCommand: "git.exe", IsWslSharedPath: true},
		{Case: "Iside WSL2, shared fallback", ExpectedCommand: "git", IsWslSharedPath: true, NativeFallback: true},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return(tc.GOOS)
		env.On("InWSLSharedDrive").Return(tc.IsWslSharedPath)
		env.On("HasCommand", "git").Return(true)
		env.On("HasCommand", "git.exe").Return(!tc.NativeFallback)

		props := properties.Map{
			NativeFallback: tc.NativeFallback,
		}

		s := &scm{
			command: tc.Command,
		}
		s.Init(props, env)

		_ = s.hasCommand(GITCOMMAND)
		assert.Equal(t, tc.ExpectedCommand, s.command, tc.Case)
	}
}

func TestFormatBranch(t *testing.T) {
	cases := []struct {
		MappedBranches map[string]string
		Case           string
		Expected       string
		Input          string
		BranchTemplate string
	}{
		{
			Case:     "No settings",
			Input:    "main",
			Expected: "main",
		},
		{
			Case:           "BranchMaxLength higher than branch name",
			Input:          "main",
			Expected:       "main",
			BranchTemplate: "{{ trunc 5 .Branch }}",
		},
		{
			Case:           "BranchMaxLength lower than branch name",
			Input:          "feature/test-this-branch",
			Expected:       "featu",
			BranchTemplate: "{{ trunc 5 .Branch }}",
		},
		{
			Case:           "BranchMaxLength lower than branch name, with truncate symbol",
			Input:          "feature/test-this-branch",
			Expected:       "feat…",
			BranchTemplate: "{{ truncE 5 .Branch }}",
		},
		{
			Case:           "BranchMaxLength lower than branch name, with truncate symbol and no FullBranchPath",
			Input:          "feature/test-this-branch",
			Expected:       "test…",
			BranchTemplate: "{{ truncE 5 (base .Branch) }}",
		},
		{
			Case:           "BranchMaxLength lower to branch name, with truncate symbol",
			Input:          "feat",
			Expected:       "feat",
			BranchTemplate: "{{ trunc 5 .Branch }}",
		},
		{
			Case:     "Branch mapping, no BranchMaxLength",
			Input:    "feat/my-new-feature",
			Expected: "🚀 my-new-feature",
			MappedBranches: map[string]string{
				"feat/*": "🚀 ",
				"bug/*":  "🐛 ",
			},
		},
		{
			Case:           "Branch mapping, with BranchMaxLength",
			Input:          "feat/my-new-feature",
			Expected:       "🚀 my-",
			BranchTemplate: "{{ trunc 5 .Branch }}",
			MappedBranches: map[string]string{
				"feat/*": "🚀 ",
				"bug/*":  "🐛 ",
			},
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			MappedBranches: tc.MappedBranches,
			BranchTemplate: tc.BranchTemplate,
		}

		g := &Git{}
		g.Init(props, nil)

		env := new(mock.Environment)
		env.On("Shell").Return(shell.BASH)
		template.Cache = new(cache.Template)
		template.Init(env, nil, nil)

		got := g.formatBranch(tc.Input)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/segments/session.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type Session struct {
	base

	SSHSession bool
}

func (s *Session) Enabled() bool {
	s.SSHSession = s.activeSSHSession()
	return true
}

func (s *Session) Template() string {
	return " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}@{{ .HostName }} "
}

func (s *Session) activeSSHSession() bool {
	keys := []string{
		"SSH_CONNECTION",
		"SSH_CLIENT",
	}

	for _, key := range keys {
		content := s.env.Getenv(key)
		if content != "" {
			return true
		}
	}

	if s.env.Platform() == runtime.WINDOWS {
		return false
	}

	whoAmI, err := s.env.RunCommand("who", "am", "i")
	if err != nil {
		return false
	}

	return regex.MatchString(`\(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\)`, whoAmI)
}



================================================
FILE: src/segments/session_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

func TestSessionSegmentTemplate(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		UserName       string
		ComputerName   string
		Template       string
		WhoAmI         string
		Platform       string
		SSHSession     bool
		Root           bool
	}{
		{
			Case:           "user and computer",
			ExpectedString: "john@company-laptop",
			ComputerName:   "company-laptop",
			UserName:       "john",
			Template:       "{{.UserName}}@{{.HostName}}",
		},
		{
			Case:           "user only",
			ExpectedString: "john",
			UserName:       "john",
			Template:       "{{.UserName}}",
		},
		{
			Case:           "user with ssh",
			ExpectedString: "john on remote",
			UserName:       "john",
			SSHSession:     true,
			ComputerName:   "remote",
			Template:       "{{.UserName}}{{if .SSHSession}} on {{.HostName}}{{end}}",
		},
		{
			Case:           "user without ssh",
			ExpectedString: "john",
			UserName:       "john",
			SSHSession:     false,
			ComputerName:   "remote",
			Template:       "{{.UserName}}{{if .SSHSession}} on {{.HostName}}{{end}}",
		},
		{
			Case:           "user with root and ssh",
			ExpectedString: "super john on remote",
			UserName:       "john",
			SSHSession:     true,
			ComputerName:   "remote",
			Root:           true,
			Template:       "{{if .Root}}super {{end}}{{.UserName}}{{if .SSHSession}} on {{.HostName}}{{end}}",
		},
		{
			Case:           "no template",
			ExpectedString: "",
			UserName:       "john",
			SSHSession:     true,
			ComputerName:   "remote",
			Root:           true,
		},
		{
			Case:           "user with ssh using who am i",
			ExpectedString: "john on remote",
			UserName:       "john",
			SSHSession:     false,
			WhoAmI:         "sascha   pts/1        2023-11-08 22:56 (89.246.1.1)",
			ComputerName:   "remote",
			Template:       "{{.UserName}}{{if .SSHSession}} on {{.HostName}}{{end}}",
		},
		{
			Case:           "user with ssh using who am i (windows)",
			ExpectedString: "john",
			UserName:       "john",
			SSHSession:     false,
			WhoAmI:         "sascha   pts/1        2023-11-08 22:56 (89.246.1.1)",
			Platform:       runtime.WINDOWS,
			ComputerName:   "remote",
			Template:       "{{.UserName}}{{if .SSHSession}} on {{.HostName}}{{end}}",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("User").Return(tc.UserName)
		env.On("GOOS").Return("burp")
		env.On("Host").Return(tc.ComputerName, nil)

		var SSHSession string
		if tc.SSHSession {
			SSHSession = "zezzion"
		}

		env.On("Getenv", "SSH_CONNECTION").Return(SSHSession)
		env.On("Getenv", "SSH_CLIENT").Return(SSHSession)

		env.On("Platform").Return(tc.Platform)

		var whoAmIErr error
		if len(tc.WhoAmI) == 0 {
			whoAmIErr = fmt.Errorf("who am i error")
		}

		env.On("RunCommand", "who", []string{"am", "i"}).Return(tc.WhoAmI, whoAmIErr)

		session := &Session{}
		session.Init(properties.Map{}, env)

		template.Cache = &cache.Template{
			UserName: tc.UserName,
			HostName: tc.ComputerName,
			Root:     tc.Root,
		}

		_ = session.Enabled()
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, session), tc.Case)
	}
}



================================================
FILE: src/segments/shell.go
================================================
package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Shell struct {
	base

	Name    string
	Version string
}

const (
	// MappedShellNames allows for custom text in place of shell names
	MappedShellNames properties.Property = "mapped_shell_names"
)

func (s *Shell) Template() string {
	return NameTemplate
}

func (s *Shell) Enabled() bool {
	mappedNames := s.props.GetKeyValueMap(MappedShellNames, make(map[string]string))
	s.Name = s.env.Shell()
	s.Version = s.env.Flags().ShellVersion
	for key, val := range mappedNames {
		if strings.EqualFold(s.Name, key) {
			s.Name = val
			break
		}
	}
	return true
}



================================================
FILE: src/segments/shell_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestWriteCurrentShell(t *testing.T) {
	expected := "zsh"
	env := new(mock.Environment)
	env.On("Shell").Return(expected, nil)
	env.On("Flags").Return(&runtime.Flags{ShellVersion: "1.2.3"})

	s := &Shell{}
	s.Init(properties.Map{}, env)

	_ = s.Enabled()
	assert.Equal(t, expected, renderTemplate(env, s.Template(), s))
}

func TestUseMappedShellNames(t *testing.T) {
	cases := []struct {
		Shell    string
		Expected string
	}{
		{Shell: "zsh", Expected: "zsh"},
		{Shell: "pwsh", Expected: "PS"},
		{Shell: "PWSH", Expected: "PS"},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Shell").Return(tc.Expected, nil)
		env.On("Flags").Return(&runtime.Flags{ShellVersion: "1.2.3"})

		props := properties.Map{
			MappedShellNames: map[string]string{"pwsh": "PS"},
		}

		s := &Shell{}
		s.Init(props, env)

		_ = s.Enabled()
		got := renderTemplate(env, s.Template(), s)
		assert.Equal(t, tc.Expected, got)
	}
}



================================================
FILE: src/segments/sitecore.go
================================================
package segments

import (
	"encoding/json"
	"path"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

const (
	sitecoreFileName   = "sitecore.json"
	sitecoreFolderName = ".sitecore"
	userFileName       = "user.json"
	defaultEnpointName = "default"
)

type Sitecore struct {
	base

	EndpointName string
	CmHost       string
}

type EndpointConfig struct {
	Host string `json:"host"`
}

type UserConfig struct {
	Endpoints       map[string]EndpointConfig `json:"endpoints"`
	DefaultEndpoint string                    `json:"defaultEndpoint"`
}

func (s *Sitecore) Enabled() bool {
	if !s.env.HasFiles(sitecoreFileName) || !s.env.HasFilesInDir(sitecoreFolderName, userFileName) {
		log.Debug("sitecore cli configuration files were not found")
		return false
	}

	var userConfig, err = getUserConfig(s)

	if err != nil {
		log.Error(err)
		return false
	}

	s.EndpointName = userConfig.getDefaultEndpoint()

	displayDefault := s.props.GetBool(properties.DisplayDefault, true)

	if !displayDefault && s.EndpointName == defaultEnpointName {
		log.Debug("displaying of the default environment is turned off")
		return false
	}

	if endpoint := userConfig.getEndpoint(s.EndpointName); endpoint != nil && len(endpoint.Host) > 0 {
		s.CmHost = endpoint.Host
	}

	return true
}

func (s *Sitecore) Template() string {
	return "{{ .EndpointName }} {{ if .CmHost }}({{ .CmHost }}){{ end }}"
}

func getUserConfig(s *Sitecore) (*UserConfig, error) {
	userJSON := s.env.FileContent(path.Join(sitecoreFolderName, userFileName))
	var userConfig UserConfig

	if err := json.Unmarshal([]byte(userJSON), &userConfig); err != nil {
		return nil, err
	}

	return &userConfig, nil
}

func (u *UserConfig) getDefaultEndpoint() string {
	if len(u.DefaultEndpoint) > 0 {
		return u.DefaultEndpoint
	}

	return defaultEnpointName
}

func (u *UserConfig) getEndpoint(name string) *EndpointConfig {
	endpoint, exists := u.Endpoints[name]

	if exists {
		return &endpoint
	}

	return nil
}



================================================
FILE: src/segments/sitecore_test.go
================================================
package segments

import (
	"path"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestSitecoreSegment(t *testing.T) {
	cases := []struct {
		Case               string
		ExpectedString     string
		UserFileContent    string
		ExpectedEnabled    bool
		SitecoreFileExists bool
		UserFileExists     bool
		DisplayDefault     bool
	}{
		{Case: "Disabled, no sitecore.json file and user.json file", ExpectedString: "", ExpectedEnabled: false, SitecoreFileExists: false, UserFileExists: false},
		{Case: "Disabled, only sitecore.json file exists", ExpectedString: "", ExpectedEnabled: false, SitecoreFileExists: true, UserFileExists: false},
		{Case: "Disabled, only user.json file exists", ExpectedString: "", ExpectedEnabled: false, SitecoreFileExists: false, UserFileExists: true},
		{
			Case:               "Disabled, user.json is empty",
			ExpectedString:     "",
			ExpectedEnabled:    false,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    "",
		},
		{
			Case:               "Disabled, user.json contains non-json text",
			ExpectedString:     "",
			ExpectedEnabled:    false,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    testUserJSONNotJSONFormat,
		},
		{
			Case:               "Disabled with default endpoint",
			ExpectedString:     "default",
			ExpectedEnabled:    false,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    testUserJSONOnlyDefaultEnv,
			DisplayDefault:     false,
		},
		{
			Case:               "Enabled, user.json initial state",
			ExpectedString:     "default",
			ExpectedEnabled:    true,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    testUserJSONDefaultEmpty,
			DisplayDefault:     true,
		},
		{
			Case:               "Enabled, user.json with custom default endpoint and without endpoints",
			ExpectedString:     "MySuperEnv",
			ExpectedEnabled:    true,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    testUserJSONCustomDefaultEnvWithoutEndpoints,
		},
		{
			Case:               "Enabled, user.json with custom default endpoint and configured endpoints",
			ExpectedString:     "myEnv (https://host.com)",
			ExpectedEnabled:    true,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    testUserJSONCustomDefaultEnv,
		},
		{
			Case:               "Enabled, user.json with custom default endpoint and empty host",
			ExpectedString:     "envWithEmptyHost",
			ExpectedEnabled:    true,
			SitecoreFileExists: true,
			UserFileExists:     true,
			UserFileContent:    testUserJSONCustomDefaultEnvAndEmptyHost,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HasFiles", "sitecore.json").Return(tc.SitecoreFileExists)
		env.On("HasFilesInDir", ".sitecore", "user.json").Return(tc.UserFileExists)
		env.On("FileContent", path.Join(".sitecore", "user.json")).Return(tc.UserFileContent)

		props := properties.Map{
			properties.DisplayDefault: tc.DisplayDefault,
		}

		sitecore := &Sitecore{}
		sitecore.Init(props, env)
		assert.Equal(t, tc.ExpectedEnabled, sitecore.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, sitecore.Template(), sitecore), tc.Case)
	}
}

var testUserJSONDefaultEmpty = `
{
	"endpoints": {}
}`

var testUserJSONCustomDefaultEnvWithoutEndpoints = `
{
	"endpoints": {},
	"defaultEndpoint": "MySuperEnv"
}`

var testUserJSONCustomDefaultEnv = `
{
	"endpoints": {
		"myEnv": {
			"host": "https://host.com"
		}
	},
	"defaultEndpoint": "myEnv"
}`

var testUserJSONCustomDefaultEnvAndEmptyHost = `
{
	"endpoints": {
		"myEnv": {
			"host": ""
		}
	},
	"defaultEndpoint": "envWithEmptyHost"
}`

var testUserJSONNotJSONFormat = `
---
 doe: "a deer, a female deer"
 ray: "a drop of golden sun"
 pi: 3.14159
 xmas: true
 french-hens: 3
 calling-birds:
   - huey
   - dewey
   - louie
   - fred
 xmas-fifth-day:
   calling-birds: four
   french-hens: 3
   golden-rings: 5
   partridges:
     count: 1
     location: "a pear tree"
   turtle-doves: two`

var testUserJSONOnlyDefaultEnv = `
{
	"endpoints": {
		"default": {
			"host": "https://host.com"
		}
	}
}`



================================================
FILE: src/segments/spotify.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Spotify struct {
	base

	MusicPlayer
}

type MusicPlayer struct {
	Status string
	Artist string
	Track  string
	Icon   string
}

const (
	// PlayingIcon indicates a song is playing
	PlayingIcon properties.Property = "playing_icon"
	// PausedIcon indicates a song is paused
	PausedIcon properties.Property = "paused_icon"
	// StoppedIcon indicates a song is stopped
	StoppedIcon properties.Property = "stopped_icon"
	// AdIcon indicates an advertisement is playing
	AdIcon properties.Property = "ad_icon"

	playing     = "playing"
	stopped     = "stopped"
	paused      = "paused"
	advertising = "advertising"
)

func (s *Spotify) Template() string {
	return " {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} "
}

func (s *Spotify) resolveIcon() {
	switch s.Status {
	case stopped:
		// in this case, no artist or track info
		s.Icon = s.props.GetString(StoppedIcon, "\uF04D ")
	case paused:
		s.Icon = s.props.GetString(PausedIcon, "\uF8E3 ")
	case playing:
		s.Icon = s.props.GetString(PlayingIcon, "\uE602 ")
	}
}



================================================
FILE: src/segments/spotify_darwin.go
================================================
//go:build darwin

package segments

import "strings"

func (s *Spotify) Enabled() bool {
	// Batching commands to reduce latency. Each individual call to `osascript` creates additional delays.
	// Using '|' as a delimiter in the batched command since it's unlikely
	// to appear in track or artist names, making it safe for splitting the output
	batchedCommand := `
	if application "Spotify" is running then
		tell application "Spotify"
			set playerState to player state as string
			set artistName to ""
			set trackName to ""
			if playerState is not "stopped" then
				set artistName to artist of current track as string
				set trackName to name of current track as string
			end if
			return "true|" & playerState & "|" & artistName & "|" & trackName
		end tell
	else
		return "false|||"
	end if
	`

	batchedOutput := s.runAppleScriptCommand(batchedCommand)

	outputStrings := strings.SplitN(batchedOutput, "|", 4)
	if outputStrings[0] == "false" || len(outputStrings[0]) == 0 || len(outputStrings) != 4 {
		s.Status = stopped
		return false
	}

	s.Status = outputStrings[1]

	// Check if running
	if len(s.Status) == 0 {
		s.Status = stopped
		return false
	}

	if s.Status == stopped {
		return false
	}

	s.Artist = outputStrings[2]
	s.Track = outputStrings[3]
	s.resolveIcon()

	return true
}

func (s *Spotify) runAppleScriptCommand(command string) string {
	val, _ := s.env.RunCommand("osascript", "-e", command)
	return val
}



================================================
FILE: src/segments/spotify_darwin_test.go
================================================
//go:build darwin

package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestSpotifyDarwinEnabledAndSpotifyPlaying(t *testing.T) {
	cases := []struct {
		Error       error
		BatchedCase string
		Expected    string
		Enabled     bool
	}{
		{BatchedCase: "false|||", Expected: "", Enabled: false},
		{BatchedCase: "false||", Expected: "", Error: errors.New("oops"), Enabled: false},
		{BatchedCase: "true|playing|Candlemass|Spellbreaker", Expected: "\ue602 Candlemass - Spellbreaker", Enabled: true},
		{BatchedCase: "true|paused|Candlemass|Spellbreaker", Expected: "\uF8E3 Candlemass - Spellbreaker", Enabled: true},
	}
	batchedCommand := `
	if application "Spotify" is running then
		tell application "Spotify"
			set playerState to player state as string
			set artistName to ""
			set trackName to ""
			if playerState is not "stopped" then
				set artistName to artist of current track as string
				set trackName to name of current track as string
			end if
			return "true|" & playerState & "|" & artistName & "|" & trackName
		end tell
	else
		return "false|||"
	end if
	`
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("RunCommand", "osascript", []string{"-e", batchedCommand}).Return(tc.BatchedCase, tc.Error)

		s := &Spotify{}
		s.Init(properties.Map{}, env)

		assert.Equal(t, tc.Enabled, s.Enabled())
		assert.Equal(t, tc.Expected, renderTemplate(env, s.Template(), s))
	}
}



================================================
FILE: src/segments/spotify_linux.go
================================================
//go:build linux && !darwin && !windows

package segments

import (
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/shell"
)

func (s *Spotify) Enabled() bool {
	// Check if we're in WSL and handle that separately
	if s.env.IsWsl() {
		return s.enabledWsl()
	}

	// Standard Linux implementation
	running := s.runLinuxScriptCommand(" string:PlaybackStatus | awk -F '\"' '/string/ {print tolower($2)}'")

	if strings.HasPrefix(running, "Error") || len(running) == 0 {
		return false
	}

	if strings.Contains(running, "Error.ServiceUnknown") || strings.HasSuffix(running, "-") {
		s.Status = stopped
		return false
	}

	if running == stopped {
		s.Status = stopped
		return false
	}

	s.Status = running
	s.Artist = s.runLinuxScriptCommand(" string:Metadata | awk -F '\"' 'BEGIN {RS=\"entry\"}; /'xesam:artist'/ {a=$4} END {print a}'")
	s.Track = s.runLinuxScriptCommand(" string:Metadata | awk -F '\"' 'BEGIN {RS=\"entry\"}; /'xesam:title'/ {t=$4} END {print t}'")
	s.resolveIcon()

	return true
}

func (s *Spotify) runLinuxScriptCommand(command string) string {
	dbusCMD := "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:org.mpris.MediaPlayer2.Player"
	val := s.env.RunShellCommand(shell.BASH, dbusCMD+command)
	return val
}

func (s *Spotify) enabledWsl() bool {
	psCommand := `[Console]::OutputEncoding = [System.Text.Encoding]::UTF8; (Get-Process Spotify -ErrorAction SilentlyContinue | Where-Object {$_.MainWindowTitle -ne ""} | Select-Object -First 1).MainWindowTitle` //nolint: lll

	windowName, err := s.env.RunCommand("powershell.exe", "-NoProfile", "-NonInteractive", "-Command", psCommand)
	if err != nil {
		s.Status = stopped
		return false
	}

	title := strings.TrimSpace(windowName)
	if len(title) == 0 || !strings.Contains(title, " - ") {
		s.Status = stopped
		return false
	}

	infos := strings.SplitN(title, " - ", 2)
	if len(infos) < 2 {
		s.Status = stopped
		return false
	}

	s.Artist = strings.TrimSpace(infos[0])
	s.Track = strings.TrimSpace(infos[1])

	if len(s.Artist) == 0 || len(s.Track) == 0 {
		s.Status = stopped
		return false
	}

	s.Status = playing
	s.resolveIcon()

	return true
}



================================================
FILE: src/segments/spotify_linux_test.go
================================================
//go:build linux && !darwin && !windows

package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	"github.com/stretchr/testify/assert"
)

func TestSpotifyLinux(t *testing.T) {
	cases := []struct {
		Case            string
		Status          string
		Artist          string
		Track           string
		Expected        string
		ExpectedEnabled bool
	}{
		{Case: "no data", ExpectedEnabled: false},
		{Case: "error", ExpectedEnabled: false, Status: "Error.ServiceUnknown"},
		{Case: "paused", ExpectedEnabled: true, Expected: "\uF8E3 Candlemass - Spellbreaker", Status: "paused", Artist: "Candlemass", Track: "Spellbreaker"},
		{Case: "playing", ExpectedEnabled: true, Expected: "\uE602 Candlemass - Spellbreaker", Status: "playing", Artist: "Candlemass", Track: "Spellbreaker"},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("IsWsl").Return(false)

		dbusCMD := "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:org.mpris.MediaPlayer2.Player"
		env.On("RunShellCommand", shell.BASH, dbusCMD+" string:PlaybackStatus | awk -F '\"' '/string/ {print tolower($2)}'").Return(tc.Status)
		env.On("RunShellCommand", shell.BASH, dbusCMD+" string:Metadata | awk -F '\"' 'BEGIN {RS=\"entry\"}; /'xesam:artist'/ {a=$4} END {print a}'").Return(tc.Artist)
		env.On("RunShellCommand", shell.BASH, dbusCMD+" string:Metadata | awk -F '\"' 'BEGIN {RS=\"entry\"}; /'xesam:title'/ {t=$4} END {print t}'").Return(tc.Track)

		s := &Spotify{}
		s.Init(properties.Map{}, env)

		got := s.Enabled()

		assert.Equal(t, tc.ExpectedEnabled, got, tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.Expected, renderTemplate(env, s.Template(), s), tc.Case)
		}
	}
}

func TestSpotifyWSL(t *testing.T) {
	cases := []struct {
		Case            string
		Error           error
		Title           string
		Expected        string
		ExpectedEnabled bool
	}{
		{Case: "nothing"},
		{Case: "error", Error: errors.New("oops")},
		{Case: "title", ExpectedEnabled: true, Expected: "\ue602 Xzibit - Crash (ft. Royce Da 5'9\" K.A.A.N.)", Title: `Xzibit - Crash (ft. Royce Da 5'9" K.A.A.N.)`},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("IsWsl").Return(true)

		psCommand := `[Console]::OutputEncoding = [System.Text.Encoding]::UTF8; (Get-Process Spotify -ErrorAction SilentlyContinue | Where-Object {$_.MainWindowTitle -ne ""} | Select-Object -First 1).MainWindowTitle` //nolint: lll
		env.On("RunCommand", "powershell.exe", []string{"-NoProfile", "-NonInteractive", "-Command", psCommand}).Return(tc.Title, tc.Error)

		s := &Spotify{}
		s.Init(properties.Map{}, env)

		got := s.Enabled()

		assert.Equal(t, tc.ExpectedEnabled, got, tc.Case)
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.Expected, renderTemplate(env, s.Template(), s), tc.Case)
		}
	}
}



================================================
FILE: src/segments/spotify_noop.go
================================================
//go:build !linux && !darwin && !windows

package segments

func (s *Spotify) Enabled() bool {
	return false
}



================================================
FILE: src/segments/spotify_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestSpotifyStringPlayingSong(t *testing.T) {
	expected := "\ue602 Candlemass - Spellbreaker"
	env := new(mock.Environment)

	s := &Spotify{
		MusicPlayer: MusicPlayer{
			Artist: "Candlemass",
			Track:  "Spellbreaker",
			Status: "playing",
			Icon:   "\ue602 ",
		},
	}
	s.Init(properties.Map{}, env)

	assert.Equal(t, expected, renderTemplate(env, s.Template(), s))
}

func TestSpotifyStringStoppedSong(t *testing.T) {
	expected := "\uf04d"
	env := new(mock.Environment)

	s := &Spotify{
		MusicPlayer: MusicPlayer{
			Artist: "Candlemass",
			Track:  "Spellbreaker",
			Status: "stopped",
			Icon:   "\uf04d ",
		},
	}
	s.Init(properties.Map{}, env)

	assert.Equal(t, expected, renderTemplate(env, s.Template(), s))
}



================================================
FILE: src/segments/spotify_windows.go
================================================
//go:build windows

package segments

import (
	"strings"
)

func (s *Spotify) Enabled() bool {
	// search for spotify window to retrieve the title
	// Can be either "Spotify xxx" or the song name "Candlemass - Spellbreaker"
	windowTitle, err := s.env.QueryWindowTitles("spotify.exe", `^(Spotify.*)|(.*\s-\s.*)$`)
	if err == nil {
		return s.parseNativeTitle(windowTitle)
	}
	windowTitle, err = s.env.QueryWindowTitles("msedge.exe", `^(Spotify.*)`)
	if err != nil {
		return false
	}
	return s.parseWebTitle(windowTitle)
}

func (s *Spotify) parseNativeTitle(windowTitle string) bool {
	separator := " - "

	if !strings.Contains(windowTitle, separator) {
		s.Status = stopped
		return false
	}

	index := strings.Index(windowTitle, separator)
	s.Artist = windowTitle[0:index]
	s.Track = windowTitle[index+len(separator):]
	s.Status = playing
	s.resolveIcon()
	return true
}

func (s *Spotify) parseWebTitle(windowTitle string) bool {
	windowTitle = strings.TrimPrefix(windowTitle, "Spotify - ")
	separator := " • "

	if !strings.Contains(windowTitle, separator) {
		s.Status = stopped
		return false
	}

	index := strings.Index(windowTitle, separator)
	s.Track = windowTitle[0:index]
	s.Artist = windowTitle[index+len(separator):]
	s.Status = playing
	s.resolveIcon()
	return true
}



================================================
FILE: src/segments/spotify_windows_test.go
================================================
//go:build windows

package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestSpotifyWindowsNative(t *testing.T) {
	cases := []struct {
		Error           error
		Case            string
		ExpectedString  string
		Title           string
		ExpectedEnabled bool
	}{
		{
			Case:            "Playing",
			ExpectedString:  "\ue602 Candlemass - Spellbreaker",
			ExpectedEnabled: true,
			Title:           "Candlemass - Spellbreaker",
		},
		{
			Case:            "Stopped",
			ExpectedEnabled: false,
			Title:           "Spotify premium",
		},
		{
			Case:            "Playing - new",
			ExpectedString:  "\ue602 Demon Hunter - Collapsing (feat. Björn \"Speed\" Strid)",
			ExpectedEnabled: true,
			Title:           `Demon Hunter - Collapsing (feat. Björn "Speed" Strid)`,
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("QueryWindowTitles", "spotify.exe", `^(Spotify.*)|(.*\s-\s.*)$`).Return(tc.Title, tc.Error)
		env.On("QueryWindowTitles", "msedge.exe", `^(Spotify.*)`).Return("", &runtime.NotImplemented{})

		s := &Spotify{}
		s.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, s.Enabled())
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, s.Template(), s))
		}
	}
}

func TestSpotifyWindowsPWA(t *testing.T) {
	cases := []struct {
		Error           error
		Case            string
		ExpectedString  string
		Title           string
		ExpectedEnabled bool
	}{
		{
			Case:            "Playing",
			ExpectedString:  "\ue602 Sarah, the Illstrumentalist - Snow in Stockholm",
			ExpectedEnabled: true,
			Title:           "Spotify - Snow in Stockholm • Sarah, the Illstrumentalist",
		},
		{
			Case:            "Playing",
			ExpectedString:  "\ue602 Main one - Bring the drama",
			ExpectedEnabled: true,
			Title:           "Spotify - Bring the drama • Main one",
		},
		{
			Case:            "Stopped",
			ExpectedEnabled: false,
			Title:           "Spotify - Web Player",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("QueryWindowTitles", "spotify.exe", "^(Spotify.*)|(.*\\s-\\s.*)$").Return("", &runtime.NotImplemented{})
		env.On("QueryWindowTitles", "msedge.exe", "^(Spotify.*)").Return(tc.Title, tc.Error)

		s := &Spotify{}
		s.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, s.Enabled())
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, s.Template(), s))
		}
	}
}



================================================
FILE: src/segments/status.go
================================================
package segments

import (
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

const (
	StatusTemplate  properties.Property = "status_template"
	StatusSeparator properties.Property = "status_separator"
)

type Status struct {
	base

	template *template.Text
	String   string
	Meaning  string
	Error    bool
}

func (s *Status) Template() string {
	return " {{ .String }} "
}

func (s *Status) Enabled() bool {
	status, pipeStatus := s.env.StatusCodes()

	s.String = s.formatStatus(status, pipeStatus)
	// Deprecated: Use {{ reason .Code }} instead
	s.Meaning = template.GetReasonFromStatus(status)

	if s.props.GetBool(properties.AlwaysEnabled, false) {
		return true
	}

	return s.Error
}

func (s *Status) formatStatus(status int, pipeStatus string) string {
	statusTemplate := s.props.GetString(StatusTemplate, "{{ .Code }}")
	s.template = &template.Text{
		Template: statusTemplate,
	}

	if status != 0 {
		s.Error = true
	}

	if len(pipeStatus) == 0 {
		s.template.Context = s
		if text, err := s.template.Render(); err == nil {
			return text
		}
		return strconv.Itoa(status)
	}

	StatusSeparator := s.props.GetString(StatusSeparator, "|")

	var builder strings.Builder

	// use an anaonymous struct to avoid
	// confusion with the template context
	// that already has a .Code global property
	var context struct {
		Code int
	}

	splitted := strings.Split(pipeStatus, " ")
	for i, codeStr := range splitted {
		write := func(text string) {
			if i > 0 {
				builder.WriteString(StatusSeparator)
			}
			builder.WriteString(text)
		}

		code, err := strconv.Atoi(codeStr)
		if err != nil {
			write(codeStr)
			continue
		}

		if code != 0 {
			s.Error = true
		}

		context.Code = code

		s.template.Context = context
		text, err := s.template.Render()
		if err != nil {
			write(codeStr)
			continue
		}

		write(text)
	}

	return builder.String()
}



================================================
FILE: src/segments/status_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

func TestStatusWriterEnabled(t *testing.T) {
	cases := []struct {
		Template string
		Status   int
		Expected bool
	}{
		{Status: 102, Expected: true},
		{Status: 0, Expected: false},
		{Status: -1, Expected: true},
		{Status: 144, Expected: true, Template: "{{}}"},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("StatusCodes").Return(tc.Status, "")
		env.On("Shell").Return(shell.GENERIC)

		props := properties.Map{}
		if len(tc.Template) > 0 {
			props[StatusTemplate] = tc.Template
		}

		template.Cache = &cache.Template{
			Code: 133,
		}
		template.Init(env, nil, nil)

		s := &Status{}
		s.Init(props, env)

		assert.Equal(t, tc.Expected, s.Enabled())
	}
}

func TestFormatStatus(t *testing.T) {
	cases := []struct {
		Case       string
		PipeStatus string
		Template   string
		Separator  string
		Expected   string
		Status     int
	}{
		// {
		// 	Case:      "No PipeStatus",
		// 	Status:    12,
		// 	Template:  "{{ .Code }}",
		// 	Separator: "|",
		// 	Expected:  "12",
		// },
		{
			Case:       "Defaults",
			PipeStatus: "0 127 0",
			Template:   "{{ .Code }}",
			Separator:  "|",
			Expected:   "0|127|0",
		},
		{
			Case:       "No integer",
			PipeStatus: "0 err 0",
			Template:   "{{ .Code }}",
			Separator:  "|",
			Expected:   "0|err|0",
		},
		{
			Case:       "Incorrect template",
			PipeStatus: "1 0 0",
			Template:   "{{}}",
			Separator:  "|",
			Expected:   "1|0|0",
		},
		{
			Case:       "Advanced template",
			PipeStatus: "1 0 0",
			Template:   "{{ if eq .Code 0 }}\uf058{{ else }}\uf071{{ end }}",
			Separator:  "|",
			Expected:   "\uf071|\uf058|\uf058",
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			StatusTemplate:  tc.Template,
			StatusSeparator: tc.Separator,
		}

		env := new(mock.Environment)
		env.On("Shell").Return(shell.GENERIC)

		s := &Status{}
		s.Init(props, env)

		template.Cache = &cache.Template{
			Code: tc.Status,
		}
		template.Init(env, nil, nil)

		assert.Equal(t, tc.Expected, s.formatStatus(tc.Status, tc.PipeStatus), tc.Case)
	}
}



================================================
FILE: src/segments/strava.go
================================================
package segments

import (
	"fmt"
	"math"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"
)

// StravaAPI is a wrapper around http.Oauth
type StravaAPI interface {
	GetActivities() ([]*StravaData, error)
}

type stravaAPI struct {
	http.OAuthRequest
}

func (s *stravaAPI) GetActivities() ([]*StravaData, error) {
	url := "https://www.strava.com/api/v3/athlete/activities?page=1&per_page=1"
	return http.OauthResult[[]*StravaData](&s.OAuthRequest, url, nil)
}

// segment struct, makes templating easier
type Strava struct {
	base

	api   StravaAPI
	Icon  string
	Ago   string
	Error string
	URL   string
	StravaData
	Hours        int
	Authenticate bool
}

const (
	RideIcon            properties.Property = "ride_icon"
	RunIcon             properties.Property = "run_icon"
	SkiingIcon          properties.Property = "skiing_icon"
	WorkOutIcon         properties.Property = "workout_icon"
	UnknownActivityIcon properties.Property = "unknown_activity_icon"

	StravaAccessTokenKey  = "strava_access_token"
	StravaRefreshTokenKey = "strava_refresh_token"

	noActivitiesFound = "No activities found"
)

// StravaData struct contains the API data
type StravaData struct {
	StartDate            time.Time `json:"start_date"`
	Type                 string    `json:"type"`
	Name                 string    `json:"name"`
	ID                   int       `json:"id"`
	Distance             float64   `json:"distance"`
	Duration             float64   `json:"moving_time"`
	AverageWatts         float64   `json:"average_watts"`
	WeightedAverageWatts float64   `json:"weighted_average_watts"`
	AverageHeartRate     float64   `json:"average_heartrate"`
	MaxHeartRate         float64   `json:"max_heartrate"`
	KudosCount           int       `json:"kudos_count"`
	DeviceWatts          bool      `json:"device_watts"`
}

func (s *Strava) Template() string {
	return " {{ if .Error }}{{ .Error }}{{ else }}{{ .Ago }}{{ end }} "
}

func (s *Strava) Enabled() bool {
	s.initAPI()

	data, err := s.api.GetActivities()
	if err == nil && len(data) > 0 {
		s.StravaData = *data[0]
		s.Icon = s.getActivityIcon()
		s.Hours = s.getHours()
		s.Ago = s.getAgo()
		s.URL = fmt.Sprintf("https://www.strava.com/activities/%d", s.ID)
		return true
	}
	if err == nil && len(data) == 0 {
		s.Error = noActivitiesFound
		return true
	}
	if _, s.Authenticate = err.(*http.OAuthError); s.Authenticate {
		s.Error = err.(*http.OAuthError).Error()
		return true
	}
	return false
}

func (s *Strava) initAPI() {
	if s.api != nil {
		return
	}

	oauth := &http.OAuthRequest{
		AccessTokenKey:  StravaAccessTokenKey,
		RefreshTokenKey: StravaRefreshTokenKey,
		SegmentName:     "strava",
		AccessToken:     s.props.GetString(properties.AccessToken, ""),
		RefreshToken:    s.props.GetString(properties.RefreshToken, ""),
		Request: http.Request{
			Env:         s.env,
			HTTPTimeout: s.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout),
		},
	}

	s.api = &stravaAPI{
		OAuthRequest: *oauth,
	}
}

func (s *Strava) getHours() int {
	hours := time.Since(s.StartDate).Hours()
	return int(math.Floor(hours))
}

func (s *Strava) getAgo() string {
	if s.Hours > 24 {
		days := int32(math.Floor(float64(s.Hours) / float64(24)))
		return fmt.Sprintf("%d", days) + string('d')
	}
	return fmt.Sprintf("%d", s.Hours) + string("h")
}

func (s *Strava) getActivityIcon() string {
	switch s.Type {
	case "VirtualRide":
		fallthrough
	case "Ride":
		return s.props.GetString(RideIcon, "\uf206")
	case "Run":
		return s.props.GetString(RunIcon, "\ue213")
	case "NordicSki":
	case "AlpineSki":
	case "BackcountrySki":
		return s.props.GetString(SkiingIcon, "\ue213")
	case "WorkOut":
		return s.props.GetString(WorkOutIcon, "\ue213")
	default:
		return s.props.GetString(UnknownActivityIcon, "\ue213")
	}
	return s.props.GetString(UnknownActivityIcon, "\ue213")
}



================================================
FILE: src/segments/strava_test.go
================================================
package segments

import (
	"errors"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

type mockedStravaAPI struct {
	testify_.Mock
}

func (s *mockedStravaAPI) GetActivities() ([]*StravaData, error) {
	args := s.Called()
	return args.Get(0).([]*StravaData), args.Error(1)
}

func TestStravaSegment(t *testing.T) {
	h, _ := time.ParseDuration("6h")
	sixHoursAgo := time.Now().Add(-h)
	h, _ = time.ParseDuration("100h")
	fourDaysAgo := time.Now().Add(-h)

	cases := []struct {
		APIError        error
		Case            string
		ExpectedString  string
		Template        string
		StravaData      []*StravaData
		ExpectedEnabled bool
	}{
		{
			Case: "Ride 6",
			StravaData: []*StravaData{
				{
					Type:      "Ride",
					StartDate: sixHoursAgo,
					Name:      "Sesongens første på tjukkas",
					Distance:  16144.0,
				},
			},
			Template:        "{{.Ago}} {{.Icon}}",
			ExpectedString:  "6h \uf206",
			ExpectedEnabled: true,
		},
		{
			Case: "Run 100",
			StravaData: []*StravaData{
				{
					Type:      "Run",
					StartDate: fourDaysAgo,
					Name:      "Sesongens første på tjukkas",
					Distance:  16144.0,
				},
			},
			Template:        "{{.Ago}} {{.Icon}}",
			ExpectedString:  "4d \ue213",
			ExpectedEnabled: true,
		},
		{
			Case:            "Error in retrieving data",
			APIError:        errors.New("Something went wrong"),
			ExpectedEnabled: false,
		},
		{
			Case:            "Empty array",
			StravaData:      []*StravaData{},
			ExpectedString:  noActivitiesFound,
			ExpectedEnabled: true,
		},
		{
			Case: "Faulty template",
			StravaData: []*StravaData{
				{
					Type:      "Run",
					StartDate: fourDaysAgo,
					Name:      "Sesongens første på tjukkas",
					Distance:  16144.0,
				},
			},
			Template:        "{{.Ago}}{{.Burp}}",
			ExpectedString:  template.IncorrectTemplate,
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		api := &mockedStravaAPI{}
		api.On("GetActivities").Return(tc.StravaData, tc.APIError)

		strava := &Strava{
			api: api,
		}
		strava.Init(properties.Map{}, nil)

		enabled := strava.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = strava.Template()
		}

		var got = renderTemplate(&mock.Environment{}, tc.Template, strava)
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
	}
}



================================================
FILE: src/segments/svelte.go
================================================
package segments

type Svelte struct {
	language
}

func (s *Svelte) Template() string {
	return languageTemplate
}

func (s *Svelte) Enabled() bool {
	s.extensions = []string{"svelte.config.js"}
	s.commands = []*cmd{
		{
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
			getVersion: s.getVersion,
		},
	}
	s.versionURLTemplate = "https://github.com/sveltejs/svelte/releases/tag/svelte%40{{.Full}}"

	return s.language.Enabled()
}

func (s *Svelte) getVersion() (string, error) {
	return s.nodePackageVersion("svelte")
}



================================================
FILE: src/segments/svn.go
================================================
package segments

import (
	"path"
	"strconv"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/regex"
)

// SvnStatus represents part of the status of a Svn repository
type SvnStatus struct {
	ScmStatus
}

func (s *SvnStatus) add(code string) {
	switch code {
	case "?":
		s.Untracked++
	case "C":
		s.Conflicted++
	case "D":
		s.Deleted++
	case "A":
		s.Added++
	case "M":
		s.Modified++
	case "R", "!":
		s.Moved++
	}
}

func (s *SvnStatus) HasConflicts() bool {
	return s.Conflicted > 0
}

const (
	SVNCOMMAND = "svn"
)

type Svn struct {
	Working *SvnStatus
	Branch  string
	scm
	BaseRev int
}

func (s *Svn) Template() string {
	return " \ue0a0{{.Branch}} r{{.BaseRev}} {{.Working.String}} "
}

func (s *Svn) Enabled() bool {
	if !s.shouldDisplay() {
		return false
	}

	s.setSvnStatus()

	return true
}

func (s *Svn) CacheKey() (string, bool) {
	dir, err := s.env.HasParentFilePath(".svn", true)
	if err != nil {
		return "", false
	}

	return dir.Path, true
}

func (s *Svn) shouldDisplay() bool {
	if !s.hasCommand(SVNCOMMAND) {
		return false
	}

	Svndir, err := s.env.HasParentFilePath(".svn", false)
	if err != nil {
		return false
	}

	if Svndir.IsDir {
		s.mainSCMDir = Svndir.Path
		s.scmDir = Svndir.Path
		// convert the worktree file path to a windows one when in a WSL shared folder
		s.repoRootDir = strings.TrimSuffix(s.convertToWindowsPath(Svndir.Path), "/.svn")
		return true
	}

	// handle worktree
	s.scmDir = Svndir.Path
	dirPointer := strings.Trim(s.env.FileContent(Svndir.Path), " \r\n")
	matches := regex.FindNamedRegexMatch(`^Svndir: (?P<dir>.*)$`, dirPointer)
	if matches != nil && matches["dir"] != "" {
		// if we open a worktree file in a WSL shared folder, we have to convert it back
		// to the mounted path
		s.mainSCMDir = s.convertToLinuxPath(matches["dir"])
	}
	return false
}

func (s *Svn) setSvnStatus() {
	s.BaseRev, _ = strconv.Atoi(s.getSvnCommandOutput("info", "--show-item", "revision"))

	branch := s.getSvnCommandOutput("info", "--show-item", "relative-url")
	if len(branch) > 2 {
		s.Branch = branch[2:]
	}

	statusFormats := s.props.GetKeyValueMap(StatusFormats, map[string]string{})
	s.Working = &SvnStatus{ScmStatus: ScmStatus{Formats: statusFormats}}

	displayStatus := s.props.GetBool(FetchStatus, false)
	if !displayStatus {
		return
	}

	changes := s.getSvnCommandOutput("status")
	if len(changes) == 0 {
		return
	}
	lines := strings.SplitSeq(changes, "\n")
	for line := range lines {
		if len(line) == 0 {
			continue
		}
		// element is the element from someSlice for where we are
		s.Working.add(line[0:1])
	}
}

func (s *Svn) Repo() string {
	// Get the repository name as the last path element of the repository root URL
	repo := s.getSvnCommandOutput("info", "--show-item", "repos-root-url")
	base := path.Base(repo)

	if base == "." {
		return ""
	}

	return base
}

func (s *Svn) getSvnCommandOutput(command string, args ...string) string {
	args = append([]string{command, s.repoRootDir}, args...)
	val, err := s.env.RunCommand(s.command, args...)
	if err != nil {
		return ""
	}
	return strings.TrimSpace(val)
}



================================================
FILE: src/segments/svn_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestSvnEnabledToolNotFound(t *testing.T) {
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasCommand", "svn").Return(false)
	env.On("GOOS").Return("")
	env.On("IsWsl").Return(false)

	s := &Svn{}
	s.Init(properties.Map{}, env)

	assert.False(t, s.Enabled())
}

func TestSvnEnabledInWorkingDirectory(t *testing.T) {
	fileInfo := &runtime.FileInfo{
		Path:         "/dir/hello",
		ParentFolder: "/dir",
		IsDir:        true,
	}
	env := new(mock.Environment)
	env.On("InWSLSharedDrive").Return(false)
	env.On("HasCommand", "svn").Return(true)
	env.On("GOOS").Return("")
	env.On("FileContent", "/dir/hello/trunk").Return("")
	env.MockSvnCommand(fileInfo.Path, "", "info", "--tags", "--exact-match")
	env.On("RunCommand", "svn", []string{"info", "/dir/hello", "--show-item", "revision"}).Return("", nil)
	env.On("RunCommand", "svn", []string{"info", "/dir/hello", "--show-item", "relative-url"}).Return("", nil)
	env.On("IsWsl").Return(false)
	env.On("HasParentFilePath", ".svn", false).Return(fileInfo, nil)

	s := &Svn{}
	s.Init(properties.Map{}, env)

	assert.True(t, s.Enabled())
	assert.Equal(t, fileInfo.Path, s.mainSCMDir)
	assert.Equal(t, fileInfo.Path, s.repoRootDir)
}

func TestSvnTemplateString(t *testing.T) {
	cases := []struct {
		Svn      *Svn
		Case     string
		Expected string
		Template string
	}{
		{
			Case:     "Default template",
			Expected: "\ue0a0trunk r2 ?9 +2 ~3 -7 >13 x5 !1",
			Template: " \ue0a0{{.Branch}} r{{.BaseRev}} {{.Working.String}} ",
			Svn: &Svn{
				Branch:  "trunk",
				BaseRev: 2,
				Working: &SvnStatus{
					ScmStatus: ScmStatus{
						Untracked:  9,
						Added:      2,
						Conflicted: 1,
						Deleted:    7,
						Modified:   3,
						Moved:      13,
						Unmerged:   5,
					},
				},
			},
		},
		{
			Case:     "Only Branch name",
			Expected: "trunk",
			Template: "{{ .Branch }}",
			Svn: &Svn{
				Branch:  "trunk",
				BaseRev: 2,
			},
		},
		{
			Case:     "Working area changes",
			Expected: "trunk \uF044 +2 ~3",
			Template: "{{ .Branch }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Svn: &Svn{
				Branch: "trunk",
				Working: &SvnStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
					},
				},
			},
		},
		{
			Case:     "No working area changes (using changed flag)",
			Expected: "trunk",
			Template: "{{ .Branch }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Svn: &Svn{
				Branch:  "trunk",
				Working: &SvnStatus{},
			},
		},
		{
			Case:     "No working area changes",
			Expected: "trunk",
			Template: "{{ .Branch }}{{ .Working.String }}",
			Svn: &Svn{
				Branch:  "trunk",
				Working: &SvnStatus{},
			},
		},
		{
			Case:     "Base revision with Working changes",
			Expected: "trunk - 2 \uF044 +2 ~3",
			Template: "{{ .Branch }} - {{ .BaseRev }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Svn: &Svn{
				Branch:  "trunk",
				BaseRev: 2,
				Working: &SvnStatus{
					ScmStatus: ScmStatus{
						Added:    2,
						Modified: 3,
					},
				},
			},
		},
		{
			Case:     "Working and staging area changes with separator and stash count",
			Expected: "trunk CONFLICTED \uF044 +2 ~3 !7",
			Template: "{{ .Branch }}{{ if .Working.HasConflicts }} CONFLICTED{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
			Svn: &Svn{
				Branch:  "trunk",
				BaseRev: 2,
				Working: &SvnStatus{
					ScmStatus: ScmStatus{
						Added:      2,
						Modified:   3,
						Conflicted: 7,
					},
				},
			},
		},
	}

	for _, tc := range cases {
		props := properties.Map{
			FetchStatus: true,
		}
		env := new(mock.Environment)
		tc.Svn.env = env
		tc.Svn.props = props
		assert.Equal(t, tc.Expected, renderTemplate(env, tc.Template, tc.Svn), tc.Case)
	}
}

func TestSetSvnStatus(t *testing.T) {
	cases := []struct {
		Case              string
		StatusOutput      string
		RefOutput         string
		BranchOutput      string
		ExpectedWorking   *SvnStatus
		ExpectedBranch    string
		ExpectedRef       int
		ExpectedConflicts bool
		ExpectedChanged   bool
	}{
		{
			Case: "changed",
			StatusOutput: `
?       Untracked.File
!       Missing.File
A       FileHasBeen.Added
D       FileMarkedAs.Deleted
M       Modified.File
C       Conflicted.File
R       Moved.File`,
			ExpectedWorking: &SvnStatus{ScmStatus: ScmStatus{
				Modified:   1,
				Added:      1,
				Deleted:    1,
				Moved:      2,
				Untracked:  1,
				Conflicted: 1,
				Formats:    map[string]string{},
			}},
			RefOutput:         "1133",
			ExpectedRef:       1133,
			BranchOutput:      "^/trunk",
			ExpectedBranch:    "trunk",
			ExpectedChanged:   true,
			ExpectedConflicts: true,
		},
		{
			Case:         "conflict",
			StatusOutput: `C       build.cake`,
			ExpectedWorking: &SvnStatus{ScmStatus: ScmStatus{
				Conflicted: 1,
				Formats:    map[string]string{},
			}},
			ExpectedChanged:   true,
			ExpectedConflicts: true,
		},
		{
			Case:            "no change",
			ExpectedWorking: &SvnStatus{ScmStatus: ScmStatus{Formats: map[string]string{}}},
			ExpectedChanged: false,
		},
		{
			Case:            "not an integer ref",
			ExpectedWorking: &SvnStatus{ScmStatus: ScmStatus{Formats: map[string]string{}}},
			ExpectedChanged: false,
			RefOutput:       "not an integer",
		},
	}
	for _, tc := range cases {
		fileInfo := &runtime.FileInfo{
			Path:         "/dir/hello",
			ParentFolder: "/dir",
			IsDir:        true,
		}
		env := new(mock.Environment)
		env.On("InWSLSharedDrive").Return(false)
		env.On("IsWsl").Return(false)
		env.On("HasCommand", "svn").Return(true)
		env.On("GOOS").Return("")
		env.On("FileContent", "/dir/hello/trunk").Return("")
		env.MockSvnCommand(fileInfo.Path, "", "info", "--tags", "--exact-match")
		env.On("HasParentFilePath", ".svn", false).Return(fileInfo, nil)
		env.On("RunCommand", "svn", []string{"info", "", "--show-item", "revision"}).Return(tc.RefOutput, nil)
		env.On("RunCommand", "svn", []string{"info", "", "--show-item", "relative-url"}).Return(tc.BranchOutput, nil)
		env.On("RunCommand", "svn", []string{"status", ""}).Return(tc.StatusOutput, nil)

		props := properties.Map{
			FetchStatus: true,
		}

		s := &Svn{
			scm: scm{
				command: SVNCOMMAND,
			},
		}
		s.Init(props, env)

		s.setSvnStatus()
		if tc.ExpectedWorking == nil {
			tc.ExpectedWorking = &SvnStatus{}
		}
		assert.Equal(t, tc.ExpectedWorking, s.Working, tc.Case)
		assert.Equal(t, tc.ExpectedRef, s.BaseRev, tc.Case)
		assert.Equal(t, tc.ExpectedBranch, s.Branch, tc.Case)
		assert.Equal(t, tc.ExpectedChanged, s.Working.Changed(), tc.Case)
		assert.Equal(t, tc.ExpectedConflicts, s.Working.HasConflicts(), tc.Case)
	}
}

func TestRepo(t *testing.T) {
	cases := []struct {
		Case     string
		Repo     string
		Expected string
	}{
		{
			Case:     "No repo",
			Repo:     "",
			Expected: "",
		},
		{
			Case:     "Repo with trailing slash",
			Repo:     "http://example.com/",
			Expected: "example.com",
		},
		{
			Case:     "Repo without trailing slash",
			Repo:     "http://example.com",
			Expected: "example.com",
		},
		{
			Case:     "Repo with a path",
			Repo:     "http://example.com/test/repo",
			Expected: "repo",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("RunCommand", "svn", []string{"info", "", "--show-item", "repos-root-url"}).Return(tc.Repo, nil)

		s := &Svn{
			scm: scm{
				command: SVNCOMMAND,
			},
		}
		s.Init(properties.Map{}, env)

		assert.Equal(t, tc.Expected, s.Repo(), tc.Case)
	}
}



================================================
FILE: src/segments/swift.go
================================================
package segments

type Swift struct {
	language
}

func (s *Swift) Template() string {
	return languageTemplate
}

func (s *Swift) Enabled() bool {
	s.extensions = []string{"*.swift", "*.SWIFT", "Podfile"}
	s.commands = []*cmd{
		{
			executable: "swift",
			args:       []string{"--version"},
			regex:      `Swift version (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+)((.|-)(?P<patch>[0-9]+|dev))?))`,
		},
	}
	s.versionURLTemplate = "https://github.com/apple/swift/releases/tag/swift-{{ .Full }}-RELEASE"

	return s.language.Enabled()
}



================================================
FILE: src/segments/swift_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSwift(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "Swift 5.5.3", ExpectedString: "5.5.3", Version: "Swift version 5.5.3 (swift-5.5.3-RELEASE)"},
		{Case: "Swift 5.5.3 on Windows", ExpectedString: "5.5.3", Version: "compnerd.org Swift version 5.5.3 (swift-5.5.3-RELEASE)"},
		{Case: "Swift 5.5.3 on Mac", ExpectedString: "5.5.3", Version: "Apple Swift version 5.5.3 (swift-5.5.3-RELEASE)"},
		{Case: "Swift 5.5", ExpectedString: "5.5", Version: "Swift version 5.5 (swift-5.5-RELEASE)"},
		{Case: "Swift 5.6-dev", ExpectedString: "5.6-dev", Version: "Swift version 5.6-dev (LLVM 62b900d3d0d5be9, Swift ce64fe8867792d4)"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "swift",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.swift",
		}
		env, props := getMockedLanguageEnv(params)
		s := &Swift{}
		s.Init(props, env)
		assert.True(t, s.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, s.Template(), s), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/sysinfo.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type SystemInfo struct {
	base

	runtime.SystemInfo
	Precision int
}

const (
	// Precision number of decimal places to show
	Precision properties.Property = "precision"
)

func (s *SystemInfo) Template() string {
	return " {{ round .PhysicalPercentUsed .Precision }} "
}

func (s *SystemInfo) Enabled() bool {
	s.Precision = s.props.GetInt(Precision, 2)

	sysInfo, err := s.env.SystemInfo()
	if err != nil {
		return false
	}

	s.SystemInfo = *sysInfo

	if s.PhysicalPercentUsed == 0 && s.SwapPercentUsed == 0 {
		return false
	}

	return true
}



================================================
FILE: src/segments/sysinfo_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestSysInfo(t *testing.T) {
	cases := []struct {
		Error          error
		Case           string
		ExpectedString string
		Template       string
		SysInfo        runtime.SystemInfo
		Precision      int
		ExpectDisabled bool
	}{
		{
			Case:           "Error",
			ExpectDisabled: true,
			Error:          errors.New("error"),
		},
		{
			Case:           "physical mem",
			ExpectedString: "50",
			SysInfo: runtime.SystemInfo{
				Memory: runtime.Memory{
					PhysicalPercentUsed: 50,
				},
			},
			Template: "{{ round .PhysicalPercentUsed .Precision }}",
		},
		{
			Case:           "physical mem 2 digits",
			ExpectedString: "60.51",
			SysInfo: runtime.SystemInfo{
				Memory: runtime.Memory{
					PhysicalPercentUsed: 60.51,
				},
			},
			Precision: 2,
			Template:  "{{ round .PhysicalPercentUsed .Precision }}",
		},
		{
			Case:           "physical meme rounded",
			ExpectedString: "61",
			SysInfo: runtime.SystemInfo{
				Memory: runtime.Memory{
					PhysicalPercentUsed: 61,
				},
			},
			Template: "{{ round .PhysicalPercentUsed .Precision }}",
		},
		{
			Case:           "load",
			ExpectedString: "0.22 0.12 0",
			Precision:      2,
			Template:       "{{ round .Load1 .Precision }} {{round .Load5 .Precision }} {{round .Load15 .Precision }}",
			SysInfo:        runtime.SystemInfo{Load1: 0.22, Load5: 0.12, Load15: 0},
		},
		{
			Case:           "not enabled",
			ExpectDisabled: true,
			SysInfo: runtime.SystemInfo{
				Memory: runtime.Memory{
					PhysicalPercentUsed: 0,
					SwapPercentUsed:     0,
				},
			},
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("SystemInfo").Return(&tc.SysInfo, tc.Error)
		sysInfo := &SystemInfo{}
		props := properties.Map{
			Precision: tc.Precision,
		}
		sysInfo.Init(props, env)
		enabled := sysInfo.Enabled()
		if tc.ExpectDisabled {
			assert.Equal(t, false, enabled, tc.Case)
		} else {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, sysInfo), tc.Case)
		}
	}
}



================================================
FILE: src/segments/talosctl.go
================================================
package segments

import (
	"errors"
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"gopkg.in/yaml.v3"
)

type TalosCTL struct {
	base

	Context string `yaml:"context"`
}

func (t *TalosCTL) Template() string {
	return " {{ .Context}} "
}

func (t *TalosCTL) Enabled() bool {
	cfgDir := filepath.Join(t.env.Home(), ".talos")
	configFile, err := t.getActiveConfig(cfgDir)
	if err != nil {
		log.Error(err)
		return false
	}

	err = yaml.Unmarshal([]byte(configFile), t)
	if err != nil {
		log.Error(err)
		return false
	}

	if len(t.Context) == 0 {
		return false
	}

	return true
}

func (t *TalosCTL) getActiveConfig(cfgDir string) (string, error) {
	activeConfigFile := filepath.Join(cfgDir, "config")
	activeConfigData := t.env.FileContent(activeConfigFile)
	if len(activeConfigData) == 0 {
		return "", errors.New("no active config found")
	}
	return activeConfigData, nil
}



================================================
FILE: src/segments/talosctl_test.go
================================================
package segments

import (
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/stretchr/testify/assert"
)

func TestTalosctlSegment(t *testing.T) {
	cases := []struct {
		Case            string
		ActiveConfig    string
		ExpectedString  string
		ExpectedEnabled bool
	}{
		{
			Case:            "happy path",
			ExpectedEnabled: true,
			ActiveConfig:    "context: context-name",
			ExpectedString:  "context-name",
		},
		{
			Case:            "no active config",
			ExpectedEnabled: false,
		},
		{
			Case:            "empty config",
			ActiveConfig:    "",
			ExpectedEnabled: false,
		},
		{
			Case:            "bad config",
			ActiveConfig:    "other-yaml: not-expected",
			ExpectedEnabled: false,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return("home")
		fcPath := filepath.Join("home", ".talos", "config")
		env.On("FileContent", fcPath).Return(tc.ActiveConfig)

		talos := TalosCTL{}
		talos.Init(properties.Map{}, env)

		talos.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, talos.Enabled())
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, talos.Template(), talos), tc.Case)
		}
	}
}

func TestGetTalosctlActiveConfig(t *testing.T) {
	cases := []struct {
		Case           string
		ActiveConfig   string
		ExpectedString string
		ExpectedError  string
	}{
		{
			Case:           "happy path",
			ActiveConfig:   "context: context-name",
			ExpectedString: "context: context-name",
		},
		{
			Case:          "no active config",
			ActiveConfig:  "",
			ExpectedError: "no active config found",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("Home").Return("home")
		configPath := filepath.Join("home", ".talos")
		contentPath := filepath.Join(configPath, "config")
		env.On("FileContent", contentPath).Return(tc.ActiveConfig)

		talos := TalosCTL{}
		talos.Init(properties.Map{}, env)

		got, err := talos.getActiveConfig(configPath)
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
		if len(tc.ExpectedError) > 0 {
			assert.EqualError(t, err, tc.ExpectedError, tc.Case)
		} else {
			assert.NoError(t, err, tc.Case)
		}
	}
}



================================================
FILE: src/segments/tauri.go
================================================
package segments

import (
	"path/filepath"
)

type Tauri struct {
	language
}

func (t *Tauri) Template() string {
	return languageTemplate
}

func (t *Tauri) Enabled() bool {
	t.extensions = []string{"tauri.conf.json"}
	t.folders = []string{"src-tauri"}
	t.commands = []*cmd{
		{
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
			getVersion: t.getVersion,
		},
	}
	t.versionURLTemplate = "https://github.com/tauri-apps/tauri/releases/tag/tauri-v{{.Full}}"

	return t.language.Enabled()
}

func (t *Tauri) getVersion() (string, error) {
	return t.nodePackageVersion(filepath.Join("@tauri-apps", "api"))
}



================================================
FILE: src/segments/terraform.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	"path/filepath"
	"slices"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"

	"github.com/hashicorp/hcl/v2/gohcl"
	"github.com/hashicorp/hcl/v2/hclparse"
)

type Terraform struct {
	base

	TerraformBlock
	WorkspaceName string
}

func (tf *Terraform) Template() string {
	return " {{ .WorkspaceName }}{{ if .Version }} {{ .Version }}{{ end }} "
}

type TerraFormConfig struct {
	Terraform *TerraformBlock `hcl:"terraform,block"`
}

type TerraformBlock struct {
	Version *string `hcl:"required_version" json:"terraform_version"`
}

func (tf *Terraform) Enabled() bool {
	cmd := "terraform"
	fetchVersion := tf.props.GetBool(properties.FetchVersion, false)

	if !tf.env.HasCommand(cmd) || !tf.inContext(fetchVersion) {
		return false
	}

	tf.WorkspaceName, _ = tf.env.RunCommand(cmd, "workspace", "show")
	if !fetchVersion {
		return true
	}

	if err := tf.setVersionFromTfFiles(); err == nil {
		return true
	}

	tf.setVersionFromTfStateFile()
	return true
}

func (tf *Terraform) inContext(fetchVersion bool) bool {
	terraformFolder := filepath.Join(tf.env.Pwd(), ".terraform")

	if tf.env.HasFolder(terraformFolder) {
		return true
	}

	files := []string{".tf", ".tfplan", ".tfstate"}
	if slices.ContainsFunc(files, tf.env.HasFiles) {
		return true
	}

	if !fetchVersion {
		return false
	}

	versionFiles := []string{"versions.tf", "main.tf", "terraform.tfstate"}
	return slices.ContainsFunc(versionFiles, tf.env.HasFiles)
}

func (tf *Terraform) setVersionFromTfFiles() error {
	files := []string{"versions.tf", "main.tf"}
	for _, file := range files {
		if !tf.env.HasFiles(file) {
			continue
		}

		parser := hclparse.NewParser()
		content := tf.env.FileContent(file)
		hclFile, diags := parser.ParseHCL([]byte(content), file)
		if diags != nil {
			continue
		}

		var config TerraFormConfig
		diags = gohcl.DecodeBody(hclFile.Body, nil, &config)
		if diags != nil {
			continue
		}

		tf.TerraformBlock = *config.Terraform
		return nil
	}
	return errors.New("no valid terraform files found")
}

func (tf *Terraform) setVersionFromTfStateFile() {
	file := "terraform.tfstate"
	if !tf.env.HasFiles(file) {
		return
	}

	content := tf.env.FileContent(file)
	_ = json.Unmarshal([]byte(content), &tf.TerraformBlock)
}



================================================
FILE: src/segments/terraform_test.go
================================================
package segments

import (
	"os"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestTerraform(t *testing.T) {
	cases := []struct {
		Case              string
		Template          string
		WorkspaceName     string
		ExpectedString    string
		HasTfCommand      bool
		HasTfFolder       bool
		HasTfFiles        bool
		HasTfVersionFiles bool
		HasTfStateFile    bool
		FetchVersion      bool
		ExpectedEnabled   bool
	}{
		{
			Case:            "default workspace",
			ExpectedString:  "default",
			ExpectedEnabled: true,
			WorkspaceName:   "default",
			HasTfFolder:     true,
			HasTfCommand:    true,
		},
		{
			Case:           "no command",
			ExpectedString: "",
			WorkspaceName:  "default",
			HasTfFolder:    true,
		},
		{
			Case:           "no directory, no files",
			ExpectedString: "",
			WorkspaceName:  "default",
			HasTfCommand:   true,
		},
		{
			Case:           "no files",
			ExpectedString: "",
			WorkspaceName:  "default",
			HasTfCommand:   true,
			FetchVersion:   true,
		},
		{
			Case:              "files",
			ExpectedString:    ">= 1.0.10",
			ExpectedEnabled:   true,
			WorkspaceName:     "default",
			Template:          "{{ .Version }}",
			HasTfVersionFiles: true,
			HasTfCommand:      true,
			FetchVersion:      true,
		},
		{
			Case:            "version files",
			ExpectedString:  "0.12.24",
			ExpectedEnabled: true,
			WorkspaceName:   "default",
			Template:        "{{ .Version }}",
			HasTfStateFile:  true,
			HasTfCommand:    true,
			FetchVersion:    true,
		},
		{
			Case:            "context files",
			ExpectedString:  "default",
			ExpectedEnabled: true,
			WorkspaceName:   "default",
			HasTfFiles:      true,
			HasTfCommand:    true,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)

		env.On("HasCommand", "terraform").Return(tc.HasTfCommand)
		env.On("HasFolder", ".terraform").Return(tc.HasTfFolder)
		env.On("HasFiles", ".tf").Return(tc.HasTfFiles)
		env.On("HasFiles", ".tfplan").Return(tc.HasTfFiles)
		env.On("HasFiles", ".tfstate").Return(tc.HasTfFiles)
		env.On("Pwd").Return("")
		env.On("RunCommand", "terraform", []string{"workspace", "show"}).Return(tc.WorkspaceName, nil)
		env.On("HasFiles", "versions.tf").Return(tc.HasTfVersionFiles)
		env.On("HasFiles", "main.tf").Return(tc.HasTfVersionFiles)
		env.On("HasFiles", "terraform.tfstate").Return(tc.HasTfStateFile)
		if tc.HasTfVersionFiles {
			content, _ := os.ReadFile("../test/versions.tf")
			env.On("FileContent", "versions.tf").Return(string(content))
		}
		if tc.HasTfStateFile {
			content, _ := os.ReadFile("../test/terraform.tfstate")
			env.On("FileContent", "terraform.tfstate").Return(string(content))
		}

		props := properties.Map{
			properties.FetchVersion: tc.FetchVersion,
		}

		tf := &Terraform{}
		tf.Init(props, env)

		template := tc.Template
		if len(template) == 0 {
			template = tf.Template()
		}
		assert.Equal(t, tc.ExpectedEnabled, tf.Enabled(), tc.Case)
		var got = renderTemplate(env, template, tf)
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
	}
}



================================================
FILE: src/segments/text.go
================================================
package segments

type Text struct {
	base
}

func (t *Text) Template() string {
	return "  "
}

func (t *Text) Enabled() bool {
	return true
}



================================================
FILE: src/segments/text_test.go
================================================
package segments

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

func TestTextSegment(t *testing.T) {
	cases := []struct {
		Case             string
		ExpectedString   string
		Template         string
		ExpectedDisabled bool
	}{
		{Case: "standard text", ExpectedString: "hello", Template: "hello"},
		{Case: "template text with env var", ExpectedString: "hello world", Template: "{{ .Env.HELLO }} world"},
		{Case: "template text with shell name", ExpectedString: "hello world from terminal", Template: "{{ .Env.HELLO }} world from {{ .Shell }}"},
		{Case: "template text with folder", ExpectedString: "hello world in posh", Template: "{{ .Env.HELLO }} world in {{ .Folder }}"},
		{Case: "template text with user", ExpectedString: "hello Posh", Template: "{{ .Env.HELLO }} {{ .UserName }}"},
		{Case: "empty text", Template: "", ExpectedDisabled: true},
		{Case: "empty template result", Template: "{{ .Env.WORLD }}", ExpectedDisabled: true},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("PathSeparator").Return("/")
		env.On("Getenv", "HELLO").Return("hello")
		env.On("Getenv", "WORLD").Return("")

		txt := &Text{}
		txt.Init(properties.Map{}, env)

		template.Cache = &cache.Template{
			UserName: "Posh",
			HostName: "MyHost",
			Shell:    "terminal",
			Root:     true,
			Folder:   "posh",
		}

		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, txt), tc.Case)
	}
}



================================================
FILE: src/segments/time.go
================================================
package segments

import (
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type Time struct {
	base

	CurrentDate time.Time
	Format      string
}

const (
	// TimeFormat uses the reference time Mon Jan 2 15:04:05 MST 2006 to show the pattern with which to format the current time
	TimeFormat properties.Property = "time_format"
)

func (t *Time) Template() string {
	return " {{ .CurrentDate | date .Format }} "
}

func (t *Time) Enabled() bool {
	// if no date set, use now(unit testing)
	t.Format = t.props.GetString(TimeFormat, "15:04:05")
	if t.CurrentDate.IsZero() {
		t.CurrentDate = time.Now()
	}
	return true
}



================================================
FILE: src/segments/time_test.go
================================================
package segments

import (
	"strings"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestTimeSegmentTemplate(t *testing.T) {
	// set date for unit test
	currentDate := time.Now()
	cases := []struct {
		Case            string
		ExpectedString  string
		Template        string
		ExpectedEnabled bool
	}{
		{
			Case:            "no template",
			Template:        "",
			ExpectedString:  currentDate.Format("15:04:05"),
			ExpectedEnabled: true,
		},
		{
			Case:            "time only",
			Template:        "{{.CurrentDate | date \"15:04:05\"}}",
			ExpectedString:  currentDate.Format("15:04:05"),
			ExpectedEnabled: true,
		},
		{
			Case:            "lowercase",
			Template:        "{{.CurrentDate | date \"January 02, 2006 15:04:05\" | lower }}",
			ExpectedString:  strings.ToLower(currentDate.Format("January 02, 2006 15:04:05")),
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)

		tempus := &Time{
			CurrentDate: currentDate,
		}
		tempus.Init(properties.Map{}, env)

		assert.Equal(t, tc.ExpectedEnabled, tempus.Enabled())
		if tc.Template == "" {
			tc.Template = tempus.Template()
		}
		if tc.ExpectedEnabled {
			assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, tempus), tc.Case)
		}
	}
}



================================================
FILE: src/segments/ui5tooling.go
================================================
package segments

const UI5ToolingYamlPattern = "*ui5*.y*ml"

type UI5Tooling struct {
	language
	HasUI5YamlInParentDir bool
}

func (u *UI5Tooling) Template() string {
	return languageTemplate
}

func (u *UI5Tooling) Enabled() bool {
	u.extensions = []string{UI5ToolingYamlPattern}
	u.displayMode = u.props.GetString(DisplayMode, DisplayModeContext)
	u.commands = []*cmd{
		{
			executable: "ui5",
			args:       []string{"--version"},
			regex:      `(?:(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+))))`,
		},
	}
	u.versionURLTemplate = "https://github.com/SAP/ui5-cli/releases/tag/v{{ .Full }}"
	u.language.loadContext = u.loadContext
	u.language.inContext = u.inContext

	return u.language.Enabled()
}

func (u *UI5Tooling) loadContext() {
	// for searching ui5 yaml from subdirectories of UI5 project root - up to 4 levels
	u.HasUI5YamlInParentDir = u.env.HasFileInParentDirs(UI5ToolingYamlPattern, 4)
}

func (u *UI5Tooling) inContext() bool {
	return u.HasUI5YamlInParentDir
}



================================================
FILE: src/segments/ui5tooling_test.go
================================================
package segments

import (
	"fmt"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/template"

	"github.com/stretchr/testify/assert"
)

const (
	WorkingDirRoot = "/home/user/dev/my-app"
)

type testCase struct {
	Case            string
	Template        string
	ExpectedString  string
	UI5YamlFilename string
	WorkingDir      string
	Version         string
	DisplayMode     string
}

func TestUI5Tooling(t *testing.T) {
	cases := []testCase{
		{
			Case:            "1) ui5tooling 2.12.1 - file ui5.yaml present in cwd; DisplayMode = files",
			ExpectedString:  "2.12.1",
			UI5YamlFilename: "ui5.yaml",
			Version:         `2.12.1 (from C:\somewhere\cli\bin\ui5.js)`,
			DisplayMode:     DisplayModeFiles,
		},
		{
			Case:            "2) ui5tooling 2.12.2 - file ui5.yaml present in cwd; default display mode (context)",
			ExpectedString:  "2.12.2",
			UI5YamlFilename: "ui5.yaml",
			Version:         `2.12.2 (from C:\somewhere\cli\bin\ui5.js)`,
		},
		{
			Case:            "3) ui5tooling 2.12.3 - file ui5.yaml present; cwd is sub dir, default display mode (context)",
			ExpectedString:  "2.12.3",
			WorkingDir:      WorkingDirRoot + "/subdir",
			UI5YamlFilename: "ui5.yaml",
			Version:         `2.12.3 (from C:\somewhere\cli\bin\ui5.js)`,
		},
		{
			Case:            "5) ui5tooling 2.12.4 - file ui5-dist.yml present in cwd",
			ExpectedString:  "2.12.4",
			UI5YamlFilename: "ui5-dist.yml",
			Version:         `2.12.4 (from C:\somewhere\cli\bin\ui5.js)`,
			DisplayMode:     DisplayModeFiles,
		},
		{
			Case:           "8) ui5tooling 11.0.0-rc1, no ui5.yaml file but display mode = always",
			Template:       "{{ .Major }}",
			ExpectedString: "11",
			Version:        `11.0.0-rc1 (from C:\somewhere\cli\bin\ui5.js)`,
			DisplayMode:    DisplayModeAlways,
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "ui5",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     UI5ToolingYamlPattern,
		}
		env, props := getMockedLanguageEnv(params)

		if len(tc.DisplayMode) == 0 {
			tc.DisplayMode = DisplayModeContext
		}

		props[DisplayMode] = tc.DisplayMode

		ui5tooling := &UI5Tooling{}
		ui5tooling.Init(props, env)

		err := mockFilePresence(&tc, env)

		if err != nil {
			t.Fail()
		}

		if len(tc.Template) == 0 {
			tc.Template = ui5tooling.Template()
		}

		// this is needed to build the version URL as before renderTemplate, the template is not initialized
		env.On("Shell").Return("foo")
		template.Cache = &cache.Template{}
		template.Init(env, nil, nil)

		failMsg := fmt.Sprintf("Failed in case: %s", tc.Case)
		assert.True(t, ui5tooling.Enabled(), failMsg)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, ui5tooling), failMsg)
	}
}

func mockFilePresence(tc *testCase, env *mock.Environment) error {
	for _, f := range []string{UI5ToolingYamlPattern} {
		match, err := filepath.Match(f, tc.UI5YamlFilename)

		if err != nil {
			return err
		}

		if match {
			if tc.DisplayMode == DisplayModeFiles && tc.WorkingDir == WorkingDirRoot { //nolint: gocritic
				env.On("HasFiles", f).Return(true)
				env.On("HasFileInParentDirs", f, uint(4)).Return(false)
				// mode context, working dir != working dir root
			} else if tc.DisplayMode == DisplayModeContext {
				env.On("HasFileInParentDirs", f, uint(4)).Return(false)
				env.On("HasFiles", f).Return(true)
			} else {
				env.On("HasFileInParentDirs", f, uint(4)).Return(false)
				env.On("HasFiles", f).Return(false)
			}
		} else {
			env.On("HasFileInParentDirs", f, uint(4)).Return(false)
			env.On("HasFiles", f).Return(false)
		}
	}

	return nil
}



================================================
FILE: src/segments/umbraco.go
================================================
package segments

import (
	"encoding/xml"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

type Umbraco struct {
	base

	Version string
	Modern  bool
}

type CSProj struct {
	PackageReferences []struct {
		Name    string `xml:"include,attr"`
		Version string `xml:"version,attr"`
	} `xml:"ItemGroup>PackageReference"`
}

type WebConfig struct {
	AppSettings []struct {
		Key   string `xml:"key,attr"`
		Value string `xml:"value,attr"`
	} `xml:"appSettings>add"`
}

func (u *Umbraco) Enabled() bool {
	var location string

	// Check if we have a folder called Umbraco or umbraco in the current directory or a parent directory
	folders := []string{"umbraco", "Umbraco"}
	for _, folder := range folders {
		if file, err := u.env.HasParentFilePath(folder, false); err == nil {
			location = file.ParentFolder
			break
		}
	}

	if len(location) == 0 {
		log.Debug("no umbraco folder found in parent directories")
		return false
	}

	files := u.env.LsDir(location)

	// Loop over files where we found the Umbraco folder
	// To see if we can find a web.config or *.csproj file
	// If we do then we can scan the file to see if Umbraco has been installed
	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if strings.EqualFold(file.Name(), "web.config") {
			if u.TryFindLegacyUmbraco(filepath.Join(location, file.Name())) {
				return true
			}

			// We may have found a web.config first before a *.csproj file
			// So we need to keep checking to see if modern Umbraco is installed if we come across a *.csproj file
			continue
		}

		if strings.EqualFold(filepath.Ext(file.Name()), ".csproj") {
			if u.TryFindModernUmbraco(filepath.Join(location, file.Name())) {
				return true
			}

			// We may have found a *.csproj first before a web.config file
			// So we need to keep checking if legacy Umbraco is installed (as the *.csproj could be for a non-Umbraco project)
			continue
		}
	}

	return false
}

func (u *Umbraco) Template() string {
	return "{{.Version}} "
}

func (u *Umbraco) TryFindModernUmbraco(configPath string) bool {
	// Check the passed in filepath is not empty
	if len(configPath) == 0 {
		log.Debug("no configPath provided")
		return false
	}

	// Read the file contents of the csproj file
	contents := u.env.FileContent(configPath)

	// As XML unmarshal does not support case insenstivity attributes
	// this is just a simple string replace to lowercase the attribute
	contents = strings.ReplaceAll(contents, "Include=", "include=")
	contents = strings.ReplaceAll(contents, "Version=", "version=")

	// XML Unmarshal - map the contents of the file to the CSProj struct
	csProjPackages := CSProj{}
	err := xml.Unmarshal([]byte(contents), &csProjPackages)

	if err != nil {
		log.Debug(err.Error())
	}

	// Loop over all the package references
	for _, packageReference := range csProjPackages.PackageReferences {
		if strings.EqualFold(packageReference.Name, "umbraco.cms") {
			u.Modern = true
			u.Version = packageReference.Version

			return true
		}
	}

	return false
}

func (u *Umbraco) TryFindLegacyUmbraco(configPath string) bool {
	// Check the passed in filepath is not empty
	if len(configPath) == 0 {
		log.Debug("no configPath provided")
		return false
	}

	// Read the file contents of the web.config
	contents := u.env.FileContent(configPath)

	// As XML unmarshal does not support case insenstivity attributes
	// this is just a simple string replace to lowercase the attribute
	contents = strings.ReplaceAll(contents, "Key=", "key=")
	contents = strings.ReplaceAll(contents, "Value=", "value=")

	// XML Unmarshal - web.config all AppSettings keys
	webConfigAppSettings := WebConfig{}
	err := xml.Unmarshal([]byte(contents), &webConfigAppSettings)

	if err != nil {
		log.Debug(err.Error())
	}

	// Loop over all the package references
	for _, appSetting := range webConfigAppSettings.AppSettings {
		if strings.EqualFold(appSetting.Key, "umbraco.core.configurationstatus") || strings.EqualFold(appSetting.Key, "umbracoConfigurationStatus") {
			u.Modern = false
			u.Version = appSetting.Value

			if len(u.Version) == 0 {
				u.Version = UNKNOWN
			}

			return true
		}
	}

	return false
}



================================================
FILE: src/segments/umbraco_test.go
================================================
package segments

import (
	"errors"
	"io/fs"
	"os"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestUmbracoSegment(t *testing.T) {
	cases := []struct {
		Case                    string
		ExpectedString          string
		Template                string
		ExpectedEnabled         bool
		HasUmbracoFolder        bool
		HasCsproj               bool
		HasWebConfig            bool
		UseLegacyWebConfig      bool
		HasCSProjWithoutUmbraco bool
	}{
		{
			Case:             "No Umbraco folder found",
			HasUmbracoFolder: false,
			ExpectedEnabled:  false, // Segment should not be enabled
		},
		{
			Case:             "Umbraco Folder but NO web.config or .csproj",
			HasUmbracoFolder: true,
			HasCsproj:        false,
			HasWebConfig:     false,
			ExpectedEnabled:  false, // Segment should not be enabled
		},
		{
			Case:             "Umbraco Folder and web.config but NO .csproj",
			HasUmbracoFolder: true,
			HasCsproj:        false,
			HasWebConfig:     true,
			ExpectedEnabled:  true, // Segment should be enabled and visible
			Template:         "{{ .Version }}",
			ExpectedString:   "8.18.9",
		},
		{
			Case:               "Umbraco Folder and web.config but NO .csproj and uses older web.config",
			HasUmbracoFolder:   true,
			HasCsproj:          false,
			HasWebConfig:       true,
			UseLegacyWebConfig: true,
			ExpectedEnabled:    true, // Segment should be enabled and visible
			Template:           "{{ .Version }}",
			ExpectedString:     "4.11.10",
		},
		{
			Case:             "Umbraco Folder and .csproj but NO web.config",
			HasUmbracoFolder: true,
			HasCsproj:        true,
			HasWebConfig:     false,
			ExpectedEnabled:  true, // Segment should be enabled and visible
			Template:         "{{ .Version }}",
			ExpectedString:   "12.1.2",
		},
		{
			Case:                    "Umbraco Folder with a .csproj [without Umbraco] and a web.config",
			HasUmbracoFolder:        true,
			HasCsproj:               false,
			HasWebConfig:            true,
			HasCSProjWithoutUmbraco: true, // This is a .csproj file without Umbraco installed - so we can test it doesn't return but carries on checking for more csproj or web.config files
			ExpectedEnabled:         true, // Segment should not be visible
			Template:                "{{ .Version }}",
			ExpectedString:          "8.18.9",
		},
		{
			Case:                    "Umbraco Folder with a .csproj [without Umbraco] and NO web.config",
			HasUmbracoFolder:        true,
			HasCsproj:               false,
			HasWebConfig:            false,
			HasCSProjWithoutUmbraco: true,
			ExpectedEnabled:         false,
			Template:                "{{ .Version }}",
			ExpectedString:          "",
		},
		{
			Case:                    "Umbraco Folder with multiple .csproj's and NO web.config",
			HasUmbracoFolder:        true,
			HasCsproj:               true,
			HasWebConfig:            false,
			HasCSProjWithoutUmbraco: true,
			ExpectedEnabled:         true, // Segment should be enabled and visible
			Template:                "{{ .Version }}",
			ExpectedString:          "12.1.2",
		},
		{
			Case:             "Umbraco Folder and .csproj with custom template",
			HasUmbracoFolder: true,
			HasCsproj:        true,
			ExpectedEnabled:  true,
			Template:         "Version:{{ .Version }} ModernUmbraco:{{ .Modern }}",
			ExpectedString:   "Version:12.1.2 ModernUmbraco:true",
		},
	}

	for _, tc := range cases {
		// Prepare/arrange the test
		env := new(mock.Environment)
		var sampleCSProj, sampleWebConfig, sampleNonUmbracoCSProj string

		if tc.HasCsproj {
			content, _ := os.ReadFile("../test/umbraco/MyProject.csproj")
			sampleCSProj = string(content)
		}
		if tc.HasWebConfig {
			var filePath string
			if tc.UseLegacyWebConfig {
				filePath = "../test/umbraco/web.old.config"
			} else {
				filePath = "../test/umbraco/web.config"
			}

			content, _ := os.ReadFile(filePath)
			sampleWebConfig = string(content)
		}
		if tc.HasCSProjWithoutUmbraco {
			content, _ := os.ReadFile("../test/umbraco/ANonUmbracoProject.csproj")
			sampleNonUmbracoCSProj = string(content)
		}

		const umbracoProjectDirectory = "/workspace/MyProject"
		env.On("Pwd").Return(umbracoProjectDirectory)
		env.On("FileContent", filepath.Join(umbracoProjectDirectory, "MyProject.csproj")).Return(sampleCSProj)
		env.On("FileContent", filepath.Join(umbracoProjectDirectory, "ANonUmbracoProject.csproj")).Return(sampleNonUmbracoCSProj)
		env.On("FileContent", filepath.Join(umbracoProjectDirectory, "web.config")).Return(sampleWebConfig)

		if tc.HasUmbracoFolder {
			fileInfo := &runtime.FileInfo{
				Path:         "/workspace/MyProject/Umbraco",
				ParentFolder: "/workspace/MyProject",
				IsDir:        true,
			}

			env.On("HasParentFilePath", "umbraco", false).Return(fileInfo, nil)
		} else {
			env.On("HasParentFilePath", "Umbraco", false).Return(&runtime.FileInfo{}, errors.New("no such file or directory"))
			env.On("HasParentFilePath", "umbraco", false).Return(&runtime.FileInfo{}, errors.New("no such file or directory"))
		}

		dirEntries := []fs.DirEntry{}
		if tc.HasCsproj {
			dirEntries = append(dirEntries, &MockDirEntry{
				name:  "MyProject.csproj",
				isDir: false,
			})
		}

		if tc.HasWebConfig {
			dirEntries = append(dirEntries, &MockDirEntry{
				name:  "web.config",
				isDir: false,
			})
		}

		if tc.HasCSProjWithoutUmbraco {
			dirEntries = append(dirEntries, &MockDirEntry{
				name:  "ANonUmbracoProject.csproj",
				isDir: false,
			})
		}

		env.On("LsDir", umbracoProjectDirectory).Return(dirEntries)

		// Setup the Umbraco segment with the mocked environment & properties
		umb := &Umbraco{}
		umb.Init(properties.Map{}, env)

		// Assert the test results
		// Check if the segment should be enabled and
		// the rendered string matches what we expect when specifying a template for the segment
		assert.Equal(t, tc.ExpectedEnabled, umb.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, tc.Template, umb), tc.Case)
	}
}



================================================
FILE: src/segments/unity.go
================================================
package segments

import (
	"errors"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
)

type Unity struct {
	base

	UnityVersion  string
	CSharpVersion string
}

func (u *Unity) Template() string {
	return " \ue721 {{ .UnityVersion }}{{ if .CSharpVersion }} {{ .CSharpVersion }}{{ end }} "
}

func (u *Unity) Enabled() bool {
	unityVersion, err := u.GetUnityVersion()
	if err != nil {
		log.Error(err)
		return false
	}
	if len(unityVersion) == 0 {
		return false
	}
	u.UnityVersion = unityVersion

	csharpVersion, err := u.GetCSharpVersion()
	if err != nil {
		log.Error(err)
	}
	u.CSharpVersion = csharpVersion

	return true
}

func (u *Unity) GetUnityVersion() (string, error) {
	projectDir, err := u.env.HasParentFilePath("ProjectSettings", false)
	if err != nil {
		log.Debug("no ProjectSettings parent folder found")
		return "", err
	}

	if !u.env.HasFilesInDir(projectDir.Path, "ProjectVersion.txt") {
		log.Debug("no ProjectVersion.txt file found")
		return "", err
	}

	versionFilePath := filepath.Join(projectDir.Path, "ProjectVersion.txt")
	versionFileText := u.env.FileContent(versionFilePath)

	lines := strings.SplitSeq(versionFileText, "\n")
	versionPrefix := "m_EditorVersion: "
	for line := range lines {
		if !strings.HasPrefix(line, versionPrefix) {
			continue
		}
		version := strings.TrimPrefix(line, versionPrefix)
		version = strings.TrimSpace(version)
		if len(version) == 0 {
			return "", errors.New("empty m_EditorVersion")
		}
		fIndex := strings.Index(version, "f")
		if fIndex > 0 {
			return version[:fIndex], nil
		}
		return version, nil
	}

	return "", errors.New("ProjectSettings/ProjectVersion.txt is missing m_EditorVersion")
}

func (u *Unity) GetCSharpVersion() (version string, err error) {
	lastDotIndex := strings.LastIndex(u.UnityVersion, ".")
	if lastDotIndex == -1 {
		return "", errors.New("lastDotIndex")
	}
	shortUnityVersion := u.UnityVersion[0:lastDotIndex]

	var csharpVersionsByUnityVersion = map[string]string{
		"2017.1": "C# 6",
		"2017.2": "C# 6",
		"2017.3": "C# 6",
		"2017.4": "C# 6",
		"2018.1": "C# 6",
		"2018.2": "C# 6",
		"2018.3": "C# 7.3",
		"2018.4": "C# 7.3",
		"2019.1": "C# 7.3",
		"2019.2": "C# 7.3",
		"2019.3": "C# 7.3",
		"2019.4": "C# 7.3",
		"2020.1": "C# 7.3",
		"2020.2": "C# 8",
		"2020.3": "C# 8",
		"2021.1": "C# 8",
		"2021.2": "C# 9",
		"2021.3": "C# 9",
		"2022.1": "C# 9",
		"2022.2": "C# 9",
		"2023.1": "C# 9",
		"2023.2": "C# 9",
	}

	csharpVersion, found := csharpVersionsByUnityVersion[shortUnityVersion]
	if found {
		return csharpVersion, nil
	}

	log.Debug(fmt.Sprintf("Unity version %s doesn't exist in the map", shortUnityVersion))
	return u.GetCSharpVersionFromWeb(shortUnityVersion)
}

func (u *Unity) GetCSharpVersionFromWeb(shortUnityVersion string) (version string, err error) {
	url := fmt.Sprintf("https://docs.unity3d.com/%s/Documentation/Manual/CSharpCompiler.html", shortUnityVersion)
	httpTimeout := u.props.GetInt(properties.HTTPTimeout, 2000)

	body, err := u.env.HTTPRequest(url, nil, httpTimeout)
	if err != nil {
		return "", err
	}

	pageContent := string(body)

	pattern := `<a href="https://(?:docs|learn)\.microsoft\.com/en-us/dotnet/csharp/whats-new/csharp-[0-9]+-?[0-9]*">(?P<csharpVersion>.*)</a>`
	matches := regex.FindNamedRegexMatch(pattern, pageContent)
	if matches != nil && matches["csharpVersion"] != "" {
		csharpVersion := strings.TrimSuffix(matches["csharpVersion"], ".0")
		return csharpVersion, nil
	}

	return "", nil
}



================================================
FILE: src/segments/unity_test.go
================================================
package segments

import (
	"errors"
	"path/filepath"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

type HTTPResponse struct {
	err  error
	body string
}

func TestUnitySegment(t *testing.T) {
	cases := []struct {
		Case                string
		ExpectedOutput      string
		VersionFileText     string
		ExpectedToBeEnabled bool
		VersionFileExists   bool
	}{
		{
			Case:                "Unity version without f suffix",
			ExpectedOutput:      "\ue721 2023.2.0a9 C# 9",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2023.2.0a9\nm_EditorVersionWithRevision: 2023.2.0a9 (5405d0db74a0)",
		},
		{
			Case:                "Unity version exists in C# map",
			ExpectedOutput:      "\ue721 2021.3.16 C# 9",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2021.3.16f1\nm_EditorVersionWithRevision: 2021.3.16f1 (4016570cf34f)",
		},
		{
			Case:                "ProjectSettings/ProjectVersion.txt doesn't exist",
			ExpectedToBeEnabled: false,
			VersionFileExists:   false,
		},
		{
			Case:                "ProjectSettings/ProjectVersion.txt is empty",
			ExpectedToBeEnabled: false,
			VersionFileExists:   true,
			VersionFileText:     "",
		},
		{
			Case:                "ProjectSettings/ProjectVersion.txt does not have expected format",
			ExpectedToBeEnabled: false,
			VersionFileExists:   true,
			VersionFileText:     "2021.3.16f1",
		},
		{
			Case:                "CRLF line ending",
			ExpectedOutput:      "\ue721 2021.3.16 C# 9",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2021.3.16f1\r\nm_EditorVersionWithRevision: 2021.3.16f1 (4016570cf34f)\r\n",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)

		err := errors.New("no match at root level")
		var projectDir *runtime.FileInfo
		if tc.VersionFileExists {
			err = nil
			projectDir = &runtime.FileInfo{
				ParentFolder: "UnityProjectRoot",
				Path:         "UnityProjectRoot/ProjectSettings",
				IsDir:        true,
			}
			env.On("HasFilesInDir", projectDir.Path, "ProjectVersion.txt").Return(tc.VersionFileExists)
			versionFilePath := filepath.Join(projectDir.Path, "ProjectVersion.txt")
			env.On("FileContent", versionFilePath).Return(tc.VersionFileText)
		}
		env.On("HasParentFilePath", "ProjectSettings", false).Return(projectDir, err)

		props := properties.Map{}
		unity := &Unity{}
		unity.Init(props, env)
		assert.Equal(t, tc.ExpectedToBeEnabled, unity.Enabled())
		if tc.ExpectedToBeEnabled {
			assert.Equal(t, tc.ExpectedOutput, renderTemplate(env, unity.Template(), unity), tc.Case)
		}
	}
}

// 2021.9.20f1 is used in the test cases below as a fake Unity version.
// As such, it doesn't exist in the predefined map in unity.go. This
// allows us to test the web request portion of the code, which is the
// fallback for obtaining a C# version.
func TestUnitySegmentCSharpWebRequest(t *testing.T) {
	cases := []struct {
		HTTPResponse        HTTPResponse
		Case                string
		ExpectedOutput      string
		VersionFileText     string
		ExpectedToBeEnabled bool
		VersionFileExists   bool
	}{
		{
			Case:                "C# version",
			ExpectedOutput:      "\ue721 2021.9.20 C# 10",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2021.9.20f1\nm_EditorVersionWithRevision: 2021.9.20f1 (4016570cf34f)",
			HTTPResponse: HTTPResponse{
				body: `<a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10">C# 10.0</a>`,
				err:  nil,
			},
		},
		{
			Case:                "C# version has a minor version",
			ExpectedOutput:      "\ue721 2021.9.20 C# 10.1",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2021.9.20f1\nm_EditorVersionWithRevision: 2021.9.20f1 (4016570cf34f)",
			HTTPResponse: HTTPResponse{
				body: `<a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10-1">C# 10.1</a>`,
				err:  nil,
			},
		},
		{
			Case:                "C# version not found in webpage",
			ExpectedOutput:      "\ue721 2021.9.20",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2021.9.20f1\nm_EditorVersionWithRevision: 2021.9.20f1 (4016570cf34f)",
			HTTPResponse: HTTPResponse{
				body: `<h1>Sorry... that page seems to be missing!</h1>`,
				err:  nil,
			},
		},
		{
			Case:                "http request fails",
			ExpectedOutput:      "\ue721 2021.9.20",
			ExpectedToBeEnabled: true,
			VersionFileExists:   true,
			VersionFileText:     "m_EditorVersion: 2021.9.20f1\nm_EditorVersionWithRevision: 2021.9.20f1 (4016570cf34f)",
			HTTPResponse: HTTPResponse{
				body: "",
				err:  errors.New("FAIL"),
			},
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)

		err := errors.New("no match at root level")
		var projectDir *runtime.FileInfo
		if tc.VersionFileExists {
			err = nil
			projectDir = &runtime.FileInfo{
				ParentFolder: "UnityProjectRoot",
				Path:         "UnityProjectRoot/ProjectSettings",
				IsDir:        true,
			}
			env.On("HasFilesInDir", projectDir.Path, "ProjectVersion.txt").Return(tc.VersionFileExists)
			versionFilePath := filepath.Join(projectDir.Path, "ProjectVersion.txt")
			env.On("FileContent", versionFilePath).Return(tc.VersionFileText)
		}
		env.On("HasParentFilePath", "ProjectSettings", false).Return(projectDir, err)

		url := "https://docs.unity3d.com/2021.9/Documentation/Manual/CSharpCompiler.html"
		env.On("HTTPRequest", url).Return([]byte(tc.HTTPResponse.body), tc.HTTPResponse.err)

		props := properties.Map{}
		unity := &Unity{}
		unity.Init(props, env)
		assert.Equal(t, tc.ExpectedToBeEnabled, unity.Enabled())
		if tc.ExpectedToBeEnabled {
			assert.Equal(t, tc.ExpectedOutput, renderTemplate(env, unity.Template(), unity), tc.Case)
		}
	}
}



================================================
FILE: src/segments/upgrade.go
================================================
package segments

import (
	"encoding/json"
	"errors"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/upgrade"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

type UpgradeCache struct {
	Latest  string `json:"latest"`
	Current string `json:"current"`
}

type Upgrade struct {
	base

	// deprecated
	Version string

	UpgradeCache
}

const (
	UPGRADECACHEKEY = "upgrade_segment"
)

func (u *Upgrade) Template() string {
	return " \uf019 "
}

func (u *Upgrade) Enabled() bool {
	u.Current = build.Version
	latest, err := u.cachedLatest(u.Current)
	if err != nil {
		latest, err = u.checkUpdate(u.Current)
	}

	if err != nil || u.Current == latest.Latest {
		return false
	}

	u.UpgradeCache = *latest
	u.Version = u.Latest
	return true
}

func (u *Upgrade) cachedLatest(current string) (*UpgradeCache, error) {
	data, ok := u.env.Cache().Get(UPGRADECACHEKEY)
	if !ok {
		return nil, errors.New("no cache data")
	}

	var cacheJSON UpgradeCache
	err := json.Unmarshal([]byte(data), &cacheJSON)
	if err != nil {
		return nil, err // invalid cache data
	}

	if current != cacheJSON.Current {
		return nil, errors.New("version changed, run the check again")
	}

	return &cacheJSON, nil
}

func (u *Upgrade) checkUpdate(current string) (*UpgradeCache, error) {
	duration := u.props.GetString(properties.CacheDuration, string(cache.ONEWEEK))
	source := u.props.GetString(Source, string(upgrade.CDN))

	cfg := &upgrade.Config{
		Source:   upgrade.Source(source),
		Interval: cache.Duration(duration),
	}

	latest, err := cfg.FetchLatest()
	if err != nil {
		return nil, err
	}

	cacheData := &UpgradeCache{
		Latest:  latest,
		Current: current,
	}

	cacheJSON, err := json.Marshal(cacheData)
	if err != nil {
		return nil, err
	}

	u.env.Cache().Set(UPGRADECACHEKEY, string(cacheJSON), cache.Duration(duration))

	return cacheData, nil
}



================================================
FILE: src/segments/upgrade_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/upgrade"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/alecthomas/assert"
	testify_ "github.com/stretchr/testify/mock"
)

func TestUpgrade(t *testing.T) {
	ugc := &upgrade.Config{}
	latest, _ := ugc.FetchLatest()

	cases := []struct {
		Case            string
		CurrentVersion  string
		LatestVersion   string
		CachedVersion   string
		ExpectedEnabled bool
		HasCache        bool
	}{
		{
			Case:            "Should upgrade",
			CurrentVersion:  "1.0.0",
			LatestVersion:   "1.0.1",
			ExpectedEnabled: true,
		},
		{
			Case:           "On latest",
			CurrentVersion: latest,
		},
		{
			Case:            "On previous, from cache",
			HasCache:        true,
			CurrentVersion:  "1.0.2",
			LatestVersion:   latest,
			CachedVersion:   "1.0.2",
			ExpectedEnabled: true,
		},
		{
			Case:           "On latest, version changed",
			HasCache:       true,
			CurrentVersion: latest,
			LatestVersion:  latest,
			CachedVersion:  "1.0.1",
		},
		{
			Case:            "On previous, version changed",
			HasCache:        true,
			CurrentVersion:  "1.0.2",
			LatestVersion:   latest,
			CachedVersion:   "1.0.1",
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		cache := &cache_.Cache{}

		env.On("Cache").Return(cache)
		if len(tc.CachedVersion) == 0 {
			tc.CachedVersion = tc.CurrentVersion
		}

		cacheData := fmt.Sprintf(`{"latest":"%s", "current": "%s"}`, tc.LatestVersion, tc.CachedVersion)
		cache.On("Get", UPGRADECACHEKEY).Return(cacheData, tc.HasCache)
		cache.On("Set", testify_.Anything, testify_.Anything, testify_.Anything)

		build.Version = tc.CurrentVersion

		ug := &Upgrade{}
		ug.Init(properties.Map{}, env)

		enabled := ug.Enabled()

		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
	}
}



================================================
FILE: src/segments/v.go
================================================
package segments

type V struct {
	language
}

func (v *V) Template() string {
	return languageTemplate
}

func (v *V) Enabled() bool {
	v.extensions = []string{"*.v"}

	v.commands = []*cmd{
		{
			executable: "v",
			args:       []string{"--version"},
			regex:      `V (?P<version>(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)) [a-f0-9]+`,
		},
	}
	return v.language.Enabled()
}



================================================
FILE: src/segments/v_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestV(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{
			Case:           "V 0.4.9",
			ExpectedString: "0.4.9",
			Version:        "V 0.4.9 b487986",
		},
		{
			Case:           "V 0.4.8",
			ExpectedString: "0.4.8",
			Version:        "V 0.4.8 a123456",
		},
		{
			Case:           "V 0.4.7",
			ExpectedString: "0.4.7",
			Version:        "V 0.4.7 f789012",
		},
	}

	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "v",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.v",
		}
		env, props := getMockedLanguageEnv(params)
		v := &V{}
		v.Init(props, env)
		assert.True(t, v.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, v.Template(), v), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/vala.go
================================================
package segments

type Vala struct {
	language
}

func (v *Vala) Template() string {
	return languageTemplate
}

func (v *Vala) Enabled() bool {
	v.extensions = []string{"*.vala"}
	v.commands = []*cmd{
		{
			executable: "vala",
			args:       []string{"--version"},
			regex:      `Vala (?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	v.versionURLTemplate = "https://gitlab.gnome.org/GNOME/vala/raw/{{ .Major }}.{{ .Minor }}/NEWS"

	return v.language.Enabled()
}



================================================
FILE: src/segments/vala_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestVala(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{
			Case:           "vala 0.48.17",
			ExpectedString: "0.48.17",
			Version:        "Vala 0.48.17",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "vala",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "*.vala",
		}
		env, props := getMockedLanguageEnv(params)
		v := &Vala{}
		v.Init(props, env)
		assert.True(t, v.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, v.Template(), v), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/wakatime.go
================================================
package segments

import (
	"encoding/json"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/template"
)

type Wakatime struct {
	base

	wtData
}

type wtTotals struct {
	Text    string  `json:"text"`
	Seconds float64 `json:"seconds"`
}

type wtData struct {
	Start           string   `json:"start"`
	End             string   `json:"end"`
	CumulativeTotal wtTotals `json:"cumulative_total"`
}

func (w *Wakatime) Template() string {
	return " {{ secondsRound .CumulativeTotal.Seconds }} "
}

func (w *Wakatime) Enabled() bool {
	err := w.setAPIData()
	return err == nil
}

func (w *Wakatime) setAPIData() error {
	url, err := w.getURL()
	if err != nil {
		return err
	}

	httpTimeout := w.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout)

	body, err := w.env.HTTPRequest(url, nil, httpTimeout)
	if err != nil {
		return err
	}

	err = json.Unmarshal(body, &w.wtData)
	if err != nil {
		return err
	}

	return nil
}

func (w *Wakatime) getURL() (string, error) {
	url := w.props.GetString(URL, "")
	tmpl := &template.Text{
		Template: url,
		Context:  w,
	}
	return tmpl.Render()
}



================================================
FILE: src/segments/wakatime_test.go
================================================
package segments

import (
	"errors"
	"fmt"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestWTTrackedTime(t *testing.T) {
	cases := []struct {
		Error          error
		Case           string
		Expected       string
		Template       string
		Seconds        int
		CacheTimeout   int
		CacheFoundFail bool
	}{
		{
			Case:     "nothing tracked",
			Seconds:  0,
			Expected: "0s",
		},
		{
			Case:     "25 minutes",
			Seconds:  1500,
			Expected: "25m",
		},
		{
			Case:     "2 hours",
			Seconds:  7200,
			Expected: "2h",
		},
		{
			Case:     "2h 45m",
			Seconds:  9900,
			Expected: "2h 45m",
		},
		{
			Case:     "negative number",
			Seconds:  -9900,
			Expected: "2h 45m",
		},
		{
			Case:     "no cache 2h 45m",
			Seconds:  9900,
			Expected: "2h 45m",
		},
		{
			Case:     "api error",
			Seconds:  2,
			Expected: "0s",
			Error:    errors.New("api error"),
		},
	}

	for _, tc := range cases {
		env := &mock.Environment{}
		response := fmt.Sprintf(`{"cumulative_total": {"seconds": %.2f, "text": "x"}}`, float64(tc.Seconds))

		env.On("HTTPRequest", FAKEAPIURL).Return([]byte(response), tc.Error)

		props := properties.Map{
			URL: FAKEAPIURL,
		}

		w := &Wakatime{}
		w.Init(props, env)

		assert.ErrorIs(t, tc.Error, w.setAPIData(), tc.Case+" - Error")
		assert.Equal(t, tc.Expected, renderTemplate(env, w.Template(), w), tc.Case+" - String")
	}
}



================================================
FILE: src/segments/winreg.go
================================================
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type WindowsRegistry struct {
	base

	Value string
}

const (
	// full path to the key; if ends in \, gets "(Default)" key in that path
	RegistryPath properties.Property = "path"
	// Fallback is the text to display if the key is not found
	Fallback properties.Property = "fallback"
)

func (wr *WindowsRegistry) Template() string {
	return " {{ .Value }} "
}

func (wr *WindowsRegistry) Enabled() bool {
	if wr.env.GOOS() != runtime.WINDOWS {
		return false
	}

	registryPath := wr.props.GetString(RegistryPath, "")
	wr.Value = wr.props.GetString(Fallback, "")

	regValue, err := wr.env.WindowsRegistryKeyValue(registryPath)
	if err == nil {
		wr.Value = regValue.String
		return true
	}
	if len(wr.Value) > 0 {
		// we have fallback value
		return true
	}
	return false
}



================================================
FILE: src/segments/winreg_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestWinReg(t *testing.T) {
	cases := []struct {
		Err             error
		getWRKVOutput   *runtime.WindowsRegistryValue
		CaseDescription string
		Path            string
		Fallback        string
		ExpectedValue   string
		ExpectedSuccess bool
	}{
		{
			CaseDescription: "Error",
			Path:            "HKLLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\ProductName",
			Err:             errors.New("no match"),
			ExpectedSuccess: false,
		},
		{
			CaseDescription: "Value",
			Path:            "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\InstallTime",
			getWRKVOutput:   &runtime.WindowsRegistryValue{ValueType: runtime.STRING, String: "xbox"},
			ExpectedSuccess: true,
			ExpectedValue:   "xbox",
		},
		{
			CaseDescription: "Fallback value",
			Path:            "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\InstallTime",
			Fallback:        "cortana",
			Err:             errors.New("no match"),
			ExpectedSuccess: true,
			ExpectedValue:   "cortana",
		},
		{
			CaseDescription: "Empty string value (no error) should display empty string even in presence of fallback",
			Path:            "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\InstallTime",
			getWRKVOutput:   &runtime.WindowsRegistryValue{ValueType: runtime.STRING, String: ""},
			Fallback:        "anaconda",
			ExpectedSuccess: true,
			ExpectedValue:   "",
		},
		{
			CaseDescription: "Empty string value (no error) should display empty string",
			Path:            "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\InstallTime",
			getWRKVOutput:   &runtime.WindowsRegistryValue{ValueType: runtime.STRING, String: ""},
			ExpectedSuccess: true,
			ExpectedValue:   "",
		},
	}

	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("GOOS").Return(runtime.WINDOWS)
		env.On("WindowsRegistryKeyValue", tc.Path).Return(tc.getWRKVOutput, tc.Err)

		props := properties.Map{
			RegistryPath: tc.Path,
			Fallback:     tc.Fallback,
		}

		r := &WindowsRegistry{}
		r.Init(props, env)

		assert.Equal(t, tc.ExpectedSuccess, r.Enabled(), tc.CaseDescription)
		assert.Equal(t, tc.ExpectedValue, renderTemplate(env, r.Template(), r), tc.CaseDescription)
	}
}



================================================
FILE: src/segments/withings.go
================================================
package segments

import (
	"errors"
	"fmt"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/http"

	httplib "net/http"
	"net/url"
)

// WithingsData struct contains the API data
type WithingsData struct {
	Body   *Body `json:"body"`
	Status int   `json:"status"`
}

type Body struct {
	MeasureGroups []*MeasureGroup `json:"measuregrps"`
	Activities    []*Activity     `json:"activities"`
	Series        []*Series       `json:"series"`
}

type MeasureGroup struct {
	Comment  any        `json:"comment"`
	Measures []*Measure `json:"measures"`
}

type Measure struct {
	Value int `json:"value"`
	Type  int `json:"type"`
	Unit  int `json:"unit"`
}

type Series struct {
	Startdate int64 `json:"startdate"`
	Enddate   int64 `json:"enddate"`
}

type Activity struct {
	Date          string `json:"date"`
	Timezone      string `json:"timezone"`
	Deviceid      string `json:"deviceid"`
	HashDeviceid  string `json:"hash_deviceid"`
	Brand         int    `json:"brand"`
	IsTracker     bool   `json:"is_tracker"`
	Steps         int    `json:"steps"`
	Distance      int    `json:"distance"`
	Elevation     int    `json:"elevation"`
	Soft          int    `json:"soft"`
	Moderate      int    `json:"moderate"`
	Intense       int    `json:"intense"`
	Active        int    `json:"active"`
	Calories      int    `json:"calories"`
	Totalcalories int    `json:"totalcalories"`
	HrAverage     int    `json:"hr_average"`
	HrMin         int    `json:"hr_min"`
	HrMax         int    `json:"hr_max"`
	HrZone0       int    `json:"hr_zone_0"`
	HrZone1       int    `json:"hr_zone_1"`
	HrZone2       int    `json:"hr_zone_2"`
	HrZone3       int    `json:"hr_zone_3"`
}

// WithingsAPI is a wrapper around http.Oauth
type WithingsAPI interface {
	GetMeasures(meastypes string) (*WithingsData, error)
	GetActivities(activities string) (*WithingsData, error)
	GetSleep() (*WithingsData, error)
}

type withingsAPI struct {
	*http.OAuthRequest
}

func (w *withingsAPI) GetMeasures(meastypes string) (*WithingsData, error) {
	twoWeeksAgo := strconv.FormatInt(time.Now().AddDate(0, 0, -14).Unix(), 10)
	formData := url.Values{
		"meastypes":  {meastypes},
		"action":     {"getmeas"},
		"lastupdate": {twoWeeksAgo},
		"category":   {"1"},
	}
	return w.getWithingsData("https://wbsapi.withings.net/measure", formData)
}

func (w *withingsAPI) GetActivities(activities string) (*WithingsData, error) {
	yesterday := time.Now().AddDate(0, 0, -1).Format("2006-01-02")
	today := time.Now().Format("2006-01-02")
	formData := url.Values{
		"data_fields":  {activities},
		"action":       {"getactivity"},
		"startdateymd": {yesterday},
		"enddateymd":   {today},
		"category":     {"1"},
	}
	return w.getWithingsData("https://wbsapi.withings.net/v2/measure", formData)
}

func (w *withingsAPI) GetSleep() (*WithingsData, error) {
	today := time.Now()
	yesterday := today.AddDate(0, 0, -1)
	// start from 21:00 yesterday
	start := time.Date(yesterday.Year(), yesterday.Month(), yesterday.Day(), 21, 0, 0, 0, time.UTC).Unix()
	// end at 12PM today
	end := time.Date(today.Year(), today.Month(), today.Day(), 12, 0, 0, 0, time.UTC).Unix()
	formData := url.Values{
		"action":    {"get"},
		"startdate": {strconv.FormatInt(start, 10)},
		"enddate":   {strconv.FormatInt(end, 10)},
	}
	return w.getWithingsData("https://wbsapi.withings.net/v2/sleep", formData)
}

func (w *withingsAPI) getWithingsData(endpoint string, formData url.Values) (*WithingsData, error) {
	modifiers := func(request *httplib.Request) {
		request.Method = httplib.MethodPost
		request.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	}

	body := strings.NewReader(formData.Encode())

	data, err := http.OauthResult[*WithingsData](w.OAuthRequest, endpoint, body, modifiers)
	if data != nil && data.Status != 0 {
		return nil, errors.New("Withings API error: " + strconv.Itoa(data.Status))
	}

	return data, err
}

type Withings struct {
	base

	api        WithingsAPI
	SleepHours string
	Weight     float64
	Steps      int
}

const (
	WithingsAccessTokenKey  = "withings_access_token"
	WithingsRefreshTokenKey = "withings_refresh_token"
)

func (w *Withings) Template() string {
	return "{{ if gt .Weight 0.0 }} {{ round .Weight 2 }}kg {{ end }}"
}

func (w *Withings) Enabled() bool {
	w.initAPI()

	var enabled bool
	if w.getActivities() {
		enabled = true
	}
	if w.getMeasures() {
		enabled = true
	}
	if w.getSleep() {
		enabled = true
	}
	return enabled
}

func (w *Withings) initAPI() {
	if w.api != nil {
		return
	}

	oauth := &http.OAuthRequest{
		AccessTokenKey:  WithingsAccessTokenKey,
		RefreshTokenKey: WithingsRefreshTokenKey,
		SegmentName:     "withings",
		AccessToken:     w.props.GetString(properties.AccessToken, ""),
		RefreshToken:    w.props.GetString(properties.RefreshToken, ""),
		Request: http.Request{
			Env:         w.env,
			HTTPTimeout: w.props.GetInt(properties.HTTPTimeout, properties.DefaultHTTPTimeout),
		},
	}

	w.api = &withingsAPI{
		OAuthRequest: oauth,
	}
}

func (w *Withings) getMeasures() bool {
	data, err := w.api.GetMeasures("1")
	if err != nil {
		return false
	}
	// no data
	if len(data.Body.MeasureGroups) == 0 || len(data.Body.MeasureGroups[0].Measures) == 0 {
		return false
	}
	measure := data.Body.MeasureGroups[len(data.Body.MeasureGroups)-1].Measures[0]
	weight := measure.Value
	w.Weight = float64(weight) / math.Pow(10, math.Abs(float64(measure.Unit)))
	return true
}

func (w *Withings) getActivities() bool {
	data, err := w.api.GetActivities("steps")
	if err != nil || len(data.Body.Activities) == 0 {
		return false
	}
	today := time.Now().Format("2006-01-02")
	for _, activity := range data.Body.Activities {
		if activity.Date != today {
			continue
		}
		w.Steps = activity.Steps
		return true
	}
	return false
}

func (w *Withings) getSleep() bool {
	data, err := w.api.GetSleep()
	if err != nil || len(data.Body.Series) == 0 {
		return false
	}
	var sleepStart, sleepEnd time.Time
	for _, series := range data.Body.Series {
		start := time.Unix(series.Startdate, 0)
		if sleepStart.IsZero() || start.Before(sleepStart) {
			sleepStart = start
		}

		end := time.Unix(series.Enddate, 0)
		if sleepStart.IsZero() || start.After(sleepEnd) {
			sleepEnd = end
		}
	}

	sleepHours := sleepEnd.Sub(sleepStart).Hours()
	w.SleepHours = fmt.Sprintf("%0.1f", sleepHours)

	return true
}



================================================
FILE: src/segments/withings_test.go
================================================
package segments

import (
	"errors"
	"testing"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
	testify_ "github.com/stretchr/testify/mock"
)

type mockedWithingsAPI struct {
	testify_.Mock
}

func (s *mockedWithingsAPI) GetMeasures(meastypes string) (*WithingsData, error) {
	args := s.Called(meastypes)
	return args.Get(0).(*WithingsData), args.Error(1)
}

func (s *mockedWithingsAPI) GetActivities(activities string) (*WithingsData, error) {
	args := s.Called(activities)
	return args.Get(0).(*WithingsData), args.Error(1)
}

func (s *mockedWithingsAPI) GetSleep() (*WithingsData, error) {
	args := s.Called()
	return args.Get(0).(*WithingsData), args.Error(1)
}

func TestWithingsSegment(t *testing.T) {
	cases := []struct {
		MeasuresError   error
		ActivitiesError error
		SleepError      error
		WithingsData    *WithingsData
		Case            string
		ExpectedString  string
		Template        string
		ExpectedEnabled bool
	}{
		{
			Case:            "Error",
			MeasuresError:   errors.New("error"),
			ActivitiesError: errors.New("error"),
			SleepError:      errors.New("error"),
			ExpectedEnabled: false,
		},
		{
			Case: "Only Measures data",
			WithingsData: &WithingsData{
				Body: &Body{
					MeasureGroups: []*MeasureGroup{
						{
							Measures: []*Measure{
								{
									Value: 7077,
									Unit:  -2,
								},
							},
						},
					},
				},
			},
			ActivitiesError: errors.New("error"),
			SleepError:      errors.New("error"),
			ExpectedEnabled: true,
			ExpectedString:  "70.77kg",
		},
		{
			Case: "Multiple Measuring Groups, only Measures data",
			WithingsData: &WithingsData{
				Body: &Body{
					MeasureGroups: []*MeasureGroup{
						{
							Measures: []*Measure{
								{
									Value: 7123,
									Unit:  -2,
								},
							},
						},
						{
							Measures: []*Measure{
								{
									Value: 7754,
									Unit:  -2,
								},
							},
						},
					},
				},
			},
			ActivitiesError: errors.New("error"),
			SleepError:      errors.New("error"),
			ExpectedEnabled: true,
			ExpectedString:  "77.54kg",
		},
		{
			Case: "Measures, no data",
			WithingsData: &WithingsData{
				Body: &Body{},
			},
			ActivitiesError: errors.New("error"),
			SleepError:      errors.New("error"),
			ExpectedEnabled: false,
		},
		{
			Case:           "Activities",
			Template:       "{{ .Steps }} steps",
			ExpectedString: "7077 steps",
			WithingsData: &WithingsData{
				Body: &Body{
					Activities: []*Activity{
						{
							Steps: 5066,
							Date:  time.Now().AddDate(0, 0, -1).Format("2006-01-02"),
						},
						{
							Steps: 7077,
							Date:  time.Now().Format("2006-01-02"),
						},
					},
				},
			},
			MeasuresError:   errors.New("error"),
			SleepError:      errors.New("error"),
			ExpectedEnabled: true,
		},
		{
			Case:           "Sleep",
			Template:       "{{ .SleepHours }}hr",
			ExpectedString: "11.8hr",
			WithingsData: &WithingsData{
				Body: &Body{
					Series: []*Series{
						{
							Startdate: 1594159200,
							Enddate:   1594201500,
						},
					},
				},
			},
			MeasuresError:   errors.New("error"),
			ActivitiesError: errors.New("error"),
			ExpectedEnabled: true,
		},
		{
			Case:           "Sleep and Activity",
			Template:       "{{ .Steps }} steps with {{ .SleepHours }}hr of sleep",
			ExpectedString: "976 steps with 11.8hr of sleep",
			WithingsData: &WithingsData{
				Body: &Body{
					Series: []*Series{
						{
							Startdate: 1594159200,
							Enddate:   1594201500,
						},
					},
					Activities: []*Activity{
						{
							Steps: 976,
							Date:  time.Now().Format("2006-01-02"),
						},
					},
				},
			},
			MeasuresError:   errors.New("error"),
			ExpectedEnabled: true,
		},
	}

	for _, tc := range cases {
		api := &mockedWithingsAPI{}
		api.On("GetMeasures", "1").Return(tc.WithingsData, tc.MeasuresError)
		api.On("GetActivities", "steps").Return(tc.WithingsData, tc.ActivitiesError)
		api.On("GetSleep").Return(tc.WithingsData, tc.SleepError)

		withings := &Withings{
			api: api,
		}
		withings.Init(properties.Map{}, &mock.Environment{})

		enabled := withings.Enabled()
		assert.Equal(t, tc.ExpectedEnabled, enabled, tc.Case)
		if !enabled {
			continue
		}

		if tc.Template == "" {
			tc.Template = withings.Template()
		}

		var got = renderTemplate(&mock.Environment{}, tc.Template, withings)
		assert.Equal(t, tc.ExpectedString, got, tc.Case)
	}
}



================================================
FILE: src/segments/xmake.go
================================================
package segments

type XMake struct {
	language
}

func (x *XMake) Template() string {
	return languageTemplate
}

func (x *XMake) Enabled() bool {
	x.extensions = []string{"xmake.lua"}
	x.commands = []*cmd{
		{
			executable: "xmake",
			args:       []string{"--version"},
			regex:      `xmake v(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}

	return x.language.Enabled()
}



================================================
FILE: src/segments/xmake_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestXMake(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "XMake 2.7.2-dev", ExpectedString: "2.7.2", Version: "xmake v2.7.2+dev.605b8e3e0"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "xmake",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "xmake.lua",
		}
		env, props := getMockedLanguageEnv(params)
		x := &XMake{}
		x.Init(props, env)
		assert.True(t, x.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, x.Template(), x), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/yarn.go
================================================
package segments

type Yarn struct {
	language
}

func (n *Yarn) Template() string {
	return " \U000F011B {{.Full}} "
}

func (n *Yarn) Enabled() bool {
	n.extensions = []string{"package.json", "yarn.lock"}
	n.commands = []*cmd{
		{
			executable: "yarn",
			args:       []string{"--version"},
			regex:      `(?P<version>((?P<major>[0-9]+).(?P<minor>[0-9]+).(?P<patch>[0-9]+)))`,
		},
	}
	n.versionURLTemplate = "https://github.com/yarnpkg/berry/releases/tag/v{{ .Full }}"

	return n.language.Enabled()
}



================================================
FILE: src/segments/yarn_test.go
================================================
package segments

import (
	"fmt"
	"testing"

	"github.com/alecthomas/assert"
)

func TestYarn(t *testing.T) {
	cases := []struct {
		Case           string
		ExpectedString string
		Version        string
	}{
		{Case: "1.0.0", ExpectedString: "\U000F011B 1.0.0", Version: "1.0.0"},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "yarn",
			versionParam:  "--version",
			versionOutput: tc.Version,
			extension:     "package.json",
		}
		env, props := getMockedLanguageEnv(params)
		yarn := &Yarn{}
		yarn.Init(props, env)
		assert.True(t, yarn.Enabled(), fmt.Sprintf("Failed in case: %s", tc.Case))
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, yarn.Template(), yarn), fmt.Sprintf("Failed in case: %s", tc.Case))
	}
}



================================================
FILE: src/segments/ytm.go
================================================
package segments

import (
	"encoding/json"
	"errors"
	httplib "net/http"

	"github.com/jandedobbeleer/oh-my-posh/src/cli/auth"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
)

const (
	ytmdaStatusURL = auth.YTMDABASEURL + "/state"
)

type Ytm struct {
	base

	MusicPlayer
}

func (y *Ytm) Template() string {
	return " {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} "
}

func (y *Ytm) Enabled() bool {
	err := y.setStatus()
	if err != nil {
		log.Error(err)
	}

	return err == nil
}

type ytmdaStatusResponse struct {
	Video struct {
		Author string `json:"author"`
		Title  string `json:"title"`
	} `json:"video"`
	Player struct {
		TrackState int  `json:"trackState"`
		AdPlaying  bool `json:"adPlaying"`
	} `json:"player"`
}

func (y *Ytm) setStatus() error {
	token, OK := y.env.Cache().Get(auth.YTMDATOKEN)
	if !OK || len(token) == 0 {
		return errors.New("YTMDA token not found, please authenticate using `oh-my-posh auth ytmda`")
	}

	status, err := y.requestStatus(token)
	if err != nil {
		return err
	}

	switch status.Player.TrackState {
	case 1, 2: // playing or buffering
		y.Status = playing
		y.Icon = y.props.GetString(PlayingIcon, "\uf04b ")
	case -1: // stopped
		y.Status = stopped
		y.Icon = y.props.GetString(StoppedIcon, "\uf04d ")
	default: // paused
		y.Status = paused
		y.Icon = y.props.GetString(PausedIcon, "\uf04c ")
	}

	if status.Player.AdPlaying {
		ad := y.props.GetString(AdIcon, "\ueebb ")
		y.Icon = ad + y.Icon
	}

	y.Artist = status.Video.Author
	y.Track = status.Video.Title

	return nil
}

func (y *Ytm) requestStatus(token string) (*ytmdaStatusResponse, error) {
	setHeaders := func(request *httplib.Request) {
		request.Header.Set("Authorization", token)
		request.Header.Set("Content-Type", "application/json")
	}

	httpTimeout := y.props.GetInt(properties.HTTPTimeout, 5000)
	response, err := y.env.HTTPRequest(ytmdaStatusURL, nil, httpTimeout, setHeaders)
	if err != nil {
		return nil, err
	}

	var result ytmdaStatusResponse
	err = json.Unmarshal(response, &result)
	return &result, err
}



================================================
FILE: src/segments/ytm_test.go
================================================
package segments

import (
	"testing"

	cache_ "github.com/jandedobbeleer/oh-my-posh/src/cache/mock"
	"github.com/jandedobbeleer/oh-my-posh/src/cli/auth"
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestYTM(t *testing.T) {
	cases := []struct {
		HTTPError       error
		Case            string
		JSONResponse    string
		ExpectedString  string
		HasToken        bool
		ExpectedEnabled bool
	}{
		{
			Case:            "no token in cache",
			HasToken:        false,
			ExpectedEnabled: false,
		},
		{
			Case:            "no response",
			HasToken:        true,
			ExpectedEnabled: false,
			HTTPError:       assert.AnError,
		},
		{
			Case:            "empty response",
			HasToken:        true,
			ExpectedEnabled: false,
			JSONResponse:    "",
		},
		{
			Case:            "invalid response",
			HasToken:        true,
			ExpectedEnabled: false,
			JSONResponse:    "invalid json",
		},
		{
			Case:            "paused",
			HasToken:        true,
			ExpectedEnabled: true,
			JSONResponse:    `{"video": {"author": "Author", "title": "Title"}, "player": {"trackState": 0, "adPlaying": false}}`,
			ExpectedString:  "Paused Author - Title",
		},
		{
			Case:            "playing",
			HasToken:        true,
			ExpectedEnabled: true,
			JSONResponse:    `{"video": {"author": "Author", "title": "Title"}, "player": {"trackState": 1, "adPlaying": false}}`,
			ExpectedString:  "Playing Author - Title",
		},
		{
			Case:            "buffering",
			HasToken:        true,
			ExpectedEnabled: true,
			JSONResponse:    `{"video": {"author": "Author", "title": "Title"}, "player": {"trackState": 2, "adPlaying": false}}`,
			ExpectedString:  "Playing Author - Title",
		},
		{
			Case:            "stopped",
			HasToken:        true,
			ExpectedEnabled: true,
			JSONResponse:    `{"video": {"author": "Author", "title": "Title"}, "player": {"trackState": -1, "adPlaying": false}}`,
			ExpectedString:  "Stopped",
		},
		{
			Case:            "ad playing",
			HasToken:        true,
			ExpectedEnabled: true,
			JSONResponse:    `{"video": {"author": "Author", "title": "Title"}, "player": {"trackState": 1, "adPlaying": true}}`,
			ExpectedString:  "Ad Playing Author - Title",
		},
	}
	for _, tc := range cases {
		env := new(mock.Environment)
		env.On("HTTPRequest", ytmdaStatusURL).Return([]byte(tc.JSONResponse), tc.HTTPError)

		cache := new(cache_.Cache)
		env.On("Cache").Return(cache)
		cache.On("Get", auth.YTMDATOKEN).Return("test_token", tc.HasToken)

		props := properties.Map{
			StoppedIcon: "Stopped ",
			PlayingIcon: "Playing ",
			PausedIcon:  "Paused ",
			AdIcon:      "Ad ",
		}

		ytm := new(Ytm)
		ytm.Init(props, env)

		assert.Equal(t, tc.ExpectedEnabled, ytm.Enabled(), tc.Case)
		if !tc.ExpectedEnabled {
			continue
		}

		assert.Equal(t, tc.ExpectedString, renderTemplate(env, ytm.Template(), ytm), tc.Case)
	}
}



================================================
FILE: src/segments/zig.go
================================================
package segments

type Zig struct {
	language
}

func (zig *Zig) Template() string {
	return languageTemplate
}

func (zig *Zig) Enabled() bool {
	zig.extensions = []string{"*.zig", "*.zon"}
	zig.projectFiles = []string{"build.zig"}
	zig.commands = []*cmd{
		{
			executable: "zig",
			args:       []string{"version"},
			regex:      `(?P<version>(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)`, //nolint:lll
		},
	}

	zig.versionURLTemplate = "https://ziglang.org/download/{{ .Major }}.{{ .Minor }}.{{ .Patch }}/release-notes.html"

	return zig.language.Enabled()
}

func (zig *Zig) InProjectDir() bool {
	return zig.projectRoot != nil
}



================================================
FILE: src/segments/zig_test.go
================================================
package segments

import (
	"errors"
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/stretchr/testify/assert"
)

func TestZig(t *testing.T) {
	cases := []struct {
		Case           string
		Version        string
		ExpectedString string
		ExpectedURL    string
		InProjectDir   bool
	}{
		{
			Case:           "zig 0.13.0 - not in project dir",
			Version:        "0.13.0",
			InProjectDir:   false,
			ExpectedString: "0.13.0",
			ExpectedURL:    "https://ziglang.org/download/0.13.0/release-notes.html",
		},
		{
			Case:           "zig 0.12.0-dev.2063+804cee3b9 - not in project dir",
			Version:        "0.12.0-dev.2063+804cee3b9",
			InProjectDir:   false,
			ExpectedString: "0.12.0-dev.2063+804cee3b9",
			ExpectedURL:    "https://ziglang.org/download/0.12.0/release-notes.html",
		},
		{
			Case:           "zig 0.13.0 - in project dir",
			Version:        "0.13.0",
			InProjectDir:   true,
			ExpectedString: "0.13.0",
			ExpectedURL:    "https://ziglang.org/download/0.13.0/release-notes.html",
		},
		{
			Case:           "zig 0.12.0-dev.2063+804cee3b9 - in project dir",
			Version:        "0.12.0-dev.2063+804cee3b9",
			InProjectDir:   true,
			ExpectedString: "0.12.0-dev.2063+804cee3b9",
			ExpectedURL:    "https://ziglang.org/download/0.12.0/release-notes.html",
		},
	}
	for _, tc := range cases {
		params := &mockedLanguageParams{
			cmd:           "zig",
			versionParam:  "version",
			versionOutput: tc.Version,
			extension:     "*.zig",
		}

		env, props := getMockedLanguageEnv(params)

		dummyDir := &runtime.FileInfo{}

		if tc.InProjectDir {
			env.On("HasParentFilePath", "build.zig", false).Return(dummyDir, nil)
		} else {
			env.On("HasParentFilePath", "build.zig", false).Return(dummyDir, errors.New("build.zig not found"))
		}

		zig := &Zig{}
		zig.Init(props, env)

		assert.True(t, zig.Enabled(), tc.Case)
		assert.Equal(t, tc.ExpectedString, renderTemplate(env, zig.Template(), zig), tc.Case)
		assert.Equal(t, tc.ExpectedURL, renderTemplate(env, zig.URL, zig), tc.Case)
		assert.Equal(t, tc.InProjectDir, zig.InProjectDir(), tc.Case)
	}
}



================================================
FILE: src/shell/bash.go
================================================
package shell

import (
	_ "embed"
	"fmt"
	"strings"
)

//go:embed scripts/omp.bash
var bashInit string

func (f Feature) Bash() Code {
	switch f {
	case CursorPositioning:
		return unixCursorPositioning
	case FTCSMarks:
		return unixFTCSMarks
	case Upgrade:
		return unixUpgrade
	case Notice:
		return unixNotice
	case RPrompt:
		if !bashBLEsession {
			return ""
		}

		return `bleopt prompt_rps1='$(
	"$_omp_executable" print right \
		--save-cache \
		--shell=bash \
		--shell-version="$BASH_VERSION" \
		--status="$_omp_status" \
		--pipestatus="${_omp_pipestatus[*]}" \
		--no-status="$_omp_no_status" \
		--execution-time="$_omp_execution_time" \
		--stack-count="$_omp_stack_count" \
		--terminal-width="${COLUMNS-0}" \
		--escape=false
)'`
	case Transient:
		if !bashBLEsession {
			return ""
		}

		return `bleopt prompt_ps1_transient=always
bleopt prompt_ps1_final='$(
    "$_omp_executable" print transient \
        --shell=bash \
        --shell-version="$BASH_VERSION" \
        --escape=false
)'`
	case PromptMark, PoshGit, Azure, LineError, Jobs, Tooltips, Async:
		fallthrough
	default:
		return ""
	}
}

func QuotePosixStr(str string) string {
	if len(str) == 0 {
		return "''"
	}

	return fmt.Sprintf("$'%s'", strings.NewReplacer(`\`, `\\`, "'", `\'`).Replace(str))
}



================================================
FILE: src/shell/bash_test.go
================================================
package shell

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBashFeatures(t *testing.T) {
	got := allFeatures.Lines(BASH).String("// these are the features")

	want := `// these are the features
_omp_ftcs_marks=1
"$_omp_executable" upgrade
"$_omp_executable" notice
_omp_cursor_positioning=1`

	assert.Equal(t, want, got)
}

func TestBashFeaturesWithBLE(t *testing.T) {
	bashBLEsession = true

	got := allFeatures.Lines(BASH).String("// these are the features")

	want := `// these are the features
bleopt prompt_ps1_transient=always
bleopt prompt_ps1_final='$(
    "$_omp_executable" print transient \
        --shell=bash \
        --shell-version="$BASH_VERSION" \
        --escape=false
)'
_omp_ftcs_marks=1
"$_omp_executable" upgrade
"$_omp_executable" notice
bleopt prompt_rps1='$(
	"$_omp_executable" print right \
		--save-cache \
		--shell=bash \
		--shell-version="$BASH_VERSION" \
		--status="$_omp_status" \
		--pipestatus="${_omp_pipestatus[*]}" \
		--no-status="$_omp_no_status" \
		--execution-time="$_omp_execution_time" \
		--stack-count="$_omp_stack_count" \
		--terminal-width="${COLUMNS-0}" \
		--escape=false
)'
_omp_cursor_positioning=1`

	assert.Equal(t, want, got)

	bashBLEsession = false
}

func TestQuotePosixStr(t *testing.T) {
	tests := []struct {
		str      string
		expected string
	}{
		{str: "", expected: "''"},
		{str: `/tmp/"omp's dir"/oh-my-posh`, expected: `$'/tmp/"omp\'s dir"/oh-my-posh'`},
		{str: `C:/tmp\omp's dir/oh-my-posh.exe`, expected: `$'C:/tmp\\omp\'s dir/oh-my-posh.exe'`},
	}
	for _, tc := range tests {
		assert.Equal(t, tc.expected, QuotePosixStr(tc.str), fmt.Sprintf("QuotePosixStr: %s", tc.str))
	}
}



================================================
FILE: src/shell/cmd.go
================================================
package shell

import (
	_ "embed"
	"strings"
)

//go:embed scripts/omp.lua
var cmdInit string

func (f Feature) Cmd() Code {
	switch f {
	case Transient:
		return "transient_enabled = true"
	case RPrompt:
		return "rprompt_enabled = true"
	case FTCSMarks:
		return "ftcs_marks_enabled = true"
	case Tooltips:
		return "enable_tooltips()"
	case Upgrade:
		return `os.execute(string.format('"%s" upgrade', omp_executable))`
	case Notice:
		return `os.execute(string.format('"%s" notice', omp_executable))`
	case PromptMark, PoshGit, Azure, LineError, Jobs, CursorPositioning, Async:
		fallthrough
	default:
		return ""
	}
}

func escapeLuaStr(str string) string {
	if len(str) == 0 {
		return str
	}
	// We only replace a minimal set of special characters with corresponding escape sequences, without adding surrounding quotes.
	// That way the result can be later quoted with either single or double quotes in a Lua script.
	return strings.NewReplacer(
		`\`, `\\`,
		"'", `\'`,
		`"`, `\"`,
		"\n", `\n`,
		"\r", `\r`,
	).Replace(str)
}



================================================
FILE: src/shell/cmd_test.go
================================================
package shell

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCmdFeatures(t *testing.T) {
	got := allFeatures.Lines(CMD).String("// these are the features")

	want := `// these are the features
enable_tooltips()
transient_enabled = true
ftcs_marks_enabled = true
os.execute(string.format('"%s" upgrade', omp_executable))
os.execute(string.format('"%s" notice', omp_executable))
rprompt_enabled = true`

	assert.Equal(t, want, got)
}

func TestEscapeLuaStr(t *testing.T) {
	tests := []struct {
		str      string
		expected string
	}{
		{str: "", expected: ""},
		{str: `/tmp/"omp's dir"/oh-my-posh`, expected: `/tmp/\"omp\'s dir\"/oh-my-posh`},
		{str: `C:/tmp\omp's dir/oh-my-posh.exe`, expected: `C:/tmp\\omp\'s dir/oh-my-posh.exe`},
	}
	for _, tc := range tests {
		assert.Equal(t, tc.expected, escapeLuaStr(tc.str), fmt.Sprintf("escapeLuaStr: %s", tc.str))
	}
}



================================================
FILE: src/shell/code.go
================================================
package shell

import "strings"

type Code string

const (
	unixFTCSMarks         Code = "_omp_ftcs_marks=1"
	unixCursorPositioning Code = "_omp_cursor_positioning=1"
	unixUpgrade           Code = `"$_omp_executable" upgrade`
	unixNotice            Code = `"$_omp_executable" notice`
)

func (c Code) Indent(spaces int) Code {
	return Code(strings.Repeat(" ", spaces) + string(c))
}

type Lines []Code

func (l Lines) String(script string) string {
	var builder strings.Builder

	builder.WriteString(script)
	builder.WriteString("\n")

	for i, line := range l {
		builder.WriteString(string(line))

		// add newline if not last line
		if i < len(l)-1 {
			builder.WriteString("\n")
		}
	}

	return builder.String()
}



================================================
FILE: src/shell/constants.go
================================================
package shell

const (
	ZSH     = "zsh"
	BASH    = "bash"
	PWSH    = "pwsh"
	FISH    = "fish"
	PWSH5   = "powershell"
	CMD     = "cmd"
	NU      = "nu"
	GENERIC = "shell"
	ELVISH  = "elvish"
	XONSH   = "xonsh"
)



================================================
FILE: src/shell/elvish.go
================================================
package shell

import (
	_ "embed"
)

//go:embed scripts/omp.elv
var elvishInit string

func (f Feature) Elvish() Code {
	switch f {
	case Upgrade:
		return "$_omp_executable upgrade"
	case Notice:
		return "$_omp_executable notice"
	case PromptMark, RPrompt, PoshGit, Azure, LineError, Jobs, CursorPositioning, Tooltips, Transient, FTCSMarks, Async:
		fallthrough
	default:
		return ""
	}
}



================================================
FILE: src/shell/elvish_test.go
================================================
package shell

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestElvishFeatures(t *testing.T) {
	got := allFeatures.Lines(ELVISH).String("// these are the features")

	want := `// these are the features
$_omp_executable upgrade
$_omp_executable notice`

	assert.Equal(t, want, got)
}



================================================
FILE: src/shell/features.go
================================================
package shell

import (
	"strconv"
	"strings"
)

type Feature byte

const (
	Jobs Feature = iota
	Azure
	PoshGit
	LineError
	Tooltips
	Transient
	FTCSMarks
	Upgrade
	Notice
	PromptMark
	RPrompt
	CursorPositioning
	Async
)

type Features []Feature

func (f Features) Lines(shell string) Lines {
	var lines Lines

	for _, feature := range f {
		var code Code

		switch shell {
		case PWSH, PWSH5:
			code = feature.Pwsh()
		case ZSH:
			code = feature.Zsh()
		case BASH:
			code = feature.Bash()
		case ELVISH:
			code = feature.Elvish()
		case FISH:
			code = feature.Fish()
		case CMD:
			code = feature.Cmd()
		case NU:
			code = feature.Nu()
		case XONSH:
			code = feature.Xonsh()
		}

		if len(code) > 0 {
			lines = append(lines, code)
		}
	}

	return lines
}

func (f Features) Hash() string {
	var sb strings.Builder

	for _, feature := range f {
		sb.WriteString(strconv.Itoa(int(feature)))
	}

	return sb.String()
}



================================================
FILE: src/shell/filesystem.go
================================================
package shell

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

var scriptPathCache string

func hasScript(env runtime.Environment) (string, bool) {
	if env.Flags().Debug || env.Flags().Eval {
		return "", false
	}

	path, err := scriptPath(env)
	if err != nil {
		return "", false
	}

	_, err = os.Stat(path)
	if err != nil {
		return "", false
	}

	// check if we have the same context
	if hash, _ := env.Cache().Get(cacheKey(env)); hash != scriptName(env) {
		return "", false
	}

	return path, true
}

func writeScript(env runtime.Environment, script string) (string, error) {
	path, err := scriptPath(env)
	if err != nil {
		return "", err
	}

	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		log.Error(err)
		return "", err
	}

	defer func() {
		_ = f.Close()
	}()

	_, err = f.WriteString(script)
	if err != nil {
		log.Error(err)
		return "", err
	}

	_ = f.Close()

	env.Cache().Set(cacheKey(env), scriptName(env), cache.INFINITE)

	defer func() {
		parent := filepath.Dir(path)
		purgeScripts(env, parent)
	}()

	return path, nil
}

func cacheKey(env runtime.Environment) string {
	return fmt.Sprintf("INITVERSION%s", strings.ToUpper(env.Flags().Shell))
}

func fileName(env runtime.Environment) string {
	return fmt.Sprintf("init.%s.%s", build.Version, env.Flags().ConfigHash)
}

func scriptName(env runtime.Environment) string {
	extension := env.Flags().Shell

	switch env.Flags().Shell {
	case PWSH, PWSH5:
		extension = "ps1"
	case CMD:
		extension = "lua"
	case BASH:
		extension = "sh"
	case ELVISH:
		extension = "elv"
	case XONSH:
		extension = "xsh"
	}

	return fmt.Sprintf("%s.%s", fileName(env), extension)
}

func scriptPath(env runtime.Environment) (string, error) {
	if len(scriptPathCache) != 0 {
		return scriptPathCache, nil
	}

	if env.Flags().Shell != NU {
		scriptPathCache = filepath.Join(cache.Path(), scriptName(env))
		log.Debug("autoload path for non-nu shell:", scriptPathCache)
		return scriptPathCache, nil
	}

	const autoloadDir = "NUAUTOLOADDIR"

	if dir, OK := env.Cache().Get(autoloadDir); OK {
		scriptPathCache = filepath.Join(dir, scriptName(env))
		log.Debug("autoload path for nu from cache:", dir)
		return scriptPathCache, nil
	}

	path, err := env.RunCommand("nu", "-c", "$nu.data-dir | path join vendor autoload")
	if err != nil || len(path) == 0 {
		log.Error(err)
		return "", err
	}

	log.Debug("autoload path for nu:", path)

	// create the path if non-existent
	_, err = os.Stat(path)
	if err != nil {
		log.Debug("autoload path does not exist, creating")
		err = os.MkdirAll(path, 0o700)
	}

	if err != nil {
		log.Debugf("failed to create autoload dir %s: %s", path, err)
		return "", err
	}

	env.Cache().Set(autoloadDir, path, cache.INFINITE)
	scriptPathCache = filepath.Join(path, scriptName(env))
	log.Debug("script path for nu:", scriptPathCache)
	return scriptPathCache, nil
}

func purgeScripts(env runtime.Environment, path string) {
	current := fileName(env)

	files, err := os.ReadDir(path)
	if err != nil {
		log.Error(err)
		return
	}

	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if !strings.HasPrefix(file.Name(), "init.") || strings.HasPrefix(file.Name(), current) {
			continue
		}

		if err := os.Remove(filepath.Join(path, file.Name())); err != nil {
			log.Debugf("failed to remove init script %s: %s", file.Name(), err)
			continue
		}

		log.Debug("removed init script:", file.Name())
	}
}



================================================
FILE: src/shell/fish.go
================================================
package shell

import (
	_ "embed"
	"fmt"
	"strings"
)

//go:embed scripts/omp.fish
var fishInit string

func (f Feature) Fish() Code {
	switch f {
	case Transient:
		return "set --global _omp_transient_prompt 1"
	case FTCSMarks:
		return "set --global _omp_ftcs_marks 1"
	case PromptMark:
		return "set --global _omp_prompt_mark 1"
	case Tooltips:
		return "enable_poshtooltips"
	case Upgrade:
		return unixUpgrade
	case Notice:
		return unixNotice
	case RPrompt, PoshGit, Azure, LineError, Jobs, CursorPositioning, Async:
		fallthrough
	default:
		return ""
	}
}

func quoteFishStr(str string) string {
	if len(str) == 0 {
		return "''"
	}

	return fmt.Sprintf("'%s'", strings.NewReplacer(`\`, `\\`, "'", `\'`).Replace(str))
}



================================================
FILE: src/shell/fish_test.go
================================================
package shell

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFishFeatures(t *testing.T) {
	got := allFeatures.Lines(FISH).String("// these are the features")

	want := `// these are the features
enable_poshtooltips
set --global _omp_transient_prompt 1
set --global _omp_ftcs_marks 1
"$_omp_executable" upgrade
"$_omp_executable" notice
set --global _omp_prompt_mark 1`

	assert.Equal(t, want, got)
}

func TestQuoteFishStr(t *testing.T) {
	tests := []struct {
		str      string
		expected string
	}{
		{str: "", expected: "''"},
		{str: `/tmp/"omp's dir"/oh-my-posh`, expected: `'/tmp/"omp\'s dir"/oh-my-posh'`},
		{str: `C:/tmp\omp's dir/oh-my-posh.exe`, expected: `'C:/tmp\\omp\'s dir/oh-my-posh.exe'`},
	}
	for _, tc := range tests {
		assert.Equal(t, tc.expected, quoteFishStr(tc.str), fmt.Sprintf("quoteFishStr: %s", tc.str))
	}
}



================================================
FILE: src/shell/formats.go
================================================
package shell

type Formats struct {
	Escape     string
	Left       string
	Linechange string
	ClearBelow string
	ClearLine  string

	Title string

	SaveCursorPosition    string
	RestoreCursorPosition string

	Osc99 string
	Osc7  string
	Osc51 string

	EscapeSequences map[rune]string

	HyperlinkStart  string
	HyperlinkCenter string
	HyperlinkEnd    string

	ITermPromptMark string
	ITermCurrentDir string
	ITermRemoteHost string
}

func GetFormats(shell string) *Formats {
	var formats *Formats

	switch shell {
	case BASH:
		formats = &Formats{
			Escape:                "\\[%s\\]",
			Linechange:            "\\[\x1b[%d%s\\]",
			Left:                  "\\[\x1b[%dD\\]",
			ClearBelow:            "\\[\x1b[0J\\]",
			ClearLine:             "\\[\x1b[K\\]",
			SaveCursorPosition:    "\\[\x1b7\\]",
			RestoreCursorPosition: "\\[\x1b8\\]",
			Title:                 "\\[\x1b]0;%s\007\\]",
			HyperlinkStart:        "\\[\x1b]8;;",
			HyperlinkCenter:       "\x1b\\\\\\]",
			HyperlinkEnd:          "\\[\x1b]8;;\x1b\\\\\\]",
			Osc99:                 "\\[\x1b]9;9;%s\x1b\\\\\\]",
			Osc7:                  "\\[\x1b]7;file://%s/%s\x1b\\\\\\]",
			Osc51:                 "\\[\x1b]51;A;%s@%s:%s\x1b\\\\\\]",
			ITermPromptMark:       "\\[$(iterm2_prompt_mark)\\]",
			ITermCurrentDir:       "\\[\x1b]1337;CurrentDir=%s\x07\\]",
			ITermRemoteHost:       "\\[\x1b]1337;RemoteHost=%s@%s\x07\\]",
			EscapeSequences: map[rune]string{
				'\\': `\\`,
			},
		}
	case ZSH:
		formats = &Formats{
			Escape:                "%%{%s%%}",
			Linechange:            "%%{\x1b[%d%s%%}",
			Left:                  "%%{\x1b[%dD%%}",
			ClearBelow:            "%{\x1b[0J%}",
			ClearLine:             "%{\x1b[K%}",
			SaveCursorPosition:    "%{\x1b7%}",
			RestoreCursorPosition: "%{\x1b8%}",
			Title:                 "%%{\x1b]0;%s\007%%}",
			HyperlinkStart:        "%{\x1b]8;;",
			HyperlinkCenter:       "\x1b\\%}",
			HyperlinkEnd:          "%{\x1b]8;;\x1b\\%}",
			Osc99:                 "%%{\x1b]9;9;%s\x1b\\%%}",
			Osc7:                  "%%{\x1b]7;file://%s/%s\x1b\\%%}",
			Osc51:                 "%%{\x1b]51;A%s@%s:%s\x1b\\%%}",
			ITermPromptMark:       "%{$(iterm2_prompt_mark)%}",
			ITermCurrentDir:       "%%{\x1b]1337;CurrentDir=%s\x07%%}",
			ITermRemoteHost:       "%%{\x1b]1337;RemoteHost=%s@%s\x07%%}",
			EscapeSequences: map[rune]string{
				'%': "%%",
			},
		}
	default:
		formats = &Formats{
			Escape:                "%s",
			Linechange:            "\x1b[%d%s",
			Left:                  "\x1b[%dD",
			ClearBelow:            "\x1b[0J",
			ClearLine:             "\x1b[K",
			SaveCursorPosition:    "\x1b7",
			RestoreCursorPosition: "\x1b8",
			Title:                 "\x1b]0;%s\007",
			// when in fish on Linux, it seems hyperlinks ending with \\ print a \
			// unlike on macOS. However, this is a fish bug, so do not try to fix it here:
			// https://github.com/JanDeDobbeleer/oh-my-posh/pull/3288#issuecomment-1369137068
			HyperlinkStart:  "\x1b]8;;",
			HyperlinkCenter: "\x1b\\",
			HyperlinkEnd:    "\x1b]8;;\x1b\\",
			Osc99:           "\x1b]9;9;%s\x1b\\",
			Osc7:            "\x1b]7;file://%s/%s\x1b\\",
			Osc51:           "\x1b]51;A%s@%s:%s\x1b\\",
			ITermCurrentDir: "\x1b]1337;CurrentDir=%s\x07",
			ITermRemoteHost: "\x1b]1337;RemoteHost=%s@%s\x07",
		}
	}

	return formats
}



================================================
FILE: src/shell/init.go
================================================
package shell

import (
	"fmt"
	"os"
	"slices"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

const (
	noExe = "echo \"Unable to find Oh My Posh executable\""
)

var (
	// identify ble.sh by validating the existence of BLE_SESSION_ID
	bashBLEsession bool
)

func getExecutablePath(env runtime.Environment) (string, error) {
	executable, err := os.Executable()
	if err != nil {
		return "", err
	}

	if env.Flags().Strict {
		return path.Base(executable), nil
	}

	// On Windows, it fails when the excutable is called in MSYS2 for example
	// which uses unix style paths to resolve the executable's location.
	// PowerShell knows how to resolve both, so we can swap this without any issue.
	if env.GOOS() == runtime.WINDOWS {
		executable = strings.ReplaceAll(executable, "\\", "/")
	}

	return executable, nil
}

func Init(env runtime.Environment, feats Features) string {
	shell := env.Flags().Shell

	switch shell {
	case ELVISH, PWSH, PWSH5:
		if shell != ELVISH && !env.Flags().Eval {
			return PrintInit(env, feats, nil)
		}

		executable, err := getExecutablePath(env)
		if err != nil {
			return noExe
		}

		var additionalParams string
		if env.Flags().Strict {
			additionalParams += " --strict"
		}

		config := quotePwshOrElvishStr(env.Flags().Config)
		executable = quotePwshOrElvishStr(executable)

		var command string

		switch shell {
		case PWSH, PWSH5:
			command = "(@(& %s init %s --config=%s --print --eval%s) -join \"`n\") | Invoke-Expression"
		case ELVISH:
			command = "eval ((external %s) init %s --config=%s --print%s | slurp)"
		}

		return fmt.Sprintf(command, executable, shell, config, additionalParams)
	case ZSH, BASH, FISH, CMD, XONSH, NU:
		return PrintInit(env, feats, nil)
	default:
		return fmt.Sprintf(`echo "%s is not supported by Oh My Posh"`, shell)
	}
}

func PrintInit(env runtime.Environment, features Features, startTime *time.Time) string {
	shell := env.Flags().Shell
	async := slices.Contains(features, Async)

	if scriptPath, OK := hasScript(env); OK {
		return sourceInit(env, shell, scriptPath, async)
	}

	executable, err := getExecutablePath(env)
	if err != nil {
		return noExe
	}

	configFile := env.Flags().Config
	bashBLEsession = len(env.Getenv("BLE_SESSION_ID")) != 0

	var script string

	switch shell {
	case PWSH, PWSH5:
		executable = quotePwshOrElvishStr(executable)
		configFile = quotePwshOrElvishStr(configFile)
		script = pwshInit
	case ZSH:
		executable = QuotePosixStr(executable)
		configFile = QuotePosixStr(configFile)
		script = zshInit
	case BASH:
		executable = QuotePosixStr(executable)
		configFile = QuotePosixStr(configFile)
		script = bashInit
	case FISH:
		executable = quoteFishStr(executable)
		configFile = quoteFishStr(configFile)
		script = fishInit
	case CMD:
		executable = escapeLuaStr(executable)
		configFile = escapeLuaStr(configFile)
		script = cmdInit
	case NU:
		executable = quoteNuStr(executable)
		configFile = quoteNuStr(configFile)
		script = nuInit
	case ELVISH:
		executable = quotePwshOrElvishStr(executable)
		configFile = quotePwshOrElvishStr(configFile)
		script = elvishInit
	case XONSH:
		executable = quotePythonStr(executable)
		configFile = quotePythonStr(configFile)
		script = xonshInit
	default:
		return fmt.Sprintf("echo \"No initialization script available for %s\"", shell)
	}

	init := strings.NewReplacer(
		"::OMP::", executable,
		"::CONFIG::", configFile,
		"::SHELL::", shell,
	).Replace(script)

	shellScript := features.Lines(shell).String(init)

	if env.Flags().Eval {
		return shellScript
	}

	log.Debug(shellScript)

	scriptPath, err := writeScript(env, shellScript)
	if err != nil {
		return fmt.Sprintf("echo \"Failed to write init script: %s\"", err.Error())
	}

	sourceCommand := sourceInit(env, shell, scriptPath, async)

	if !env.Flags().Debug {
		return sourceCommand
	}

	if len(sourceCommand) != 0 {
		log.Debug("init source command:", sourceCommand)
	}

	return printDebug(env, startTime)
}

func printDebug(env runtime.Environment, startTime *time.Time) string {
	var builder strings.Builder

	builder.WriteString(fmt.Sprintf("\n%s %s\n", log.Text("Init duration:").Green().Bold().Plain(), time.Since(*startTime)))

	builder.WriteString(log.Text("\n\nLogs:\n\n").Green().Bold().Plain().String())
	builder.WriteString(env.Logs())

	return builder.String()
}

func sourceInit(env runtime.Environment, shell, scriptPath string, async bool) string {
	// nushell stores to autoload, no need to return anything
	if shell == NU {
		return ""
	}

	if env.IsCygwin() {
		var err error
		scriptPath, err = env.RunCommand("cygpath", "-u", scriptPath)
		if err != nil {
			log.Error(err)
			return fmt.Sprintf("echo \"Failed to convert Cygwin path due to %s\"", err.Error())
		}
	}

	if async {
		return sourceInitAsync(shell, scriptPath)
	}

	switch shell {
	case PWSH, PWSH5:
		return fmt.Sprintf("& %s", quotePwshOrElvishStr(scriptPath))
	case ZSH, BASH:
		return fmt.Sprintf("source %s", QuotePosixStr(scriptPath))
	case XONSH:
		return fmt.Sprintf("source %s", quotePythonStr(scriptPath))
	case FISH:
		return fmt.Sprintf("source %s", quoteFishStr(scriptPath))
	case ELVISH:
		return fmt.Sprintf("eval (slurp < %s)", quotePwshOrElvishStr(scriptPath))
	case CMD:
		return fmt.Sprintf(`load(io.open('%s', "r"):read("*a"))()`, escapeLuaStr(scriptPath))
	default:
		return fmt.Sprintf("echo \"No source command available for %s\"", shell)
	}
}

func sourceInitAsync(shell, scriptPath string) string {
	switch shell {
	case PWSH, PWSH5:
		return fmt.Sprintf("function prompt() { & %s }", quotePwshOrElvishStr(scriptPath))
	case ZSH:
		return fmt.Sprintf("precmd() { source %s }", QuotePosixStr(scriptPath))
	case BASH:
		command := fmt.Sprintf("source %s", QuotePosixStr(scriptPath))
		return fmt.Sprintf("PROMPT_COMMAND=%s", QuotePosixStr(command))
	case FISH:
		return fmt.Sprintf("function fish_prompt; source %s; end", quoteFishStr(scriptPath))
	default:
		return ""
	}
}



================================================
FILE: src/shell/nu.go
================================================
package shell

import (
	_ "embed"
	"fmt"
	"strings"
)

//go:embed scripts/omp.nu
var nuInit string

func (f Feature) Nu() Code {
	switch f {
	case Transient:
		return `$env.TRANSIENT_PROMPT_COMMAND = {|| _omp_get_prompt transient }`
	case Upgrade:
		return "^$_omp_executable upgrade"
	case Notice:
		return "^$_omp_executable notice"
	case PromptMark, RPrompt, PoshGit, Azure, LineError, Jobs, Tooltips, FTCSMarks, CursorPositioning, Async:
		fallthrough
	default:
		return ""
	}
}

func quoteNuStr(str string) string {
	if len(str) == 0 {
		return "''"
	}

	return fmt.Sprintf(`"%s"`, strings.NewReplacer(`\`, `\\`, `"`, `\"`).Replace(str))
}



================================================
FILE: src/shell/nu_test.go
================================================
package shell

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNuFeatures(t *testing.T) {
	got := allFeatures.Lines(NU).String("// these are the features")

	want := `// these are the features
$env.TRANSIENT_PROMPT_COMMAND = {|| _omp_get_prompt transient }
^$_omp_executable upgrade
^$_omp_executable notice`

	assert.Equal(t, want, got)
}

func TestQuoteNuStr(t *testing.T) {
	tests := []struct {
		str      string
		expected string
	}{
		{str: "", expected: "''"},
		{str: `/tmp/"omp's dir"/oh-my-posh`, expected: `"/tmp/\"omp's dir\"/oh-my-posh"`},
		{str: `C:/tmp\omp's dir/oh-my-posh.exe`, expected: `"C:/tmp\\omp's dir/oh-my-posh.exe"`},
	}
	for _, tc := range tests {
		assert.Equal(t, tc.expected, quoteNuStr(tc.str), fmt.Sprintf("quoteNuStr: %s", tc.str))
	}
}



================================================
FILE: src/shell/pwsh.go
================================================
package shell

import (
	_ "embed"
	"fmt"
	"strings"
)

//go:embed scripts/omp.ps1
var pwshInit string

func (f Feature) Pwsh() Code {
	switch f {
	case Tooltips:
		return "Enable-PoshTooltips"
	case LineError:
		return "Enable-PoshLineError"
	case Transient:
		return "Enable-PoshTransientPrompt"
	case Jobs:
		return "$global:_ompJobCount = $true"
	case Azure:
		return "$global:_ompAzure = $true"
	case PoshGit:
		return "$global:_ompPoshGit = $true"
	case FTCSMarks:
		return "$global:_ompFTCSMarks = $true"
	case Upgrade:
		return "& $global:_ompExecutable upgrade"
	case Notice:
		return "& $global:_ompExecutable notice"
	case PromptMark, RPrompt, CursorPositioning, Async:
		fallthrough
	default:
		return ""
	}
}

func quotePwshOrElvishStr(str string) string {
	if len(str) == 0 {
		return "''"
	}

	return fmt.Sprintf("'%s'", strings.ReplaceAll(str, "'", "''"))
}



================================================
FILE: src/shell/pwsh_test.go
================================================
package shell

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

var allFeatures = Features{Tooltips, LineError, Transient, Jobs, Azure, PoshGit, FTCSMarks, Upgrade, Notice, PromptMark, RPrompt, CursorPositioning}

func TestPwshFeatures(t *testing.T) {
	got := allFeatures.Lines(PWSH).String("")

	want := `
Enable-PoshTooltips
Enable-PoshLineError
Enable-PoshTransientPrompt
$global:_ompJobCount = $true
$global:_ompAzure = $true
$global:_ompPoshGit = $true
$global:_ompFTCSMarks = $true
& $global:_ompExecutable upgrade
& $global:_ompExecutable notice`

	assert.Equal(t, want, got)
}

func TestQuotePwshOrElvishStr(t *testing.T) {
	tests := []struct {
		str      string
		expected string
	}{
		{str: "", expected: "''"},
		{str: `/tmp/"omp's dir"/oh-my-posh`, expected: `'/tmp/"omp''s dir"/oh-my-posh'`},
		{str: `C:/tmp\omp's dir/oh-my-posh.exe`, expected: `'C:/tmp\omp''s dir/oh-my-posh.exe'`},
	}
	for _, tc := range tests {
		assert.Equal(t, tc.expected, quotePwshOrElvishStr(tc.str), fmt.Sprintf("quotePwshOrElvishStr: %s", tc.str))
	}
}



================================================
FILE: src/shell/xonsh.go
================================================
package shell

import (
	_ "embed"
	"fmt"
	"strings"
)

//go:embed scripts/omp.xsh
var xonshInit string

func (f Feature) Xonsh() Code {
	switch f {
	case Upgrade:
		return "@(_omp_executable) upgrade"
	case Notice:
		return "@(_omp_executable) notice"
	case PromptMark, RPrompt, PoshGit, Azure, LineError, Jobs, Tooltips, Transient, CursorPositioning, FTCSMarks, Async:
		fallthrough
	default:
		return ""
	}
}

func quotePythonStr(str string) string {
	if len(str) == 0 {
		return "''"
	}

	return fmt.Sprintf("'%s'", strings.NewReplacer(
		"'", `'"'"'`,
		`\`, `\\`,
		"\n", `\n`,
	).Replace(str))
}



================================================
FILE: src/shell/xonsh_test.go
================================================
package shell

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestXonshFeatures(t *testing.T) {
	got := allFeatures.Lines(XONSH).String("// these are the features")

	want := `// these are the features
@(_omp_executable) upgrade
@(_omp_executable) notice`

	assert.Equal(t, want, got)
}

func TestQuotePythonStr(t *testing.T) {
	tests := []struct {
		str      string
		expected string
	}{
		{str: "", expected: "''"},
		{str: `/tmp/"omp's dir"/oh-my-posh`, expected: `'/tmp/"omp'"'"'s dir"/oh-my-posh'`},
		{str: `C:/tmp\omp's dir/oh-my-posh.exe`, expected: `'C:/tmp\\omp'"'"'s dir/oh-my-posh.exe'`},
	}
	for _, tc := range tests {
		assert.Equal(t, tc.expected, quotePythonStr(tc.str), fmt.Sprintf("quotePythonStr: %s", tc.str))
	}
}



================================================
FILE: src/shell/zsh.go
================================================
package shell

import (
	_ "embed"
)

//go:embed scripts/omp.zsh
var zshInit string

func (f Feature) Zsh() Code {
	switch f {
	case CursorPositioning:
		return unixCursorPositioning
	case Tooltips:
		return "enable_poshtooltips"
	case Transient:
		return "_omp_create_widget zle-line-init _omp_zle-line-init"
	case FTCSMarks:
		return unixFTCSMarks
	case Upgrade:
		return unixUpgrade
	case Notice:
		return unixNotice
	case PromptMark, RPrompt, PoshGit, Azure, LineError, Jobs, Async:
		fallthrough
	default:
		return ""
	}
}



================================================
FILE: src/shell/zsh_test.go
================================================
package shell

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestZshFeatures(t *testing.T) {
	got := allFeatures.Lines(ZSH).String("// these are the features")

	want := `// these are the features
enable_poshtooltips
_omp_create_widget zle-line-init _omp_zle-line-init
_omp_ftcs_marks=1
"$_omp_executable" upgrade
"$_omp_executable" notice
_omp_cursor_positioning=1`

	assert.Equal(t, want, got)
}



================================================
FILE: src/shell/scripts/omp.bash
================================================
export POSH_THEME=::CONFIG::
export POSH_SHELL='bash'
export POSH_SHELL_VERSION=$BASH_VERSION
export POWERLINE_COMMAND='oh-my-posh'
export CONDA_PROMPT_MODIFIER=false
export OSTYPE=$OSTYPE

# disable all known python virtual environment prompts
export VIRTUAL_ENV_DISABLE_PROMPT=1
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# global variables
_omp_start_time=''
_omp_stack_count=0
_omp_execution_time=-1
_omp_no_status=true
_omp_status=0
_omp_pipestatus=0
_omp_executable=::OMP::

export POSH_SESSION_ID=$("$_omp_executable" get uuid)

# switches to enable/disable features
_omp_cursor_positioning=0
_omp_ftcs_marks=0

# start timer on command start
PS0='${_omp_start_time:0:$((_omp_start_time="$(_omp_start_timer)",0))}$(_omp_ftcs_command_start)'

# set secondary prompt
_omp_secondary_prompt=$(
    "$_omp_executable" print secondary \
        --shell=bash \
        --shell-version="$BASH_VERSION"
)

function _omp_set_cursor_position() {
    # not supported in Midnight Commander
    # see https://github.com/JanDeDobbeleer/oh-my-posh/issues/3415
    if [[ $_omp_cursor_positioning == 0 ]] || [[ -v MC_SID ]]; then
        return
    fi

    local oldstty=$(stty -g)
    stty raw -echo min 0

    local COL
    local ROW
    IFS=';' read -rsdR -p $'\E[6n' ROW COL

    stty "$oldstty"

    export POSH_CURSOR_LINE=${ROW#*[}
    export POSH_CURSOR_COLUMN=${COL}
}

function _omp_start_timer() {
    "$_omp_executable" get millis
}

function _omp_ftcs_command_start() {
    if [[ $_omp_ftcs_marks == 1 ]]; then
        printf '\e]133;C\a'
    fi
}

# template function for context loading
function set_poshcontext() {
    return
}

function _omp_get_primary() {
    # Avoid unexpected expansions when we're generating the prompt below.
    shopt -u promptvars
    trap 'shopt -s promptvars' RETURN

    local prompt
    if shopt -oq posix; then
        # Disable in POSIX mode.
        prompt='[NOTICE: Oh My Posh prompt is not supported in POSIX mode]\n\u@\h:\w\$ '
    else
        prompt=$(
            "$_omp_executable" print primary \
                --save-cache \
                --shell=bash \
                --shell-version="$BASH_VERSION" \
                --status="$_omp_status" \
                --pipestatus="${_omp_pipestatus[*]}" \
                --no-status="$_omp_no_status" \
                --execution-time="$_omp_execution_time" \
                --stack-count="$_omp_stack_count" \
                --terminal-width="${COLUMNS-0}" |
                tr -d '\0'
        )
    fi
    echo "${prompt@P}"
}

function _omp_get_secondary() {
    # Avoid unexpected expansions when we're generating the prompt below.
    shopt -u promptvars
    trap 'shopt -s promptvars' RETURN

    if shopt -oq posix; then
        # Disable in POSIX mode.
        echo '> '
    else
        echo "${_omp_secondary_prompt@P}"
    fi
}

function _omp_hook() {
    _omp_status=$? _omp_pipestatus=("${PIPESTATUS[@]}")

    if [[ ${#BP_PIPESTATUS[@]} -ge ${#_omp_pipestatus[@]} ]]; then
        _omp_pipestatus=("${BP_PIPESTATUS[@]}")
    fi

    _omp_stack_count=$((${#DIRSTACK[@]} - 1))

    _omp_execution_time=-1
    if [[ $_omp_start_time ]]; then
        local omp_now=$("$_omp_executable" get millis)
        _omp_execution_time=$((omp_now - _omp_start_time))
        _omp_no_status=false
    fi
    _omp_start_time=''

    if [[ ${_omp_pipestatus[-1]} != "$_omp_status" ]]; then
        _omp_pipestatus=("$_omp_status")
    fi

    set_poshcontext
    _omp_set_cursor_position

    PS1='$(_omp_get_primary)'
    PS2='$(_omp_get_secondary)'

    # Ensure that command substitution works in a prompt string.
    shopt -s promptvars

    return $_omp_status
}

function _omp_install_hook() {
    local cmd
    local prompt_command

    for cmd in "${PROMPT_COMMAND[@]}"; do
        # skip initializing when we're already initialized
        if [[ $cmd = _omp_hook ]]; then
            return
        fi

        # check if the command starts with source, if so, do not add it again
        # this is done to avoid issues with sourcing the same file multiple times
        if [[ $cmd = source* ]]; then
            continue
        fi

        prompt_command+=("$cmd")
    done

    PROMPT_COMMAND=(_omp_hook "${prompt_command[@]}")
}

_omp_install_hook



================================================
FILE: src/shell/scripts/omp.elv
================================================
set-env POSH_THEME ::CONFIG::
set-env POSH_SHELL elvish
set-env POSH_SHELL_VERSION $version
set-env POWERLINE_COMMAND oh-my-posh

# disable all known python virtual environment prompts
set-env VIRTUAL_ENV_DISABLE_PROMPT 1
set-env PYENV_VIRTUALENV_DISABLE_PROMPT 1

var _omp_executable = (external ::OMP::)
var _omp_status = 0
var _omp_no_status = 1
var _omp_execution_time = -1
var _omp_terminal_width = ($_omp_executable get width)

set-env POSH_SESSION_ID ($_omp_executable get uuid)

fn _omp-after-readline-hook {|_|
    set _omp_execution_time = -1

    # Getting the terminal width can fail inside a prompt function, so we do this here.
    set _omp_terminal_width = ($_omp_executable get width)
}

fn _omp-after-command-hook {|m|
    # The command execution time should not be available in the first prompt.
    if (== $_omp_no_status 0) {
        set _omp_execution_time = (printf %.0f (* $m[duration] 1000))
    }

    set _omp_no_status = 0

    var error = $m[error]
    if (is $error $nil) {
        set _omp_status = 0
    } else {
        try {
            set _omp_status = $error[reason][exit-status]
        } catch {
            # built-in commands don't have a status code.
            set _omp_status = 1
        }
    }
}

fn _omp_get_prompt {|type @arguments|
    $_omp_executable print $type ^
        --save-cache ^
        --shell=elvish ^
        --shell-version=$E:POSH_SHELL_VERSION ^
        --status=$_omp_status ^
        --no-status=$_omp_no_status ^
        --execution-time=$_omp_execution_time ^
        --terminal-width=$_omp_terminal_width ^
        $@arguments
}

set edit:after-readline = [ $@edit:after-readline $_omp-after-readline-hook~ ]
set edit:after-command = [ $@edit:after-command $_omp-after-command-hook~ ]
set edit:prompt = {|| _omp_get_prompt primary }
set edit:rprompt = {|| _omp_get_prompt right }



================================================
FILE: src/shell/scripts/omp.fish
================================================
set --export --global POSH_THEME ::CONFIG::
set --export --global POSH_SHELL fish
set --export --global POSH_SHELL_VERSION $FISH_VERSION
set --export --global POWERLINE_COMMAND oh-my-posh
set --export --global CONDA_PROMPT_MODIFIER false

set --global _omp_tooltip_command ''
set --global _omp_current_rprompt ''
set --global _omp_transient 0
set --global _omp_executable ::OMP::
set --global _omp_ftcs_marks 0
set --global _omp_transient_prompt 0
set --global _omp_prompt_mark 0

set --export --global POSH_SESSION_ID ($_omp_executable get uuid)

# disable all known python virtual environment prompts
set --global VIRTUAL_ENV_DISABLE_PROMPT 1
set --global PYENV_VIRTUALENV_DISABLE_PROMPT 1

# We use this to avoid unnecessary CLI calls for prompt repaint.
set --global _omp_new_prompt 1

# template function for context loading
function set_poshcontext
    return
end

function _omp_get_prompt
    if test (count $argv) -eq 0
        return
    end
    $_omp_executable print $argv[1] \
        --save-cache \
        --shell=fish \
        --shell-version=$FISH_VERSION \
        --status=$_omp_status \
        --pipestatus="$_omp_pipestatus" \
        --no-status=$_omp_no_status \
        --execution-time=$_omp_execution_time \
        --stack-count=$_omp_stack_count \
        $argv[2..]
end

# NOTE: Input function calls via `commandline --function` are put into a queue and will not be executed until an outer regular function returns. See https://fishshell.com/docs/current/cmds/commandline.html.

function fish_prompt
    set --local omp_status_temp $status
    set --local omp_pipestatus_temp $pipestatus
    # clear from cursor to end of screen as
    # commandline --function repaint does not do this
    # see https://github.com/fish-shell/fish-shell/issues/8418
    printf \e\[0J
    if test "$_omp_transient" = 1
        _omp_get_prompt transient
        return
    end
    if test "$_omp_new_prompt" = 0
        echo -n "$_omp_current_prompt"
        return
    end
    set --global _omp_status $omp_status_temp
    set --global _omp_pipestatus $omp_pipestatus_temp
    set --global _omp_no_status false
    set --global _omp_execution_time "$CMD_DURATION$cmd_duration"
    set --global _omp_stack_count (count $dirstack)

    # check if variable set, < 3.2 case
    if set --query _omp_last_command && test -z "$_omp_last_command"
        set _omp_execution_time 0
        set _omp_no_status true
    end

    # works with fish >=3.2
    if set --query _omp_last_status_generation && test "$_omp_last_status_generation" = "$status_generation"
        set _omp_execution_time 0
        set _omp_no_status true
    else if test -z "$_omp_last_status_generation"
        # first execution - $status_generation is 0, $_omp_last_status_generation is empty
        set _omp_no_status true
    end

    if set --query status_generation
        set --global _omp_last_status_generation $status_generation
    end

    set_poshcontext

    # validate if the user cleared the screen
    set --local omp_cleared false
    set --local last_command (history search --max 1)

    if test "$last_command" = clear
        set omp_cleared true
    end

    if test $_omp_prompt_mark = 1
        iterm2_prompt_mark
    end

    # The prompt is saved for possible reuse, typically a repaint after clearing the screen buffer.
    set --global _omp_current_prompt (_omp_get_prompt primary --cleared=$omp_cleared | string join \n | string collect)

    echo -n "$_omp_current_prompt"
end

function fish_right_prompt
    if test "$_omp_transient" = 1
        set _omp_transient 0
        return
    end

    # Repaint an existing right prompt.
    if test "$_omp_new_prompt" = 0
        echo -n "$_omp_current_rprompt"
        return
    end

    set _omp_new_prompt 0
    set --global _omp_current_rprompt (_omp_get_prompt right | string join '')

    echo -n "$_omp_current_rprompt"
end

function _omp_postexec --on-event fish_postexec
    # works with fish <3.2
    # pre and postexec not fired for empty command in fish >=3.2
    set --global _omp_last_command $argv
end

function _omp_preexec --on-event fish_preexec
    if test $_omp_ftcs_marks = 1
        echo -ne "\e]133;C\a"
    end
end

# perform cleanup so a new initialization in current session works
if bind \r --user 2>/dev/null | string match -qe _omp_enter_key_handler
    bind -e \r -M default
    bind -e \r -M insert
    bind -e \r -M visual
end

if bind \n --user 2>/dev/null | string match -qe _omp_enter_key_handler
    bind -e \n -M default
    bind -e \n -M insert
    bind -e \n -M visual
end

if bind \cc --user 2>/dev/null | string match -qe _omp_ctrl_c_key_handler
    bind -e \cc -M default
    bind -e \cc -M insert
    bind -e \cc -M visual
end

if bind \x20 --user 2>/dev/null | string match -qe _omp_space_key_handler
    bind -e \x20 -M default
    bind -e \x20 -M insert
end

# tooltip

function _omp_space_key_handler
    commandline --function expand-abbr
    commandline --insert ' '

    # Get the first word of command line as tip.
    set --local tooltip_command (commandline --current-buffer | string trim -l | string split --allow-empty -f1 ' ' | string collect)

    # Ignore an empty/repeated tooltip command.
    if test -z "$tooltip_command" || test "$tooltip_command" = "$_omp_tooltip_command"
        return
    end

    set _omp_tooltip_command $tooltip_command
    set --local tooltip_prompt (_omp_get_prompt tooltip --command=$_omp_tooltip_command | string join '')

    if test -z "$tooltip_prompt"
        return
    end

    # Save the tooltip prompt to avoid unnecessary CLI calls.
    set _omp_current_rprompt $tooltip_prompt
    commandline --function repaint
end

function enable_poshtooltips
    bind \x20 _omp_space_key_handler -M default
    bind \x20 _omp_space_key_handler -M insert
end

# transient prompt

function _omp_enter_key_handler
    if commandline --paging-mode
        commandline --function execute
        return
    end

    if commandline --is-valid || test -z (commandline --current-buffer | string trim -l | string collect)
        set _omp_new_prompt 1
        set _omp_tooltip_command ''

        if test $_omp_transient_prompt = 1
            set _omp_transient 1
            commandline --function repaint
        end
    end

    commandline --function execute
end

function _omp_ctrl_c_key_handler
    if test -z (commandline --current-buffer | string collect)
        return
    end

    # Render a transient prompt on Ctrl-C with non-empty command line buffer.
    set _omp_new_prompt 1
    set _omp_tooltip_command ''

    if test $_omp_transient_prompt = 1
        set _omp_transient 1
        commandline --function repaint
    end

    commandline --function cancel-commandline
    commandline --function repaint
end

bind \r _omp_enter_key_handler -M default
bind \r _omp_enter_key_handler -M insert
bind \r _omp_enter_key_handler -M visual
bind \n _omp_enter_key_handler -M default
bind \n _omp_enter_key_handler -M insert
bind \n _omp_enter_key_handler -M visual
bind \cc _omp_ctrl_c_key_handler -M default
bind \cc _omp_ctrl_c_key_handler -M insert
bind \cc _omp_ctrl_c_key_handler -M visual

# legacy functions
function enable_poshtransientprompt
    return
end

# This can be called by user whenever re-rendering is required.
function omp_repaint_prompt
    set _omp_new_prompt 1
    commandline --function repaint
end



================================================
FILE: src/shell/scripts/omp.lua
================================================
---@diagnostic disable: undefined-global
---@diagnostic disable: undefined-field
---@diagnostic disable: lowercase-global

-- Environment variables
os.setenv('POSH_SHELL', 'cmd')

-- disable all known python virtual environment prompts
os.setenv('VIRTUAL_ENV_DISABLE_PROMPT', '1')
os.setenv('PYENV_VIRTUALENV_DISABLE_PROMPT', '1')

-- Helper functions

local function get_priority_number(name, default)
    local value = os.getenv(name)
    if value == nil and os.envmap ~= nil and type(os.envmap) == 'table' then
        value = os.envmap[name]
    end
    local num = tonumber(value)
    if num ~= nil then
        return num
    end
    return default
end

-- Environment variables

local function environment_onbeginedit()

end

-- Local state

local endedit_time = 0
local last_duration = 0
local rprompt_enabled = false
local transient_enabled = false
local ftcs_marks_enabled = false
local no_exit_code = true

local cached_prompt = {}
-- Fields in cached_prompt:
--      .cwd            = Current working directory of prompt.
--      .left           = Left side prompt.
--      .right          = Right side prompt.
--      .tooltip        = Tooltip prompt.
--      .tip_command    = Command for which to produce a tooltip.
--      .coroutine      = Coroutine for the tooltip prompt.

local function cache_onbeginedit()
    local cwd = os.getcwd()
    local old_cache = cached_prompt

    -- Start a new table for the new edit/prompt session.
    cached_prompt = { cwd = cwd }

    -- Copy the cached left/right prompt strings if the cwd hasn't changed.
    -- IMPORTANT OPTIMIZATION:  This keeps the prompt highly responsive, except
    -- when changing the current working directory.
    if old_cache.cwd == cwd then
        cached_prompt.left = old_cache.left
        cached_prompt.right = old_cache.right
    end
end

-- Executable

local omp_executable = '::OMP::'

-- Configuration

os.setenv('POSH_THEME', '::CONFIG::')
os.setenv('POSH_SHELL_VERSION', string.format('clink v%s.%s.%s.%s', clink.version_major, clink.version_minor, clink.version_patch, clink.version_commit))

-- Execution helpers

local function can_async()
    if (clink.version_encoded or 0) >= 10030001 then
        return settings.get('prompt.async')
    end
end

local function run_posh_command(command)
    command = string.format('""%s" %s"', omp_executable, command)
    local _, is_main = coroutine.running()
    local f, msg
    if is_main then
        f, msg = io.popen(command)
    else
        f, msg = io.popenyield(command)
    end
    local output = ''
    if f then
        output = f:read('*a')
        f:close()
    else
        if msg and msg:sub(1, #command) == command then
            msg = msg:sub(#command + 1)
            msg = msg:gsub('^: +', '')
            if msg == '' then
                msg = nil
            end
        end
        local cwd = os.getcwd()
        cwd = cwd and (' in ' .. cwd) or ''
        msg = msg and (' (' .. msg .. ')') or ''
        log.info(string.format('Unable to run oh-my-posh%s%s.', msg, cwd))
        log.info(command)
    end
    return output
end

-- SESSION ID

os.setenv('POSH_SESSION_ID', run_posh_command('get uuid'))

-- Duration functions

local function os_clock_millis()
    -- Clink v1.2.30 has a fix for Lua's os.clock() implementation failing after
    -- the program has been running more than 24 days.  In older versions, call
    -- OMP to get the time in milliseconds.
    if (clink.version_encoded or 0) >= 10020030 then
        return math.floor(os.clock() * 1000)
    end
    return run_posh_command('get millis')
end

local function duration_onbeginedit()
    last_duration = 0
    if endedit_time ~= 0 then
        local beginedit_time = tonumber(os_clock_millis())
        if beginedit_time then
            local elapsed = beginedit_time - endedit_time
            if elapsed >= 0 then
                last_duration = elapsed
            end
        end
    end
end

local function duration_onendedit(input)
    endedit_time = 0
    -- For an empty command, the execution time should not be evaluated.
    if string.gsub(input, '^%s*(.-)%s*$', '%1') ~= '' then
        local m = tonumber(os_clock_millis())
        if m then
            endedit_time = m
        end
    end
end

-- Prompt functions

local function execution_time_option()
    if last_duration ~= nil then
        return '--execution-time=' .. last_duration
    end
    return ''
end

local function status_option()
    if os.geterrorlevel ~= nil and settings.get('cmd.get_errorlevel') then
        return '--status=' .. os.geterrorlevel()
    end
    return ''
end

local function no_status_option()
    if no_exit_code then
        return '--no-status'
    end
    return ''
end

local function get_posh_prompt(prompt_type, ...)
    os.setenv('POSH_CURSOR_LINE', console.getnumlines())
    local command = table.concat({
        'print',
        prompt_type,
        '--save-cache',
        '--shell=cmd',
        status_option(),
        no_status_option(),
        execution_time_option(),
        ...
    }, ' ')
    return run_posh_command(command)
end

local function set_posh_tooltip(tip_command)
    if tip_command ~= '' and tip_command ~= cached_prompt.tip_command then
        -- Escape special characters properly, if any.
        local escaped_tip_command = string.gsub(tip_command, '(\\+)"', '%1%1"'):gsub('(\\+)$', '%1%1'):gsub('"', '\\"'):gsub('([&<>%(%)@|%^])', '^%1'):gsub('%%', '%%%%')
        local command_option = string.format('--command "%s"', escaped_tip_command)
        local tooltip = get_posh_prompt('tooltip', command_option)
        -- Do not cache an empty tooltip.
        if tooltip == '' then
            return
        end
        cached_prompt.tip_command = tip_command
        cached_prompt.tooltip = tooltip
    end
end

local function display_cached_prompt()
    -- Use what's already cached; avoid running oh-my-posh.
    cached_prompt.only_use_cache = true
    clink.refilterprompt()
    cached_prompt.only_use_cache = nil
end

local function command_executed_mark(input)
    if string.gsub(input, '^%s*(.-)%s*$', '%1') ~= '' then
        no_exit_code = false
    end
    if ftcs_marks_enabled then
        clink.print('\x1b]133;C\007', NONL)
    end
end

-- set priority lower than z.lua
-- https://github.com/skywind3000/z.lua/pull/125/commits/48a77adf3575952b2e951aa820a1ce11ed4ce56b
local zl_prompt_priority = get_priority_number('_ZL_CLINK_PROMPT_PRIORITY', 0)
local p = clink.promptfilter(zl_prompt_priority + 1)
function p:filter(prompt)
    local need_left = true

    -- Get a left prompt immediately if nothing is available yet.
    if not cached_prompt.left then
        cached_prompt.left = get_posh_prompt('primary')
        need_left = false
    end

    -- Get left/right prompts asynchronously, if possible.
    if not cached_prompt.only_use_cache then
        if can_async() then
            -- IMPORTANT:  Defining this function inline makes sure it only
            -- updates the same cached_prompt table that existed when the
            -- function was defined.  That way if a new prompt starts (which
            -- discards the old coroutine) and a new coroutine starts, the old
            -- coroutine won't stomp on the new cached_prompt table.
            clink.promptcoroutine(function()
                -- Generate left prompt, if needed.
                if need_left then
                    cached_prompt.left = get_posh_prompt('primary')
                end
                -- Generate right prompt, if needed.
                if rprompt_enabled then
                    if need_left then
                        -- Show left side while right side is being generated.
                        display_cached_prompt()
                    end
                    cached_prompt.right = get_posh_prompt('right')
                else
                    cached_prompt.right = nil
                end
            end)
        else
            if need_left then
                cached_prompt.left = get_posh_prompt('primary')
            end
            if rprompt_enabled then
                cached_prompt.right = get_posh_prompt('right')
            end
        end
    end

    if cached_prompt.left == nil or cached_prompt.left == '' then
        cached_prompt.left = string.format('Unable to get prompt text; see clink.log file for details.\n%s>', os.getcwd() or '')
    end

    return cached_prompt.left
end

function p:rightfilter(prompt)
    -- Return cached tooltip if available, otherwise return cached rprompt.
    -- Returning false as the second return value halts further prompt
    -- filtering, to keep other things from overriding what we generated.
    return (cached_prompt.tooltip or cached_prompt.right), false
end

function p:transientfilter(prompt)
    if not transient_enabled then
        return nil
    end

    prompt = get_posh_prompt('transient')

    if prompt == '' then
        prompt = nil
    end

    return prompt
end

function p:transientrightfilter(prompt)
    return '', false
end

-- Event handlers

local function builtin_modules_onbeginedit()
    cache_onbeginedit()
    duration_onbeginedit()
    environment_onbeginedit()
end

local function builtin_modules_onendedit(input)
    duration_onendedit(input)
    command_executed_mark(input)
end

if clink.onbeginedit ~= nil and clink.onendedit ~= nil then
    clink.onbeginedit(builtin_modules_onbeginedit)
    clink.onendedit(builtin_modules_onendedit)
end

-- Tooltips

function _omp_space_keybinding(rl_buffer)
    -- Insert space first, in case it might affect the tip word, e.g. it could
    -- split "gitcommit" into "git commit".
    rl_buffer:insert(' ')
    -- Get the first word of command line as tip.
    local tip_command = rl_buffer:getbuffer():gsub('^%s*(.-)%s*$', '%1')

    -- Generate a tooltip asynchronously (via coroutine) if available, otherwise
    -- generate a tooltip immediately.
    if not can_async() then
        set_posh_tooltip(tip_command)
        clink.refilterprompt()
    elseif cached_prompt.coroutine then
        -- No action needed; a tooltip coroutine is already running.
    else
        cached_prompt.coroutine = coroutine.create(function()
            set_posh_tooltip(tip_command)
            if cached_prompt.coroutine == coroutine.running() then
                cached_prompt.coroutine = nil
            end
            display_cached_prompt()
        end)
    end
end

local function enable_tooltips()
    if not rl.setbinding then
        return
    end

    rl.setbinding(' ', [["luafunc:_omp_space_keybinding"]], 'emacs')
end



================================================
FILE: src/shell/scripts/omp.nu
================================================
# make sure we have the right prompt render correctly
if ($env.config? | is-not-empty) {
    $env.config = ($env.config | upsert render_right_prompt_on_last_line true)
}

$env.POWERLINE_COMMAND = 'oh-my-posh'
$env.POSH_THEME = (echo ::CONFIG::)
$env.PROMPT_INDICATOR = ""
$env.POSH_SESSION_ID = (random uuid)
$env.POSH_SHELL = "nu"
$env.POSH_SHELL_VERSION = (version | get version)

# disable all known python virtual environment prompts
$env.VIRTUAL_ENV_DISABLE_PROMPT = 1
$env.PYENV_VIRTUALENV_DISABLE_PROMPT = 1

let _omp_executable: string = (echo ::OMP::)

# PROMPTS

def --wrapped _omp_get_prompt [
    type: string,
    ...args: string
] {
    mut execution_time = -1
    mut no_status = true
    # We have to do this because the initial value of `$env.CMD_DURATION_MS` is always `0823`, which is an official setting.
    # See https://github.com/nushell/nushell/discussions/6402#discussioncomment-3466687.
    if $env.CMD_DURATION_MS != '0823' {
        $execution_time = $env.CMD_DURATION_MS
        $no_status = false
    }

    (
        ^$_omp_executable print $type
            --save-cache
            --shell=nu
            $"--shell-version=($env.POSH_SHELL_VERSION)"
            $"--status=($env.LAST_EXIT_CODE)"
            $"--no-status=($no_status)"
            $"--execution-time=($execution_time)"
            $"--terminal-width=((term size).columns)"
            $"--job-count=(job list | length)"
            ...$args
    )
}

$env.PROMPT_MULTILINE_INDICATOR = (
    ^$_omp_executable print secondary
        --shell=nu
        $"--shell-version=($env.POSH_SHELL_VERSION)"
)

$env.PROMPT_COMMAND = {||
    # hack to set the cursor line to 1 when the user clears the screen
    # this obviously isn't bulletproof, but it's a start
    mut clear = false
    if $nu.history-enabled {
        $clear = (history | is-empty) or ((history | last 1 | get 0.command) == "clear")
    }

    if ($env.SET_POSHCONTEXT? | is-not-empty) {
        do --env $env.SET_POSHCONTEXT
    }

    _omp_get_prompt primary $"--cleared=($clear)"
}

$env.PROMPT_COMMAND_RIGHT = {|| _omp_get_prompt right }



================================================
FILE: src/shell/scripts/omp.ps1
================================================
# remove any existing dynamic module of OMP
if ($null -ne (Get-Module -Name "oh-my-posh-core")) {
    Remove-Module -Name "oh-my-posh-core" -Force
}

# disable all known python virtual environment prompts
$env:VIRTUAL_ENV_DISABLE_PROMPT = 1
$env:PYENV_VIRTUALENV_DISABLE_PROMPT = 1

# Helper functions which need to be defined before the module is loaded
# See https://github.com/JanDeDobbeleer/oh-my-posh/discussions/2300
function global:Get-PoshStackCount {
    $locations = Get-Location -Stack
    if ($locations) {
        return $locations.Count
    }
    return 0
}

# global enablers
$global:_ompJobCount = $false
$global:_ompFTCSMarks = $false
$global:_ompPoshGit = $false
$global:_ompAzure = $false
$global:_ompExecutable = ::OMP::

$env:POSH_SESSION_ID = (& $global:_ompExecutable get uuid)

New-Module -Name "oh-my-posh-core" -ScriptBlock {
    # Check `ConstrainedLanguage` mode.
    $script:ConstrainedLanguageMode = $ExecutionContext.SessionState.LanguageMode -eq "ConstrainedLanguage"

    # Prompt related backup.
    $script:OriginalPromptFunction = $Function:prompt
    $script:OriginalContinuationPrompt = (Get-PSReadLineOption).ContinuationPrompt
    $script:OriginalPromptText = (Get-PSReadLineOption).PromptText

    $script:NoExitCode = $true
    $script:ErrorCode = 0
    $script:ExecutionTime = 0
    $script:ShellName = "::SHELL::"
    $script:PSVersion = $PSVersionTable.PSVersion.ToString()
    $script:TransientPrompt = $false
    $script:TooltipCommand = ''
    $script:JobCount = 0

    $env:POWERLINE_COMMAND = "oh-my-posh"
    $env:POSH_SHELL = "pwsh"
    $env:POSH_SHELL_VERSION = $script:PSVersion
    $env:CONDA_PROMPT_MODIFIER = $false

    # set the default theme
    if (::CONFIG:: -and (Test-Path -LiteralPath ::CONFIG::)) {
        $env:POSH_THEME = (Resolve-Path -Path ::CONFIG::).ProviderPath
    }

    function Invoke-Utf8Posh {
        param([string[]]$Arguments = @())

        if ($script:ConstrainedLanguageMode) {
            $output = Invoke-Expression "& `$global:_ompExecutable `$Arguments 2>&1"
            $output -join "`n"
            return
        }

        $Process = New-Object System.Diagnostics.Process
        $StartInfo = $Process.StartInfo
        $StartInfo.FileName = $global:_ompExecutable
        if ($StartInfo.ArgumentList.Add) {
            # ArgumentList is supported in PowerShell 6.1 and later (built on .NET Core 2.1+)
            # ref-1: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.argumentlist?view=net-6.0
            # ref-2: https://docs.microsoft.com/en-us/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.2#net-framework-vs-net-core
            $Arguments | ForEach-Object -Process { $StartInfo.ArgumentList.Add($_) }
        }
        else {
            # escape arguments manually in lower versions, refer to https://docs.microsoft.com/en-us/previous-versions/17w5ykft(v=vs.85)
            $escapedArgs = $Arguments | ForEach-Object {
                # escape N consecutive backslash(es), which are followed by a double quote, to 2N consecutive ones
                $s = $_ -replace '(\\+)"', '$1$1"'
                # escape N consecutive backslash(es), which are at the end of the string, to 2N consecutive ones
                $s = $s -replace '(\\+)$', '$1$1'
                # escape double quotes
                $s = $s -replace '"', '\"'
                # quote the argument
                "`"$s`""
            }
            $StartInfo.Arguments = $escapedArgs -join ' '
        }

        $StartInfo.StandardErrorEncoding = $StartInfo.StandardOutputEncoding = [System.Text.Encoding]::UTF8
        $StartInfo.RedirectStandardError = $StartInfo.RedirectStandardInput = $StartInfo.RedirectStandardOutput = $true
        $StartInfo.UseShellExecute = $false
        if ($PWD.Provider.Name -eq 'FileSystem') {
            # make sure we're in a valid directory
            # if not, go back HOME
            if (-not (Test-Path -LiteralPath $PWD)) {
                Write-Host "Unable to find the current directory, falling back to $HOME" -ForegroundColor Red
                Set-Location $HOME
            }
            $StartInfo.WorkingDirectory = $PWD.ProviderPath
        }

        $StartInfo.CreateNoWindow = $true
        [void]$Process.Start()

        # Remove deadlock potential on Windows.
        $stdoutTask = $Process.StandardOutput.ReadToEndAsync()
        $stderrTask = $Process.StandardError.ReadToEndAsync()

        $Process.WaitForExit()
        $stderr = $stderrTask.Result.Trim()
        if ($stderr) {
            $Host.UI.WriteErrorLine($stderr)
        }

        $stdoutTask.Result
    }

    function Get-NonFSWD {
        # We only need to return a non-filesystem working directory.
        if ($PWD.Provider.Name -ne 'FileSystem') {
            return $PWD.ToString()
        }
    }

    function Get-TerminalWidth {
        $terminalWidth = $Host.UI.RawUI.WindowSize.Width
        # Set a sane default when the value can't be retrieved.
        if (-not $terminalWidth) {
            return 0
        }
        $terminalWidth
    }

    function Set-TransientPrompt {
        $previousOutputEncoding = [Console]::OutputEncoding
        try {
            $script:TransientPrompt = $true
            [Console]::OutputEncoding = [Text.Encoding]::UTF8
            [Microsoft.PowerShell.PSConsoleReadLine]::InvokePrompt()
        }
        catch [System.ArgumentOutOfRangeException] { }
        finally {
            [Console]::OutputEncoding = $previousOutputEncoding
        }
    }

    function Set-PoshPromptType {
        if ($script:TransientPrompt -eq $true) {
            $script:PromptType = "transient"
            $script:TransientPrompt = $false
            return
        }

        # for details about the trick to detect a debugging context, see these comments:
        # 1) https://github.com/JanDeDobbeleer/oh-my-posh/issues/2483#issuecomment-1175761456
        # 2) https://github.com/JanDeDobbeleer/oh-my-posh/issues/2502#issuecomment-1179968052
        # 3) https://github.com/JanDeDobbeleer/oh-my-posh/issues/5153
        if ($Host.Runspace.Debugger.InBreakpoint) {
            $script:PromptType = "debug"
            return
        }

        $script:PromptType = "primary"

        if ($global:_ompJobCount) {
            $script:JobCount = (Get-Job -State Running).Count
        }

        if ($global:_ompAzure) {
            try {
                $env:POSH_AZURE_SUBSCRIPTION = Get-AzContext | ConvertTo-Json
            }
            catch {}
        }

        if ($global:_ompPoshGit) {
            try {
                $global:GitStatus = Get-GitStatus
                $env:POSH_GIT_STATUS = $global:GitStatus | ConvertTo-Json
            }
            catch {}
        }
    }

    function Update-PoshErrorCode {
        $lastHistory = Get-History -ErrorAction Ignore -Count 1

        # error code should be updated only when a non-empty command is run
        if (($null -eq $lastHistory) -or ($script:LastHistoryId -eq $lastHistory.Id)) {
            $script:ExecutionTime = 0
            $script:NoExitCode = $true
            return
        }

        $script:NoExitCode = $false
        $script:LastHistoryId = $lastHistory.Id
        $script:ExecutionTime = ($lastHistory.EndExecutionTime - $lastHistory.StartExecutionTime).TotalMilliseconds
        if ($script:OriginalLastExecutionStatus) {
            $script:ErrorCode = 0
            return
        }

        $invocationInfo = try {
            # retrieve info of the most recent error
            $global:Error | Where-Object { $_.GetType().Name -eq 'ErrorRecord' } | Select-Object -First 1 -ExpandProperty InvocationInfo
        }
        catch { $null }

        # Check if the error occurred in the current command scope
        if ($null -ne $invocationInfo -and
            $invocationInfo.HistoryId -eq $lastHistory.Id) {
            $script:ErrorCode = 1
            return
        }

        if ($script:OriginalLastExitCode -is [int] -and $script:OriginalLastExitCode -ne 0) {
            # native app exit code
            $script:ErrorCode = $script:OriginalLastExitCode
            return
        }
    }

    function Get-PoshPrompt {
        param(
            [string]$Type,
            [string[]]$Arguments
        )
        $nonFSWD = Get-NonFSWD
        $stackCount = Get-PoshStackCount
        $terminalWidth = Get-TerminalWidth
        Invoke-Utf8Posh @(
            "print", $Type
            "--save-cache"
            "--shell=$script:ShellName"
            "--shell-version=$script:PSVersion"
            "--status=$script:ErrorCode"
            "--no-status=$script:NoExitCode"
            "--execution-time=$script:ExecutionTime"
            "--pswd=$nonFSWD"
            "--stack-count=$stackCount"
            "--terminal-width=$terminalWidth"
            "--job-count=$script:JobCount"
            if ($Arguments) { $Arguments }
        )
    }

    $promptFunction = {
        # store the orignal last command execution status
        if ($global:NVS_ORIGINAL_LASTEXECUTIONSTATUS -is [bool]) {
            # make it compatible with NVS auto-switching, if enabled
            $script:OriginalLastExecutionStatus = $global:NVS_ORIGINAL_LASTEXECUTIONSTATUS
        }
        else {
            $script:OriginalLastExecutionStatus = $?
        }
        # store the orignal last exit code
        $script:OriginalLastExitCode = $global:LASTEXITCODE

        Set-PoshPromptType

        if ($script:PromptType -ne 'transient') {
            Update-PoshErrorCode
        }

        Set-PoshContext $script:ErrorCode

        # set the cursor positions, they are zero based so align with other platforms
        $env:POSH_CURSOR_LINE = $Host.UI.RawUI.CursorPosition.Y + 1
        $env:POSH_CURSOR_COLUMN = $Host.UI.RawUI.CursorPosition.X + 1

        $output = Get-PoshPrompt $script:PromptType
        # make sure PSReadLine knows if we have a multiline prompt
        Set-PSReadLineOption -ExtraPromptLineCount (($output | Measure-Object -Line).Lines - 1)

        # The output can be multi-line, joining them ensures proper rendering.
        $output = $output -join "`n"

        if ($script:PromptType -eq 'transient') {
            # Workaround to prevent a command from eating the tail of a transient prompt, when we're at the end of the line.
            $command = ''
            [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$command, [ref]$null)
            if ($command) {
                $output += "  `b`b"
            }
        }

        $output

        # remove any posh-git status
        $env:POSH_GIT_STATUS = $null

        # restore the orignal last exit code
        $global:LASTEXITCODE = $script:OriginalLastExitCode
    }

    $Function:prompt = $promptFunction

    # set secondary prompt
    Set-PSReadLineOption -ContinuationPrompt ((Invoke-Utf8Posh @("print", "secondary", "--shell=$script:ShellName")) -join "`n")

    ### Exported Functions ###

    function Set-PoshContext([bool]$originalStatus) {}

    function Enable-PoshTooltips {
        if ($script:ConstrainedLanguageMode) {
            return
        }

        Set-PSReadLineKeyHandler -Key Spacebar -BriefDescription 'OhMyPoshSpaceKeyHandler' -ScriptBlock {
            param([ConsoleKeyInfo]$key)
            [Microsoft.PowerShell.PSConsoleReadLine]::SelfInsert($key)
            try {
                $command = ''
                [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$command, [ref]$null)
                # Get the first word of command line as tip.
                $command = $command.TrimStart().Split(' ', 2) | Select-Object -First 1

                # Ignore an empty/repeated tooltip command.
                if (!$command -or ($command -eq $script:TooltipCommand)) {
                    return
                }

                $script:TooltipCommand = $command

                $output = (Get-PoshPrompt "tooltip" @(
                        "--column=$($Host.UI.RawUI.CursorPosition.X)"
                        "--command=$command"
                    )) -join ''
                if (!$output) {
                    return
                }

                Write-Host $output -NoNewline

                # Workaround to prevent the text after cursor from disappearing when the tooltip is printed.
                [Microsoft.PowerShell.PSConsoleReadLine]::Insert(' ')
                [Microsoft.PowerShell.PSConsoleReadLine]::Undo()
            }
            finally {}
        }
    }

    function Enable-PoshTransientPrompt {
        if ($script:ConstrainedLanguageMode) {
            return
        }

        Set-PSReadLineKeyHandler -Key Enter -BriefDescription 'OhMyPoshEnterKeyHandler' -ScriptBlock {
            try {
                $parseErrors = $null
                [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$null, [ref]$null, [ref]$parseErrors, [ref]$null)
                $executingCommand = $parseErrors.Count -eq 0
                if ($executingCommand) {
                    $script:TooltipCommand = ''
                    Set-TransientPrompt
                }
            }
            finally {
                [Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine()
                if ($global:_ompFTCSMarks -and $executingCommand) {
                    # Write FTCS_COMMAND_EXECUTED after accepting the input - it should still happen before execution
                    Write-Host "$([char]27)]133;C$([char]7)" -NoNewline
                }
            }
        }

        Set-PSReadLineKeyHandler -Key Ctrl+c -BriefDescription 'OhMyPoshCtrlCKeyHandler' -ScriptBlock {
            try {
                $start = $null
                [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref]$start, [ref]$null)
                # only render a transient prompt when no text is selected
                if ($start -eq -1) {
                    $script:TooltipCommand = ''
                    Set-TransientPrompt
                }
            }
            finally {
                [Microsoft.PowerShell.PSConsoleReadLine]::CopyOrCancelLine()
            }
        }
    }

    function Enable-PoshLineError {
        $validLine = (Invoke-Utf8Posh @("print", "valid", "--shell=$script:ShellName")) -join "`n"
        $errorLine = (Invoke-Utf8Posh @("print", "error", "--shell=$script:ShellName")) -join "`n"
        Set-PSReadLineOption -PromptText $validLine, $errorLine
    }

    # perform cleanup on removal so a new initialization in current session works
    if (!$script:ConstrainedLanguageMode) {
        $ExecutionContext.SessionState.Module.OnRemove += {
            Remove-Item Function:Get-PoshStackCount -ErrorAction SilentlyContinue

            $Function:prompt = $script:OriginalPromptFunction

            (Get-PSReadLineOption).ContinuationPrompt = $script:OriginalContinuationPrompt
            (Get-PSReadLineOption).PromptText = $script:OriginalPromptText

            if ((Get-PSReadLineKeyHandler Spacebar).Function -eq 'OhMyPoshSpaceKeyHandler') {
                Remove-PSReadLineKeyHandler Spacebar
            }

            if ((Get-PSReadLineKeyHandler Enter).Function -eq 'OhMyPoshEnterKeyHandler') {
                Set-PSReadLineKeyHandler Enter -Function AcceptLine
            }

            if ((Get-PSReadLineKeyHandler Ctrl+c).Function -eq 'OhMyPoshCtrlCKeyHandler') {
                Set-PSReadLineKeyHandler Ctrl+c -Function CopyOrCancelLine
            }
        }
    }

    Export-ModuleMember -Function @(
        "Set-PoshContext"
        "Enable-PoshTooltips"
        "Enable-PoshTransientPrompt"
        "Enable-PoshLineError"
        "prompt"
    )
} | Import-Module -Global



================================================
FILE: src/shell/scripts/omp.xsh
================================================
$POWERLINE_COMMAND = "oh-my-posh"
$POSH_THEME = ::CONFIG::
$POSH_SHELL = "xonsh"
$POSH_SHELL_VERSION = $XONSH_VERSION

# disable all known python virtual environment prompts
$VIRTUAL_ENV_DISABLE_PROMPT = 1
$PYENV_VIRTUALENV_DISABLE_PROMPT = 1

_omp_executable = ::OMP::
_omp_history_length = 0

$POSH_SESSION_ID = $(@(_omp_executable) get uuid)

def _omp_get_context():
    global _omp_history_length
    status = 0
    duration = -1

    if __xonsh__.history:
        last_cmd = __xonsh__.history[-1]
        if last_cmd:
            status = last_cmd.rtn

        history_length = len(__xonsh__.history)
        if history_length != _omp_history_length:
            _omp_history_length = history_length
            duration = round((last_cmd.ts[1] - last_cmd.ts[0]) * 1000)

    return status, duration

def _omp_get_prompt(type: str, *args: str):
    status, duration = _omp_get_context()
    return $(
        @(_omp_executable) print @(type) \
            --save-cache \
            --shell=xonsh \
            --shell-version=$XONSH_VERSION \
            --status=@(status) \
            --execution-time=@(duration) \
            @(args)
    )

def _omp_get_primary():
    return _omp_get_prompt('primary')

def _omp_get_right():
    return _omp_get_prompt('right')

$PROMPT = _omp_get_primary
# When the primary prompt has multiple lines, the right prompt is always displayed on the first line, which is inconsistent with other supported shells.
# The behavior is controlled by Xonsh, and there is no way to change it.
$RIGHT_PROMPT = _omp_get_right



================================================
FILE: src/shell/scripts/omp.zsh
================================================
export POSH_THEME=::CONFIG::
export POSH_SHELL='zsh'
export POSH_SHELL_VERSION=$ZSH_VERSION
export POWERLINE_COMMAND='oh-my-posh'
export CONDA_PROMPT_MODIFIER=false
export ZLE_RPROMPT_INDENT=0
export OSTYPE=$OSTYPE

# disable all known python virtual environment prompts
export VIRTUAL_ENV_DISABLE_PROMPT=1
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

_omp_executable=::OMP::
_omp_tooltip_command=''

export POSH_SESSION_ID=$("$_omp_executable" get uuid)

# switches to enable/disable features
_omp_cursor_positioning=0
_omp_ftcs_marks=0

# set secondary prompt
_omp_secondary_prompt=$($_omp_executable print secondary --shell=zsh)

function _omp_set_cursor_position() {
  # not supported in Midnight Commander
  # see https://github.com/JanDeDobbeleer/oh-my-posh/issues/3415
  if [[ $_omp_cursor_positioning == 0 ]] || [[ -v MC_SID ]]; then
    return
  fi

  local oldstty=$(stty -g)
  stty raw -echo min 0

  local pos
  echo -en '\033[6n' >/dev/tty
  read -r -d R pos
  pos=${pos:2} # strip off the esc-[
  local parts=(${(s:;:)pos})

  stty $oldstty

  export POSH_CURSOR_LINE=${parts[1]}
  export POSH_CURSOR_COLUMN=${parts[2]}
}

# template function for context loading
function set_poshcontext() {
  return
}

function _omp_preexec() {
  if [[ $_omp_ftcs_marks == 1 ]]; then
    printf '\033]133;C\007'
  fi

  _omp_start_time=$($_omp_executable get millis)
}

function _omp_precmd() {
  _omp_status=$?
  _omp_pipestatus=(${pipestatus[@]})
  _omp_job_count=${#jobstates}
  _omp_stack_count=${#dirstack[@]}
  _omp_execution_time=-1
  _omp_no_status=true
  _omp_tooltip_command=''

  if [ $_omp_start_time ]; then
    local omp_now=$($_omp_executable get millis)
    _omp_execution_time=$(($omp_now - $_omp_start_time))
    _omp_no_status=false
  fi

  if [[ ${_omp_pipestatus[-1]} != "$_omp_status" ]]; then
    _omp_pipestatus=("$_omp_status")
  fi

  set_poshcontext
  _omp_set_cursor_position

  # We do this to avoid unexpected expansions in a prompt string.
  unsetopt PROMPT_SUBST
  unsetopt PROMPT_BANG

  # Ensure that escape sequences work in a prompt string.
  setopt PROMPT_PERCENT

  PS2=$_omp_secondary_prompt
  eval "$(_omp_get_prompt primary --eval)"

  unset _omp_start_time
}

# add hook functions
autoload -Uz add-zsh-hook
add-zsh-hook precmd _omp_precmd
add-zsh-hook preexec _omp_preexec

# Prevent incorrect behaviors when the initialization is executed twice in current session.
function _omp_cleanup() {
  local omp_widgets=(
    self-insert
    zle-line-init
  )
  local widget
  for widget in "${omp_widgets[@]}"; do
    if [[ ${widgets[._omp_original::$widget]} ]]; then
      # Restore the original widget.
      zle -A ._omp_original::$widget $widget
    elif [[ ${widgets[$widget]} = user:_omp_* ]]; then
      # Delete the OMP-defined widget.
      zle -D $widget
    fi
  done
}
_omp_cleanup
unset -f _omp_cleanup

function _omp_get_prompt() {
  local type=$1
  local args=("${@[2,-1]}")
  $_omp_executable print $type \
    --save-cache \
    --shell=zsh \
    --shell-version=$ZSH_VERSION \
    --status=$_omp_status \
    --pipestatus="${_omp_pipestatus[*]}" \
    --no-status=$_omp_no_status \
    --execution-time=$_omp_execution_time \
    --job-count=$_omp_job_count \
    --stack-count=$_omp_stack_count \
    --terminal-width="${COLUMNS-0}" \
    ${args[@]}
}

function _omp_render_tooltip() {
  if [[ $KEYS != ' ' ]]; then
    return
  fi

  # Get the first word of command line as tip.
  local tooltip_command=${${(MS)BUFFER##[[:graph:]]*}%%[[:space:]]*}

  # Ignore an empty/repeated tooltip command.
  if [[ -z $tooltip_command ]] || [[ $tooltip_command = "$_omp_tooltip_command" ]]; then
    return
  fi

  _omp_tooltip_command="$tooltip_command"
  local tooltip=$(_omp_get_prompt tooltip --command="$tooltip_command")
  if [[ -z $tooltip ]]; then
    return
  fi

  RPROMPT=$tooltip
  zle .reset-prompt
}

function _omp_zle-line-init() {
  [[ $CONTEXT == start ]] || return 0

  # Start regular line editor.
  (( $+zle_bracketed_paste )) && print -r -n - $zle_bracketed_paste[1]
  zle .recursive-edit
  local -i ret=$?
  (( $+zle_bracketed_paste )) && print -r -n - $zle_bracketed_paste[2]

  # We need this workaround because when the `filler` is set,
  # there will be a redundant blank line below the transient prompt if the input is empty.
  local terminal_width_option
  if [[ -z $BUFFER ]]; then
    terminal_width_option="--terminal-width=$((${COLUMNS-0} - 1))"
  fi
  eval "$(_omp_get_prompt transient --eval $terminal_width_option)"
  zle .reset-prompt

  if ((ret)); then
    # TODO (fix): this is not equal to sending a SIGINT, since the status code ($?) is set to 1 instead of 130.
    zle .send-break
  fi

  # Exit the shell if we receive EOT.
  if [[ $KEYS == $'\4' ]]; then
    exit
  fi

  zle .accept-line
  return $ret
}

# Helper function for calling a widget before the specified OMP function.
function _omp_call_widget() {
  # The name of the OMP function.
  local omp_func=$1
  # The remainder are the widget to call and potential arguments.
  shift

  zle "$@" && shift 2 && $omp_func "$@"
}

# Create a widget with the specified OMP function.
# An existing widget will be preserved and decorated with the function.
function _omp_create_widget() {
  # The name of the widget to create/decorate.
  local widget=$1
  # The name of the OMP function.
  local omp_func=$2

  case ${widgets[$widget]:-''} in
  # Already decorated: do nothing.
  user:_omp_decorated_*) ;;

  # Non-existent: just create it.
  '')
    zle -N $widget $omp_func
    ;;

  # User-defined or builtin: backup and decorate it.
  *)
    # Back up the original widget. The leading dot in widget name is to work around bugs when used with zsh-syntax-highlighting in Zsh v5.8 or lower.
    zle -A $widget ._omp_original::$widget
    eval "_omp_decorated_${(q)widget}() { _omp_call_widget ${(q)omp_func} ._omp_original::${(q)widget} -- \"\$@\" }"
    zle -N $widget _omp_decorated_$widget
    ;;
  esac
}

function enable_poshtooltips() {
  local widget=${$(bindkey ' '):2}

  if [[ -z $widget ]]; then
    widget=self-insert
  fi

  _omp_create_widget $widget _omp_render_tooltip
}

# legacy functions
function enable_poshtransientprompt() {}



================================================
FILE: src/template/cache.go
================================================
package template

import (
	"encoding/json"
	"strconv"
	"strings"
	"time"

	"github.com/jandedobbeleer/oh-my-posh/src/build"
	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/path"
)

var (
	Cache *cache.Template
)

func loadCache(vars maps.Simple, aliases *maps.Config) {
	if !env.Flags().IsPrimary {
		// Load the template cache for a non-primary prompt before rendering any templates.
		if OK := restoreCache(env); OK {
			return
		}
	}

	Cache = new(cache.Template)

	Cache.Root = env.Root()
	Cache.Shell = aliases.GetShellName(env.Shell())
	Cache.ShellVersion = env.Flags().ShellVersion
	Cache.Code, _ = env.StatusCodes()
	Cache.WSL = env.IsWsl()
	Cache.Segments = maps.NewConcurrent()
	Cache.PromptCount = env.Flags().PromptCount
	Cache.Var = make(map[string]any)
	Cache.Jobs = env.Flags().JobCount
	Cache.Version = build.Version

	if vars != nil {
		Cache.Var = vars
	}

	pwd := env.Pwd()
	Cache.PWD = path.ReplaceHomeDirPrefixWithTilde(pwd)

	Cache.AbsolutePWD = pwd
	if env.IsWsl() {
		Cache.AbsolutePWD, _ = env.RunCommand("wslpath", "-m", pwd)
	}

	env.Flags().AbsolutePWD = Cache.AbsolutePWD
	Cache.PSWD = env.Flags().PSWD

	Cache.Folder = path.Base(pwd)
	if env.GOOS() == runtime.WINDOWS && strings.HasSuffix(Cache.Folder, ":") {
		Cache.Folder += `\`
	}

	Cache.UserName = aliases.GetUserName(env.User())
	if host, err := env.Host(); err == nil {
		Cache.HostName = aliases.GetHostName(host)
	}

	goos := env.GOOS()
	Cache.OS = goos
	if goos == runtime.LINUX {
		Cache.OS = env.Platform()
	}

	val := env.Getenv("SHLVL")
	if shlvl, err := strconv.Atoi(val); err == nil {
		Cache.SHLVL = shlvl
	}
}

func restoreCache(env runtime.Environment) bool {
	defer log.Trace(time.Now())

	val, OK := env.Session().Get(cache.TEMPLATECACHE)
	if !OK {
		return false
	}

	var tmplCache cache.Template
	err := json.Unmarshal([]byte(val), &tmplCache)
	if err != nil {
		log.Error(err)
		return false
	}

	Cache = &tmplCache
	Cache.Segments = Cache.SegmentsCache.ToConcurrent()

	return true
}

func SaveCache() {
	// only store this when in a primary prompt
	// and when we have any extra prompt in the config
	canSave := env.Flags().IsPrimary && env.Flags().HasExtra
	if !canSave {
		return
	}

	Cache.SegmentsCache = Cache.Segments.ToSimple()

	templateCache, err := json.Marshal(Cache)
	if err == nil {
		env.Session().Set(cache.TEMPLATECACHE, string(templateCache), cache.ONEDAY)
	}
}



================================================
FILE: src/template/compare.go
================================================
package template

import (
	"errors"
	"strconv"
)

func toIntOrZero(e any) int {
	if value, err := toInt(e); err == nil {
		return value
	}

	return 0
}

func toInt(integer any) (int, error) {
	switch seconds := integer.(type) {
	default:
		return 0, errors.New("invalid integer type")
	case string:
		return strconv.Atoi(seconds)
	case int:
		return seconds, nil
	case int64:
		return int(seconds), nil
	case uint64:
		return int(seconds), nil
	case float64:
		return int(seconds), nil
	}
}

func toFloat64(e any) float64 {
	if val, OK := e.(float64); OK {
		return val
	}
	if val, OK := e.(int); OK {
		return float64(val)
	}
	if val, OK := e.(int64); OK {
		return float64(val)
	}
	return 0
}

func gt(e1, e2 any) bool {
	if val, OK := e1.(int); OK {
		return val > toIntOrZero(e2)
	}
	if val, OK := e1.(int64); OK {
		return val > int64(toIntOrZero(e2))
	}
	if val, OK := e1.(float64); OK {
		return val > toFloat64(e2)
	}
	return false
}

func lt(e1, e2 any) bool {
	return gt(e2, e1)
}



================================================
FILE: src/template/compare_test.go
================================================
package template

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGt(t *testing.T) {
	cases := []struct {
		E1       any
		E2       any
		Case     string
		Expected bool
	}{
		{Case: "Float vs int", Expected: false, E1: float64(3), E2: 4},
		{Case: "Int vs float", Expected: false, E1: 3, E2: float64(4)},
		{Case: "Int vs Int", Expected: false, E1: 3, E2: 4},
		{Case: "Int64 vs Int", Expected: false, E1: int64(3), E2: 4},
		{Case: "Float vs Float", Expected: false, E1: float64(3), E2: float64(4)},
		{Case: "Float vs String", Expected: true, E1: float64(3), E2: "test"},
		{Case: "Int vs String", Expected: true, E1: 3, E2: "test"},
		{Case: "String vs String", Expected: false, E1: "test", E2: "test"},
	}

	for _, tc := range cases {
		got := gt(tc.E1, tc.E2)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestLt(t *testing.T) {
	cases := []struct {
		E1       any
		E2       any
		Case     string
		Expected bool
	}{
		{Case: "Float vs int", Expected: true, E1: float64(3), E2: 4},
		{Case: "Int vs float", Expected: true, E1: 3, E2: float64(4)},
		{Case: "Int vs Int", Expected: true, E1: 3, E2: 4},
		{Case: "Float vs Float", Expected: true, E1: float64(3), E2: float64(4)},
		{Case: "Float vs String", Expected: false, E1: float64(3), E2: "test"},
		{Case: "String vs String", Expected: false, E1: "test", E2: "test"},
	}

	for _, tc := range cases {
		got := lt(tc.E1, tc.E2)
		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/template/files.go
================================================
package template

import (
	"os"
	"os/exec"
	"path/filepath"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

func glob(pattern string) (bool, error) {
	matches, err := filepath.Glob(pattern)
	if err != nil {
		return false, err
	}
	return len(matches) > 0, nil
}

func readFile(path string) string {
	content, _ := os.ReadFile(path)
	return string(content)
}

func stat(path string) string {
	fullPath, err := exec.LookPath(path)
	if err != nil {
		log.Error(err)
		return ""
	}

	return fullPath
}



================================================
FILE: src/template/files_test.go
================================================
package template

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestGlob(t *testing.T) {
	cases := []struct {
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{Case: "valid glob", Expected: "OK", Template: `{{ if glob "*.go" }}OK{{ else }}NOK{{ end }}`},
		{Case: "invalid glob", Expected: "NOK", Template: `{{ if glob "package.json" }}OK{{ else }}NOK{{ end }}`},
		{Case: "multiple glob", Expected: "NOK", Template: `{{ if or (glob "package.json") (glob "node_modules") }}OK{{ else }}NOK{{ end }}`},
	}

	env := &mock.Environment{}
	env.On("Shell").Return("foo")

	Cache = new(cache.Template)
	Init(env, nil, nil)

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}



================================================
FILE: src/template/func_map.go
================================================
package template

import (
	"path/filepath"
	"text/template"

	"github.com/Masterminds/sprig/v3"
)

func funcMap() template.FuncMap {
	funcMap := map[string]any{
		"secondsRound": secondsRound,
		"url":          url,
		"path":         filePath,
		"glob":         glob,
		"matchP":       matchP,
		"findP":        findP,
		"replaceP":     replaceP,
		"gt":           gt,
		"lt":           lt,
		"random":       random,
		"reason":       GetReasonFromStatus,
		"hresult":      hresult,
		"trunc":        trunc,
		"truncE":       TruncE,
		"readFile":     readFile,
		"stat":         stat,
		"dir":          filepath.Dir,
		"base":         filepath.Base,
	}

	for key, fun := range sprig.TxtFuncMap() {
		if _, ok := funcMap[key]; !ok {
			funcMap[key] = fun
		}
	}

	return template.FuncMap(funcMap)
}



================================================
FILE: src/template/init.go
================================================
package template

import (
	"sync"

	"github.com/jandedobbeleer/oh-my-posh/src/maps"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

const (
	// Errors to show when the template handling fails
	InvalidTemplate   = "invalid template text"
	IncorrectTemplate = "unable to create text based on template"

	globalRef = ".$"

	elvish = "elvish"
	xonsh  = "xonsh"
)

var (
	shell       string
	env         runtime.Environment
	knownFields sync.Map
)

func Init(environment runtime.Environment, vars maps.Simple, aliases *maps.Config) {
	env = environment
	shell = env.Shell()
	knownFields = sync.Map{}

	renderPool = sync.Pool{
		New: func() any {
			return newTextPoolObject()
		},
	}

	if Cache != nil {
		return
	}

	loadCache(vars, aliases)
}



================================================
FILE: src/template/link.go
================================================
package template

import (
	"fmt"
	link "net/url"
	"slices"
)

// url builds an hyperlink if url is not empty, otherwise returns the text only
func url(text, url string) (string, error) {
	unsupported := []string{elvish, xonsh}
	if slices.Contains(unsupported, shell) {
		return text, nil
	}

	if url == "" {
		return text, nil
	}
	_, err := link.ParseRequestURI(url)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("<LINK>%s<TEXT>%s</TEXT></LINK>", url, text), nil
}

func filePath(text, path string) (string, error) {
	unsupported := []string{elvish, xonsh}
	if slices.Contains(unsupported, shell) {
		return text, nil
	}

	return fmt.Sprintf("<LINK>file:%s<TEXT>%s</TEXT></LINK>", path, text), nil
}



================================================
FILE: src/template/link_test.go
================================================
package template

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestUrl(t *testing.T) {
	cases := []struct {
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{Case: "valid url", Expected: "<LINK>https://ohmyposh.dev<TEXT>link</TEXT></LINK>", Template: `{{ url "link" "https://ohmyposh.dev" }}`},
		{Case: "invalid url", Expected: "", Template: `{{ url "link" "Foo" }}`, ShouldError: true},
	}

	env := &mock.Environment{}
	env.On("Shell").Return("foo")

	Cache = new(cache.Template)

	Init(env, nil, nil)

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}

func TestPath(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Template string
	}{
		{Case: "valid path", Expected: "<LINK>file:/test/test<TEXT>link</TEXT></LINK>", Template: `{{ path "link" "/test/test" }}`},
	}

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, _ := tmpl.Render()
		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}



================================================
FILE: src/template/list.go
================================================
package template

import (
	"strings"
)

type Logic string

const (
	FirstMatch Logic = "first_match"
	Join       Logic = "join"
)

type List []string

func (l List) Empty() bool {
	return len(l) == 0
}

func (l List) Resolve(context any, defaultValue string, logic Logic) string {
	if l.Empty() {
		return defaultValue
	}

	switch logic {
	case FirstMatch:
		return l.FirstMatch(context, defaultValue)
	case Join:
		fallthrough
	default:
		return l.Join(context)
	}
}

func (l List) Join(context any) string {
	if len(l) == 0 {
		return ""
	}

	txtTemplate := &Text{
		Context: context,
	}

	var buffer strings.Builder
	for _, tmpl := range l {
		txtTemplate.Template = tmpl
		value, err := txtTemplate.Render()
		if err != nil || len(strings.TrimSpace(value)) == 0 {
			continue
		}

		buffer.WriteString(value)
	}

	return buffer.String()
}

func (l List) FirstMatch(context any, defaultValue string) string {
	if len(l) == 0 {
		return defaultValue
	}

	txtTemplate := &Text{
		Context: context,
	}

	for _, tmpl := range l {
		txtTemplate.Template = tmpl
		value, err := txtTemplate.Render()
		if err != nil || len(strings.TrimSpace(value)) == 0 {
			continue
		}
		return value
	}

	return defaultValue
}



================================================
FILE: src/template/numbers.go
================================================
package template

import "fmt"

func hresult(number int) string {
	return fmt.Sprintf("0x%04X", uint32(number))
}



================================================
FILE: src/template/numbers_test.go
================================================
package template

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestHResult(t *testing.T) {
	cases := []struct {
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{Case: "Windows exit code", Expected: "0x8A150014", Template: `{{ hresult -1978335212 }}`},
		{Case: "Not a number", Template: `{{ hresult "no number" }}`, ShouldError: true},
	}

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}



================================================
FILE: src/template/random.go
================================================
package template

import (
	"errors"
	"fmt"
	"math/rand"
	"reflect"
)

func random(list any) (string, error) {
	v := reflect.ValueOf(list)

	if v.Kind() != reflect.Slice && v.Kind() != reflect.Array {
		return "", errors.New("input must be a slice or array")
	}

	if v.Len() == 0 {
		return "", errors.New("input slice or array is empty")
	}

	return fmt.Sprintf("%v", v.Index(rand.Intn(v.Len()))), nil
}



================================================
FILE: src/template/random_test.go
================================================
package template

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestRandom(t *testing.T) {
	cases := []struct {
		Input       any
		Case        string
		ShouldError bool
	}{
		{
			Case:  "valid slice",
			Input: []int{1, 2, 3, 4, 5},
		},
		{
			Case:  "valid array",
			Input: [5]int{1, 2, 3, 4, 5},
		},
		{
			Case:        "empty slice",
			Input:       []int{},
			ShouldError: true,
		},
		{
			Case:        "not a slice or array",
			Input:       "not a slice",
			ShouldError: true,
		},
		{
			Case:  "valid string slice",
			Input: []string{"a", "b", "c"},
		},
		{
			Case:  "valid float slice",
			Input: []float64{1.1, 2.2, 3.3},
		},
		{
			Case: "interface with multiple types",
			Input: []any{
				"a",
				1,
				true,
			},
		},
		{
			Case:  "valid struct slice",
			Input: []struct{ Name string }{{Name: "Alice"}, {Name: "Bob"}},
		},
	}

	for _, tc := range cases {
		result, err := random(tc.Input)
		if tc.ShouldError {
			assert.Error(t, err, tc.Case)
		} else {
			assert.NoError(t, err, tc.Case)
			assert.Contains(t, fmt.Sprintf("%v", tc.Input), result, tc.Case)
		}
	}
}



================================================
FILE: src/template/reason.go
================================================
package template

import "strconv"

func GetReasonFromStatus(code int) string { //nolint: gocyclo
	switch code {
	case 1:
		return "ERROR"
	case 2, 64:
		return "USAGE"
	case 65:
		return "DATAERR"
	case 66:
		return "NOINPUT"
	case 67:
		return "NOUSER"
	case 68:
		return "NOHOST"
	case 69:
		return "UNAVAILABLE"
	case 70:
		return "SOFTWARE"
	case 71:
		return "OSERR"
	case 72:
		return "OSFILE"
	case 73:
		return "CANTCREAT"
	case 74:
		return "IOERR"
	case 75:
		return "TEMPFAIL"
	case 76:
		return "PROTOCOL"
	case 77, 126:
		return "NOPERM"
	case 78:
		return "CONFIG"
	case 127:
		return "NOTFOUND"
	case 128 + 1:
		return "SIGHUP"
	case 128 + 2:
		return "SIGINT"
	case 128 + 3:
		return "SIGQUIT"
	case 128 + 4:
		return "SIGILL"
	case 128 + 5:
		return "SIGTRAP"
	case 128 + 6:
		return "SIGIOT"
	case 128 + 7:
		return "SIGBUS"
	case 128 + 8:
		return "SIGFPE"
	case 128 + 9:
		return "SIGKILL"
	case 128 + 10:
		return "SIGUSR1"
	case 128 + 11:
		return "SIGSEGV"
	case 128 + 12:
		return "SIGUSR2"
	case 128 + 13:
		return "SIGPIPE"
	case 128 + 14:
		return "SIGALRM"
	case 128 + 15:
		return "SIGTERM"
	case 128 + 16:
		return "SIGSTKFLT"
	case 128 + 17:
		return "SIGCHLD"
	case 128 + 18:
		return "SIGCONT"
	case 128 + 19:
		return "SIGSTOP"
	case 128 + 20:
		return "SIGTSTP"
	case 128 + 21:
		return "SIGTTIN"
	case 128 + 22:
		return "SIGTTOU"
	default:
		return strconv.Itoa(code)
	}
}



================================================
FILE: src/template/regex.go
================================================
package template

import "github.com/jandedobbeleer/oh-my-posh/src/regex"

func matchP(pattern, text string) bool {
	return regex.MatchString(pattern, text)
}

func replaceP(pattern, text, replaceText string) string {
	return regex.ReplaceAllString(pattern, text, replaceText)
}

func findP(pattern, text string, index int) string {
	match, _ := regex.FindStringMatch(pattern, text, index)
	return match
}



================================================
FILE: src/template/render_pool.go
================================================
package template

import (
	"bytes"
	"errors"
	"strings"
	"sync"
	"text/template"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

type Data any

type context struct {
	Data
	Getenv func(string) string
	cache.Template
}

func (c *context) init(t *Text) {
	c.Data = t.Context
	c.Getenv = env.Getenv
	c.Template = *Cache
}

var renderPool sync.Pool

type renderer struct {
	template *template.Template
	context  *context
	buffer   bytes.Buffer
}

func newTextPoolObject() *renderer {
	return &renderer{
		template: template.New("cache").Funcs(funcMap()),
		context:  &context{},
	}
}

func (t *renderer) release() {
	t.buffer.Reset()
	t.context.Data = nil
	t.template.New("cache")
	renderPool.Put(t)
}

func (t *renderer) execute(text *Text) (string, error) {
	tmpl, err := t.template.Parse(text.Template)
	if err != nil {
		log.Error(err)
		return "", errors.New(InvalidTemplate)
	}

	t.context.init(text)

	err = tmpl.Execute(&t.buffer, t.context)
	if err != nil {
		log.Error(err)
		return "", errors.New(IncorrectTemplate)
	}

	output := t.buffer.String()

	// issue with missingkey=zero ignored for map[string]any
	// https://github.com/golang/go/issues/24963
	output = strings.ReplaceAll(output, "<no value>", "")

	return output, nil
}



================================================
FILE: src/template/round.go
================================================
package template

import (
	"strconv"
	"strings"
)

func secondsRound(seconds any) string {
	s, err := toInt(seconds)
	if err != nil {
		return err.Error()
	}
	if s == 0 {
		return "0s"
	}
	neg := s < 0
	if neg {
		s = -s
	}

	var (
		second = 1
		minute = 60
		hour   = 3600
		day    = 86400
		month  = 2629800
		year   = 31560000
	)
	var builder strings.Builder
	writePart := func(unit int, name string) {
		if s >= unit {
			builder.WriteString(" ")
			builder.WriteString(strconv.Itoa(s / unit))
			builder.WriteString(name)
			s %= unit
		}
	}
	writePart(year, "y")
	writePart(month, "mo")
	writePart(day, "d")
	writePart(hour, "h")
	writePart(minute, "m")
	writePart(second, "s")
	return strings.Trim(builder.String(), " ")
}



================================================
FILE: src/template/round_test.go
================================================
package template

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestRoundSeconds(t *testing.T) {
	cases := []struct {
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{Case: "int - 1 second", Expected: "1s", Template: "{{ secondsRound 1 }}"},
		{Case: "double - 1 second", Expected: "1s", Template: "{{ secondsRound 1.1 }}"},
		{Case: "int - 1 minute", Expected: "1m", Template: "{{ secondsRound 60 }}"},
		{Case: "int - 2 minutes 30 seconds", Expected: "2m 30s", Template: "{{ secondsRound 150 }}"},
		{Case: "int - 1 day 2 minutes 30 seconds", Expected: "1d 2m 30s", Template: "{{ secondsRound 86550 }}"},
		{Case: "double - 1 day 2 minutes 30 seconds", Expected: "1d 2m 30s", Template: "{{ secondsRound 86550.555 }}"},
		{Case: "int - 1 month 1 day 2 minutes 30 seconds", Expected: "1mo 1d 2m 30s", Template: "{{ secondsRound 2716350 }}"},
		{Case: "int - 1 year 1 month 1 day 2 minutes 30 seconds", Expected: "1y 1mo 1d 2m 30s", Template: "{{ secondsRound 34276350 }}"},
		{Case: "error", Expected: "", Template: "{{ secondsRound foo }}", ShouldError: true},
	}

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}



================================================
FILE: src/template/strings.go
================================================
package template

import "unicode/utf8"

func trunc(length any, s string) string {
	c, err := toInt(length)
	if err != nil {
		panic(err)
	}

	runes := []rune(s)
	if len(runes) <= c {
		return s
	}

	if c < 0 {
		return string(runes[len(runes)+c:])
	}

	return string(runes[0:c])
}

func TruncE(length any, s string) string {
	c, err := toInt(length)
	if err != nil {
		panic(err)
	}

	truncateSymbol := "…"

	if c == 0 {
		return truncateSymbol
	}

	lenTruncateSymbol := utf8.RuneCountInString(truncateSymbol)
	if c < 0 {
		lenTruncateSymbol *= -1
	}
	c -= lenTruncateSymbol

	runes := []rune(s)
	if len(runes) <= c {
		return s
	}

	if c < 0 {
		return truncateSymbol + string(runes[len(runes)+c:])
	}

	return string(runes[0:c]) + truncateSymbol
}



================================================
FILE: src/template/strings_test.go
================================================
package template

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestTrunc(t *testing.T) {
	cases := []struct {
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{Case: "5 length integer", Expected: "Hello", Template: `{{ trunc 5 "Hello World" }}`},
		{Case: "5 length stringteger", Expected: "Hello", Template: `{{ trunc "5" "Hello World" }}`},
		{Case: "5 length float", Expected: "Hello", Template: `{{ trunc 5.0 "Hello World" }}`},
		{Case: "invalid", ShouldError: true, Template: `{{ trunc "foo" "Hello World" }}`},
		{Case: "smaller than length", Expected: "Hello World", Template: `{{ trunc 20 "Hello World" }}`},
		{Case: "negative", Expected: "ld", Template: `{{ trunc -2 "Hello World" }}`},
	}

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}

func TestTruncE(t *testing.T) {
	cases := []struct {
		name      string
		length    any
		input     string
		expected  string
		wantPanic bool
	}{
		{
			name:     "normal truncation",
			length:   5,
			input:    "hello world",
			expected: "hell…",
		},
		{
			name:     "no truncation needed",
			length:   20,
			input:    "short",
			expected: "short",
		},
		{
			name:     "negative length",
			length:   -3,
			input:    "hello world",
			expected: "…ld",
		},
		{
			name:     "zero length",
			length:   0,
			input:    "hello",
			expected: "…",
		},
		{
			name:     "unicode characters",
			length:   4,
			input:    "你好世界",
			expected: "你好世…",
		},
		{
			name:     "empty string",
			length:   5,
			input:    "",
			expected: "",
		},
		{
			name:      "invalid length type",
			length:    "invalid",
			input:     "hello",
			wantPanic: true,
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			if tc.wantPanic {
				defer func() {
					if r := recover(); r == nil {
						t.Error("expected panic but got none")
					}
				}()
			}

			result := TruncE(tc.length, tc.input)
			if result != tc.expected {
				t.Errorf("expected %q but got %q", tc.expected, result)
			}
		})
	}
}



================================================
FILE: src/template/text.go
================================================
package template

import (
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"
	"unicode"

	"github.com/jandedobbeleer/oh-my-posh/src/log"
)

type Text struct {
	Context  Data
	Template string
}

func (t *Text) Render() (string, error) {
	defer log.Trace(time.Now(), t.Template)

	if !strings.Contains(t.Template, "{{") || !strings.Contains(t.Template, "}}") {
		return t.Template, nil
	}

	t.patchTemplate()

	renderer := renderPool.Get().(*renderer)
	defer renderer.release()

	return renderer.execute(t)
}

func (t *Text) patchTemplate() {
	fields := &fields{}
	fields.init(t.Context)

	var result, property string
	var inProperty, inTemplate bool
	for i, char := range t.Template {
		// define start or end of template
		if !inTemplate && char == '{' {
			if i-1 >= 0 && rune(t.Template[i-1]) == '{' {
				inTemplate = true
			}
		} else if inTemplate && char == '}' {
			if i-1 >= 0 && rune(t.Template[i-1]) == '}' {
				inTemplate = false
			}
		}

		if !inTemplate {
			result += string(char)
			continue
		}

		switch char {
		case '.':
			var lastChar rune
			if len(result) > 0 {
				lastChar = rune(result[len(result)-1])
			}
			// only replace if we're in a valid property start
			// with a space, { or ( character
			switch lastChar {
			case ' ', '{', '(':
				property += string(char)
				inProperty = true
			default:
				result += string(char)
			}
		case ' ', '}', ')': // space or }
			if !inProperty {
				result += string(char)
				continue
			}

			switch {
			case strings.HasPrefix(property, ".Segments") && !strings.HasSuffix(property, ".Contains"):
				// as we can't provide a clean way to access the list
				// of segments, we need to replace the property with
				// the list of segments so they can be accessed directly
				parts := strings.Split(property, ".")
				if len(parts) > 3 {
					property = fmt.Sprintf(`(.Segments.MustGet "%s").%s`, parts[2], strings.Join(parts[3:], "."))
				} else {
					property = fmt.Sprintf(`(.Segments.MustGet "%s")`, parts[2])
				}
				result += property
				// property = strings.Replace(property, ".Segments", ".Segments.ToSimple", 1)
				// result += property
			case strings.HasPrefix(property, ".Env."):
				// we need to replace the property with the getEnv function
				// so we can access the environment variables directly
				property = strings.TrimPrefix(property, ".Env.")
				result += fmt.Sprintf(`(call .Getenv "%s")`, property)
			default:
				// check if we have the same property in Data
				// and replace it with the Data property so it
				// can take precedence
				if fields.hasField(property) {
					property = ".Data" + property
				}

				// remove the global reference so we can use it directly
				property = strings.TrimPrefix(property, globalRef)
				result += property
			}

			property = ""
			result += string(char)
			inProperty = false
		default:
			if inProperty {
				property += string(char)
				continue
			}
			result += string(char)
		}
	}

	// return the result and remaining unresolved property
	t.Template = result + property

	log.Debug(t.Template)
}

type fields struct {
	values map[string]bool
	sync.RWMutex
}

func (f *fields) init(data any) {
	if data == nil {
		return
	}

	if f.values == nil {
		f.values = make(map[string]bool)
	}

	val := reflect.TypeOf(data)
	switch val.Kind() { //nolint:exhaustive
	case reflect.Struct:
		name := val.Name()

		// check if we already know the fields of this struct
		if kf, OK := knownFields.Load(name); OK {
			f.append(kf)
			return
		}

		// Get struct fields and check embedded types
		fieldsNum := val.NumField()
		for i := range fieldsNum {
			field := val.Field(i)
			f.add(field.Name)

			// If this is an embedded field, get its methods too
			if !field.Anonymous {
				continue
			}

			embeddedType := field.Type

			// Recursively check if the embedded type is also a struct
			if embeddedType.Kind() == reflect.Struct {
				f.init(reflect.New(embeddedType).Elem().Interface())
			}
		}

		// Get pointer methods
		ptrType := reflect.PointerTo(val)
		methodsNum := ptrType.NumMethod()
		for i := range methodsNum {
			f.add(ptrType.Method(i).Name)
		}

		knownFields.Store(name, f)
	case reflect.Map:
		m, ok := data.(map[string]any)
		if !ok {
			return
		}
		for key := range m {
			f.add(key)
		}
	case reflect.Ptr:
		f.init(reflect.ValueOf(data).Elem().Interface())
	}
}

func (f *fields) append(values any) {
	if values == nil {
		return
	}

	fields, ok := values.(*fields)
	if !ok {
		return
	}

	f.Lock()
	fields.RLock()

	defer func() {
		f.Unlock()
		fields.RUnlock()
	}()

	for key := range fields.values {
		f.values[key] = true
	}
}

func (f *fields) add(field string) {
	if len(field) == 0 {
		return
	}

	r := []rune(field)[0]
	if !unicode.IsUpper(r) {
		return
	}

	f.Lock()
	defer f.Unlock()

	f.values[field] = true
}

func (f *fields) hasField(field string) bool {
	field = strings.TrimPrefix(field, ".")

	// get the first part of the field
	splitted := strings.Split(field, ".")
	field = splitted[0]

	f.RLock()
	defer f.RUnlock()

	_, ok := f.values[field]
	return ok
}



================================================
FILE: src/template/text_test.go
================================================
package template

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/cache"
	"github.com/jandedobbeleer/oh-my-posh/src/maps"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime/mock"

	"github.com/stretchr/testify/assert"
)

func TestRenderTemplate(t *testing.T) {
	type Me struct {
		Name string
	}

	cases := []struct {
		Context     any
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{
			Case:     "dot literal",
			Expected: "Hello .NET \uE77F",
			Template: "{{ .Text }} .NET \uE77F",
			Context:  struct{ Text string }{Text: "Hello"},
		},
		{
			Case:     "color override with dots",
			Expected: "😺💬<#FF8000> Meow! What should I do next? ...</>",
			Template: "😺💬<#FF8000> Meow! What should I do next? ...</>",
		},
		{
			Case:     "tillig's regex",
			Expected: " ⎈ hello :: world ",
			Template: " ⎈ {{ replaceP \"([a-f0-9]{2})[a-f0-9]{6}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{10}([a-f0-9]{2})\" .Context \"$1..$2\" }}{{ if .Namespace }} :: {{ .Namespace }}{{ end }} ", //nolint:lll
			Context: struct {
				Context   string
				Namespace string
			}{
				Context:   "hello",
				Namespace: "world",
			},
		},
		{
			Case:     "Env like property name",
			Expected: "hello world",
			Template: "{{.EnvLike}} {{.Text2}}",
			Context: struct {
				EnvLike string
				Text2   string
			}{
				EnvLike: "hello",
				Text2:   "world",
			},
		},
		{
			Case:     "single property with a dot literal",
			Expected: "hello world",
			Template: "{{ if eq .Text \".Net\" }}hello world{{ end }}",
			Context:  struct{ Text string }{Text: ".Net"},
		},
		{
			Case:     "single property",
			Expected: "hello world",
			Template: "{{.Text}} world",
			Context:  struct{ Text string }{Text: "hello"},
		},
		{
			Case:     "duplicate property",
			Expected: "hello jan posh",
			Template: "hello {{ .Me.Name }} {{ .Name }}",
			Context: struct {
				Name string
				Me   Me
			}{
				Name: "posh",
				Me: Me{
					Name: "jan",
				},
			},
		},
		{
			Case:        "invalid property",
			ShouldError: true,
			Template:    "{{.Durp}} world",
			Context:     struct{ Text string }{Text: "hello"},
		},
		{
			Case:        "invalid template",
			ShouldError: true,
			Template:    "{{ if .Text }} world",
			Context:     struct{ Text string }{Text: "hello"},
		},
		{
			Case:     "if statement true",
			Expected: "hello world",
			Template: "{{ if .Text }}{{.Text}} world{{end}}",
			Context:  struct{ Text string }{Text: "hello"},
		},
		{
			Case:     "if statement false",
			Expected: "world",
			Template: "{{ if .Text }}{{.Text}} {{end}}world",
			Context:  struct{ Text string }{Text: ""},
		},
		{
			Case:     "if statement true with 2 properties",
			Expected: "hello world",
			Template: "{{.Text}}{{ if .Text2 }} {{.Text2}}{{end}}",
			Context: struct {
				Text  string
				Text2 string
			}{
				Text:  "hello",
				Text2: "world",
			},
		},
		{
			Case:     "if statement false with 2 properties",
			Expected: "hello",
			Template: "{{.Text}}{{ if .Text2 }} {{.Text2}}{{end}}",
			Context: struct {
				Text  string
				Text2 string
			}{
				Text: "hello",
			},
		},
		{
			Case:     "double property template",
			Expected: "hello world",
			Template: "{{.Text}} {{.Text2}}",
			Context: struct {
				Text  string
				Text2 string
			}{
				Text:  "hello",
				Text2: "world",
			},
		},
		{
			Case:     "sprig - contains",
			Expected: "hello world",
			Template: "{{ if contains \"hell\" .Text }}{{.Text}} {{end}}{{.Text2}}",
			Context: struct {
				Text  string
				Text2 string
			}{
				Text:  "hello",
				Text2: "world",
			},
		},
	}

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  tc.Context,
		}

		env := new(mock.Environment)
		env.On("Shell").Return("foo")
		Cache = new(cache.Template)
		Init(env, nil, nil)

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.NoError(t, err)
		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}

func TestRenderTemplateEnvVar(t *testing.T) {
	cases := []struct {
		Context     any
		Env         map[string]string
		Case        string
		Expected    string
		Template    string
		ShouldError bool
	}{
		{
			Case:        "nil struct with env var",
			ShouldError: true,
			Template:    "{{.Env.HELLO }} world{{ .Text}}",
			Context:     nil,
			Env:         map[string]string{"HELLO": "hello"},
		},
		{
			Case:     "map with env var",
			Expected: "hello world",
			Template: "{{.Env.HELLO}} {{.World}}",
			Context:  map[string]any{"World": "world"},
			Env:      map[string]string{"HELLO": "hello"},
		},
		{
			Case:     "struct with env var",
			Expected: "hello world posh",
			Template: "{{.Env.HELLO}} world {{ .Text }}",
			Context:  struct{ Text string }{Text: "posh"},
			Env:      map[string]string{"HELLO": "hello"},
		},
		{Case: "no env var", Expected: "hello world", Template: "{{.Text}} world", Context: struct{ Text string }{Text: "hello"}},
		{Case: "map", Expected: "hello world", Template: "{{.Text}} world", Context: map[string]any{"Text": "hello"}},
		{Case: "empty map", Expected: " world", Template: "{{.Text}} world", Context: map[string]string{}, ShouldError: true},
		{
			Case:     "Struct with duplicate property",
			Expected: "posh",
			Template: "{{ .OS }}",
			Context:  struct{ OS string }{OS: "posh"},
			Env:      map[string]string{"HELLO": "hello"},
		},
		{
			Case:     "Struct with duplicate property, but global override",
			Expected: "darwin",
			Template: "{{ .$.OS }}",
			Context:  struct{ OS string }{OS: "posh"},
			Env:      map[string]string{"HELLO": "hello"},
		},
		{
			Case:     "Map with duplicate property",
			Expected: "posh",
			Template: "{{ .OS }}",
			Context:  map[string]any{"OS": "posh"},
			Env:      map[string]string{"HELLO": "hello"},
		},
		{
			Case:     "Non-supported map",
			Expected: "darwin",
			Template: "{{ .OS }}",
			Context:  map[int]any{},
			Env:      map[string]string{"HELLO": "hello"},
		},
	}
	for _, tc := range cases {
		env := &mock.Environment{}
		env.On("Shell").Return("foo")

		for k, v := range tc.Env {
			env.On("Getenv", k).Return(v)
		}

		Cache = &cache.Template{
			OS: "darwin",
		}
		Init(env, nil, nil)

		tmpl := &Text{
			Template: tc.Template,
			Context:  tc.Context,
		}

		text, err := tmpl.Render()
		if tc.ShouldError {
			assert.Error(t, err)
			continue
		}

		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}

func TestPatchTemplate(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Template string
	}{
		{
			Case:     "Literal dots",
			Expected: " ... ",
			Template: " ... ",
		},
		{
			Case:     "Literal dot",
			Expected: "hello . what's up",
			Template: "hello . what's up",
		},
		{
			Case:     "Variable",
			Expected: "{{range $cpu := .Data.CPU}}{{round $cpu.Mhz 2 }} {{end}}",
			Template: "{{range $cpu := .CPU}}{{round $cpu.Mhz 2 }} {{end}}",
		},
		{
			Case:     "Same prefix",
			Expected: "{{ (call .Getenv \"HELLO\") }} {{ .Data.World }} {{ .Data.WorldTrend }}",
			Template: "{{ .Env.HELLO }} {{ .World }} {{ .WorldTrend }}",
		},
		{
			Case:     "Double use of property with different child",
			Expected: "{{ (call .Getenv \"HELLO\") }} {{ .Data.World.Trend }} {{ .Data.World.Hello }} {{ .Data.World }}",
			Template: "{{ .Env.HELLO }} {{ .World.Trend }} {{ .World.Hello }} {{ .World }}",
		},
		{
			Case:     "Hello world",
			Expected: "{{(call .Getenv \"HELLO\")}} {{.Data.World}}",
			Template: "{{.Env.HELLO}} {{.World}}",
		},
		{
			Case:     "Multiple vars",
			Expected: "{{(call .Getenv \"HELLO\")}} {{.Data.World}} {{.Data.World}}",
			Template: "{{.Env.HELLO}} {{.World}} {{.World}}",
		},
		{
			Case:     "Multiple vars with spaces",
			Expected: "{{ (call .Getenv \"HELLO\") }} {{ .Data.World }} {{ .Data.World }}",
			Template: "{{ .Env.HELLO }} {{ .World }} {{ .World }}",
		},
		{
			Case:     "Braces",
			Expected: "{{ if or (.Data.Working.Changed) (.Data.Staging.Changed) }}#FF9248{{ end }}",
			Template: "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
		},
		{
			Case:     "Global property override",
			Expected: "{{.OS}}",
			Template: "{{.$.OS}}",
		},
		{
			Case:     "Local property override",
			Expected: "{{.Data.OS}}",
			Template: "{{.OS}}",
		},
		{
			Case:     "Keep .Contains intact for Segments",
			Expected: `{{.Segments.Contains "Git"}}`,
			Template: `{{.Segments.Contains "Git"}}`,
		},
		{
			Case:     "Replace a direct call to .Segments with .Segments.List",
			Expected: `{{(.Segments.MustGet "Git").Repo}}`,
			Template: `{{.Segments.Git.Repo}}`,
		},
	}

	env := new(mock.Environment)
	env.On("Shell").Return("foo")
	Cache = new(cache.Template)
	Init(env, nil, nil)

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context: map[string]any{
				"OS":         true,
				"World":      true,
				"WorldTrend": "chaos",
				"Working":    true,
				"Staging":    true,
				"CPU":        true,
			},
		}

		tmpl.patchTemplate()
		assert.Equal(t, tc.Expected, tmpl.Template, tc.Case)
	}
}

type Foo struct{}

func (f *Foo) Hello() string {
	return "hello"
}

func TestPatchTemplateStruct(t *testing.T) {
	env := new(mock.Environment)
	env.On("Shell").Return("foo")
	Cache = new(cache.Template)
	Init(env, nil, nil)

	tmpl := &Text{
		Template: "{{ .Hello }}",
		Context:  Foo{},
	}

	tmpl.patchTemplate()
	assert.Equal(t, "{{ .Data.Hello }}", tmpl.Template)
}

func TestSegmentContains(t *testing.T) {
	cases := []struct {
		Case     string
		Expected string
		Template string
	}{
		{Case: "match", Expected: "hello", Template: `{{ if .Segments.Contains "Git" }}hello{{ end }}`},
		{Case: "match", Expected: "world", Template: `{{ if .Segments.Contains "Path" }}hello{{ else }}world{{ end }}`},
	}

	env := &mock.Environment{}
	segments := maps.NewConcurrent()
	segments.Set("Git", "foo")
	env.On("Shell").Return("foo")

	Cache = &cache.Template{
		Segments: segments,
	}
	Init(env, nil, nil)

	for _, tc := range cases {
		tmpl := &Text{
			Template: tc.Template,
			Context:  nil,
		}

		text, _ := tmpl.Render()
		assert.Equal(t, tc.Expected, text, tc.Case)
	}
}



================================================
FILE: src/terminal/iterm.go
================================================
package terminal

import (
	"fmt"
	"slices"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/shell"
)

type iTermFeature string

const (
	PromptMark iTermFeature = "prompt_mark"
	CurrentDir iTermFeature = "current_dir"
	RemoteHost iTermFeature = "remote_host"
)

type ITermFeatures []iTermFeature

func (f ITermFeatures) Contains(feature iTermFeature) bool {
	return slices.Contains(f, feature)
}

func RenderItermFeatures(features ITermFeatures, sh, pwd, user, host string) string {
	supportedShells := []string{shell.BASH, shell.ZSH}

	var result strings.Builder
	for _, feature := range features {
		switch feature {
		case PromptMark:
			if !slices.Contains(supportedShells, sh) {
				continue
			}

			result.WriteString(formats.ITermPromptMark)
		case CurrentDir:
			result.WriteString(fmt.Sprintf(formats.ITermCurrentDir, pwd))
		case RemoteHost:
			result.WriteString(fmt.Sprintf(formats.ITermRemoteHost, user, host))
		}
	}

	return result.String()
}



================================================
FILE: src/terminal/writer.go
================================================
package terminal

import (
	"fmt"
	"os"
	"strings"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/log"
	"github.com/jandedobbeleer/oh-my-posh/src/regex"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"
	"github.com/mattn/go-runewidth"
)

func init() {
	runewidth.DefaultCondition.EastAsianWidth = false
}

type style struct {
	AnchorStart string
	AnchorEnd   string
	Start       string
	End         string
}

var (
	knownStyles = []*style{
		{AnchorStart: `<b>`, AnchorEnd: `</b>`, Start: "\x1b[1m", End: "\x1b[22m"},
		{AnchorStart: `<u>`, AnchorEnd: `</u>`, Start: "\x1b[4m", End: "\x1b[24m"},
		{AnchorStart: `<o>`, AnchorEnd: `</o>`, Start: "\x1b[53m", End: "\x1b[55m"},
		{AnchorStart: `<i>`, AnchorEnd: `</i>`, Start: "\x1b[3m", End: "\x1b[23m"},
		{AnchorStart: `<s>`, AnchorEnd: `</s>`, Start: "\x1b[9m", End: "\x1b[29m"},
		{AnchorStart: `<d>`, AnchorEnd: `</d>`, Start: "\x1b[2m", End: "\x1b[22m"},
		{AnchorStart: `<f>`, AnchorEnd: `</f>`, Start: "\x1b[5m", End: "\x1b[25m"},
		{AnchorStart: `<r>`, AnchorEnd: `</r>`, Start: "\x1b[7m", End: "\x1b[27m"},
	}

	resetStyle      = &style{AnchorStart: "RESET", AnchorEnd: `</>`, End: "\x1b[0m"}
	backgroundStyle = &style{AnchorStart: "BACKGROUND", AnchorEnd: `</>`, End: "\x1b[49m"}

	BackgroundColor color.Ansi
	CurrentColors   *color.Set
	ParentColors    []*color.Set
	Colors          color.String

	Plain       bool
	Interactive bool

	builder strings.Builder
	length  int

	foregroundColor color.Ansi
	backgroundColor color.Ansi
	currentColor    color.History
	runes           []rune

	isTransparent bool
	isInvisible   bool
	isHyperlink   bool

	Shell   string
	Program string

	formats *shell.Formats
)

const (
	AnchorRegex      = `^(?P<ANCHOR><(?P<FG>[^,<>]+)?,?(?P<BG>[^<>]+)?>)`
	colorise         = "\x1b[%sm"
	transparentStart = "\x1b[0m\x1b[%s;49m\x1b[7m"
	transparentEnd   = "\x1b[27m"
	backgroundEnd    = "\x1b[49m"

	AnsiRegex = "[\u001B\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"

	OSC99 = "osc99"
	OSC7  = "osc7"
	OSC51 = "osc51"

	ANCHOR = "ANCHOR"
	BG     = "BG"
	FG     = "FG"

	hyperLinkStart   = "<LINK>"
	hyperLinkEnd     = "</LINK>"
	hyperLinkText    = "<TEXT>"
	hyperLinkTextEnd = "</TEXT>"

	empty = "<>"

	startProgress = "\x1b]9;4;3;0\x07"
	setProgress   = "\x1b]9;4;4;%d\x07"
	endProgress   = "\x1b]9;4;0;0\x07"

	WindowsTerminal = "Windows Terminal"
	Warp            = "WarpTerminal"
	ITerm           = "iTerm.app"
	AppleTerminal   = "Apple_Terminal"
	Unknown         = "Unknown"
)

func Init(sh string) {
	Shell = sh
	Program = getTerminalName()

	log.Debug("terminal program:", Program)
	log.Debug("terminal shell:", Shell)

	color.TrueColor = Program != AppleTerminal

	formats = shell.GetFormats(Shell)
}

func getTerminalName() string {
	Program = os.Getenv("TERM_PROGRAM")
	if len(Program) != 0 {
		return Program
	}

	wtSession := os.Getenv("WT_SESSION")
	if len(wtSession) != 0 {
		return WindowsTerminal
	}

	return Unknown
}

func SetColors(background, foreground color.Ansi) {
	CurrentColors = &color.Set{
		Background: background,
		Foreground: foreground,
	}
}

func SetParentColors(background, foreground color.Ansi) {
	if ParentColors == nil {
		ParentColors = make([]*color.Set, 0)
	}

	ParentColors = append([]*color.Set{{
		Background: background,
		Foreground: foreground,
	}}, ParentColors...)
}

func ChangeLine(numberOfLines int) string {
	if Plain {
		return ""
	}

	position := "B"

	if numberOfLines < 0 {
		position = "F"
		numberOfLines = -numberOfLines
	}

	return fmt.Sprintf(formats.Linechange, numberOfLines, position)
}

func Pwd(pwdType, userName, hostName, pwd string) string {
	if Plain {
		return ""
	}

	switch pwdType {
	case OSC7:
		return fmt.Sprintf(formats.Osc7, hostName, pwd)
	case OSC51:
		return fmt.Sprintf(formats.Osc51, userName, hostName, pwd)
	case OSC99:
		fallthrough
	default:
		return fmt.Sprintf(formats.Osc99, pwd)
	}
}

func ClearAfter() string {
	if Plain {
		return ""
	}

	return formats.ClearLine + formats.ClearBelow
}

func FormatTitle(title string) string {
	switch Shell {
	// These shells don't support setting the console title.
	case shell.ELVISH, shell.XONSH:
		return ""
	case shell.BASH, shell.ZSH:
		title = trimAnsi(title)
		s := new(strings.Builder)

		// We have to do this to prevent the shell from misidentifying escape sequences.
		for _, char := range title {
			escaped, shouldEscape := formats.EscapeSequences[char]
			if shouldEscape {
				s.WriteString(escaped)
				continue
			}

			s.WriteRune(char)
		}

		return fmt.Sprintf(formats.Title, s.String())
	default:
		return fmt.Sprintf(formats.Title, trimAnsi(title))
	}
}

func EscapeText(text string) string {
	return fmt.Sprintf(formats.Escape, text)
}

func SaveCursorPosition() string {
	return formats.SaveCursorPosition
}

func RestoreCursorPosition() string {
	return formats.RestoreCursorPosition
}

func PromptStart() string {
	return fmt.Sprintf(formats.Escape, "\x1b]133;A\007")
}

func CommandStart() string {
	return fmt.Sprintf(formats.Escape, "\x1b]133;B\007")
}

func CommandFinished(code int, ignore bool) string {
	if ignore {
		return fmt.Sprintf(formats.Escape, "\x1b]133;D\007")
	}

	mark := fmt.Sprintf("\x1b]133;D;%d\007", code)

	return fmt.Sprintf(formats.Escape, mark)
}

func LineBreak() string {
	cr := fmt.Sprintf(formats.Left, 1000)
	lf := fmt.Sprintf(formats.Linechange, 1, "B")
	return cr + lf
}

func StartProgress() string {
	if Program != WindowsTerminal {
		return ""
	}

	return startProgress
}

func SetProgress(percentage int) string {
	if Program != WindowsTerminal {
		return ""
	}

	return fmt.Sprintf(setProgress, percentage)
}

func StopProgress() string {
	if Program != WindowsTerminal {
		return ""
	}

	return endProgress
}

func Write(background, foreground color.Ansi, text string) {
	if len(text) == 0 {
		return
	}

	backgroundColor, foregroundColor = asAnsiColors(background, foreground)

	// default to white foreground
	if foregroundColor.IsEmpty() {
		foregroundColor = Colors.ToAnsi("white", false)
	}

	// validate if we start with a color override
	match := regex.FindNamedRegexMatch(AnchorRegex, text)
	if len(match) != 0 && match[ANCHOR] != hyperLinkStart {
		colorOverride := true
		for _, style := range knownStyles {
			if match[ANCHOR] != style.AnchorStart {
				continue
			}

			writeEscapedAnsiString(style.Start)
			colorOverride = false
		}

		if colorOverride {
			currentColor.Add(asAnsiColors(color.Ansi(match[BG]), color.Ansi(match[FG])))
		}
	}

	writeSegmentColors()

	// print the hyperlink part AFTER the coloring
	if match[ANCHOR] == hyperLinkStart {
		isHyperlink = true
		builder.WriteString(formats.HyperlinkStart)
	}

	text = text[len(match[ANCHOR]):]
	runes = []rune(text)
	hyperlinkTextPosition := 0

	for i := 0; i < len(runes); i++ {
		s := runes[i]
		// ignore everything which isn't overriding
		if s != '<' {
			write(s)
			continue
		}

		// color/end overrides first
		text = string(runes[i:])
		match = regex.FindNamedRegexMatch(AnchorRegex, text)
		if len(match) > 0 {
			// check for hyperlinks first
			switch match[ANCHOR] {
			case hyperLinkStart:
				isHyperlink = true
				i += len([]rune(match[ANCHOR])) - 1
				builder.WriteString(formats.HyperlinkStart)
				continue
			case hyperLinkText:
				isHyperlink = false
				i += len([]rune(match[ANCHOR])) - 1
				hyperlinkTextPosition = i
				builder.WriteString(formats.HyperlinkCenter)
				continue
			case hyperLinkTextEnd:
				// this implies there's no text in the hyperlink
				if hyperlinkTextPosition+1 == i {
					builder.WriteString("link")
					length += 4
				}
				i += len([]rune(match[ANCHOR])) - 1
				continue
			case hyperLinkEnd:
				i += len([]rune(match[ANCHOR])) - 1
				builder.WriteString(formats.HyperlinkEnd)
				continue
			case empty:
				i += len([]rune(match[ANCHOR])) - 1
				continue
			}

			i = writeArchorOverride(match, background, i)
			continue
		}

		write(s)
	}

	// reset colors
	writeEscapedAnsiString(resetStyle.End)

	// pop last color from the stack
	currentColor.Pop()
}

func Len() int {
	return length
}

func String() (string, int) {
	defer func() {
		length = 0
		builder.Reset()

		isTransparent = false
		isInvisible = false
	}()

	return builder.String(), length
}

func writeEscapedAnsiString(text string) {
	if Plain {
		return
	}

	if len(formats.Escape) != 0 {
		text = fmt.Sprintf(formats.Escape, text)
	}

	builder.WriteString(text)
}

func write(s rune) {
	if isInvisible {
		return
	}

	if isHyperlink {
		builder.WriteRune(s)
		return
	}

	// UNSOLVABLE: When "Interactive" is true, the prompt length calculation in Bash/Zsh can be wrong, since the final string expansion is done by shells.
	length += runewidth.RuneWidth(s)
	// length += utf8.RuneCountInString(string(s))

	if !Interactive && !Plain {
		escaped, shouldEscape := formats.EscapeSequences[s]
		if shouldEscape {
			builder.WriteString(escaped)
			return
		}
	}

	builder.WriteRune(s)
}

func writeSegmentColors() {
	// use correct starting colors
	bg := backgroundColor
	fg := foregroundColor
	if !currentColor.Background().IsEmpty() {
		bg = currentColor.Background()
	}
	if !currentColor.Foreground().IsEmpty() {
		fg = currentColor.Foreground()
	}

	// ignore processing fully tranparent colors
	isInvisible = fg.IsTransparent() && bg.IsTransparent()
	if isInvisible {
		return
	}

	switch {
	case fg.IsTransparent() && len(BackgroundColor) != 0:
		background := Colors.ToAnsi(BackgroundColor, false)
		writeEscapedAnsiString(fmt.Sprintf(colorise, background))
		writeEscapedAnsiString(fmt.Sprintf(colorise, bg.ToForeground()))
	case fg.IsTransparent() && !bg.IsEmpty():
		isTransparent = true
		writeEscapedAnsiString(fmt.Sprintf(transparentStart, bg))
	default:
		if !bg.IsEmpty() && !bg.IsTransparent() {
			writeEscapedAnsiString(fmt.Sprintf(colorise, bg))
		}

		if !fg.IsEmpty() && !fg.IsTransparent() {
			writeEscapedAnsiString(fmt.Sprintf(colorise, fg))
		}
	}

	// set current colors
	currentColor.Add(bg, fg)
}

func writeArchorOverride(match map[string]string, background color.Ansi, i int) int {
	position := i
	// check color reset first
	if match[ANCHOR] == resetStyle.AnchorEnd {
		return endColorOverride(position)
	}

	position += len([]rune(match[ANCHOR])) - 1

	for _, style := range knownStyles {
		if style.AnchorEnd == match[ANCHOR] {
			writeEscapedAnsiString(style.End)
			return position
		}
		if style.AnchorStart == match[ANCHOR] {
			writeEscapedAnsiString(style.Start)
			return position
		}
	}

	bgColor := color.Ansi(match[BG])
	fgColor := color.Ansi(match[FG])

	if fgColor.IsTransparent() && bgColor.IsEmpty() {
		bgColor = background
	}

	bg, fg := asAnsiColors(bgColor, fgColor)

	// ignore processing fully tranparent colors
	isInvisible = fg.IsTransparent() && bg.IsTransparent()
	if isInvisible {
		return position
	}

	// make sure we have colors
	if fg.IsEmpty() {
		fg = foregroundColor
	}
	if bg.IsEmpty() {
		bg = backgroundColor
	}

	currentColor.Add(bg, fg)

	if currentColor.Foreground().IsTransparent() && len(BackgroundColor) != 0 {
		background := Colors.ToAnsi(BackgroundColor, false)
		writeEscapedAnsiString(fmt.Sprintf(colorise, background))
		writeEscapedAnsiString(fmt.Sprintf(colorise, currentColor.Background().ToForeground()))
		return position
	}

	if currentColor.Foreground().IsTransparent() && !currentColor.Background().IsTransparent() {
		isTransparent = true
		writeEscapedAnsiString(fmt.Sprintf(transparentStart, currentColor.Background()))
		return position
	}

	if currentColor.Background() != backgroundColor {
		// end the colors in case we have a transparent background
		if currentColor.Background().IsTransparent() {
			writeEscapedAnsiString(backgroundEnd)
		} else {
			writeEscapedAnsiString(fmt.Sprintf(colorise, currentColor.Background()))
		}
	}

	if currentColor.Foreground() != foregroundColor {
		writeEscapedAnsiString(fmt.Sprintf(colorise, currentColor.Foreground()))
	}

	return position
}

func endColorOverride(position int) int {
	// make sure to reset the colors if needed
	position += len([]rune(resetStyle.AnchorEnd)) - 1

	// do not restore colors at the end of the string, we print it anyways
	if position == len(runes)-1 {
		currentColor.Pop()
		return position
	}

	// reset colors to previous when we have more than 1 in stack
	// as soon as we have  more than 1, we can pop the last one
	// and print the previous override as it wasn't ended yet
	if currentColor.Len() > 1 {
		fg := currentColor.Foreground()
		bg := currentColor.Background()

		currentColor.Pop()

		previousBg := currentColor.Background()
		previousFg := currentColor.Foreground()

		if isTransparent {
			writeEscapedAnsiString(transparentEnd)
		}

		if previousBg != bg {
			background := fmt.Sprintf(colorise, previousBg)
			if previousBg.IsClear() {
				background = backgroundStyle.End
			}

			writeEscapedAnsiString(background)
		}

		if previousFg != fg {
			writeEscapedAnsiString(fmt.Sprintf(colorise, previousFg))
		}

		return position
	}

	// pop the last colors from the stack
	defer currentColor.Pop()

	// do not reset when colors are identical
	if currentColor.Background() == backgroundColor && currentColor.Foreground() == foregroundColor {
		return position
	}

	if isTransparent {
		writeEscapedAnsiString(transparentEnd)
	}

	if backgroundColor.IsClear() {
		writeEscapedAnsiString(backgroundStyle.End)
	}

	if currentColor.Background() != backgroundColor && !backgroundColor.IsClear() {
		writeEscapedAnsiString(fmt.Sprintf(colorise, backgroundColor))
	}

	if (currentColor.Foreground() != foregroundColor || isTransparent) && !foregroundColor.IsClear() {
		writeEscapedAnsiString(fmt.Sprintf(colorise, foregroundColor))
	}

	isTransparent = false
	return position
}

func asAnsiColors(background, foreground color.Ansi) (color.Ansi, color.Ansi) {
	if len(background) == 0 {
		background = color.Background
	}

	if len(foreground) == 0 {
		foreground = color.Foreground
	}

	background = background.Resolve(CurrentColors, ParentColors)
	foreground = foreground.Resolve(CurrentColors, ParentColors)

	if bg, err := Colors.Resolve(background); err == nil {
		background = bg
	}

	if fg, err := Colors.Resolve(foreground); err == nil {
		foreground = fg
	}

	inverted := foreground == color.Transparent && len(background) != 0

	background = Colors.ToAnsi(background, !inverted)
	foreground = Colors.ToAnsi(foreground, false)

	return background, foreground
}

func trimAnsi(text string) string {
	if len(text) == 0 || !strings.Contains(text, "\x1b") {
		return text
	}
	return regex.ReplaceAllString(AnsiRegex, text, "")
}



================================================
FILE: src/terminal/writer_hyperlink_test.go
================================================
package terminal

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	"github.com/stretchr/testify/assert"
)

func TestGenerateHyperlinkNoUrl(t *testing.T) {
	cases := []struct {
		Text      string
		ShellName string
		Expected  string
	}{
		{Text: "sample text with no url", ShellName: shell.ZSH, Expected: "%{\x1b[47m%}%{\x1b[30m%}sample text with no url%{\x1b[0m%}"},
		{Text: "sample text with no url", ShellName: shell.PWSH, Expected: "\x1b[47m\x1b[30msample text with no url\x1b[0m"},
		{Text: "sample text with no url", ShellName: shell.BASH, Expected: "\\[\x1b[47m\\]\\[\x1b[30m\\]sample text with no url\\[\x1b[0m\\]"},
		{Text: "sample text with no url [test]", ShellName: shell.BASH, Expected: "\\[\x1b[47m\\]\\[\x1b[30m\\]sample text with no url [test]\\[\x1b[0m\\]"},
	}
	for _, tc := range cases {
		Init(tc.ShellName)
		Colors = &color.Defaults{}

		Write("white", "black", tc.Text)

		got, _ := String()

		assert.Equal(t, tc.Expected, got)
	}
}

func TestGenerateHyperlinkWithUrl(t *testing.T) {
	cases := []struct {
		Text      string
		ShellName string
		Expected  string
	}{
		{
			Text:      "<LINK>http://www.google.be<TEXT>google</TEXT></LINK> <LINK>http://maps.google.be<TEXT>maps (2/2)</TEXT></LINK>",
			ShellName: shell.FISH,
			Expected:  "\x1b[47m\x1b[30m\x1b]8;;http://www.google.be\x1b\\google\x1b]8;;\x1b\\ \x1b]8;;http://maps.google.be\x1b\\maps (2/2)\x1b]8;;\x1b\\\x1b[0m",
		},
		{
			Text:      "in <accent><b>pwsh </b></> ",
			ShellName: shell.PWSH,
			Expected:  "\x1b[47m\x1b[30min \x1b[49m\x1b[1mpwsh \x1b[22m\x1b[47m \x1b[0m",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT>google</TEXT></LINK>",
			ShellName: shell.ZSH,
			Expected:  "%{\x1b[47m%}%{\x1b[30m%}%{\x1b]8;;http://www.google.be\x1b\\%}google%{\x1b]8;;\x1b\\%}%{\x1b[0m%}",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT>google</TEXT></LINK>",
			ShellName: shell.PWSH,
			Expected:  "\x1b[47m\x1b[30m\x1b]8;;http://www.google.be\x1b\\google\x1b]8;;\x1b\\\x1b[0m",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT>google</TEXT></LINK>",
			ShellName: shell.BASH,
			Expected:  "\\[\x1b[47m\\]\\[\x1b[30m\\]\\[\x1b]8;;http://www.google.be\x1b\\\\\\]google\\[\x1b]8;;\x1b\\\\\\]\\[\x1b[0m\\]",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT>google</TEXT></LINK> <LINK>http://maps.google.be<TEXT>maps</TEXT></LINK>",
			ShellName: shell.FISH,
			Expected:  "\x1b[47m\x1b[30m\x1b]8;;http://www.google.be\x1b\\google\x1b]8;;\x1b\\ \x1b]8;;http://maps.google.be\x1b\\maps\x1b]8;;\x1b\\\x1b[0m",
		},
		{
			Text:      "[]<LINK>http://www.google.be<TEXT>google</TEXT></LINK>[]",
			ShellName: shell.FISH,
			Expected:  "\x1b[47m\x1b[30m[]\x1b]8;;http://www.google.be\x1b\\google\x1b]8;;\x1b\\[]\x1b[0m",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT><blue>google</></TEXT></LINK>",
			ShellName: shell.FISH,
			Expected:  "\x1b[47m\x1b[30m\x1b]8;;http://www.google.be\x1b\\\x1b[49m\x1b[34mgoogle\x1b[47m\x1b[30m\x1b]8;;\x1b\\\x1b[0m",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT></TEXT></LINK>",
			ShellName: shell.ZSH,
			Expected:  "%{\x1b[47m%}%{\x1b[30m%}%{\x1b]8;;http://www.google.be\x1b\\%}link%{\x1b]8;;\x1b\\%}%{\x1b[0m%}",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT></TEXT></LINK>",
			ShellName: shell.PWSH,
			Expected:  "\x1b[47m\x1b[30m\x1b]8;;http://www.google.be\x1b\\link\x1b]8;;\x1b\\\x1b[0m",
		},
		{
			Text:      "<LINK>http://www.google.be<TEXT></TEXT></LINK>",
			ShellName: shell.BASH,
			Expected:  "\\[\x1b[47m\\]\\[\x1b[30m\\]\\[\x1b]8;;http://www.google.be\x1b\\\\\\]link\\[\x1b]8;;\x1b\\\\\\]\\[\x1b[0m\\]",
		},
	}
	for _, tc := range cases {
		Init(tc.ShellName)
		Colors = &color.Defaults{}

		Write("white", "black", tc.Text)

		got, _ := String()

		assert.Equal(t, tc.Expected, got)
	}
}

func TestGenerateFileLink(t *testing.T) {
	cases := []struct {
		Text     string
		Expected string
	}{
		{
			Text:     `<LINK>file:C:/Program Files (x86)/Common Files/Microsoft Shared/Posh<TEXT>Posh</TEXT></LINK>`,
			Expected: "\x1b[47m\x1b[30m\x1b]8;;file:C:/Program Files (x86)/Common Files/Microsoft Shared/Posh\x1b\\Posh\x1b]8;;\x1b\\\x1b[0m",
		},
		{Text: `<LINK>file:C:/Windows<TEXT>Windows</TEXT></LINK>`, Expected: "\x1b[47m\x1b[30m\x1b]8;;file:C:/Windows\x1b\\Windows\x1b]8;;\x1b\\\x1b[0m"},
	}
	for _, tc := range cases {
		Init(shell.PWSH)
		Colors = &color.Defaults{}

		Write("white", "black", tc.Text)

		got, _ := String()

		assert.Equal(t, tc.Expected, got)
	}
}



================================================
FILE: src/terminal/writer_test.go
================================================
package terminal

import (
	"testing"

	"github.com/jandedobbeleer/oh-my-posh/src/color"
	"github.com/jandedobbeleer/oh-my-posh/src/shell"

	"github.com/stretchr/testify/assert"
)

func TestWriteANSIColors(t *testing.T) {
	cases := []struct {
		Case               string
		Expected           string
		Input              string
		Colors             *color.Set
		Parent             *color.Set
		TerminalBackground color.Ansi
	}{
		{
			Case:     "Inline override identical",
			Input:    "\ue0a0saturnay <red>↑</>1",
			Expected: "\x1b[31m\ue0a0saturnay ↑1\x1b[0m",
			Colors:   &color.Set{Foreground: "red", Background: color.Transparent},
		},
		{
			Case:     "Bold",
			Input:    "<b>test</b>",
			Expected: "\x1b[1m\x1b[30mtest\x1b[22m\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold with color override",
			Input:    "<b><#ffffff>test</></b>",
			Expected: "\x1b[1m\x1b[30m\x1b[38;2;255;255;255mtest\x1b[30m\x1b[22m\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold with color override, flavor 2",
			Input:    "<#ffffff><b>test</b></>",
			Expected: "\x1b[38;2;255;255;255m\x1b[1mtest\x1b[22m\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Double override",
			Input:    "<#ffffff>jan</>@<#ffffff>Jans-MBP</>",
			Expected: "\x1b[48;2;255;87;51m\x1b[38;2;255;255;255mjan\x1b[32m@\x1b[38;2;255;255;255mJans-MBP\x1b[0m",
			Colors:   &color.Set{Foreground: "green", Background: "#FF5733"},
		},
		{
			Case:     "No color override",
			Input:    "test",
			Expected: "\x1b[47m\x1b[30mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
			Parent:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Inherit foreground",
			Input:    "test",
			Expected: "\x1b[47m\x1b[33mtest\x1b[0m",
			Colors:   &color.Set{Foreground: color.ParentForeground, Background: "white"},
			Parent:   &color.Set{Foreground: "yellow", Background: "white"},
		},
		{
			Case:     "Inherit background",
			Input:    "test",
			Expected: "\x1b[41m\x1b[30mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
			Parent:   &color.Set{Foreground: "yellow", Background: "red"},
		},
		{
			Case:     "No parent",
			Input:    "test",
			Expected: "\x1b[30mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Inherit override foreground",
			Input:    "hello <parentForeground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[33mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
			Parent:   &color.Set{Foreground: "yellow", Background: "red"},
		},
		{
			Case:     "Inherit override background",
			Input:    "hello <black,parentBackground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[41mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
			Parent:   &color.Set{Foreground: "yellow", Background: "red"},
		},
		{
			Case:     "Inherit override background, no foreground specified",
			Input:    "hello <,parentBackground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[41mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
			Parent:   &color.Set{Foreground: "yellow", Background: "red"},
		},
		{
			Case:     "Inherit no parent foreground",
			Input:    "hello <parentForeground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[0m\x1b[37;49m\x1b[7mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Inherit no parent background",
			Input:    "hello <,parentBackground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[49mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Inherit override both",
			Input:    "hello <parentForeground,parentBackground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[41m\x1b[33mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
			Parent:   &color.Set{Foreground: "yellow", Background: "red"},
		},
		{
			Case:     "Inherit override both inverted",
			Input:    "hello <parentBackground,parentForeground>world</>",
			Expected: "\x1b[47m\x1b[30mhello \x1b[43m\x1b[31mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
			Parent:   &color.Set{Foreground: "yellow", Background: "red"},
		},
		{
			Case:     "Inline override",
			Input:    "hello, <red>world</>, rabbit",
			Expected: "\x1b[47m\x1b[30mhello, \x1b[31mworld\x1b[30m, rabbit\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "color.Transparent background",
			Input:    "hello world",
			Expected: "\x1b[37mhello world\x1b[0m",
			Colors:   &color.Set{Foreground: "white", Background: color.Transparent},
		},
		{
			Case:     "color.Transparent foreground override",
			Input:    "hello <#ffffff>world</>",
			Expected: "\x1b[32mhello \x1b[38;2;255;255;255mworld\x1b[0m",
			Colors:   &color.Set{Foreground: "green", Background: color.Transparent},
		},
		{
			Case:     "No foreground",
			Input:    "test",
			Expected: "\x1b[48;2;255;87;51m\x1b[37mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "", Background: "#FF5733"},
		},
		{
			Case:     "color.Transparent foreground",
			Input:    "test",
			Expected: "\x1b[0m\x1b[38;2;255;87;51;49m\x1b[7mtest\x1b[0m",
			Colors:   &color.Set{Foreground: color.Transparent, Background: "#FF5733"},
		},
		{
			Case:               "color.Transparent foreground, terminal background set",
			Input:              "test",
			Expected:           "\x1b[38;2;33;47;60m\x1b[48;2;255;87;51mtest\x1b[0m",
			Colors:             &color.Set{Foreground: color.Transparent, Background: "#FF5733"},
			TerminalBackground: "#212F3C",
		},
		{
			Case:     "Foreground for foreground override",
			Input:    "<foreground>test</>",
			Expected: "\x1b[47m\x1b[30mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Background for background override",
			Input:    "<,background>test</>",
			Expected: "\x1b[47m\x1b[30mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Google",
			Input:    "<blue,white>G</><red,white>o</><yellow,white>o</><blue,white>g</><green,white>l</><red,white>e</>",
			Expected: "\x1b[47m\x1b[34mG\x1b[40m\x1b[30m\x1b[47m\x1b[31mo\x1b[40m\x1b[30m\x1b[47m\x1b[33mo\x1b[40m\x1b[30m\x1b[47m\x1b[34mg\x1b[40m\x1b[30m\x1b[47m\x1b[32ml\x1b[40m\x1b[30m\x1b[47m\x1b[31me\x1b[0m", //nolint: lll
			Colors:   &color.Set{Foreground: "black", Background: "black"},
		},
		{
			Case:     "Foreground for background override",
			Input:    "<background>test</>",
			Expected: "\x1b[47m\x1b[37mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Foreground for background vice versa override",
			Input:    "<background,foreground>test</>",
			Expected: "\x1b[40m\x1b[37mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Background for foreground override",
			Input:    "<,foreground>test</>",
			Expected: "\x1b[40m\x1b[30mtest\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Nested override",
			Input:    "hello, <red>world, <white>rabbit</> hello</>",
			Expected: "\x1b[47m\x1b[30mhello, \x1b[31mworld, \x1b[37mrabbit\x1b[31m hello\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "color.Transparent override",
			Input:    "home<transparent> / </>code<transparent> / </>src ",
			Expected: "\x1b[47m\x1b[30mhome\x1b[0m\x1b[37;49m\x1b[7m / \x1b[27m\x1b[47m\x1b[30mcode\x1b[0m\x1b[37;49m\x1b[7m / \x1b[27m\x1b[47m\x1b[30msrc \x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "Larger than and less than symbols",
			Input:    "<red><</><orange>></><yellow><</>",
			Expected: "\x1b[47m\x1b[31m<\x1b[30m>\x1b[33m<\x1b[0m",
			Colors:   &color.Set{Foreground: "black", Background: "white"},
		},
		{
			Case:     "color.Transparent override with parent",
			Input:    "hello <#011627,#82AAFF>new</> world",
			Expected: "\x1b[33mhello \x1b[48;2;130;170;255m\x1b[38;2;1;22;39mnew\x1b[49m\x1b[33m world\x1b[0m",
			Colors:   &color.Set{Foreground: "yellow", Background: "transparent"},
		},
	}

	for _, tc := range cases {
		Init(shell.GENERIC)
		ParentColors = []*color.Set{tc.Parent}
		CurrentColors = tc.Colors
		BackgroundColor = tc.TerminalBackground
		Colors = &color.Defaults{}

		Write(tc.Colors.Background, tc.Colors.Foreground, tc.Input)

		got, _ := String()

		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}

func TestWriteLength(t *testing.T) {
	cases := []struct {
		Colors   *color.Set
		Case     string
		Input    string
		Expected int
	}{
		{
			Case:     "Emoji",
			Input:    " ⏰  ",
			Expected: 5,
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold",
			Input:    "<b>test</b>",
			Expected: 4,
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold with color override",
			Input:    "<b><#ffffff>test</></b>",
			Expected: 4,
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold with color override and link",
			Input:    "<b><#ffffff>test</></b> <LINK>https://example.com<TEXT>url</TEXT></LINK>",
			Expected: 8,
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold with color override and link and leading/trailing spaces",
			Input:    " <b><#ffffff>test</></b> <LINK>https://example.com<TEXT>url</TEXT></LINK> ",
			Expected: 10,
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
		{
			Case:     "Bold with color override and link without text and leading/trailing spaces",
			Input:    " <b><#ffffff>test</></b> <LINK>https://example.com<TEXT></TEXT></LINK> ",
			Expected: 11,
			Colors:   &color.Set{Foreground: "black", Background: color.ParentBackground},
		},
	}

	for _, tc := range cases {
		Init(shell.GENERIC)
		ParentColors = []*color.Set{}
		CurrentColors = tc.Colors
		Colors = &color.Defaults{}

		Write(tc.Colors.Background, tc.Colors.Foreground, tc.Input)

		_, got := String()

		assert.Equal(t, tc.Expected, got, tc.Case)
	}
}



================================================
FILE: src/test/azureProfile.json
================================================
{
  "installationId": "8d2919ac-a393-11eb-9100-acde48001122",
  "subscriptions": [
    {
      "id": "g51ds77-a393-11eb-9100-acde48001122",
      "name": "AzureCli",
      "state": "Powerfull",
      "user": { "name": "Melinda", "type": "user" },
      "isDefault": true,
      "tenantId": "6js98d-a393-11eb-9100-acde48001122",
      "environmentName": "AzureCliCloud",
      "homeTenantId": "8d934305-ac9f-46fe-b0e7-50fd32ad2acf",
      "managedByTenants": []
    }
  ]
}



================================================
FILE: src/test/AzureRmContext.json
================================================
{
  "Name": "MVP (c2733c30-f2c9-45bd-9f1f-528d7c6191b8) - be96dc2e-13ce-4ee1-9cad-13b52b893716 - jan@ohmyposh.dev",
  "Account": {
    "Id": "jan@ohmyposh.dev",
    "Type": "User",
    "Tenants": [
      "be96dc2e-13ce-4ee1-9cad-13b52b893716"
    ],
    "AccessToken": null,
    "Credential": null,
    "TenantMap": {},
    "CertificateThumbprint": null,
    "ExtendedProperties": {
      "Tenants": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
      "HomeAccountId": "360a9158-bf5d-45a7-8539-88e7f6f1d90b.161de531-8316-49b4-88fb-1a669ecc3b5c",
      "Subscriptions": "c2733c30-f2c9-45bd-9f1f-528d7c6191b8"
    }
  },
  "Environment": {
    "Name": "AzurePoshCloud",
    "Type": "Built-in",
    "EnableAdfsAuthentication": false,
    "OnPremise": false,
    "ActiveDirectoryServiceEndpointResourceId": "https://management.core.windows.net/",
    "AdTenant": "Common",
    "GalleryUrl": "https://gallery.azure.com/",
    "ManagementPortalUrl": "https://portal.azure.com/",
    "ServiceManagementUrl": "https://management.core.windows.net/",
    "PublishSettingsFileUrl": "https://go.microsoft.com/fwlink/?LinkID=301775",
    "ResourceManagerUrl": "https://management.azure.com/",
    "SqlDatabaseDnsSuffix": ".database.windows.net",
    "StorageEndpointSuffix": "core.windows.net",
    "ActiveDirectoryAuthority": "https://login.microsoftonline.com/",
    "GraphUrl": "https://graph.windows.net/",
    "GraphEndpointResourceId": "https://graph.windows.net/",
    "TrafficManagerDnsSuffix": "trafficmanager.net",
    "AzureKeyVaultDnsSuffix": "vault.azure.net",
    "DataLakeEndpointResourceId": "https://datalake.azure.net/",
    "AzureDataLakeStoreFileSystemEndpointSuffix": "azuredatalakestore.net",
    "AzureDataLakeAnalyticsCatalogAndJobEndpointSuffix": "azuredatalakeanalytics.net",
    "AzureKeyVaultServiceEndpointResourceId": "https://vault.azure.net",
    "ContainerRegistryEndpointSuffix": "azurecr.io",
    "AzureOperationalInsightsEndpointResourceId": "https://api.loganalytics.io",
    "AzureOperationalInsightsEndpoint": "https://api.loganalytics.io/v1",
    "AzureAnalysisServicesEndpointSuffix": "asazure.windows.net",
    "AnalysisServicesEndpointResourceId": "https://region.asazure.windows.net",
    "AzureAttestationServiceEndpointSuffix": "attest.azure.net",
    "AzureAttestationServiceEndpointResourceId": "https://attest.azure.net",
    "AzureSynapseAnalyticsEndpointSuffix": "dev.azuresynapse.net",
    "AzureSynapseAnalyticsEndpointResourceId": "https://dev.azuresynapse.net",
    "VersionProfiles": [],
    "ExtendedProperties": {
      "OperationalInsightsEndpoint": "https://api.loganalytics.io/v1",
      "OperationalInsightsEndpointResourceId": "https://api.loganalytics.io",
      "AzureAnalysisServicesEndpointSuffix": "asazure.windows.net",
      "AnalysisServicesEndpointResourceId": "https://region.asazure.windows.net",
      "AzureAttestationServiceEndpointSuffix": "attest.azure.net",
      "AzureAttestationServiceEndpointResourceId": "https://attest.azure.net",
      "AzureSynapseAnalyticsEndpointSuffix": "dev.azuresynapse.net",
      "AzureSynapseAnalyticsEndpointResourceId": "https://dev.azuresynapse.net",
      "ManagedHsmServiceEndpointResourceId": "https://managedhsm.azure.net",
      "ManagedHsmServiceEndpointSuffix": "managedhsm.azure.net",
      "MicrosoftGraphEndpointResourceId": "https://graph.microsoft.com/",
      "MicrosoftGraphUrl": "https://graph.microsoft.com",
      "AzurePurviewEndpointSuffix": "purview.azure.net",
      "AzurePurviewEndpointResourceId": "https://purview.azure.net"
    },
    "BatchEndpointResourceId": "https://batch.core.windows.net/"
  },
  "Subscription": {
    "Id": "c2733c30-f2c9-45bd-9f1f-528d7c6191b8",
    "Name": "MVP",
    "State": "Enabled",
    "SubscriptionId": "c2733c30-f2c9-45bd-9f1f-528d7c6191b8",
    "TenantId": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
    "HomeTenantId": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
    "ManagedByTenantIds": [],
    "CurrentStorageAccountName": null,
    "SubscriptionPolicies": {
      "LocationPlacementId": "Public_2014-09-01",
      "QuotaId": "MSDN_2014-09-01",
      "SpendingLimit": "On"
    },
    "ExtendedProperties": {
      "Account": "jan.de.dobbeleer@gmail.com",
      "Tenants": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
      "AuthorizationSource": "Legacy",
      "SubscriptionPolices": "{\"locationPlacementId\":\"Public_2014-09-01\",\"quotaId\":\"MSDN_2014-09-01\",\"spendingLimit\":\"On\"}",
      "HomeTenant": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
      "Environment": "AzureCloud"
    },
    "CurrentStorageAccount": null,
    "AuthorizationSource": "Legacy",
    "Tags": null
  },
  "Tenant": {
    "Id": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
    "TenantId": "be96dc2e-13ce-4ee1-9cad-13b52b893716",
    "ExtendedProperties": {},
    "TenantCategory": null,
    "Country": null,
    "CountryCode": null,
    "Name": null,
    "Domains": [],
    "DefaultDomain": null,
    "TenantType": null,
    "TenantBrandingLogoUrl": null
  },
  "TokenCache": null,
  "VersionProfile": null,
  "ExtendedProperties": {}
}



================================================
FILE: src/test/empty.nuspec
================================================
<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>Az.Compute</id>
    <authors>Microsoft Corporation</authors>
    <owners>Microsoft Corporation</owners>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <licenseUrl>https://aka.ms/azps-license</licenseUrl>
    <projectUrl>https://github.com/Azure/azure-powershell</projectUrl>
    <description>Microsoft Azure PowerShell: $(service-name) cmdlets</description>
    <releaseNotes></releaseNotes>
    <copyright>Microsoft Corporation. All rights reserved.</copyright>
    <tags>Azure ResourceManager ARM PSModule $(service-name)</tags>
    <dependencies>
      <dependency id="Az.Accounts" version="2.2.3" />
    </dependencies>
  </metadata>
  <files>
    <file src="Az.Compute.format.ps1xml" />
    <file src="Az.Compute.psd1" />
    <file src="Az.Compute.psm1" />
    <!-- https://github.com/NuGet/Home/issues/3584 -->
    <file src="bin/Az.Compute.private.dll" target="bin" />
    <file src="bin\Az.Compute.private.deps.json" target="bin" />
    <file src="internal\**\*.*" exclude="internal\README.md" target="internal" />
    <file src="custom\**\*.*" exclude="custom\README.md;custom\**\*.cs" target="custom" />
    <file src="docs\**\*.md" exclude="docs\README.md" target="docs" />
    <file src="exports\**\ProxyCmdletDefinitions.ps1" target="exports" />
    <file src="utils\**\*.*" target="utils" />
  </files>
</package>



================================================
FILE: src/test/go.work
================================================
go 1.21


================================================
FILE: src/test/invalid.nuspec
================================================
{}



================================================
FILE: src/test/jandedobbeleer-palette.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "p:session",
          "foreground": "p:white",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "p:path",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": " \ue0b1 ",
            "home_icon": "~",
            "style": "folder"
          },
          "style": "powerline",
          "template": " \uea83  {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "p:git",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}p:git-modified{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}p:git-diverged{{ end }}",
            "{{ if gt .Ahead 0 }}p:git-ahead{{ end }}",
            "{{ if gt .Behind 0 }}p:git-behind{{ end }}"
          ],
          "foreground": "p:git-foreground",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "p:node",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "p:go",
          "foreground": "p:black",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "go"
        },
        {
          "background": "p:julia",
          "foreground": "p:black",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue624 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "julia"
        },
        {
          "background": "p:python",
          "foreground": "p:black",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_virtual_env": false
          },
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "p:ruby",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue791 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "ruby"
        },
        {
          "background": "p:azfunc",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": false
          },
          "style": "powerline",
          "template": " \uf0e7{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "azfunc"
        },
        {
          "background_templates": [
            "{{if contains \"default\" .Profile}}p:aws-default{{end}}",
            "{{if contains \"jan\" .Profile}}p:aws-jan{{end}}"
          ],
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_default": false
          },
          "style": "powerline",
          "template": " \ue7ad {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} ",
          "type": "aws"
        },
        {
          "background": "p:root",
          "foreground": "p:black",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0ad ",
          "type": "root"
        },
        {
          "background": "p:executiontime",
          "foreground": "p:white",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> \ueba2{{ .FormattedMs }}\u2800",
          "type": "executiontime"
        },
        {
          "background": "p:exit",
          "background_templates": [
            "{{ if gt .Code 0 }}p:exit-red{{ end }}"
          ],
          "foreground": "p:white",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": "<parentBackground>\ue0b0</> \ue23a ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "segments": [
        {
          "background": "p:shell",
          "foreground": "p:white",
          "style": "plain",
          "template": "<#0077c2,transparent>\ue0b6</> \uf489 {{ .Name }} <transparent,#0077c2>\ue0b2</>",
          "type": "shell"
        },
        {
          "background": "p:ytm",
          "foreground": "p:black",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "paused_icon": "\uf04c ",
            "playing_icon": "\uf04b "
          },
          "style": "powerline",
          "template": " \uf167 {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} ",
          "type": "ytm"
        },
        {
          "background": "p:battery",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}p:battery-charging{{end}}",
            "{{if eq \"Discharging\" .State.String}}p:battery-discharging{{end}}",
            "{{if eq \"Full\" .State.String}}p:battery-charged{{end}}"
          ],
          "foreground": "p:white",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "charged_icon": "\ue22f ",
            "charging_icon": "\ue234 ",
            "discharging_icon": "\ue231 "
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 ",
          "type": "battery"
        },
        {
          "background": "p:time",
          "foreground": "p:black",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "palette": {
    "aws-default": "#FFA400",
    "aws-jan": "#F1184C",
    "azfunc": "#FEAC19",
    "battery": "#F36943",
    "battery-charged": "#4CAF50",
    "battery-charging": "#40C4FF",
    "battery-discharging": "#FF5722",
    "black": "#111111",
    "executiontime": "#83769C",
    "exit": "#00897B",
    "exit-red": "#E91E63",
    "git": "#FFFB38",
    "git-ahead": "#B388FF",
    "git-behind": "#B388FF",
    "git-diverged": "#FF4500",
    "git-foreground": "#193549",
    "git-modified": "#FF9248",
    "go": "#8ED1F7",
    "julia": "#4063D8",
    "node": "#6CA35E",
    "path": "#FF479C",
    "python": "#FFDE57",
    "root": "#FFFF66",
    "ruby": "#AE1401",
    "session": "#C386F1",
    "shell": "#0077C2",
    "time": "#2E9599",
    "white": "#FFFFFF",
    "ytm": "#1BD760"
  },
  "version": 3
}



================================================
FILE: src/test/jandedobbeleer.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#c386f1",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#ff479c",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": " \ue0b1 ",
            "home_icon": "~",
            "style": "folder"
          },
          "style": "powerline",
          "template": " \uea83  {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#fffb38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#193549",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "#6CA35E",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#8ED1F7",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "go"
        },
        {
          "background": "#4063D8",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue624 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "julia"
        },
        {
          "background": "#FFDE57",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_virtual_env": false
          },
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#AE1401",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue791 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "ruby"
        },
        {
          "background": "#FEAC19",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": false
          },
          "style": "powerline",
          "template": " \uf0e7{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "azfunc"
        },
        {
          "background_templates": [
            "{{if contains \"default\" .Profile}}#FFA400{{end}}",
            "{{if contains \"jan\" .Profile}}#f1184c{{end}}"
          ],
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_default": false
          },
          "style": "powerline",
          "template": " \ue7ad {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} ",
          "type": "aws"
        },
        {
          "background": "#ffff66",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0ad ",
          "type": "root"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> \ueba2{{ .FormattedMs }}\u2800",
          "type": "executiontime"
        },
        {
          "background": "#00897b",
          "background_templates": [
            "{{ if gt .Code 0 }}#e91e63{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": "<parentBackground>\ue0b0</> \ue23a ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "segments": [
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#0077c2,transparent>\ue0b6</> \uf489 {{ .Name }} <transparent,#0077c2>\ue0b2</>",
          "type": "shell"
        },
        {
          "background": "#1BD760",
          "foreground": "#111111",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "paused_icon": "\uf04c ",
            "playing_icon": "\uf04b "
          },
          "style": "powerline",
          "template": " \uf167 {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} ",
          "type": "ytm"
        },
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "charged_icon": "\ue22f ",
            "charging_icon": "\ue234 ",
            "discharging_icon": "\ue231 "
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 ",
          "type": "battery"
        },
        {
          "background": "#2e9599",
          "foreground": "#111111",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: src/test/kubectl.yml
================================================
apiVersion: v1
clusters: null
contexts:
  - context:
      cluster: '%s'
      user: '%s'
      namespace: '%s'
    name: jan
current-context: '%s'
kind: Config
preferences: {}
users: null



================================================
FILE: src/test/oh-my-posh.psd1
================================================
﻿#
# Module manifest for module 'oh-my-posh'
#
# Generated by: Jan
#
# Generated on: 28-Jun-16
#

@{

# Version number of this module.
ModuleVersion = '1.0.0.0'

# Script module or binary module file associated with this manifest.
RootModule = 'oh-my-posh.psm1'

# ID used to uniquely identify this module
GUID = '7d7c4a78-e2fe-4e5f-9510-34ac893e4562'

# Company or vendor of this module
CompanyName = 'Unknown'

# Author of this module
Author = 'Jan De Dobbeleer'

# Copyright statement for this module
Copyright = '(c) 2018 Jan De Dobbeleer. All rights reserved.'

# Description of the functionality provided by this module
Description = 'Theming capabilities for the PowerShell prompt in ConEmu'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '5.0'

# List of all files packaged with this module
FileList = @('defaults.ps1', 'Themes/Agnoster.psm1', 'Themes/Avit.psm1', 'Themes/Darkblood.psm1', 'Themes/Fish.psm1', 'Themes/Honukai.psm1', 'Themes/Paradox.psm1', 'Themes/Sorin.psm1', 'Helpers/PoshGit.ps1', 'Helpers/Prompt.ps1')

# Cmdlets to export from this module
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @()

# Aliases to export from this module
AliasesToExport = '*'

# Functions to export from this module
FunctionsToExport = @('Write-ColorPreview',
                      'Show-Colors',
                      'Show-ThemeColors',
                      'Show-ThemeSymbols',
                      'Get-Theme',
                      'Set-Theme',
                      'Get-VCSStatus',
                      'Get-VcsInfo',
                      'Get-FormattedRootLocation',
                      'Get-ShortPath',
                      'Get-FullPath',
                      'Set-CursorForRightBlockWrite',
                      'Set-CursorUp',
                      'Test-VirtualEnv',
                      'Get-VirtualEnvName',
                      'Test-NotDefaultUser',
                      'Test-Administrator',
                      'Get-ComputerName',
                      'Set-Newline',
                      'Get-BatteryInfo',
                      'Get-ThemesLocation'
                      'Set-Prompt')

# Private data to pass to the module specified in RootModule. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = @('git', 'agnoster', 'theme', 'zsh', 'posh-git', 'prompt', 'paradox')

        # A URL to the license for this module.
        LicenseUri = 'https://github.com/JanDeDobbeleer/oh-my-posh2/blob/master/LICENSE'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/JanDeDobbeleer/oh-my-posh2'

    } # End of PSData hashtable

} # End of PrivateData hashtable

}



================================================
FILE: src/test/valid.nuspec
================================================
<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>Az.Compute</id>
    <title>Az.Compute</title>
    <version>0.1.0</version>
    <authors>Microsoft Corporation</authors>
    <owners>Microsoft Corporation</owners>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <licenseUrl>https://aka.ms/azps-license</licenseUrl>
    <projectUrl>https://github.com/Azure/azure-powershell</projectUrl>
    <description>Microsoft Azure PowerShell: $(service-name) cmdlets</description>
    <releaseNotes></releaseNotes>
    <copyright>Microsoft Corporation. All rights reserved.</copyright>
    <tags>Azure ResourceManager ARM PSModule $(service-name)</tags>
    <dependencies>
      <dependency id="Az.Accounts" version="2.2.3" />
    </dependencies>
  </metadata>
  <files>
    <file src="Az.Compute.format.ps1xml" />
    <file src="Az.Compute.psd1" />
    <file src="Az.Compute.psm1" />
    <!-- https://github.com/NuGet/Home/issues/3584 -->
    <file src="bin/Az.Compute.private.dll" target="bin" />
    <file src="bin\Az.Compute.private.deps.json" target="bin" />
    <file src="internal\**\*.*" exclude="internal\README.md" target="internal" />
    <file src="custom\**\*.*" exclude="custom\README.md;custom\**\*.cs" target="custom" />
    <file src="docs\**\*.md" exclude="docs\README.md" target="docs" />
    <file src="exports\**\ProxyCmdletDefinitions.ps1" target="exports" />
    <file src="utils\**\*.*" target="utils" />
  </files>
</package>



================================================
FILE: src/test/versions.tf
================================================
terraform {
  required_version = ">= 1.0.10"
}



================================================
FILE: src/test/nba/schedule.json
================================================
{
  "resource": "internationalbroadcasterschedule",
  "parameters": {
    "LeagueID": "00",
    "Season": "2023",
    "RegionID": 1,
    "Date": "10/26/2023",
    "EST": "Y"
  },
  "resultSets": [
    {
      "NextGameList": [
        {
          "gameID": "0022300075",
          "vtCity": "Philadelphia",
          "vtNickName": "76ers",
          "vtShortName": "Philadelphia",
          "vtAbbreviation": "PHI",
          "htCity": "Milwaukee",
          "htNickName": "Bucks",
          "htShortName": "Milwaukee",
          "htAbbreviation": "MIL",
          "date": "10/26/2023",
          "time": "07:30 PM",
          "day": "Thu",
          "broadcasters": [
            {
              "broadcastID": "10",
              "broadcasterName": "TNT",
              "tapeDelayComments": ""
            }
          ]
        },
        {
          "gameID": "0022300076",
          "vtCity": "Phoenix",
          "vtNickName": "Suns",
          "vtShortName": "Phoenix",
          "vtAbbreviation": "PHX",
          "htCity": "Los Angeles",
          "htNickName": "Lakers",
          "htShortName": "L.A. Lakers",
          "htAbbreviation": "LAL",
          "date": "10/26/2023",
          "time": "10:00 PM",
          "day": "Thu",
          "broadcasters": [
            {
              "broadcastID": "10",
              "broadcasterName": "TNT",
              "tapeDelayComments": ""
            }
          ]
        }
      ]
    },
    {
      "CompleteGameList": [
        {
          "gameID": "0022300075",
          "vtCity": "Philadelphia",
          "vtNickName": "76ers",
          "vtShortName": "Philadelphia",
          "vtAbbreviation": "PHI",
          "htCity": "Milwaukee",
          "htNickName": "Bucks",
          "htShortName": "Milwaukee",
          "htAbbreviation": "MIL",
          "date": "10/26/2023",
          "time": "07:30 PM",
          "day": "Thu",
          "broadcastID": "10",
          "broadcasterName": "TNT",
          "tapeDelayComments": ""
        },
        {
          "gameID": "0022300076",
          "vtCity": "Phoenix",
          "vtNickName": "Suns",
          "vtShortName": "Phoenix",
          "vtAbbreviation": "PHX",
          "htCity": "Los Angeles",
          "htNickName": "Lakers",
          "htShortName": "L.A. Lakers",
          "htAbbreviation": "LAL",
          "date": "10/26/2023",
          "time": "10:00 PM",
          "day": "Thu",
          "broadcastID": "10",
          "broadcasterName": "TNT",
          "tapeDelayComments": ""
        }
      ]
    }
  ]
}



================================================
FILE: src/test/nba/score.json
================================================
{
  "meta": {
    "version": 1,
    "request": "https://nba-prod-us-east-1-mediaops-stats.s3.amazonaws.com/NBA/liveData/scoreboard/todaysScoreboard_00.json",
    "time": "2023-10-19 01:17:57.1757",
    "code": 200
  },
  "scoreboard": {
    "gameDate": "2023-10-19",
    "leagueId": "00",
    "leagueName": "National Basketball Association",
    "games": [
      {
        "gameId": "0012300060",
        "gameCode": "20231019/BOSCHA",
        "gameStatus": 2,
        "gameStatusText": "Q1 8:23",
        "period": 0,
        "gameClock": "Q1 8:23",
        "gameTimeUTC": "2023-10-19T23:00:00Z",
        "gameEt": "2023-10-19T19:00:00Z",
        "regulationPeriods": 4,
        "ifNecessary": false,
        "seriesGameNumber": "",
        "seriesText": "Preseason",
        "seriesConference": "",
        "poRoundDesc": "",
        "gameSubtype": "",
        "homeTeam": {
          "teamId": 1610612766,
          "teamName": "Hornets",
          "teamCity": "Charlotte",
          "teamTricode": "CHA",
          "wins": 1,
          "losses": 0,
          "score": 13,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "awayTeam": {
          "teamId": 1610612738,
          "teamName": "Celtics",
          "teamCity": "Boston",
          "teamTricode": "BOS",
          "wins": 0,
          "losses": 1,
          "score": 8,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "gameLeaders": {
          "homeLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "CHA",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          },
          "awayLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "BOS",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          }
        },
        "pbOdds": {
          "team": null,
          "odds": 0.0,
          "suspended": 0
        }
      },
      {
        "gameId": "0012300061",
        "gameCode": "20231019/MINCHI",
        "gameStatus": 1,
        "gameStatusText": "8:00 pm ET",
        "period": 0,
        "gameClock": "",
        "gameTimeUTC": "2023-10-20T00:00:00Z",
        "gameEt": "2023-10-19T20:00:00Z",
        "regulationPeriods": 4,
        "ifNecessary": false,
        "seriesGameNumber": "",
        "seriesText": "Preseason",
        "seriesConference": "",
        "poRoundDesc": "",
        "gameSubtype": "",
        "homeTeam": {
          "teamId": 1610612741,
          "teamName": "Bulls",
          "teamCity": "Chicago",
          "teamTricode": "CHI",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "awayTeam": {
          "teamId": 1610612750,
          "teamName": "Timberwolves",
          "teamCity": "Minnesota",
          "teamTricode": "MIN",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "gameLeaders": {
          "homeLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "CHI",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          },
          "awayLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "MIN",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          }
        },
        "pbOdds": {
          "team": null,
          "odds": 0.0,
          "suspended": 0
        }
      },
      {
        "gameId": "0012300062",
        "gameCode": "20231019/DETOKC",
        "gameStatus": 1,
        "gameStatusText": "8:00 pm ET",
        "period": 0,
        "gameClock": "",
        "gameTimeUTC": "2023-10-20T00:00:00Z",
        "gameEt": "2023-10-19T20:00:00Z",
        "regulationPeriods": 4,
        "ifNecessary": false,
        "seriesGameNumber": "",
        "seriesText": "Preseason",
        "seriesConference": "",
        "poRoundDesc": "",
        "gameSubtype": "",
        "homeTeam": {
          "teamId": 1610612760,
          "teamName": "Thunder",
          "teamCity": "Oklahoma City",
          "teamTricode": "OKC",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "awayTeam": {
          "teamId": 1610612765,
          "teamName": "Pistons",
          "teamCity": "Detroit",
          "teamTricode": "DET",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "gameLeaders": {
          "homeLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "OKC",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          },
          "awayLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "DET",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          }
        },
        "pbOdds": {
          "team": null,
          "odds": 0.0,
          "suspended": 0
        }
      },
      {
        "gameId": "0012300063",
        "gameCode": "20231019/PHXLAL",
        "gameStatus": 1,
        "gameStatusText": "10:00 pm ET",
        "period": 0,
        "gameClock": "",
        "gameTimeUTC": "2023-10-20T02:00:00Z",
        "gameEt": "2023-10-19T22:00:00Z",
        "regulationPeriods": 4,
        "ifNecessary": false,
        "seriesGameNumber": "",
        "seriesText": "Preseason",
        "seriesConference": "",
        "poRoundDesc": "",
        "gameSubtype": "",
        "homeTeam": {
          "teamId": 1610612747,
          "teamName": "Lakers",
          "teamCity": "Los Angeles",
          "teamTricode": "LAL",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "awayTeam": {
          "teamId": 1610612756,
          "teamName": "Suns",
          "teamCity": "Phoenix",
          "teamTricode": "PHX",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "gameLeaders": {
          "homeLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "LAL",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          },
          "awayLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "PHX",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          }
        },
        "pbOdds": {
          "team": null,
          "odds": 0.0,
          "suspended": 0
        }
      },
      {
        "gameId": "0012300064",
        "gameCode": "20231019/DENLAC",
        "gameStatus": 1,
        "gameStatusText": "10:00 pm ET",
        "period": 0,
        "gameClock": "",
        "gameTimeUTC": "2023-10-20T02:00:00Z",
        "gameEt": "2023-10-19T22:00:00Z",
        "regulationPeriods": 4,
        "ifNecessary": false,
        "seriesGameNumber": "",
        "seriesText": "Preseason",
        "seriesConference": "",
        "poRoundDesc": "",
        "gameSubtype": "",
        "homeTeam": {
          "teamId": 1610612746,
          "teamName": "Clippers",
          "teamCity": "LA",
          "teamTricode": "LAC",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "awayTeam": {
          "teamId": 1610612743,
          "teamName": "Nuggets",
          "teamCity": "Denver",
          "teamTricode": "DEN",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "gameLeaders": {
          "homeLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "LAC",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          },
          "awayLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "DEN",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          }
        },
        "pbOdds": {
          "team": null,
          "odds": 0.0,
          "suspended": 0
        }
      },
      {
        "gameId": "0012300065",
        "gameCode": "20231019/UTASAC",
        "gameStatus": 1,
        "gameStatusText": "10:00 pm ET",
        "period": 0,
        "gameClock": "",
        "gameTimeUTC": "2023-10-20T02:00:00Z",
        "gameEt": "2023-10-19T22:00:00Z",
        "regulationPeriods": 4,
        "ifNecessary": false,
        "seriesGameNumber": "",
        "seriesText": "Preseason",
        "seriesConference": "",
        "poRoundDesc": "",
        "gameSubtype": "",
        "homeTeam": {
          "teamId": 1610612758,
          "teamName": "Kings",
          "teamCity": "Sacramento",
          "teamTricode": "SAC",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "awayTeam": {
          "teamId": 1610612762,
          "teamName": "Jazz",
          "teamCity": "Utah",
          "teamTricode": "UTA",
          "wins": 0,
          "losses": 0,
          "score": 0,
          "seed": null,
          "inBonus": null,
          "timeoutsRemaining": 0,
          "periods": [
            {
              "period": 1,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 2,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 3,
              "periodType": "REGULAR",
              "score": 0
            },
            {
              "period": 4,
              "periodType": "REGULAR",
              "score": 0
            }
          ]
        },
        "gameLeaders": {
          "homeLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "SAC",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          },
          "awayLeaders": {
            "personId": 0,
            "name": "",
            "jerseyNum": "",
            "position": "",
            "teamTricode": "UTA",
            "playerSlug": null,
            "points": 0,
            "rebounds": 0,
            "assists": 0
          }
        },
        "pbOdds": {
          "team": null,
          "odds": 0.0,
          "suspended": 0
        }
      }
    ]
  }
}



================================================
FILE: src/test/signing/checksums.txt
================================================
4ad2e70db23f6c0441df61a07370d352081e93fab32867e797d6dfa3f45814ce  posh-windows-arm64.exe



================================================
FILE: src/test/signing/checksums.txt.invalid.sig
================================================
[Binary file]


================================================
FILE: src/test/signing/checksums.txt.sig
================================================
[Binary file]


================================================
FILE: src/test/umbraco/ANonUmbracoProject.csproj
================================================
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\packages\UmbracoCms.7.15.7\build\UmbracoCms.props" Condition="Exists('..\packages\UmbracoCms.7.15.7\build\UmbracoCms.props')" />
  <Import Project="..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.1\build\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props" Condition="Exists('..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.1\build\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props')" />
  <Import Project="..\packages\uSync.3.2.2.740\build\uSync.props" Condition="Exists('..\packages\uSync.3.2.2.740\build\uSync.props')" />
  <Import Project="..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props" Condition="Exists('..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props')" />
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{EA5AED40-16B4-41F6-98BB-C4EE8F6B1893}</ProjectGuid>
    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>MyOtherProject.Site</RootNamespace>
    <AssemblyName>MyOtherProject.Site</AssemblyName>
    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>
    <UseIISExpress>true</UseIISExpress>
    <IISExpressSSLPort>44333</IISExpressSSLPort>
    <IISExpressAnonymousAuthentication />
    <IISExpressWindowsAuthentication />
    <IISExpressUseClassicPipelineMode />
    <UseGlobalApplicationHostFile />
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
    <Use64BitIISExpress />
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <UpgradeBackupLocation>
    </UpgradeBackupLocation>
    <OldToolsVersion>12.0</OldToolsVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="AngularGoogleMaps, Version=2.0.1.35, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\AngularGoogleMaps.2.0.1\lib\net45\AngularGoogleMaps.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Archetype, Version=1.13.1.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Archetype.Binaries.1.13.1\lib\net40\Archetype.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="AutoMapper, Version=3.3.1.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005, processorArchitecture=MSIL">
      <HintPath>..\packages\AutoMapper.3.3.1\lib\net40\AutoMapper.dll</HintPath>
    </Reference>
    <Reference Include="AutoMapper.Net4, Version=3.3.1.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005, processorArchitecture=MSIL">
      <HintPath>..\packages\AutoMapper.3.3.1\lib\net40\AutoMapper.Net4.dll</HintPath>
    </Reference>
    <Reference Include="businesslogic, Version=1.0.7706.20575, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\businesslogic.dll</HintPath>
    </Reference>
    <Reference Include="ClientDependency.Core, Version=1.9.9.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ClientDependency.1.9.9\lib\net45\ClientDependency.Core.dll</HintPath>
    </Reference>
    <Reference Include="ClientDependency.Core.Mvc, Version=1.9.3.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ClientDependency-Mvc5.1.9.3\lib\net45\ClientDependency.Core.Mvc.dll</HintPath>
    </Reference>
    <Reference Include="cms, Version=1.0.7706.20575, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\cms.dll</HintPath>
    </Reference>
    <Reference Include="controls, Version=1.0.7706.20576, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\controls.dll</HintPath>
    </Reference>
    <Reference Include="CookComputing.XmlRpcV2, Version=2.5.0.0, Culture=neutral, PublicKeyToken=a7d6e17aa302004d, processorArchitecture=MSIL">
      <HintPath>..\packages\xmlrpcnet.2.5.0\lib\net20\CookComputing.XmlRpcV2.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Diplo.TraceLogViewer, Version=2.2.6.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\DiploTraceLogViewer.2.2.6\lib\net45\Diplo.TraceLogViewer.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Examine, Version=0.1.90.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Examine.0.1.90\lib\net45\Examine.dll</HintPath>
    </Reference>
    <Reference Include="FoolproofValidation, Version=0.9.5851.39121, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Foolproof.0.9.4518\lib\net45\FoolproofValidation.dll</HintPath>
    </Reference>   
    <Reference Include="HtmlAgilityPack, Version=1.8.8.0, Culture=neutral, PublicKeyToken=bd319b19eaf3b43a, processorArchitecture=MSIL">
      <HintPath>..\packages\HtmlAgilityPack.1.8.8\lib\Net45\HtmlAgilityPack.dll</HintPath>
    </Reference>
    <Reference Include="ICSharpCode.SharpZipLib, Version=0.86.0.518, Culture=neutral, PublicKeyToken=1b03e6acf1164f73, processorArchitecture=MSIL">
      <HintPath>..\packages\SharpZipLib.0.86.0\lib\20\ICSharpCode.SharpZipLib.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="ImageProcessor, Version=2.7.0.100, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ImageProcessor.2.7.0.100\lib\net452\ImageProcessor.dll</HintPath>
    </Reference>
    <Reference Include="ImageProcessor.Web, Version=4.10.0.100, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ImageProcessor.Web.4.10.0.100\lib\net452\ImageProcessor.Web.dll</HintPath>
    </Reference>
    <Reference Include="ImageResizer, Version=3.4.3.103, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ImageResizer.3.4.3\lib\ImageResizer.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="ImageResizer.Mvc, Version=3.4.3.103, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ImageResizer.Mvc.3.4.3\lib\ImageResizer.Mvc.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="ImageResizer.Plugins.DiskCache, Version=3.4.3.103, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\ImageResizer.Plugins.DiskCache.3.4.3\lib\ImageResizer.Plugins.DiskCache.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="interfaces, Version=1.0.7706.20568, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\interfaces.dll</HintPath>
    </Reference>
    <Reference Include="Jumoo.uSync.BackOffice, Version=3.2.2.740, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\uSync.3.2.2.740\lib\net45\Jumoo.uSync.BackOffice.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Jumoo.uSync.Core, Version=5.5.2.740, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\uSync.Core.5.5.2.740\lib\net45\Jumoo.uSync.Core.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="log4net, Version=2.0.12.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\log4net.dll</HintPath>
    </Reference>
    <Reference Include="Log4Net.Async, Version=2.0.4.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Log4Net.Async.2.0.4\lib\net40\Log4Net.Async.dll</HintPath>
    </Reference>
    <Reference Include="Lucene.Net, Version=2.9.4.1, Culture=neutral, PublicKeyToken=85089178b9ac3181, processorArchitecture=MSIL">
      <HintPath>..\packages\Lucene.Net.2.9.4.1\lib\net40\Lucene.Net.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="MailChimp.Net, Version=4.2.1.0, Culture=neutral, PublicKeyToken=37d26d538413c581">
      <HintPath>..\packages\MailChimp.Net.V3.4.2.1\lib\net45\MailChimp.Net.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="MailChimp.Net.V3, Version=1.7.0.0, Culture=neutral, PublicKeyToken=37d26d538413c581, processorArchitecture=MSIL">
      <HintPath>..\packages\MailChimp.Net.V3.1.7.0.0\lib\net45\MailChimp.Net.V3.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="MarkdownSharp, Version=1.14.5.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Markdown.1.14.7\lib\net45\MarkdownSharp.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AI.Agent.Intercept, Version=2.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.Agent.Intercept.2.4.0\lib\net45\Microsoft.AI.Agent.Intercept.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AI.DependencyCollector, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.DependencyCollector.2.4.1\lib\net45\Microsoft.AI.DependencyCollector.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AI.PerfCounterCollector, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.PerfCounterCollector.2.4.1\lib\net45\Microsoft.AI.PerfCounterCollector.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AI.ServerTelemetryChannel, Version=2.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.2.4.0\lib\net45\Microsoft.AI.ServerTelemetryChannel.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AI.Web, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.Web.2.4.1\lib\net45\Microsoft.AI.Web.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AI.WindowsServer, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.WindowsServer.2.4.1\lib\net45\Microsoft.AI.WindowsServer.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.ApplicationBlocks.Data, Version=1.0.1559.20655, Culture=neutral">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\Microsoft.ApplicationBlocks.Data.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.ApplicationInsights, Version=2.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.2.4.0\lib\net45\Microsoft.ApplicationInsights.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.ApplicationInsights.Log4NetAppender, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.ApplicationInsights.Log4NetAppender.2.4.1\lib\net45\Microsoft.ApplicationInsights.Log4NetAppender.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AspNet.Identity.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.Identity.Core.2.2.2\lib\net45\Microsoft.AspNet.Identity.Core.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AspNet.Identity.Owin, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.Identity.Owin.2.2.2\lib\net45\Microsoft.AspNet.Identity.Owin.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AspNet.SignalR.Core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.SignalR.Core.2.4.1\lib\net45\Microsoft.AspNet.SignalR.Core.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AspNet.TelemetryCorrelation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.TelemetryCorrelation.1.0.0\lib\net45\Microsoft.AspNet.TelemetryCorrelation.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Common.1.0.0\lib\net45\Microsoft.CodeAnalysis.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.1.0.0\lib\net45\Microsoft.CodeAnalysis.CSharp.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.1\lib\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.IO.RecyclableMemoryStream, Version=1.2.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.IO.RecyclableMemoryStream.1.2.2\lib\net45\Microsoft.IO.RecyclableMemoryStream.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Owin, Version=4.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Owin.4.0.1\lib\net45\Microsoft.Owin.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Owin.Host.SystemWeb, Version=4.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Owin.Host.SystemWeb.4.0.1\lib\net45\Microsoft.Owin.Host.SystemWeb.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Owin.Security, Version=4.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Owin.Security.4.0.1\lib\net45\Microsoft.Owin.Security.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Owin.Security.Cookies, Version=4.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Owin.Security.Cookies.4.0.1\lib\net45\Microsoft.Owin.Security.Cookies.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Owin.Security.OAuth, Version=4.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Owin.Security.OAuth.4.0.1\lib\net45\Microsoft.Owin.Security.OAuth.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Web.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="MiniProfiler, Version=2.1.0.0, Culture=neutral, PublicKeyToken=b44f9351044011a3, processorArchitecture=MSIL">
      <HintPath>..\packages\MiniProfiler.2.1.0\lib\net40\MiniProfiler.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d, processorArchitecture=MSIL">
      <HintPath>..\packages\MySql.Data.6.9.9\lib\net45\MySql.Data.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>..\packages\Newtonsoft.Json.12.0.2\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="Ninject, Version=3.2.0.0, Culture=neutral, PublicKeyToken=c7192dc5380945e7, processorArchitecture=MSIL">
      <HintPath>..\packages\Ninject.3.2.2.0\lib\net45-full\Ninject.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Ninject.Web.Common, Version=3.2.0.0, Culture=neutral, PublicKeyToken=c7192dc5380945e7, processorArchitecture=MSIL">
      <HintPath>..\packages\Ninject.Web.Common.3.2.0.0\lib\net45-full\Ninject.Web.Common.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Ninject.Web.Mvc, Version=3.2.0.0, Culture=neutral, PublicKeyToken=c7192dc5380945e7, processorArchitecture=MSIL">
      <HintPath>..\packages\Ninject.MVC3.3.2.1.0\lib\net45-full\Ninject.Web.Mvc.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Nustache.Core, Version=1.16.0.1, Culture=neutral, PublicKeyToken=efd6f3d8f76ecd9f, processorArchitecture=MSIL">
      <HintPath>..\packages\Nustache.1.16.0.1\lib\net20\Nustache.Core.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Nustache.Mvc3, Version=1.13.8.22, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Nustache.Mvc3.1.13.8.22\lib\net40\Nustache.Mvc3.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Our.Umbraco.Ditto, Version=0.10.6091.32633, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Our.Umbraco.Ditto.0.10.0\lib\net45\Our.Umbraco.Ditto.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Our.Umbraco.NestedContent, Version=0.3.6033.18955, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Our.Umbraco.NestedContent.0.3.0\lib\net45\Our.Umbraco.NestedContent.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Owin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f0ebd12fd5e55cc5, processorArchitecture=MSIL">
      <HintPath>..\packages\Owin.1.0\lib\net40\Owin.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="RazorEngine, Version=3.4.1.0, Culture=neutral, PublicKeyToken=9ee697374c7e744a, processorArchitecture=MSIL">
      <HintPath>..\packages\RazorEngine.3.4.1\lib\net45\RazorEngine.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Semver, Version=1.1.2.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\semver.1.1.2\lib\net451\Semver.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="SQLCE4Umbraco, Version=1.0.7706.20576, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\SQLCE4Umbraco.dll</HintPath>
    </Reference>
    <Reference Include="System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Collections.Immutable.1.1.36\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Data.SqlServerCe, Version=4.0.0.1, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\System.Data.SqlServerCe.dll</HintPath>
    </Reference>
    <Reference Include="System.Data.SqlServerCe.Entity, Version=4.0.0.1, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\System.Data.SqlServerCe.Entity.dll</HintPath>
    </Reference>
    <Reference Include="System.Diagnostics.DiagnosticSource, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Diagnostics.DiagnosticSource.4.4.0\lib\net45\System.Diagnostics.DiagnosticSource.dll</HintPath>
    </Reference>
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Net.Http.Formatting, Version=5.2.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebApi.Client.5.2.7\lib\net45\System.Net.Http.Formatting.dll</HintPath>
    </Reference>
    <Reference Include="System.Reflection.Metadata, Version=1.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Reflection.Metadata.1.0.21\lib\portable-net45+win8\System.Reflection.Metadata.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Security" />
    <Reference Include="System.Threading.Tasks.Dataflow, Version=4.6.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Threading.Tasks.Dataflow.4.9.0\lib\portable-net45+win8+wpa81\System.Threading.Tasks.Dataflow.dll</HintPath>
    </Reference>
    <Reference Include="System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\packages\System.ValueTuple.4.5.0\lib\netstandard1.0\System.ValueTuple.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.DynamicData" />
    <Reference Include="System.Web.Entity" />
    <Reference Include="System.Web.ApplicationServices" />
    <Reference Include="System.ComponentModel.DataAnnotations" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Web.Helpers, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.7\lib\net45\System.Web.Helpers.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Http, Version=5.2.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebApi.Core.5.2.7\lib\net45\System.Web.Http.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Http.WebHost, Version=5.2.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebApi.WebHost.5.2.7\lib\net45\System.Web.Http.WebHost.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Mvc, Version=5.2.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.Mvc.5.2.7\lib\net45\System.Web.Mvc.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.Razor.3.2.7\lib\net45\System.Web.Razor.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.WebPages, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.7\lib\net45\System.Web.WebPages.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.WebPages.Deployment, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.7\lib\net45\System.Web.WebPages.Deployment.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.7\lib\net45\System.Web.WebPages.Razor.dll</HintPath>
    </Reference>
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Web" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Web.Services" />
    <Reference Include="System.EnterpriseServices" />
    <Reference Include="TidyNet, Version=1.0.0.0, Culture=neutral">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\TidyNet.dll</HintPath>
    </Reference>
    <Reference Include="umbraco, Version=1.0.7706.20577, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\umbraco.dll</HintPath>
    </Reference>
    <Reference Include="Umbraco.Core, Version=1.0.7706.20570, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\Umbraco.Core.dll</HintPath>
    </Reference>
    <Reference Include="umbraco.DataLayer, Version=1.0.7706.20574, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\umbraco.DataLayer.dll</HintPath>
    </Reference>
    <Reference Include="umbraco.editorControls, Version=1.0.7706.20582, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\umbraco.editorControls.dll</HintPath>
    </Reference>
    <Reference Include="umbraco.MacroEngines, Version=1.0.7706.20582, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\umbraco.MacroEngines.dll</HintPath>
    </Reference>
    <Reference Include="Umbraco.ModelsBuilder, Version=3.0.10.102, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Umbraco.ModelsBuilder.3.0.10\lib\Umbraco.ModelsBuilder.dll</HintPath>
    </Reference>
    <Reference Include="umbraco.providers, Version=1.0.7706.20577, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\umbraco.providers.dll</HintPath>
    </Reference>
    <Reference Include="Umbraco.Web.UI, Version=1.0.7706.20585, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\Umbraco.Web.UI.dll</HintPath>
    </Reference>
    <Reference Include="UmbracoExamine, Version=0.7.0.20576, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UmbracoCms.Core.7.15.7\lib\net452\UmbracoExamine.dll</HintPath>
    </Reference>
    <Reference Include="UrlRewritingNet.UrlRewriter, Version=2.0.7.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\UrlRewritingNet.2.0.7\lib\UrlRewritingNet.UrlRewriter.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="WebActivatorEx, Version=2.0.0.0, Culture=neutral, PublicKeyToken=7b26dc2a43f6a0d4, processorArchitecture=MSIL">
      <HintPath>..\packages\WebActivatorEx.2.0\lib\net40\WebActivatorEx.dll</HintPath>
      <Private>True</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Content Include=".gitignore" />
    <Content Include="500.aspx" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\agm-mapprovider.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\agm.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\angular-google-maps.2.1.0.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\angular-google-maps.2.1.0.min.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\angular-google-maps.2.3.3.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\angular-google-maps.2.3.3.min.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\angular-simple-logger.min.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\config.coordinatesbehavour.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\config.defaultlocation.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\config.definition.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\config.format.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\config.icon.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\iconanchorpoint.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\iconsize.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\iconurl.html" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\map-example.png" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\underscore-min.js" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\view.css" />
    <Content Include="App_Plugins\AngularGoogleMaps\2.0.1\view.html" />
    <Content Include="App_Plugins\Archetype\assets\logo_50.png" />
    <Content Include="App_Plugins\Archetype\assets\twitter.png" />
    <Content Include="App_Plugins\Archetype\css\archetype.css" />
    <Content Include="App_Plugins\Archetype\js\archetype.js" />
    <Content Include="App_Plugins\Archetype\langs\da-dk.js" />
    <Content Include="App_Plugins\Archetype\langs\da.js" />
    <Content Include="App_Plugins\Archetype\langs\de-de.js" />
    <Content Include="App_Plugins\Archetype\langs\de.js" />
    <Content Include="App_Plugins\Archetype\langs\en-gb.js" />
    <Content Include="App_Plugins\Archetype\langs\en-us.js" />
    <Content Include="App_Plugins\Archetype\langs\en.js" />
    <Content Include="App_Plugins\Archetype\langs\es-es.js" />
    <Content Include="App_Plugins\Archetype\langs\es.js" />
    <Content Include="App_Plugins\Archetype\langs\fr-fr.js" />
    <Content Include="App_Plugins\Archetype\langs\he-il.js" />
    <Content Include="App_Plugins\Archetype\langs\it-it.js" />
    <Content Include="App_Plugins\Archetype\langs\ja-jp.js" />
    <Content Include="App_Plugins\Archetype\langs\ko-kr.js" />
    <Content Include="App_Plugins\Archetype\langs\nb-no.js" />
    <Content Include="App_Plugins\Archetype\langs\nl-nl.js" />
    <Content Include="App_Plugins\Archetype\langs\pl-pl.js" />
    <Content Include="App_Plugins\Archetype\langs\pt-br.js" />
    <Content Include="App_Plugins\Archetype\langs\ru-ru.js" />
    <Content Include="App_Plugins\Archetype\langs\sv-se.js" />
    <Content Include="App_Plugins\Archetype\langs\zh-cn.js" />
    <Content Include="App_Plugins\Archetype\views\archetype.config.developer.dialog.html" />
    <Content Include="App_Plugins\Archetype\views\archetype.config.fieldset.dialog.html" />
    <Content Include="App_Plugins\Archetype\views\archetype.config.html" />
    <Content Include="App_Plugins\Archetype\views\archetype.config.stylescript.dialog.html" />
    <Content Include="App_Plugins\Archetype\views\archetype.default.html" />
    <Content Include="App_Plugins\Archetype\views\archetype.html" />
    <Content Include="App_Plugins\BondOfferDatabaseDownload\lang\en-GB.xml" />
    <Content Include="App_Plugins\DiploTraceLogViewer\backoffice\diplotracelog\detail.html" />
    <Content Include="App_Plugins\DiploTraceLogViewer\backoffice\diplotracelog\edit.html" />
    <Content Include="App_Plugins\DiploTraceLogViewer\backoffice\diplotracelog\EditController.js" />
    <Content Include="App_Plugins\DiploTraceLogViewer\backoffice\diplotracelog\ng-table\ng-table.min.js" />
    <Content Include="App_Plugins\DiploTraceLogViewer\backoffice\diplotracelog\tracelog.css" />
    <Content Include="App_Plugins\DiploTraceLogViewer\readme.txt" />    
    <Content Include="App_Plugins\ModelsBuilder\modelsbuilder.controller.js" />
    <Content Include="App_Plugins\ModelsBuilder\modelsbuilder.htm" />
    <Content Include="App_Plugins\ModelsBuilder\modelsbuilder.resource.js" />
    <Content Include="App_Plugins\NestedContent\Css\nestedcontent.css" />
    <Content Include="App_Plugins\NestedContent\Js\nestedcontent.controllers.js" />
    <Content Include="App_Plugins\NestedContent\Js\nestedcontent.directives.js" />
    <Content Include="App_Plugins\NestedContent\Js\nestedcontent.resources.js" />
    <Content Include="App_Plugins\NestedContent\Views\nestedcontent.doctypepicker.html" />
    <Content Include="App_Plugins\NestedContent\Views\nestedcontent.editor.html" />
    <Content Include="App_Plugins\NestedContent\Views\nestedcontent.html" />
    <Content Include="App_Plugins\TheDashboard\TheDashboard.controller.js" />
    <Content Include="App_Plugins\TheDashboard\TheDashboard.css" />
    <Content Include="App_Plugins\TheDashboard\TheDashboard.html" />
    <Content Include="App_Plugins\TheDashboard\TheDevDashboard.controller.js" />
    <Content Include="App_Plugins\TheDashboard\TheDevDashboard.html" />
    <Content Include="App_Plugins\TheDashboard\umbraco-guy.png" />
    <Content Include="App_Plugins\BondOfferDatabaseDownload\backoffice\bondOfferDatabaseDownloadTree\edit.html" />
    <Content Include="App_Plugins\BondOfferDatabaseDownload\lang\en-US.xml" />
    <Content Include="App_Plugins\uSync\uSyncDashboard.css" />
    <Content Include="App_Plugins\uSync\uSyncDashboard.html" />
    <Content Include="App_Plugins\uSync\uSyncDashboardController.js" />
    <Content Include="App_Plugins\uSync\uSyncDashboardService.js" />
    <Content Include="App_Plugins\uTwit\js\uTwit.js" />
    <Content Include="App_Plugins\uTwit\TwitterOAuth1Callback.aspx" />
    <Content Include="App_Plugins\uTwit\views\uTwit.html" />
    <Content Include="bin\TheDashboard.dll" />
    <Content Include="Client Scripts\mvcfoolproof.unobtrusive.js" />
    <Content Include="Client Scripts\mvcfoolproof.unobtrusive.min.js" />
    <Content Include="Client Scripts\MvcFoolproofJQueryValidation.js" />
    <Content Include="Client Scripts\MvcFoolproofJQueryValidation.min.js" />
    <Content Include="Client Scripts\MvcFoolproofValidation.js" />
    <Content Include="Client Scripts\MvcFoolproofValidation.min.js" />
    <Content Include="Config\grid.editors.config.js" />
    <Content Include="Config\Lang\cs-CZ.user.xml" />
    <Content Include="Config\Lang\da-DK.user.xml" />
    <Content Include="Config\Lang\de-DE.user.xml" />
    <Content Include="Config\Lang\en-GB.user.xml" />
    <Content Include="Config\Lang\en-US.user.xml" />
    <Content Include="Config\Lang\es-ES.user.xml" />
    <Content Include="Config\Lang\fr-FR.user.xml" />
    <Content Include="Config\Lang\he-IL.user.xml" />
    <Content Include="Config\Lang\it-IT.user.xml" />
    <Content Include="Config\Lang\ja-JP.user.xml" />
    <Content Include="Config\Lang\ko-KR.user.xml" />
    <Content Include="Config\Lang\nb-NO.user.xml" />
    <Content Include="Config\Lang\nl-NL.user.xml" />
    <Content Include="Config\Lang\pl-PL.user.xml" />
    <Content Include="Config\Lang\pt-BR.user.xml" />
    <Content Include="Config\Lang\ru-RU.user.xml" />
    <Content Include="Config\Lang\sv-SE.user.xml" />
    <Content Include="Config\Lang\zh-CN.user.xml" />
    <Content Include="Config\UrlRewrites.config">
      <SubType>Designer</SubType>
    </Content>
    <Content Include="Content\Site.css" />
    <Content Include="default.aspx" />
    <Content Include="Global.asax" />
    <Content Include="gulp\scripts\modules\background-image.js" />
    <Content Include="gulp\scripts\modules\cookie-notice.js" />
    <Content Include="gulp\scripts\modules\helpers.js" />
    <Content Include="gulp\scripts\modules\twitter-timeline.js" />
    <Content Include="gulp\scripts\move\lite-yt-embed.js" />
    <Content Include="gulp\scss\move\wysiwyg.css" />
    <Content Include="Emails\_signup.html" />
    <Content Include="favicon.png" />
    <Content Include="gulpfile.js" />
    <Content Include="gulp\scripts\modules\banner.js" />
    <Content Include="gulp\scripts\modules\calc-block.js" />
    <Content Include="gulp\scripts\modules\external.js" />
    <Content Include="gulp\scripts\modules\faqs.js" />
    <Content Include="gulp\scripts\modules\faux-gallery.js" />
    <Content Include="gulp\scripts\modules\forms.js" />
    <Content Include="gulp\scripts\modules\icon-tabs.js" />
    <Content Include="gulp\scripts\modules\map.js" />
    <Content Include="gulp\scripts\modules\our-history.js" />
    <Content Include="gulp\scripts\modules\photo-gallery.js" />
    <Content Include="gulp\scripts\modules\popups.js" />
    <Content Include="gulp\scripts\modules\projects-map.js" />
    <Content Include="gulp\scripts\modules\tabs.js" />
    <Content Include="gulp\scripts\mvcfoolproof.unobtrusive.min.js" />
    <Content Include="gulp\scripts\plugins\cookies.js" />
    <Content Include="gulp\scripts\plugins\hogan.js" />
    <Content Include="gulp\scripts\plugins\jquery.bxslider.js" />
    <Content Include="gulp\scripts\plugins\jquery.timeout.js" />
    <Content Include="gulp\scripts\plugins\jquery.validate.js" />
    <Content Include="gulp\scripts\plugins\jquery.validate.unobtrusive.js" />
    <Content Include="gulp\scripts\plugins\modernizr.js" />
    <Content Include="gulp\scripts\site.js" />
    <Content Include="gulp\scss\modules\_shares-block.scss" />
    <Content Include="gulp\scss\modules\_report-block.scss" />
    <Content Include="gulp\scss\modules\_home-feature-block.scss" />
    <Content Include="gulp\scss\modules\_content-preview.scss" />
    <Content Include="App_Plugins\uTwit\package.manifest" />
    <Content Include="gulp\scss\modules\_calc-block.scss" />
    <Content Include="gulp\scss\modules\_calc-result.scss" />
    <Content Include="gulp\scss\modules\_help.scss" />
    <Content Include="Config\umbracoSettings.config">
      <SubType>Designer</SubType>
    </Content>
    <Content Include="Config\trees.config" />
    <Content Include="Config\ExamineSettings.config" />
    <Content Include="Config\ExamineIndex.config" />
    <Content Include="Config\Dashboard.config" />
    <Content Include="Config\ClientDependency.config" />
    <Content Include="Config\applications.config" />
    <Content Include="gulp\scss\modules\_quick-links.scss" />
    <Content Include="gulp\scss\modules\_help-pin.scss" />
    <Content Include="gulp\scss\modules\_our-history.scss" />
    <Content Include="gulp\scss\modules\_search.scss" />
    <Content Include="Config\uSyncCore.Config" />
    <Content Include="Config\uSyncBackOffice.Config" />
    <Content Include="App_Plugins\uSync\package.manifest" />
    <Content Include="gulp\scss\modules\_contact-block.scss" />
    <Content Include="Emails\SignUp.mustache" />
    <Content Include="Emails\SignUpClientText.mustache" />
    <Content Include="Emails\MasterFooter.mustache" />
    <Content Include="Emails\MasterHeader.mustache" />
    <Content Include="gulp\scss\modules\_bond-offer.scss" />
    <Content Include="Config\imageprocessor\security.config" />
    <Content Include="Config\imageprocessor\processing.config" />
    <Content Include="Config\imageprocessor\cache.config" />
    <Content Include="Config\log4net.config" />
    <Content Include="ApplicationInsights.config">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="Connected Services\Application Insights\ConnectedService.json" />
    <Content Include="gulp\scss\layout\_breadcrumbs.scss" />
    <Content Include="gulp\scss\layout\_awards.scss" />
    <Content Include="App_Plugins\ModelsBuilder\package.manifest" />
    <Content Include="Emails\SharesRegister.mustache" />
    <Content Include="App_Code\ContentHelper.cshtml" />
    <Content Include="gulp\scss\modules\_alert.scss" />
    <Content Include="Config\tinyMceConfig.config" />
    <Content Include="Config\scripting.config" />
    <Content Include="Config\HealthChecks.config" />
    <Content Include="Config\FileSystemProviders.config" />
    <Content Include="Config\feedProxy.config" />
    <Content Include="Config\EmbeddedMedia.config" />
    <Content Include="Config\BaseRestExtensions.config" />
    <Content Include="Config\BackOfficeTours\getting-started.json" />
    <Content Include="Config\404handlers.config" />
    <Content Include="Config\umbracoSettings.UAT.config">
      <SubType>Designer</SubType>
    </Content>
    <Content Include="Config\umbracoSettings.LIVE.config">
      <SubType>Designer</SubType>
    </Content>
    <Content Include="gulp\scss\modules\_cookie-notice.scss" />
    <None Include="gulp\scss\modules\_tweet-block.scss" />
    <Content Include="images\common\loader.gif" />
    <Content Include="images\common\logo-small.png" />
    <Content Include="images\common\logo.png" />
    <Content Include="images\common\sprite.png" />
    <Content Include="images\email\logo.png" />
    <Content Include="images\email\social-facebook.png" />
    <Content Include="images\email\social-linkedin.png" />
    <Content Include="images\email\social-twitter.png" />
    <Content Include="images\og\logo.png" />
    <Content Include="images\_temp\features-2.png" />
    <Content Include="images\_temp\features-3.png" />
    <Content Include="images\_temp\features-1.png" />
    <Content Include="images\_temp\features-4.png" />
    <Content Include="images\_temp\how-tab.png" />
    <Content Include="packages.config" />
    <Content Include="robots.txt" />
    <Content Include="sitemap.xsl" />
    <Content Include="Views\Shared\Pager.cshtml" />
    <Content Include="Views\Web.config" />
    <Content Include="App_Plugins\NestedContent\package.manifest" />
    <Content Include="gulp\scss\base\_config.scss" />
    <Content Include="gulp\scss\base\_fixes.scss" />
    <Content Include="gulp\scss\base\_forms.scss" />
    <Content Include="gulp\scss\base\_helpers.scss" />
    <Content Include="gulp\scss\base\_print.scss" />
    <Content Include="gulp\scss\base\_reset.scss" />
    <Content Include="gulp\scss\base\_version.scss" />
    <Content Include="gulp\scss\layout\_back-to-top.scss" />
    <Content Include="gulp\scss\layout\_content.scss" />
    <Content Include="gulp\scss\layout\_footer.scss" />
    <Content Include="gulp\scss\layout\_nav.scss" />
    <Content Include="gulp\scss\layout\_sub-nav.scss" />
    <Content Include="gulp\scss\layout\_header.scss" />
    <Content Include="gulp\scss\layout\_newsletter.scss" />
    <Content Include="gulp\scss\layout\_page.scss" />
    <Content Include="gulp\scss\layout\_sitemap.scss" />
    <Content Include="gulp\scss\modules\_grid.scss" />
    <Content Include="gulp\scss\modules\_popups.scss" />
    <Content Include="gulp\scss\modules\_section.scss" />
    <Content Include="gulp\scss\plugins\_bx-slider.scss" />
    <Content Include="gulp\scss\print.scss" />
    <Content Include="gulp\scss\rte.scss" />
    <Content Include="gulp\scss\site-ie.scss" />
    <Content Include="gulp\scss\site.scss" />
    <Content Include="gulp\scss\_cms.scss" />
    <Content Include="gulp\scss\_config.scss" />
    <Content Include="gulp\scss\_forms.scss" />
    <Content Include="gulp\scss\_reset.scss" />
    <Content Include="bower.json" />
    <Content Include="package.json" />
    <Content Include="App_Plugins\TheDashboard\package.manifest" />
    <Content Include="App_Plugins\DiploTraceLogViewer\package.manifest" />
    <Content Include="App_Plugins\DiploTraceLogViewer\backoffice\diplotracelog\ng-table\ng-table.map" />
    <Content Include="Views\Master.cshtml" />
    <Content Include="Views\Page.cshtml" />
    <Content Include="Views\Sitemap.cshtml" />
    <Content Include="Views\Wrapper.cshtml" />
    <Content Include="Views\Homepage.cshtml" />
    <Content Include="Views\Shared\Meta.cshtml" />
    <Content Include="Views\Shared\Footer.cshtml" />
    <Content Include="Views\Shared\Header.cshtml" />
    <Content Include="Views\Shared\Navigation.cshtml" />
    <Content Include="Views\Error404.cshtml" />
    <Content Include="Views\Project.cshtml" />
    <Content Include="Views\Projects.cshtml" />
    <Content Include="Views\Styleguide.cshtml" />
    <Content Include="Views\Shared\Mustache\PopupConfirm.mustache" />
    <Content Include="Views\Shared\Mustache\PopupLaunch.mustache" />
    <Content Include="Views\Shared\Mustache\PopupVideo.mustache" />
    <Content Include="Views\Shared\NewsletterBlock.cshtml" />
    <Content Include="gulp\scss\modules\_social.scss" />
    <Content Include="Views\Shared\Features.cshtml" />
    <Content Include="gulp\scss\modules\_features.scss" />
    <Content Include="gulp\scss\modules\_share.scss" />
    <Content Include="Views\Shared\GridContent.cshtml" />
    <Content Include="gulp\scss\modules\_banner.scss" />
    <Content Include="Views\Shared\Mustache\Banner.mustache" />
    <Content Include="Views\Shared\Banner.cshtml" />
    <Content Include="gulp\scss\modules\_icon-tabs.scss" />
    <Content Include="Views\Shared\Share.cshtml" />
    <Content Include="Views\Shared\SubNavigation.cshtml" />
    <Content Include="gulp\scss\modules\_block.scss" />
    <Content Include="gulp\scss\modules\_promo-block.scss" />
    <Content Include="gulp\scss\modules\_tabs.scss" />
    <Content Include="gulp\scss\modules\_projects-list-item.scss" />
    <Content Include="gulp\scss\modules\_project.scss" />
    <Content Include="gulp\scss\modules\_map.scss" />
    <Content Include="gulp\scss\modules\_faux-gallery.scss" />
    <Content Include="Views\Shared\Mustache\PopupGallery.mustache" />
    <Content Include="Views\Newsletter.cshtml" />
    <Content Include="gulp\scss\modules\_projects-map.scss" />
    <Content Include="Views\Shared\Mustache\PopupProject.mustache" />
    <Content Include="gulp\scss\modules\_project-preview.scss" />
    <Content Include="gulp\scss\modules\_photo-gallery.scss" />
    <Content Include="Views\Blog.cshtml" />
    <Content Include="Views\BlogPost.cshtml" />
    <Content Include="Views\FAQs.cshtml" />
    <Content Include="gulp\scss\modules\_faqs.scss" />
    <Content Include="gulp\scss\modules\_blog.scss" />
    <Content Include="gulp\scss\modules\_pager.scss" />
    <Content Include="gulp\scss\modules\_blog-preview.scss" />
    <Content Include="Views\BlogSection.cshtml" />
    <Content Include="gulp\scss\modules\_blog-post.scss" />
    <Content Include="gulp\scss\modules\_statement.scss" />
    <Content Include="Views\Shared\NewsFeatures.cshtml" />
    <Content Include="Views\Shared\BlogPreview.cshtml" />
    <Content Include="Views\Shared\BlogNavigation.cshtml" />
    <Content Include="Views\Shared\LatestTweets.cshtml" />
    <Content Include="Views\Shared\TweetList.cshtml" />
    <Content Include="Views\Shared\MoreFeatures.cshtml" />
    <Content Include="Views\Shared\Calculator.cshtml" />
    <Content Include="Views\Shared\Mustache\PopupCalcResult.mustache" />
    <Content Include="Media\Web.config" />
    <Content Include="Views\History.cshtml" />
    <Content Include="Views\Shared\Mustache\HistoryTimeline.mustache" />
    <Content Include="Views\Shared\Mustache\PopupSearch.mustache" />
    <Content Include="Views\SearchResults.cshtml" />
    <Content Include="Views\Shared\ContactBlock.cshtml" />
    <Content Include="Views\Shared\SharesBlock.cshtml" />
    <Content Include="Views\offerSignUpFormDigital.cshtml" />
    <Content Include="Views\offerSignUpFormPhysical.cshtml" />
    <Content Include="Views\BondOffer.cshtml" />
    <Content Include="Views\Shared\NewsletterBlockSmall.cshtml" />
    <Content Include="Views\Shared\Breadcrumbs.cshtml" />
    <Content Include="Views\Shared\Awards.cshtml" />
    <Content Include="Views\SharesRegistrationForm.cshtml" />
    <Content Include="Views\Partials\Grid\Editors\Textstring.cshtml" />
    <Content Include="Views\Partials\Grid\Editors\Rte.cshtml" />
    <Content Include="Views\Partials\Grid\Editors\Media.cshtml" />
    <Content Include="Views\Partials\Grid\Editors\Macro.cshtml" />
    <Content Include="Views\Partials\Grid\Editors\Embed.cshtml" />
    <Content Include="Views\Partials\Grid\Editors\Base.cshtml" />
    <Content Include="Views\Partials\Grid\Bootstrap3.cshtml" />
    <Content Include="Views\Partials\Grid\Bootstrap3-Fluid.cshtml" />
    <Content Include="Views\Partials\Grid\Bootstrap2.cshtml" />
    <Content Include="Views\Partials\Grid\Bootstrap2-Fluid.cshtml" />
    <Content Include="gulp\scss\plugins\_lite-yt-embed.scss" />
    <Content Include="Views\_ViewStart.cshtml" />
    <Content Include="Views\Shared\_Layout.cshtml" />
    <Content Include="Views\MasterTextOnly.cshtml" />
    <Content Include="Views\SimplePage.cshtml" />
    <Content Include="Views\WrapperSimple.cshtml" />
    <Content Include="Views\Shared\CookieNotice.cshtml" />
    <None Include="Web.Debug.config">
      <DependentUpon>Web.config</DependentUpon>
    </None>
    <Content Include="Web.UAT.config" />
    <Content Include="Web.LIVE.config">
      <SubType>Designer</SubType>
    </Content>
    <Content Include="Web.Release.config">
      <DependentUpon>Web.config</DependentUpon>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Web.config">
      <SubType>Designer</SubType>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="500.aspx.cs">
      <DependentUpon>500.aspx</DependentUpon>
      <SubType>ASPXCodeBehind</SubType>
    </Compile>
    <Compile Include="Analyzers\IgnoreAccentsAnalyzer.cs" />
    <Compile Include="App_Plugins\BondOfferDatabaseDownload\BondOfferDatabaseDownloadController.cs" />
    <Compile Include="App_Plugins\BondOfferDatabaseDownload\BondOfferDatabaseDownloadApplication.cs" />
    <Compile Include="App_Plugins\BondOfferDatabaseDownload\BondOfferDatabaseDownloadTree.cs" />
    <Compile Include="App_Start\NinjectWebCommon.cs" />
    <Compile Include="App_Start\UmbracoStartup.cs" />
    <Compile Include="Controllers\BlogPostController.cs" />
    <Compile Include="App_Start\ViewEngineConfig.cs" />
    <Compile Include="Controllers\BlogSectionController.cs" />
    <Compile Include="Controllers\BondOfferController.cs" />
    <Compile Include="Controllers\OfferSignUpFormDigitalController.cs" />
    <Compile Include="Controllers\Error404Controller.cs" />
    <Compile Include="Controllers\FAQsPageController.cs" />
    <Compile Include="Controllers\HistoryController.cs" />
    <Compile Include="Controllers\HomeController.cs" />
    <Compile Include="Controllers\BlogController.cs" />
    <Compile Include="Controllers\NewsletterController.cs" />
    <Compile Include="Controllers\OfferSignUpFormPhysicalController.cs" />
    <Compile Include="Controllers\ProjectController.cs" />
    <Compile Include="Controllers\ProjectsController.cs" />
    <Compile Include="Controllers\PageController.cs" />
    <Compile Include="Controllers\SearchResultsController.cs" />
    <Compile Include="Controllers\SharesRegisterController.cs" />
    <Compile Include="Controllers\SimplePageController.cs" />
    <Compile Include="Controllers\SitemapController.cs" />
    <Compile Include="Controllers\TwitterController.cs" />
    <Compile Include="ErrorHandler\AiHandleErrorAttribute.cs" />
    <Compile Include="FilterConfig.cs" />
    <Compile Include="Helpers\ImageExtensions.cs" />
    <Compile Include="Helpers\ViewExtensions.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="RouteHandlers\RouteHandler.cs" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Views\Export\" />
    <Folder Include="Views\SharesRegister\" />
    <Folder Include="Views\SimplePage\" />
    <Folder Include="Views\UserDatabaseDownload\" />
  </ItemGroup>
  <ItemGroup>
    <Analyzer Include="..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.Analyzers.dll" />
    <Analyzer Include="..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll" />
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <Import Project="$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets" Condition="'$(VSToolsPath)' != ''" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets" Condition="false" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
        <WebProjectProperties>
          <UseIIS>True</UseIIS>
          <AutoAssignPort>True</AutoAssignPort>
          <DevelopmentServerPort>12088</DevelopmentServerPort>
          <DevelopmentServerVPath>/</DevelopmentServerVPath>
          <IISUrl>https://localhost:44333/</IISUrl>
          <NTLMAuthentication>False</NTLMAuthentication>
          <UseCustomServer>False</UseCustomServer>
          <CustomServerUrl>
          </CustomServerUrl>
          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props'))" />
    <Error Condition="!Exists('..\packages\uSync.3.2.2.740\build\uSync.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\uSync.3.2.2.740\build\uSync.props'))" />
    <Error Condition="!Exists('..\packages\uSync.3.2.2.740\build\uSync.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\uSync.3.2.2.740\build\uSync.targets'))" />
    <Error Condition="!Exists('..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.1\build\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.2.0.1\build\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props'))" />
    <Error Condition="!Exists('..\packages\UmbracoCms.7.15.7\build\UmbracoCms.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\UmbracoCms.7.15.7\build\UmbracoCms.props'))" />
    <Error Condition="!Exists('..\packages\UmbracoCms.7.15.7\build\UmbracoCms.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\UmbracoCms.7.15.7\build\UmbracoCms.targets'))" />
  </Target>
  <Import Project="..\packages\uSync.3.2.2.740\build\uSync.targets" Condition="Exists('..\packages\uSync.3.2.2.740\build\uSync.targets')" />
  <Import Project="..\packages\AutoMapper.3.3.1\tools\AutoMapper.targets" Condition="Exists('..\packages\AutoMapper.3.3.1\tools\AutoMapper.targets')" />
  <Import Project="..\packages\OctoPack.3.4.2\tools\OctoPack.targets" Condition="Exists('..\packages\OctoPack.3.4.2\tools\OctoPack.targets')" />
  <Target Name="EnsureOctoPackImported" BeforeTargets="BeforeBuild" Condition="'$(OctoPackImported)' == ''">
    <Error Condition="!Exists('..\packages\OctoPack.3.4.2\tools\OctoPack.targets') And ('$(RunOctoPack)' != '' And $(RunOctoPack))" Text="You are trying to build with OctoPack, but the NuGet targets file that OctoPack depends on is not available on this computer. This is probably because the OctoPack package has not been committed to source control, or NuGet Package Restore is not enabled. Please enable NuGet Package Restore to download them. For more information, see http://go.microsoft.com/fwlink/?LinkID=317567." HelpKeyword="BCLBUILD2001" />
    <Error Condition="Exists('..\packages\OctoPack.3.4.2\tools\OctoPack.targets') And ('$(RunOctoPack)' != '' And $(RunOctoPack))" Text="OctoPack cannot be run because NuGet packages were restored prior to the build running, and the targets file was unavailable when the build started. Please build the project again to include these packages in the build. You may also need to make sure that your build server does not delete packages prior to each build. For more information, see http://go.microsoft.com/fwlink/?LinkID=317568." HelpKeyword="BCLBUILD2002" />
  </Target>
  <Import Project="..\packages\UmbracoCms.7.15.7\build\UmbracoCms.targets" Condition="Exists('..\packages\UmbracoCms.7.15.7\build\UmbracoCms.targets')" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


================================================
FILE: src/test/umbraco/MyProject.csproj
================================================
<Project Sdk="Microsoft.NET.Sdk.Web">
    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="uMarketingSuite" Version="1.23.0" />
        <PackageReference Include="Umbraco.TheStarterKit" Version="11.0.0" />
        <PackageReference Include="Umbraco.Cms" Version="12.1.2" />
    </ItemGroup>

    <ItemGroup>
        <!-- Opt-in to app-local ICU to ensure consistent globalization APIs across different platforms -->
        <PackageReference Include="Microsoft.ICU.ICU4C.Runtime" Version="68.2.0.9"/>
        <RuntimeHostConfigurationOption Include="System.Globalization.AppLocalIcu" Value="68.2.0.9" Condition="$(RuntimeIdentifier.StartsWith('linux')) or $(RuntimeIdentifier.StartsWith('win')) or ('$(RuntimeIdentifier)' == '' and !$([MSBuild]::IsOSPlatform('osx')))"/>
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\uMarketingSuite.StarterKit\uMarketingSuite.StarterKit.csproj" />
    </ItemGroup>

    <PropertyGroup>
        <!-- Razor files are needed for the backoffice to work correctly -->
        <CopyRazorGenerateFilesToPublishDirectory>true</CopyRazorGenerateFilesToPublishDirectory>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Remove RazorCompileOnBuild and RazorCompileOnPublish when not using ModelsMode InMemoryAuto -->
        <RazorCompileOnBuild>false</RazorCompileOnBuild>
        <RazorCompileOnPublish>false</RazorCompileOnPublish>
    </PropertyGroup>

</Project>



================================================
FILE: src/test/umbraco/web.config
================================================
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <!--
        Define the Web.config template, which is used when creating the initial Web.config,
        and then transforms from web.Template.[Debug|Release].config are applied.
        Documentation for Web.config at: https://our.umbraco.com/documentation/Reference/Config/webconfig/
    -->

    <configSections>
        <section name="clientDependency" type="ClientDependency.Core.Config.ClientDependencySection, ClientDependency.Core" requirePermission="false"/>

        <sectionGroup name="umbracoConfiguration">
            <section name="settings" type="Umbraco.Core.Configuration.UmbracoSettings.UmbracoSettingsSection, Umbraco.Core" requirePermission="false"/>
            <section name="HealthChecks" type="Umbraco.Core.Configuration.HealthChecks.HealthChecksSection, Umbraco.Core" requirePermission="false"/>
        </sectionGroup>

        <sectionGroup name="imageProcessor">
            <section name="security" requirePermission="false" type="ImageProcessor.Web.Configuration.ImageSecuritySection, ImageProcessor.Web"/>
            <section name="processing" requirePermission="false" type="ImageProcessor.Web.Configuration.ImageProcessingSection, ImageProcessor.Web"/>
            <section name="caching" requirePermission="false" type="ImageProcessor.Web.Configuration.ImageCacheSection, ImageProcessor.Web"/>
        </sectionGroup>
    </configSections>

    <umbracoConfiguration>
        <settings configSource="config\umbracoSettings.config"/>
        <HealthChecks configSource="config\HealthChecks.config"/>
    </umbracoConfiguration>

    <clientDependency configSource="config\ClientDependency.config"/>

    <appSettings>
        <add key="Umbraco.Core.ConfigurationStatus" value="8.18.9"/>
        <add key="Umbraco.Core.ReservedUrls" value=""/>
        <add key="Umbraco.Core.ReservedPaths" value=""/>
        <add key="Umbraco.Core.Path" value="~/umbraco"/>
        <add key="Umbraco.Core.HideTopLevelNodeFromPath" value="true"/>
        <add key="Umbraco.Core.TimeOutInMinutes" value="20"/>
        <add key="Umbraco.Core.DefaultUILanguage" value="en-US"/>
        <add key="Umbraco.Core.UseHttps" value="false"/>
        <add key="Umbraco.Core.AllowContentDashboardAccessToAllUsers" value="true"/>
        <add key="Umbraco.Core.ContentDashboardUrl-Allowlist" value=""/>
        <add key="Umbraco.Core.HelpPage-Allowlist" value=""/>

        <add key="ValidationSettings:UnobtrusiveValidationMode" value="None"/>
        <add key="webpages:Enabled" value="false"/>
        <add key="enableSimpleMembership" value="false"/>
        <add key="autoFormsAuthentication" value="false"/>
        <add key="dataAnnotations:dataTypeAttribute:disableRegEx" value="false"/>

        <add key="owin:appStartup" value="UmbracoDefaultOwinStartup"/>

        <add key="Umbraco.ModelsBuilder.Enable" value="true"/>
        <add key="Umbraco.ModelsBuilder.ModelsMode" value="PureLive"/>
        <add key="Umbraco.Web.PublishedCache.NuCache.Serializer" value="MsgPack"/>
        <add key="Umbraco.Web.SanitizeTinyMce" value="true"/>
    </appSettings>

    <!--
        Important: if you're upgrading Umbraco, do not clear the connectionString/providerName during your Web.config merge.
    -->
    <connectionStrings>
        <remove name="umbracoDbDSN"/>
        <add name="umbracoDbDSN" connectionString="" providerName=""/>
    </connectionStrings>

    <system.data>
        <DbProviderFactories>
            <remove invariant="System.Data.SqlServerCe.4.0"/>
            <add name="Microsoft SQL Server Compact Data Provider 4.0" invariant="System.Data.SqlServerCe.4.0"
                description=".NET Framework Data Provider for Microsoft SQL Server Compact"
                type="System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe"/>
        </DbProviderFactories>
    </system.data>

    <system.net>
        <mailSettings>
            <!--
                If you need Umbraco to send out system mails (like reset password and invite user),
                you must configure your SMTP settings here - for example:
            -->
            <!--
            <smtp from="noreply@example.com" deliveryMethod="Network">
                <network host="localhost" port="25" enableSsl="false" userName="" password="" />
            </smtp>
            -->
        </mailSettings>
    </system.net>

    <system.web>
        <customErrors mode="RemoteOnly"/>

        <trace enabled="false" requestLimit="10" pageOutput="false" traceMode="SortByTime" localOnly="true"/>

        <httpRuntime requestValidationMode="2.0" enableVersionHeader="false" targetFramework="4.7.2" maxRequestLength="51200" fcnMode="Single"/>

        <httpModules>
            <add name="ScriptModule"
                type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
            <add name="UmbracoModule" type="Umbraco.Web.UmbracoModule,Umbraco.Web"/>
            <add name="ClientDependencyModule" type="ClientDependency.Core.Module.ClientDependencyModule, ClientDependency.Core"/>
            <add name="ImageProcessorModule" type="ImageProcessor.Web.HttpModules.ImageProcessingModule, ImageProcessor.Web"/>
        </httpModules>

        <httpHandlers>
            <remove verb="*" path="*.asmx"/>
            <add verb="*" path="*.asmx"
                type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"
                validate="false"/>
            <add verb="*" path="*_AppService.axd"
                type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"
                validate="false"/>
            <add verb="GET,HEAD" path="ScriptResource.axd"
                type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"
                validate="false"/>
            <add verb="*" path="DependencyHandler.axd" type="ClientDependency.Core.CompositeFiles.CompositeDependencyHandler, ClientDependency.Core "/>
        </httpHandlers>

        <compilation defaultLanguage="c#" debug="false" batch="true" targetFramework="4.7.2" numRecompilesBeforeAppRestart="50"/>

        <authentication mode="Forms">
            <forms name="yourAuthCookie" loginUrl="login.aspx" protection="All" path="/"/>
        </authentication>

        <authorization>
            <allow users="?"/>
        </authorization>

        <!-- Membership Provider -->
        <membership defaultProvider="UmbracoMembershipProvider" userIsOnlineTimeWindow="15">
            <providers>
                <clear/>
                <add name="UmbracoMembershipProvider" type="Umbraco.Web.Security.Providers.MembersMembershipProvider, Umbraco.Web"
                    minRequiredNonalphanumericCharacters="0" minRequiredPasswordLength="10" useLegacyEncoding="false" enablePasswordRetrieval="false"
                    enablePasswordReset="false" requiresQuestionAndAnswer="false" defaultMemberTypeAlias="Member" passwordFormat="Hashed"
                    allowManuallyChangingPassword="false"/>
                <add name="UsersMembershipProvider" type="Umbraco.Web.Security.Providers.UsersMembershipProvider, Umbraco.Web"/>
            </providers>
        </membership>

        <!-- Role Provider -->
        <roleManager enabled="true" defaultProvider="UmbracoRoleProvider">
            <providers>
                <clear/>
                <add name="UmbracoRoleProvider" type="Umbraco.Web.Security.Providers.MembersRoleProvider"/>
            </providers>
        </roleManager>

    </system.web>

    <system.webServer>
        <validation validateIntegratedModeConfiguration="false"/>

        <modules runAllManagedModulesForAllRequests="true">
            <remove name="WebDAVModule"/>
            <remove name="UmbracoModule"/>
            <remove name="ScriptModule"/>
            <remove name="ClientDependencyModule"/>
            <remove name="FormsAuthentication"/>
            <remove name="ImageProcessorModule"/>

            <add name="UmbracoModule" type="Umbraco.Web.UmbracoModule,Umbraco.Web"/>
            <add name="ScriptModule" preCondition="managedHandler"
                type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
            <add name="ClientDependencyModule" type="ClientDependency.Core.Module.ClientDependencyModule, ClientDependency.Core"/>
            <!-- FormsAuthentication is needed for login/membership to work on homepage (as per http://stackoverflow.com/questions/218057/httpcontext-current-session-is-null-when-routing-requests) -->
            <add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule"/>
            <add name="ImageProcessorModule" type="ImageProcessor.Web.HttpModules.ImageProcessingModule, ImageProcessor.Web"/>
        </modules>

        <handlers accessPolicy="Read, Write, Script, Execute">
            <remove name="WebServiceHandlerFactory-Integrated"/>
            <remove name="ScriptHandlerFactory"/>
            <remove name="ScriptHandlerFactoryAppServices"/>
            <remove name="ScriptResource"/>
            <remove name="ClientDependency"/>
            <remove name="MiniProfiler"/>
            <remove name="ExtensionlessUrlHandler-Integrated-4.0"/>
            <remove name="OPTIONSVerbHandler"/>
            <remove name="TRACEVerbHandler"/>

            <add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode"
                type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
            <add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode"
                type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
            <add name="ScriptResource" verb="GET,HEAD" path="ScriptResource.axd" preCondition="integratedMode"
                type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
            <add verb="*" name="ClientDependency" preCondition="integratedMode" path="DependencyHandler.axd"
                type="ClientDependency.Core.CompositeFiles.CompositeDependencyHandler, ClientDependency.Core"/>
            <add name="MiniProfiler" path="mini-profiler-resources/*" verb="*" type="System.Web.Routing.UrlRoutingModule" resourceType="Unspecified"
                preCondition="integratedMode"/>
            <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler"
                preCondition="integratedMode,runtimeVersionv4.0"/>
        </handlers>

        <staticContent>
            <remove fileExtension=".air"/>
            <mimeMap fileExtension=".air" mimeType="application/vnd.adobe.air-application-installer-package+zip"/>
            <remove fileExtension=".svg"/>
            <mimeMap fileExtension=".svg" mimeType="image/svg+xml"/>
            <remove fileExtension=".woff"/>
            <mimeMap fileExtension=".woff" mimeType="font/woff"/>
            <remove fileExtension=".woff2"/>
            <mimeMap fileExtension=".woff2" mimeType="font/woff2"/>
            <remove fileExtension=".less"/>
            <mimeMap fileExtension=".less" mimeType="text/css"/>
            <remove fileExtension=".mp4"/>
            <mimeMap fileExtension=".mp4" mimeType="video/mp4"/>
            <remove fileExtension=".json"/>
            <mimeMap fileExtension=".json" mimeType="application/json"/>
        </staticContent>

        <!-- Ensure the powered by header is not returned -->
        <httpProtocol>
            <customHeaders>
                <remove name="X-Powered-By"/>
            </customHeaders>
        </httpProtocol>

        <!-- Increase the default upload file size limit -->
        <security>
            <requestFiltering>
                <requestLimits maxAllowedContentLength="52428800"/>
            </requestFiltering>
        </security>

        <!--
            If you wish to use IIS rewrite rules, see the documentation here: https://our.umbraco.com/documentation/Reference/Routing/IISRewriteRules
        -->
        <!--
        <rewrite>
            <rules></rules>
        </rewrite>
        -->
    </system.webServer>

    <runtime>
        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin.Security" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin.Security.Cookies" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin.Security.OAuth" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-1.2.5.0" newVersion="1.2.5.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Web.Http" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-5.2.7.0" newVersion="5.2.7.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-5.2.7.0" newVersion="5.2.7.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Net.Http.Formatting" publicKeyToken="31bf3856ad364e35"/>
                <bindingRedirect oldVersion="0.0.0.0-5.2.7.0" newVersion="5.2.7.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-4.0.6.0" newVersion="4.0.6.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
                <bindingRedirect oldVersion="4.0.0.0-4.0.3.0" newVersion="4.0.3.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
                <bindingRedirect oldVersion="4.0.0.0-4.0.1.1" newVersion="4.0.1.1"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
                <bindingRedirect oldVersion="4.0.0.0-4.1.4.0" newVersion="4.1.4.0"/>
            </dependentAssembly>
        </assemblyBinding>
    </runtime>

    <location path="umbraco">
        <system.webServer>
            <urlCompression doStaticCompression="false" doDynamicCompression="false" dynamicCompressionBeforeCache="false"/>
        </system.webServer>
    </location>
    <location path="App_Plugins">
        <system.webServer>
            <urlCompression doStaticCompression="false" doDynamicCompression="false" dynamicCompressionBeforeCache="false"/>
        </system.webServer>
    </location>

    <imageProcessor>
        <security configSource="config\imageprocessor\security.config"/>
        <caching configSource="config\imageprocessor\cache.config"/>
        <processing configSource="config\imageprocessor\processing.config"/>
    </imageProcessor>

    <system.codedom>
        <compilers>
            <compiler language="c#;cs;csharp" extension=".cs"
                type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                warningLevel="4" compilerOptions="/langversion:7 /nowarn:1659;1699;1701"/>
            <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb"
                type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+"/>
        </compilers>
    </system.codedom>

</configuration>



================================================
FILE: src/test/umbraco/web.old.config
================================================
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="urlrewritingnet" restartOnExternalChanges="true" requirePermission="false" type="UrlRewritingNet.Configuration.UrlRewriteSection, UrlRewritingNet.UrlRewriter" />
    <section name="microsoft.scripting" type="Microsoft.Scripting.Hosting.Configuration.Section, Microsoft.Scripting, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="false" />
    <section name="clientDependency" type="ClientDependency.Core.Config.ClientDependencySection, ClientDependency.Core" requirePermission="false" />
    <section name="Examine" type="Examine.Config.ExamineSettings, Examine" requirePermission="false" />
    <section name="ExamineLuceneIndexSets" type="UmbracoExamine.Config.ExamineLuceneIndexes, UmbracoExamine" requirePermission="false" />
    <section name="FileSystemProviders" type="Umbraco.Core.Configuration.FileSystemProvidersSection, Umbraco.Core" requirePermission="false" />
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" requirePermission="false" />
    <section name="BaseRestExtensions" type="Umbraco.Web.BaseRest.Configuration.BaseRestSection, umbraco" requirePermission="false" />
    <sectionGroup name="system.web.webPages.razor" type="System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
      <section name="host" type="System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" />
      <section name="pages" type="System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" />
    </sectionGroup>
  </configSections>
  <urlrewritingnet configSource="config\UrlRewriting.config" />
  <microsoft.scripting configSource="config\scripting.config" />
  <clientDependency configSource="config\ClientDependency.config" />
  <Examine configSource="config\ExamineSettings.config" />
  <ExamineLuceneIndexSets configSource="config\ExamineIndex.config" />
  <FileSystemProviders configSource="config\FileSystemProviders.config" />
  <log4net configSource="config\log4net.config" />
  <BaseRestExtensions configSource="config\BaseRestExtensions.config" />
  <appSettings>
    <add key="umbracoDbDSN" value="datalayer=SQLCE4Umbraco.SqlCEHelper,SQLCE4Umbraco;data source=|DataDirectory|\Umbraco.sdf" />
    <add key="umbracoConfigurationStatus" value="4.11.10" />
    <add key="umbracoReservedUrls" value="~/config/splashes/booting.aspx,~/install/default.aspx,~/config/splashes/noNodes.aspx,~/VSEnterpriseHelper.axd" />
    <add key="umbracoReservedPaths" value="~/umbraco,~/install/" />
    <add key="umbracoContentXML" value="~/App_Data/umbraco.config" />
    <add key="umbracoStorageDirectory" value="~/App_Data" />
    <add key="umbracoPath" value="~/umbraco" />
    <add key="umbracoEnableStat" value="false" />
    <add key="umbracoHideTopLevelNodeFromPath" value="true" />
    <add key="umbracoEditXhtmlMode" value="true" />
    <add key="umbracoUseDirectoryUrls" value="false" />
    <add key="umbracoDebugMode" value="false" />
    <add key="umbracoTimeOutInMinutes" value="20" />
    <add key="umbracoVersionCheckPeriod" value="7" />
    <add key="umbracoDisableXsltExtensions" value="true" />
    <add key="umbracoDefaultUILanguage" value="en" />
    <add key="umbracoProfileUrl" value="profiler" />
    <add key="umbracoUseSSL" value="false" />
    <add key="umbracoUseMediumTrust" value="false" />
    <!-- Set this to true to enable storing the xml cache locally to the IIS server even if the app files are stored centrally on a SAN/NAS Alex Norcliffe 2010 02 for 4.1  -->
    <add key="umbracoContentXMLUseLocalTemp" value="false" />
    <add key="webpages:Enabled" value="false" />
    <add key="enableSimpleMembership" value="false" />
    <add key="autoFormsAuthentication" value="false" />
    <add key="log4net.Config" value="config\log4net.config" />
  </appSettings>
  <system.net>
    <mailSettings>
      <smtp>
        <network host="127.0.0.1" userName="username" password="password" />
      </smtp>
    </mailSettings>
  </system.net>
  <connectionStrings>
    <remove name="LocalSqlServer" />
    <!--<add name="LocalSqlServer" connectionString="server=.\sqlexpress;database=aspnetdb;user id=DBUSER;password=DBPASSWORD" providerName="System.Data.SqlClient"/>-->
  </connectionStrings>
  <system.web>
    <customErrors mode="RemoteOnly" />
    <trace enabled="false" requestLimit="10" pageOutput="false" traceMode="SortByTime" localOnly="true" />
    <sessionState mode="InProc" stateConnectionString="tcpip=127.0.0.1:42424" sqlConnectionString="data source=127.0.0.1;Trusted_Connection=yes" cookieless="false" timeout="20" />
    <globalization requestEncoding="UTF-8" responseEncoding="UTF-8" />
    <xhtmlConformance mode="Strict" />
    <httpRuntime requestValidationMode="2.0" enableVersionHeader="false" />
    <pages enableEventValidation="false">
      <!-- ASPNETAJAX -->
      <controls>
        <add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add tagPrefix="umbraco" namespace="umbraco.presentation.templateControls" assembly="umbraco" />
        <add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      </controls>
    </pages>
    <httpModules>
      <!-- URL REWRTIER -->
      <add name="UrlRewriteModule" type="UrlRewritingNet.Web.UrlRewriteModule, UrlRewritingNet.UrlRewriter" />
      <!-- UMBRACO -->
      <add name="UmbracoModule" type="Umbraco.Web.UmbracoModule,umbraco" />
      <!-- ASPNETAJAX -->
      <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <!-- CLIENT DEPENDENCY -->
      <add name="ClientDependencyModule" type="ClientDependency.Core.Module.ClientDependencyModule, ClientDependency.Core" />
    </httpModules>
    <httpHandlers>
      <remove verb="*" path="*.asmx" />
      <!-- ASPNETAJAX -->
      <add verb="*" path="*.asmx" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false" />
      <add verb="*" path="*_AppService.axd" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false" />
      <add verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false" />
      <!-- UMBRACO CHANNELS -->
      <add verb="*" path="umbraco/channels.aspx" type="umbraco.presentation.channels.api, umbraco" />
      <add verb="*" path="umbraco/channels/word.aspx" type="umbraco.presentation.channels.wordApi, umbraco" />
      <!-- CLIENT DEPENDENCY -->
      <add verb="*" path="DependencyHandler.axd" type="ClientDependency.Core.CompositeFiles.CompositeDependencyHandler, ClientDependency.Core " />
      <!-- SPELL CHECKER -->
      <add verb="GET,HEAD,POST" path="GoogleSpellChecker.ashx" type="umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.GoogleSpellChecker,umbraco" />
    </httpHandlers>
    <compilation defaultLanguage="c#" debug="false" batch="false" targetFramework="4.0">
      <assemblies>
        <!-- ASP.NET 4.0 Assemblies -->
        <add assembly="System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A" />
        <add assembly="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.WebPages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      </assemblies>
      <buildProviders>
        <add extension=".cshtml" type="umbraco.MacroEngines.RazorBuildProvider, umbraco.MacroEngines" />
        <add extension=".vbhtml" type="umbraco.MacroEngines.RazorBuildProvider, umbraco.MacroEngines" />
        <add extension=".razor" type="umbraco.MacroEngines.RazorBuildProvider, umbraco.MacroEngines" />
      </buildProviders>
    </compilation>
    <authentication mode="Forms">
      <forms name="yourAuthCookie" loginUrl="login.aspx" protection="All" path="/" />
    </authentication>
    <authorization>
      <allow users="?" />
    </authorization>
    <!-- Membership Provider -->
    <membership defaultProvider="UmbracoMembershipProvider" userIsOnlineTimeWindow="15">
      <providers>
        <clear />
        <add name="UmbracoMembershipProvider" type="umbraco.providers.members.UmbracoMembershipProvider" enablePasswordRetrieval="false" enablePasswordReset="false" requiresQuestionAndAnswer="false" defaultMemberTypeAlias="Another Type" passwordFormat="Hashed" />
        <add name="UsersMembershipProvider" type="umbraco.providers.UsersMembershipProvider" enablePasswordRetrieval="false" enablePasswordReset="false" requiresQuestionAndAnswer="false" passwordFormat="Hashed" />
      </providers>
    </membership>
    <!-- added by NH to support membership providers in access layer -->
    <roleManager enabled="true" defaultProvider="UmbracoRoleProvider">
      <providers>
        <clear />
        <add name="UmbracoRoleProvider" type="umbraco.providers.members.UmbracoRoleProvider" />
      </providers>
    </roleManager>
    <!-- Sitemap provider-->
    <siteMap defaultProvider="UmbracoSiteMapProvider" enabled="true">
      <providers>
        <clear />
        <add name="UmbracoSiteMapProvider" type="umbraco.presentation.nodeFactory.UmbracoSiteMapProvider" defaultDescriptionAlias="description" securityTrimmingEnabled="true" />
      </providers>
    </siteMap>
  </system.web>
  <!-- ASPNETAJAX -->
  <system.web.extensions>
    <scripting>
      <scriptResourceHandler enableCompression="true" enableCaching="true" />
    </scripting>
  </system.web.extensions>
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="UrlRewriteModule" />
      <add name="UrlRewriteModule" type="UrlRewritingNet.Web.UrlRewriteModule, UrlRewritingNet.UrlRewriter" />
      <remove name="UmbracoModule" />
      <add name=" UmbracoModule" type="Umbraco.Web.UmbracoModule,umbraco" />
      <remove name="ScriptModule" />
      <add name="ScriptModule" preCondition="managedHandler" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <remove name="ClientDependencyModule" />
      <add name="ClientDependencyModule" type="ClientDependency.Core.Module.ClientDependencyModule, ClientDependency.Core" />
      <!-- Needed for login/membership to work on homepage (as per http://stackoverflow.com/questions/218057/httpcontext-current-session-is-null-when-routing-requests) -->
      <remove name="FormsAuthentication" />
      <add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule" />
    </modules>
    <handlers accessPolicy="Read, Write, Script, Execute">
      <remove name="WebServiceHandlerFactory-Integrated" />
      <remove name="ScriptHandlerFactory" />
      <remove name="ScriptHandlerFactoryAppServices" />
      <remove name="ScriptResource" />
      <remove name="Channels" />
      <remove name="Channels_Word" />
      <remove name="ClientDependency" />
      <remove name="SpellChecker" />
      <add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add name="ScriptResource" verb="GET,HEAD" path="ScriptResource.axd" preCondition="integratedMode" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add verb="*" name="Channels" preCondition="integratedMode" path="umbraco/channels.aspx" type="umbraco.presentation.channels.api, umbraco" />
      <add verb="*" name="Channels_Word" preCondition="integratedMode" path="umbraco/channels/word.aspx" type="umbraco.presentation.channels.wordApi, umbraco" />
      <add verb="*" name="ClientDependency" preCondition="integratedMode" path="DependencyHandler.axd" type="ClientDependency.Core.CompositeFiles.CompositeDependencyHandler, ClientDependency.Core " />
      <add verb="GET,HEAD,POST" preCondition="integratedMode" name="SpellChecker" path="GoogleSpellChecker.ashx" type="umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.GoogleSpellChecker,umbraco" />
    </handlers>
    <!-- Adobe AIR mime type -->
    <staticContent>
      <remove fileExtension=".air" />
      <mimeMap fileExtension=".air" mimeType="application/vnd.adobe.air-application-installer-package+zip" />
    </staticContent>
    <!-- Ensure the powered by header is not returned -->
    <httpProtocol>
      <customHeaders>
        <remove name="X-Powered-By" />
      </customHeaders>
    </httpProtocol>
  </system.webServer>
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CSharp.CSharpCodeProvider,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" warningLevel="4">
        <providerOption name="CompilerVersion" value="v4.0" />
        <providerOption name="WarnAsError" value="false" />
      </compiler>
    </compilers>
  </system.codedom>
  <runtime>
    <!-- Old asp.net ajax assembly bindings -->
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Extensions" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="4.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Extensions.Design" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="4.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <system.web.webPages.razor>
    <host factoryType="umbraco.MacroEngines.RazorUmbracoFactory, umbraco.MacroEngines" />
    <pages pageBaseType="umbraco.MacroEngines.DynamicNodeContext">
      <namespaces>
        <add namespace="Microsoft.Web.Helpers" />
        <add namespace="umbraco" />
        <add namespace="Examine" />
      </namespaces>
    </pages>
  </system.web.webPages.razor>
</configuration>


================================================
FILE: src/winres/winres.json
================================================
{
  "RT_GROUP_ICON": {
    "APP": {
      "0000": [
        "icon.png",
        "icon64.png",
        "icon48.png",
        "icon32.png",
        "icon16.png"
      ]
    }
  },
  "RT_MANIFEST": {
    "#1": {
      "0409": {
        "description": "A prompt theme engine for any shell.",
        "minimum-os": "win8",
        "execution-level": "as invoker",
        "long-path-aware": true,
        "segment-heap": true
      }
    }
  },
  "RT_VERSION": {
    "#1": {
      "0000": {
        "fixed": {
          "file_version": "0.0.0.0",
          "product_version": "0.0.0.0"
        },
        "info": {
          "0409": {
            "CompanyName": "github.com/jandedobbeleer",
            "FileDescription": "A prompt theme engine for any shell.",
            "InternalName": "oh-my-posh",
            "LegalCopyright": "© Jan De Dobbeleer. Licensed under MIT.",
            "OriginalFilename": "oh-my-posh.exe",
            "ProductName": "Oh My Posh"
          }
        }
      }
    }
  }
}



================================================
FILE: themes/1_shell.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffbebc",
          "leading_diamond": "<#ff70a6> \ue200 </>",
          "properties": {
            "display_host": true
          },
          "style": "diamond",
          "template": "{{ .UserName }} <#ffffff>on</>",
          "type": "session"
        },
        {
          "foreground": "#bc93ff",
          "properties": {
            "time_format": "Monday <#ffffff>at</> 3:04 PM"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "foreground": "#ee79d1",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true
          },
          "style": "diamond",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#a9ffb4",
          "style": "plain",
          "type": "text"
        },
        {
          "foreground": "#a9ffb4",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }}s <#ffffff>\ue601</>",
          "type": "executiontime"
        },
        {
          "properties": {
            "root_icon": "\uf292 "
          },
          "style": "diamond",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#94ffa2",
          "style": "diamond",
          "template": " <#ffffff>MEM:</> {{ round .PhysicalPercentUsed .Precision }}% ({{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB)",
          "type": "sysinfo"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffafd2",
          "leading_diamond": "<#00c7fc> \ue285 </><#ffafd2>{</>",
          "properties": {
            "folder_icon": "\uf07b",
            "folder_separator_icon": " \uebcb ",
            "home_icon": "home",
            "style": "agnoster_full"
          },
          "style": "diamond",
          "template": " \ue5ff {{ .Path }} ",
          "trailing_diamond": "<#ffafd2>}</>",
          "type": "path"
        },
        {
          "foreground": "#A9FFB4",
          "foreground_templates": ["{{ if gt .Code 0 }}#ef5350{{ end }}"],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " \ue286 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FEF5ED",
    "template": "\ue285 "
  },
  "version": 3
}



================================================
FILE: themes/agnoster.minimal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "{{ reason .Code }}\u274c ",
          "type": "status"
        },
        {
          "foreground": "#ff0000",
          "style": "plain",
          "template": "# ",
          "type": "root"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#007ACC",
          "foreground": "#ffffff",
          "properties": {
            "folder_icon": "\u2026",
            "folder_separator_icon": " \ue0b1 ",
            "style": "agnoster_short",
            "max_depth": 3
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#007ACC",
          "foreground": "#ffffff",
          "properties": {
            "cherry_pick_icon": "\u2713 ",
            "commit_icon": "\u25b7 ",
            "fetch_status": true,
            "merge_icon": "\u25f4 ",
            "no_commits_icon": "[no commits]",
            "rebase_icon": "\u2c62 ",
            "tag_icon": "\u25b6 "
          },
          "style": "plain",
          "template": "{{ .HEAD }}{{ if and (eq .Ahead 0) (eq .Behind 0) }} \u2261{{end}}{{ if gt .Ahead 0 }} \u2191{{.Ahead}}{{end}}{{ if gt .Behind 0 }} \u2193{{.Behind}}{{end}} {{ if .Working.Changed }}+{{ .Working.Added }} ~{{ .Working.Modified }} -{{ .Working.Deleted }} {{ end }}",
          "type": "git"
        },
        {
          "foreground": "#007ACC",
          "style": "plain",
          "template": "\ue0b0 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/agnoster.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#ffe9aa",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#ffffff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#91ddff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "home_icon": "\ueb06",
            "style": "agnoster"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#906cff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#ff8080",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ reason .Code }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/agnosterplus.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "type": "rprompt",
      "segments": [
        {
          "foreground": "#007ACC",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ]
    },
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#ffffff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#91ddff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "home_icon": "\ueb06",
            "style": "agnoster"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/aliens.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#61AFEF",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#C678DD",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#FF6471",
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "style": "diamond",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "python"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/amro.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#45F1C2",
          "style": "plain",
          "template": "\ueb99 {{ .UserName }} on",
          "type": "session"
        },
        {
          "foreground": "#0CA0D8",
          "properties": {
            "folder_separator_icon": "/",
            "style": "full"
          },
          "style": "plain",
          "template": " \uf07b {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#14A5AE",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "{{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#cd5e42",
          "style": "plain",
          "template": "\ue3bf ",
          "type": "root"
        },
        {
          "foreground": "#CD4277",
          "style": "plain",
          "template": "# ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/atomic.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "leading_diamond": "\u256d\u2500\ue0b6",
          "style": "diamond",
          "template": "\uf120 {{ .Name }} ",
          "type": "shell"
        },
        {
          "background": "#ef5350",
          "foreground": "#FFFB38",
          "style": "diamond",
          "template": "<parentBackground>\ue0b0</> \uf292 ",
          "type": "root"
        },
        {
          "background": "#FF9248",
          "foreground": "#2d3436",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": " \uf07b ",
            "home_icon": "\ue617",
            "style": "folder"
          },
          "style": "powerline",
          "template": " \uf07b\uea9c {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#FFFB38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffeb95{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#c5e478{{ end }}",
            "{{ if gt .Ahead 0 }}#C792EA{{ end }}",
            "{{ if gt .Behind 0 }}#C792EA{{ end }}"
          ],
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#ef5350> \uf046 {{ .Staging.String }}</>{{ end }} ",
          "type": "git"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " \ueba2 {{ .FormattedMs }}\u2800",
          "trailing_diamond": "\ue0b4",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#303030",
          "foreground": "#3C873A",
          "leading_diamond": "\ue0b6",
          "properties": {
            "fetch_package_manager": true,
            "npm_icon": " <#cc3a3a>\ue5fa</> ",
            "yarn_icon": " <#348cba>\ue6a7</>"
          },
          "style": "diamond",
          "template": "\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "node"
        },
        {
          "background": "#306998",
          "foreground": "#FFE873",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "python"
        },
        {
          "background": "#0e8ac8",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue738 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "java"
        },
        {
          "background": "#0e0e0e",
          "foreground": "#0d6da8",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue77f {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "dotnet"
        },
        {
          "background": "#ffffff",
          "foreground": "#06aad5",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "go"
        },
        {
          "background": "#f3f0ec",
          "foreground": "#925837",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue7a8 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "rust"
        },
        {
          "background": "#e1e8e9",
          "foreground": "#055b9c",
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": "\ue798 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "dart"
        },
        {
          "background": "#ffffff",
          "foreground": "#ce092f",
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": "\ue753 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "angular"
        },
        {
          "background": "#ffffff",
          "foreground": "#de1f84",
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": "\u03b1 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "aurelia"
        },
        {
          "background": "#1e293b",
          "foreground": "#ffffff",
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": "{{ if .Error }}{{ .Error }}{{ else }}Nx {{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "nx"
        },
        {
          "background": "#945bb3",
          "foreground": "#359a25",
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": "<#ca3c34>\ue624</> {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "julia"
        },
        {
          "background": "#ffffff",
          "foreground": "#9c1006",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue791 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "ruby"
        },
        {
          "background": "#ffffff",
          "foreground": "#5398c2",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\uf104<#f5bf45>\uf0e7</>\uf105 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "azfunc"
        },
        {
          "background": "#565656",
          "foreground": "#faa029",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue7ad {{.Profile}}{{if .Region}}@{{.Region}}{{end}}",
          "trailing_diamond": "\ue0b4 ",
          "type": "aws"
        },
        {
          "background": "#316ce4",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\uf308 {{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}}",
          "trailing_diamond": "\ue0b4",
          "type": "kubectl"
        },
        {
          "background": "#b2bec3",
          "foreground": "#222222",
          "leading_diamond": "\ue0b6",
          "trailing_diamond": "<transparent,background>\ue0b2</>",
          "properties": {
            "linux": "\ue712",
            "macos": "\ue711",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#b8e994{{end}}",
            "{{if eq \"Discharging\" .State.String}}#fff34e{{end}}",
            "{{if eq \"Full\" .State.String}}#33DD2D{{end}}"
          ],
          "foreground": "#262626",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "charged_icon": "\uf240 ",
            "charging_icon": "\uf1e6 ",
            "discharging_icon": "\ue234 "
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 ",
          "type": "battery"
        },
        {
          "background": "#40c4ff",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "properties": {
            "time_format": "_2,15:04"
          },
          "style": "diamond",
          "template": " \uf073 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#21c7c7",
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        },
        {
          "foreground": "#e0f8ff",
          "foreground_templates": ["{{ if gt .Code 0 }}#ef5350{{ end }}"],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\ue285\ueab6 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/atomicBit.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "style": "plain",
          "template": "\u256d\u2500[<#ffff55>{{ .UserName }}</><#ff5555>@</><#55ff55>{{ .HostName }}</>]\u2500",
          "type": "session"
        },
        {
          "foreground": "#ff5555",
          "style": "plain",
          "template": "<#ffffff>[</>{{ .Path }}<#ffffff>]</>",
          "type": "path"
        },
        {
          "foreground": "#FF9248",
          "style": "plain",
          "template": "<#ffffff>\u2500(</>#<#ffffff>)</>",
          "type": "root"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#3C873A",
          "properties": {
            "fetch_package_manager": true,
            "npm_icon": " <#cc3a3a>\ue5fa</> ",
            "yarn_icon": " <#348cba>\ue6a7</>"
          },
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}<#ffffff>)</>",
          "type": "node"
        },
        {
          "foreground": "#FFE873",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "python"
        },
        {
          "foreground": "#ec2729",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "java"
        },
        {
          "foreground": "#0d6da8",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "dotnet"
        },
        {
          "foreground": "#06aad5",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "go"
        },
        {
          "foreground": "#925837",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "rust"
        },
        {
          "foreground": "#055b9c",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "dart"
        },
        {
          "foreground": "#ce092f",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "angular"
        },
        {
          "foreground": "#de1f84",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "aurelia"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#1e293b>(</>{{ if .Error }}{{ .Error }}{{ else }}Nx {{ .Full }}{{ end }}<#1e293b>)</>",
          "type": "nx"
        },
        {
          "foreground": "#359a25",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "julia"
        },
        {
          "foreground": "#9c1006",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "ruby"
        },
        {
          "foreground": "#5398c2",
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}<#ffffff>)</>",
          "type": "azfunc"
        },
        {
          "foreground": "#faa029",
          "style": "plain",
          "template": "<#ffffff>(</>{{.Profile}}{{if .Region}}@{{.Region}}{{end}}<#ffffff>)</>",
          "type": "aws"
        },
        {
          "foreground": "#316ce4",
          "style": "plain",
          "template": "<#ffffff>(</>{{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}}<#ffffff>)</>",
          "type": "kubectl"
        },
        {
          "foreground": "#ffffff",
          "properties": {
            "linux": "<#ffffff>\ue27f</>",
            "macos": "<#ffffff>\ue27f</>",
            "windows": "<#ffffff>\ue27f</>"
          },
          "style": "plain",
          "template": "<#ffffff>(</>{{ if .WSL }}WSL at {{ end }}{{.Icon}}<#ffffff>)\u2500</>",
          "type": "os"
        },
        {
          "foreground": "#ffffff",
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#FFFB38{{end}}",
            "{{if eq \"Full\" .State.String}}#33DD2D{{end}}"
          ],
          "properties": {
            "charged_icon": "\uf240 ",
            "charging_icon": "\uf1e6 ",
            "discharging_icon": "\ue234 "
          },
          "style": "plain",
          "template": "<#ffffff>[</>{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}%<#ffffff>]\u2500</>",
          "type": "battery"
        },
        {
          "foreground": "#55ffff",
          "properties": {
            "time_format": "_2,15:04"
          },
          "style": "plain",
          "template": "<#ffffff>[</>\uf073{{ .CurrentDate | date .Format }}<#ffffff>]</>",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        },
        {
          "foreground": "#e0f8ff",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "<#ffffff>[</>{{ .HEAD }}{{ if .Staging.Changed }}<#00AA00> \u25cf {{ .Staging.String }}</>{{ end }}{{ if .Working.Changed }}<#D75F00> \u25cf {{ .Working.String }}</>{{ end }}<#ffffff>]-</>",
          "type": "git"
        },
        {
          "foreground": "#ecf7fa",
          "foreground_templates": ["{{ if gt .Code 0 }}#ef5350{{ end }}"],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\ue285\ueb9e ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/avit.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#C2C206",
          "style": "plain",
          "template": "{{ .HEAD }} ",
          "type": "git"
        },
        {
          "foreground": "#B5B50D",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#C94A16",
          "style": "plain",
          "template": "x{{ reason .Code }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#007ACC",
          "style": "plain",
          "template": "\ue602",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/blue-owl.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#a313a8",
          "foreground": "#FFEB3B",
          "style": "plain",
          "template": "\u26a1 ",
          "type": "root"
        },
        {
          "background": "transparent",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#01579B",
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,#01579B>\ue0b0</>",
          "properties": {
            "folder_icon": "...",
            "folder_separator_icon": "<transparent> \ue0bd </>",
            "home_icon": "\ueb06",
            "style": "agnoster_short"
          },
          "style": "diamond",
          "template": " {{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "#00C853",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFEB3B{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFCC80{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "powerline",
          "template": " {{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#49404f",
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,#49404f>\ue0b0</>",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }}s ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        },
        {
          "background": "#910000",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": "<transparent> \uf12a</> {{ reason .Code }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#29315A",
          "foreground": "#43CCEA",
          "leading_diamond": "\ue0c5",
          "trailing_diamond": "\ue0bc",
          "style": "diamond",
          "template": "  {{ .UserName }}<transparent> / </>{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#29315A",
          "foreground": "#3EC669",
          "properties": {
            "time_format": "15:04:05"
          },
          "leading_diamond": "\ue0ba",
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffffff",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ff0000{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}} \u26a1 {{end}}{{.Folder | replace \"~\" \"🏚\" }} @ {{.HostName}}",
  "version": 3
}



================================================
FILE: themes/blueish.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#546E7A",
          "foreground": "#26C6DA",
          "leading_diamond": "\ue0c5",
          "properties": {
            "macos": "mac"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} \ue0b1",
          "trailing_diamond": "\ue0b0",
          "type": "os"
        },
        {
          "background": "#546E7A",
          "foreground": "#26C6DA",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#a2beef",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#00D100{{end}}",
            "{{if eq \"Discharging\" .State.String}}#FFCD58{{end}}",
            "{{if eq \"Full\" .State.String}}#0476d0{{end}}"
          ],
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 \ueb2d ",
          "type": "battery"
        },
        {
          "background": "#14c2dd",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#a2c4e0",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#6CA35E",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#ffff66",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf308 {{.Context}} :: {{if .Namespace}}{{.Namespace}}{{else}}default{{end}} ",
          "type": "kubectl"
        },
        {
          "background": "#007800",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \uea6c ",
          "trailing_diamond": "\ue0b0",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#007ACC",
          "style": "plain",
          "template": "\u279c ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/bubbles.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#29315A",
          "foreground": "#E64747",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "session"
        },
        {
          "background": "#29315A",
          "foreground": "#3EC669",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": "\ue5ff {{ .Path }}",
          "trailing_diamond": "\ue0b4",
          "type": "path"
        },
        {
          "background": "#29315A",
          "foreground": "#43CCEA",
          "leading_diamond": " \ue0b6",
          "properties": {
            "branch_icon": ""
          },
          "style": "diamond",
          "template": "{{ .HEAD }}",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "#29315A",
          "foreground": "#E4F34A",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue235{{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "python"
        },
        {
          "background": "#29315A",
          "foreground": "#7FD5EA",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue626{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "go"
        },
        {
          "background": "#29315A",
          "foreground": "#42E66C",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue718{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4",
          "type": "node"
        },
        {
          "background": "#29315A",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue791{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "ruby"
        },
        {
          "background": "#29315A",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue738{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "java"
        },
        {
          "background": "#29315A",
          "foreground": "#9B6BDF",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue624{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "julia"
        },
        {
          "background": "#29315A",
          "foreground": "#9B6BDF",
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "leading_diamond": " \ue0b6",
          "properties": {
            "charged_icon": " ",
            "charging_icon": "\u21e1 ",
            "discharging_icon": "\u21e3 "
          },
          "style": "diamond",
          "template": "{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}",
          "trailing_diamond": "\ue0b4",
          "type": "battery"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#29315A",
          "foreground": "#AEA4BF",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "austin",
            "threshold": 150
          },
          "style": "diamond",
          "template": "{{ .FormattedMs }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "executiontime"
        },
        {
          "background": "#29315A",
          "foreground": "#7FD5EA",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\u276f",
          "trailing_diamond": "\ue0b4",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/bubblesextra.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#29315A",
          "foreground": "#3EC669",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": "\ue5ff {{ .Path }}",
          "trailing_diamond": "\ue0b4",
          "type": "path"
        },
        {
          "background": "#29315A",
          "foreground": "#43CCEA",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "leading_diamond": " \ue0b6",
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "diamond",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "#29315A",
          "foreground": "#E4F34A",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "python"
        },
        {
          "background": "#29315A",
          "foreground": "#7FD5EA",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue626{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "go"
        },
        {
          "background": "#29315A",
          "foreground": "#42E66C",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue718{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4",
          "type": "node"
        },
        {
          "background": "#29315A",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue791{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "ruby"
        },
        {
          "background": "#29315A",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue738{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "java"
        },
        {
          "background": "#29315A",
          "foreground": "#9B6BDF",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue624{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "julia"
        },
        {
          "type": "php",
          "style": "diamond",
          "foreground": "#ffffff",
          "background": "#4063D8",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "template": "\ue73d {{ .Full }} ",
          "trailing_diamond": "\ue0b4"
        },
        {
          "background": "#29315A",
          "foreground": "#9B6BDF",
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "leading_diamond": " \ue0b6",
          "properties": {
            "charged_icon": " ",
            "charging_icon": "\u21e1 ",
            "discharging_icon": "\u21e3 "
          },
          "style": "diamond",
          "template": "{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}",
          "trailing_diamond": "\ue0b4",
          "type": "battery"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#29315A",
          "foreground": "#AEA4BF",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "austin",
            "threshold": 150
          },
          "style": "diamond",
          "template": "{{ .FormattedMs }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "executiontime"
        },
        {
          "background": "#29315A",
          "foreground": "#E64747",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} \u276f",
          "trailing_diamond": "\ue0b4",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/bubblesline.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#424242",
          "foreground": "#3EC669",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": "\ue5ff {{ .Path }}",
          "trailing_diamond": "\ue0b4",
          "type": "path"
        },
        {
          "background": "#424242",
          "foreground": "#43CCEA",
          "leading_diamond": " \ue0b6",
          "properties": {
            "branch_icon": ""
          },
          "style": "diamond",
          "template": "{{ .HEAD }}",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "#424242",
          "foreground": "#E4F34A",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue235{{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "python"
        },
        {
          "background": "#424242",
          "foreground": "#7FD5EA",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue626{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "go"
        },
        {
          "background": "#424242",
          "foreground": "#42E66C",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue718{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4",
          "type": "node"
        },
        {
          "background": "#424242",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue791{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "ruby"
        },
        {
          "background": "#424242",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue738{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "java"
        },
        {
          "background": "#424242",
          "foreground": "#9B6BDF",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue624{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "julia"
        },
        {
          "background": "#424242",
          "foreground": "#9B6BDF",
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "leading_diamond": " \ue0b6",
          "properties": {
            "charged_icon": "\u25cf ",
            "charging_icon": "\u21e1 ",
            "discharging_icon": "\u21e3 "
          },
          "style": "diamond",
          "template": "{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}",
          "trailing_diamond": "\ue0b4",
          "type": "battery"
        }
      ],
      "type": "rprompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#424242",
          "foreground": "#9B6BDF",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} \u276f",
          "trailing_diamond": "\ue0b4 ",
          "type": "session"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/capr4n.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#003543",
          "foreground": "#ffffff",
          "style": "plain",
          "template": " \ue641 {{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " \ueba2 {{ .FormattedMs }} ",
          "type": "executiontime"
        }
      ],
      "type": "rprompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#61AFEF",
          "foreground": "#ffffff",
          "properties": {
            "display_host": false
          },
          "style": "diamond",
          "template": "{{if .Root}} \uf0e7 {{.UserName}} {{else}} {{.UserName}} {{end}}",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#C678DD",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "max_depth": 2,
            "style": "agnoster_short"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}} \u26a1 {{end}}{{.UserName}} \u2794 📁{{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/catppuccin.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
        "os": "#ACB0BE",
        "pink": "#F5BDE6",
        "lavender": "#B7BDF8",
        "blue":  "#8AADF4",
        "wight": "#FFFFFF",
        "text": "#494D64"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "p:blue",
          "foreground": "p:wight",
          "powerline_symbol": "\ue0b4",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "p:blue",
          "foreground": "p:text",
          "powerline_symbol": "\ue0b4",
          "style": "diamond",
          "template": "{{ .UserName }}@{{ .HostName }}",
          "type": "session"
        },
        {
          "background": "p:pink",
          "foreground": "p:text",
          "properties": {
            "folder_icon": "..\ue5fe..",
            "home_icon": "~",
            "style": "agnoster_short"
          },
          "powerline_symbol": "\ue0b4",
          "style": "powerline",
          "template": " {{ .Path }}",
          "type": "path"
        },
        {
          "background": "p:lavender",
          "foreground": "p:text",
          "style": "powerline",
          "properties": {
            "branch_icon": "\ue725 ",
            "cherry_pick_icon": "\ue29b ",
            "commit_icon": "\uf417 ",
            "fetch_status": false,
            "fetch_upstream_icon": false,
            "merge_icon": "\ue727 ",
            "no_commits_icon": "\uf0c3 ",
            "rebase_icon": "\ue728 ",
            "revert_icon": "\uf0e2 ",
            "tag_icon": "\uf412 "
          },
          "powerline_symbol": "\ue0b4",
          "template": " {{ .HEAD }}",
          "type": "git"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/catppuccin_frappe.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
        "os": "#ACB0BE",
        "closer": "p:os",
        "pink": "#F4B8E4",
        "lavender": "#BABBF1",
        "blue":  "#8CAAEE"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "p:os",
          "style": "plain",
          "template": "{{.Icon}} ",
          "type": "os"
        },
        {
          "foreground": "p:blue",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "p:pink",
          "properties": {
            "folder_icon": "..\ue5fe..",
            "home_icon": "~",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "p:lavender",
          "properties": {
            "branch_icon": "\ue725 ",
            "cherry_pick_icon": "\ue29b ",
            "commit_icon": "\uf417 ",
            "fetch_status": false,
            "fetch_upstream_icon": false,
            "merge_icon": "\ue727 ",
            "no_commits_icon": "\uf0c3 ",
            "rebase_icon": "\ue728 ",
            "revert_icon": "\uf0e2 ",
            "tag_icon": "\uf412 "
          },
          "template": "{{ .HEAD }} ",
          "style": "plain",
          "type": "git"
        },
        {
          "style": "plain",
          "foreground": "p:closer",
          "template": "\uf105",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}




================================================
FILE: themes/catppuccin_latte.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
        "os": "#ACB0BE",
        "closer": "p:os",
        "pink": "#ea76cb",
        "lavender": "#7287FD",
        "blue":  "#1e66f5"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "p:os",
          "style": "plain",
          "template": "{{.Icon}} ",
          "type": "os"
        },
        {
          "foreground": "p:blue",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "p:pink",
          "properties": {
            "folder_icon": "..\ue5fe..",
            "home_icon": "~",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "p:lavender",
          "properties": {
            "branch_icon": "\ue725 ",
            "cherry_pick_icon": "\ue29b ",
            "commit_icon": "\uf417 ",
            "fetch_status": false,
            "fetch_upstream_icon": false,
            "merge_icon": "\ue727 ",
            "no_commits_icon": "\uf0c3 ",
            "rebase_icon": "\ue728 ",
            "revert_icon": "\uf0e2 ",
            "tag_icon": "\uf412 "
          },
          "template": "{{ .HEAD }} ",
          "style": "plain",
          "type": "git"
        },
        {
          "style": "plain",
          "foreground": "p:closer",
          "template": "\uf105",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}




================================================
FILE: themes/catppuccin_macchiato.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
        "os": "#ACB0BE",
        "closer": "p:os",
        "pink": "#F5BDE6",
        "lavender": "#B7BDF8",
        "blue":  "#8AADF4"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "p:os",
          "style": "plain",
          "template": "{{.Icon}} ",
          "type": "os"
        },
        {
          "foreground": "p:blue",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "p:pink",
          "properties": {
            "folder_icon": "..\ue5fe..",
            "home_icon": "~",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "p:lavender",
          "properties": {
            "branch_icon": "\ue725 ",
            "cherry_pick_icon": "\ue29b ",
            "commit_icon": "\uf417 ",
            "fetch_status": false,
            "fetch_upstream_icon": false,
            "merge_icon": "\ue727 ",
            "no_commits_icon": "\uf0c3 ",
            "rebase_icon": "\ue728 ",
            "revert_icon": "\uf0e2 ",
            "tag_icon": "\uf412 "
          },
          "template": "{{ .HEAD }} ",
          "style": "plain",
          "type": "git"
        },
        {
          "style": "plain",
          "foreground": "p:closer",
          "template": "\uf105",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/catppuccin_mocha.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
        "os": "#ACB0BE",
        "closer": "p:os",
        "pink": "#F5C2E7",
        "lavender": "#B4BEFE",
        "blue":  "#89B4FA"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "p:os",
          "style": "plain",
          "template": "{{.Icon}} ",
          "type": "os"
        },
        {
          "foreground": "p:blue",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "p:pink",
          "properties": {
            "folder_icon": "..\ue5fe..",
            "home_icon": "~",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "p:lavender",
          "properties": {
            "branch_icon": "\ue725 ",
            "cherry_pick_icon": "\ue29b ",
            "commit_icon": "\uf417 ",
            "fetch_status": false,
            "fetch_upstream_icon": false,
            "merge_icon": "\ue727 ",
            "no_commits_icon": "\uf0c3 ",
            "rebase_icon": "\ue728 ",
            "revert_icon": "\uf0e2 ",
            "tag_icon": "\uf412 "
          },
          "template": "{{ .HEAD }} ",
          "style": "plain",
          "type": "git"
        },
        {
          "style": "plain",
          "foreground": "p:closer",
          "template": "\uf105",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/cert.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#E36464",
          "foreground": "#fff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} ",
          "trailing_diamond": "\ue0c6",
          "type": "session"
        },
        {
          "background": "green",
          "foreground": "#fff",
          "leading_diamond": "\ue0c7",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": " {{ .Path }} ",
          "trailing_diamond": "\ue0c6",
          "type": "path"
        },
        {
          "background": "lightCyan",
          "foreground": "#fff",
          "leading_diamond": "\ue0c7",
          "properties": {
            "branch_icon": ""
          },
          "style": "diamond",
          "template": " git({{ .HEAD }}) ",
          "trailing_diamond": "\ue0c6",
          "type": "git"
        },
        {
          "background": "lightMagenta",
          "foreground": "#fff",
          "leading_diamond": "\ue0c7",
          "properties": {
            "time_format": "15:04"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0c6",
          "type": "time"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/chips.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background_templates": [
            "{{ if not (empty .Env.OVERRIDE_FOLDER_BADGE_BG) }}{{ .Env.OVERRIDE_FOLDER_BADGE_BG }}{{ else }}p:c-badge-folder{{ end }}"
          ],
          "foreground_templates": [
            "{{ if not (empty .Env.OVERRIDE_FOLDER_BADGE_FG) }}{{ .Env.OVERRIDE_FOLDER_BADGE_FG }}{{ else }}p:c-badge-text{{ end }}"
          ],
          "leading_diamond": "\uE0B6",
          "properties": {
            "style": "agnoster_short",
            "folder_separator_icon": "/",
            "hide_root_location": true,
            "max_depth": 2
          },
          "style": "diamond",
          "template": "\uF07B {{ .Path }}",
          "trailing_diamond": "\uE0B4",
          "type": "path"
        },
        {
          "background": "p:c-git-normal",
          "background_templates": [
            "{{ if gt .Ahead 0 }}p:c-git-ahead{{ end }}",
            "{{ if gt .Behind 0 }}p:c-git-behind{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}p:c-git-ahead-behind{{ end }}",
            "{{ if and (not .Working.Changed) (.Staging.Changed) }}p:c-git-staging{{ end }}",
            "{{ if and (.Working.Changed) (.Staging.Changed) }}p:c-git-staging-working{{ end }}",
            "{{ if .UpstreamGone }}p:c-git-upstream-gone{{ end }}",
            "{{ if and (.Working.Changed) (not .Staging.Changed) }}p:c-git-working{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": " \uE0B6",
          "style": "diamond",
          "template": "{{ .HEAD }} {{ .BranchStatus }}{{ if .Working.Changed }} \uE0B1 \uF448 ({{ .Working.String }}){{ end }}{{ if and .Working.Changed .Staging.Changed }} \uE0B1 {{ end }}{{ if .Staging.Changed }}{{ if not .Working.Changed }} \uf15c {{ end }}\uf15c ({{ .Staging.String }}){{ end }}{{ if .StashCount }} \ueb4b {{ .StashCount }} Stash{{ if gt .StashCount 1 }}es{{ end }}{{ end }}",
          "properties": {
            "branch_icon": "\uE0A0 ",
            "fetch_status": true,
            "fetch_stash_count": true
          },
          "trailing_diamond": "\uE0B4",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background_templates": [
            "{{ if lt .Ms 60000 }}p:c-exec-fast{{ end }}",
            "{{ if lt .Ms 3600000 }}p:c-exec-normal{{ end }}",
            "{{ if lt .Ms 10800000 }}p:c-exec-slow{{ end }}",
            "{{ if ge .Ms 10800000 }}p:c-exec-slower{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "properties": {
            "style": "austin",
            "threshold": 1
          },
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PRIMARY_EXEC_TIME)) }}\udb81\udd1f {{ .FormattedMs }}.{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "executiontime"
        },
        {
          "background_templates": [
            "{{ if lt .CumulativeTotal.Seconds 3600 }}p:c-wakatime-undertime{{ end }}",
            "{{ if lt .CumulativeTotal.Seconds 10800 }}p:c-wakatime-warm-up{{ end }}",
            "{{ if lt .CumulativeTotal.Seconds 25200 }}p:c-wakatime-working{{ end }}",
            "{{ if lt .CumulativeTotal.Seconds 28000 }}p:c-wakatime-quota{{ end }}",
            "{{ if ge .CumulativeTotal.Seconds 28800 }}p:c-wakatime-overtime{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "properties": {
            "url": "https://wakatime.com/api/v1/users/current/summaries?start=today&end=today&api_key={{ .Env.WAKATIME_API_KEY }}",
            "http_timeout": 2000
          },
          "style": "diamond",
          "template": "{{ if and (.Env.WAKATIME_API_KEY) (eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_WAKATIME))) (gt .CumulativeTotal.Seconds 0) }}\uFA19 {{ secondsRound .CumulativeTotal.Seconds }}.{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "wakatime",
          "cache": {
            "duration": "1minute",
            "strategy": "session"
          }
        },
        {
          "background_templates": [
            "{{ if regexMatch \"(^(0[6-9])|(1[0-1])):\" (.CurrentDate | date .Format) }}p:c-date-time-morning{{ end }}",
            "{{ if regexMatch (\"(^1[2-4]):\") (.CurrentDate | date .Format) }}p:c-date-time-noon{{ end }}",
            "{{ if regexMatch (\"(^1[5-7]):\") (.CurrentDate | date .Format) }}p:c-date-time-afternoon{{ end }}",
            "{{ if regexMatch \"(^(1[8-9])|(2[0-3])):\" (.CurrentDate | date .Format) }}p:c-date-time-evening{{ end }}",
            "{{ if regexMatch \"^(0[0-5]):\" (.CurrentDate | date .Format) }}p:c-date-time-night{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "properties": {
            "time_format": "15:04 (01/02)"
          },
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_DTIME)) }}\uf43a {{ .CurrentDate | date .Format }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "time"
        },
        {
          "background_templates": [
            "{{ if .Error }}p:c-battery-state-error{{ end }}",
            "{{ if le .Percentage 15 }}p:c-battery-15-less{{ end }}",
            "{{ if and (ge .Percentage 16) (le .Percentage 30) }}p:c-battery-30-less{{ end }}",
            "{{ if and (ge .Percentage 31) (le .Percentage 45) }}p:c-battery-45-less{{ end }}",
            "{{ if and (ge .Percentage 46) (le .Percentage 55) }}p:c-battery-55-less{{ end }}",
            "{{ if and (ge .Percentage 56) (le .Percentage 70) }}p:c-battery-70-less{{ end }}",
            "{{ if and (ge .Percentage 71) (le .Percentage 90) }}p:c-battery-90-less{{ end }}",
            "{{ if and (ge .Percentage 91) (le .Percentage 100) }}p:c-battery-100-less{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if eq \"True\" (title (default \"False\" .Env.DISABLE_SEGMENT_BATTERY)) }}{{ else }}{{ if not .Error }}{{ if eq \"Charging\" .State.String }}\uE315 {{ else if eq \"Discharging\" .State.String }}{{ else if eq \"Full\" .State.String }}~ {{ else }}? {{ end }}{{ if le .Percentage 15 }}\udb80\udc7a{{ else if and (ge .Percentage 16) (le .Percentage 30) }}\udb80\udc7b{{ else if and (ge .Percentage 31) (le .Percentage 45) }}\udb80\udc7d{{ else if and (ge .Percentage 46) (le .Percentage 55)}}\udb80\udc7e{{ else if and (ge .Percentage 56) (le .Percentage 70) }}\udb80\udc7f{{ else if and (ge .Percentage 71) (le .Percentage 80) }}\udb80\udc82{{ else if and (ge .Percentage 81) (le .Percentage 95) }}\udb80\udc82{{ else }}\udb80\udc79{{ end }} {{ .Percentage }}%{{ else }}!{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4",
          "type": "battery"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "template": "{{ if false }}{{ end }}",
          "type": "session",
          "style": "diamond"
        },
        {
          "background_templates": [
            "{{ if and (.Segments.Session.SSHSession) (not .Root) }}p:c-shell-state-ssh-active{{ end }}",
            "{{ if and (not .Segments.Session.SSHSession) (.Root) }}p:c-shell-state-root-active{{ end }}",
            "{{ if and (.Segments.Session.SSHSession) (.Root) }}p:c-shell-state-root-ssh-active{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if or (.Segments.Session.SSHSession) (.Root) }}{{ if .Segments.Session.SSHSession }}\uE7A2 SSH{{ end }}{{ if and (.Segments.Session.SSHSession) (.Root) }} \uE621 {{ end }}{{ if .Root }}# Root{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "text"
        },
        {
          "background_templates": [
            "{{ if empty .Full }}p:c-project-generic-error{{ else }}p:c-project-crystal{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_CRYSTAL)) }}\uE62F {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "crystal"
        },
        {
          "background_templates": [
            "{{ if empty .Full }}p:c-project-generic-error{{ else }}p:c-project-flutter{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_FLUTTER)) }}Flutter | {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "dart"
        },
        {
          "background_templates": [
            "{{ if .Error }}p:c-project-generic-error{{ else }}p:c-project-lua{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_LUA)) }}\uE620 {{ if or (.Error) (empty .Full) }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "lua"
        },
        {
          "background_templates": [
            "{{ if empty .Full }}p:c-project-generic-error{{ else }}p:c-project-node{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_NODE)) }}\uE718 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "node"
        },
        {
          "background_templates": [
            "{{ if empty .Full }}p:c-project-generic-error{{ else }}p:c-project-rust{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "style": "diamond",
          "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_RUST)) }}\uE7A8 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "rust"
        },
        {
          "background_templates": [
            "{{ if empty .Full }}p:c-project-generic-error{{ else }}p:c-project-python{{ end }}"
          ],
          "foreground": "p:c-badge-text",
          "leading_diamond": "\uE0B6",
          "properties": {
            "display_mode": "context"
          },
          "style": "diamond",
          "template": "{{ if or (eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_PYTHON))) (eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_PYTHON_VENV))) }}\uE235 {{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_PYTHON)) }}{{ .Full }}{{ end }}{{ if and (.Venv) (eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_PYTHON))) (eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_PYTHON_VENV))) }} \uE621 {{ end }}{{ if and (.Venv) (eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_PROJECT_PYTHON_VENV))) }}{{ if .Env.SEGMENT_PROJECT_PYTHON_ACTIVE_VENV_STR }}{{ .Env.SEGMENT_PROJECT_PYTHON_ACTIVE_VENV_STR }}{{ else }}{{ .Venv }}{{ end }}{{ end }}{{ end }}",
          "trailing_diamond": "\uE0B4 ",
          "type": "python"
        },
        {
          "style": "plain",
          "foreground_templates": [
            "{{ if eq \"False\" (title (default \"False\" .Env.ENABLE_ARROW_DIVIDER_COLOR_EXECUTION_RETURN)) }}p:c-badge-white{{ else }}{{ if eq .Code 0 }}p:c-badge-return-success{{ else if or (eq .Code 1) (eq .Code 130) }}p:c-badge-return-fail-term{{ else }}p:c-badge-return-custom{{ end }}{{ end }}"
          ],
          "template": "\u276F",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ if .Segments.Session.SSHSession }}SSH'd{{ if or .Root }} & {{ end }}{{ end }}{{ if .Root }}# (as {{ .UserName }}) | {{ end }}{{ if .WSL }}WSL | {{ end }}{{ .Folder }} ({{ .Shell }})",
  "final_space": true,
  "palette": {
    "c-badge-folder": "#FFD770",
    "c-badge-text": "#212121",
    "c-badge-white": "#FAFAFA",
    "c-badge-return-custom": "#E7B9FF",
    "c-badge-return-fail-term": "#FF8A80",
    "c-badge-return-success": "#B2FF59",
    "c-battery-15-less": "#FF8A80",
    "c-battery-30-less": "#FFD180",
    "c-battery-45-less": "#FFE57F",
    "c-battery-55-less": "#FFFF8D",
    "c-battery-70-less": "#F4FF81",
    "c-battery-90-less": "#B9F6CA",
    "c-battery-100-less": "#CCFF90",
    "c-battery-state-error": "#FF867F",
    "c-date-time-morning": "#FFFF8D",
    "c-date-time-noon": "#FFF64F",
    "c-date-time-afternoon": "#FFC400",
    "c-date-time-evening": "#C0CFFF",
    "c-date-time-night": "#83B9FF",
    "c-exec-fast": "#C6FF00",
    "c-exec-normal": "#FFFF00",
    "c-exec-slow": "#FFD180",
    "c-exec-slower": "#FF867F",
    "c-git-ahead": "#6EFFFF",
    "c-git-behind": "#FFA06D",
    "c-git-ahead-behind": "#C0CFFF",
    "c-git-normal": "#66FFA6",
    "c-git-staging": "#FFD740",
    "c-git-staging-working": "#FFB2FF",
    "c-git-upstream-gone": "#FF867F",
    "c-git-working": "#84FFFF",
    "c-project-generic-error": "#FF867F",
    "c-project-crystal": "#FFFFFF",
    "c-project-flutter": "#6DC2FF",
    "c-project-lua": "#BBC2FF",
    "c-project-node": "#9CFF57",
    "c-project-rust": "#FFAB40",
    "c-project-python": "#FFE873",
    "c-secondary-ellipsis": "#FFFF8D",
    "c-shell-state-ssh-active": "#BAFFFF",
    "c-shell-state-root-active": "#9FFFE0",
    "c-shell-state-root-ssh-active": "#FFB2FF",
    "c-wakatime-undertime": "#A7FFEB",
    "c-wakatime-warm-up": "#FFFFB3",
    "c-wakatime-working": "#FFD180",
    "c-wakatime-quota": "#FFD0B0",
    "c-wakatime-overtime": "#FF8A80"
  },
  "transient_prompt": {
    "template": "{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_TRANSIENT)) }}<{{ if eq .Code 0 }}p:c-badge-return-success{{ else if or (eq .Code 1) (eq .Code 130) }}p:c-badge-return-fail-term{{ else }}p:c-badge-return-custom{{ end }}>\uE0B6</><p:c-badge-text,{{ if eq .Code 0 }}p:c-badge-return-success{{ else if or (eq .Code 1) (eq .Code 130) }}p:c-badge-return-fail-term{{ else }}p:c-badge-return-custom{{ end }}>\udb80\udc5e \uE0B1 {{ if .Segments.Executiontime.Ms }}{{ if eq \"False\" (title (default \"False\" .Env.DISABLE_SEGMENT_TRANSIENT_EXEC_TIME)) }}\udb81\udd1f {{ .Segments.Executiontime.FormattedMs }} \uE621 {{ end }}{{ end }}<b>{{ if eq .Code 0 }}OK{{ else if eq .Code 1 }}FAIL{{ else if eq .Code 130 }}TERM{{ else }}Code{{ end }} ({{ .Code }})</b></><{{ if eq .Code 0 }}p:c-badge-return-success{{ else if or (eq .Code 1) (eq .Code 130) }}p:c-badge-return-fail-term{{ else }}p:c-badge-return-custom{{ end }}>\uE0B4</> {{ end }}\u276F "
  },
  "secondary_prompt": {
    "background": "transparent",
    "foreground": "p:c-secondary-ellipsis",
    "template": " ... "
  },
  "version": 3
}



================================================
FILE: themes/cinnamon.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#07585c",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#3e9022",
          "foreground": "#ffffff",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#de076f",
          "foreground": "#ffffff",
          "properties": {
            "branch_icon": "",
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#491545",
          "foreground": "#ffffff",
          "properties": {
            "paused_icon": "\uf04c ",
            "playing_icon": "\ue602 ",
            "stopped_icon": "\uf04d ",
            "track_separator": " - "
          },
          "style": "plain",
          "template": " \uf1bc {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} ",
          "type": "spotify"
        },
        {
          "background": "#491515",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \ueb05 ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/clean-detailed.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#FEF5ED",
          "foreground": "#011627",
          "leading_diamond": "\ue0b2",
          "properties": {
            "macos": "\uf179 ",
            "ubuntu": "\uf31b ",
            "windows": "\ue62a "
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "trailing_diamond": "<transparent,#FEF5ED>\ue0b2</>",
          "type": "os"
        },
        {
          "background": "#FEF5ED",
          "foreground": "#011627",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uf489 {{ .Name }}",
          "trailing_diamond": "<transparent,#FEF5ED>\ue0b2</>",
          "type": "shell"
        },
        {
          "background": "#516BEB",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue266 MEM: {{ round .PhysicalPercentUsed .Precision }}% | {{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB \ue266 ",
          "trailing_diamond": "<transparent,#516BEB>\ue0b2</>",
          "type": "sysinfo"
        },
        {
          "background": "#575656",
          "foreground": "#d6deeb",
          "leading_diamond": "\ue0b2",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }} ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#17D7A0",
          "foreground": "#011627",
          "leading_diamond": "\ue0b2",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true
          },
          "style": "diamond",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b0",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "style": "plain",
          "template": "\u256d\u2500",
          "type": "text"
        },
        {
          "properties": {
            "time_format": "15:04"
          },
          "style": "plain",
          "template": " \u2665 {{ .CurrentDate | date .Format }} |",
          "type": "time"
        },
        {
          "style": "plain",
          "template": " \uf292 ",
          "type": "root"
        },
        {
          "properties": {
            "folder_icon": "\uf07b ",
            "folder_separator_icon": " \uf061 ",
            "home_icon": "\ueb06 "
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u2570\u2500 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FEF5ED",
    "template": "\ue285 "
  },
  "version": 3
}



================================================
FILE: themes/cloud-context.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "version": 3,
  "console_title_template": "{{ if or .Root .Segments.Git.RepoName }}[ {{ if .Root }}Admin{{ end }}{{ if and .Root .Segments.Git.RepoName }}@{{ end }}{{ if .Segments.Git.RepoName }}{{ .Segments.Git.RepoName }}{{ end }} ]{{ end }} {{ .Folder }}",
  "palette": {
    "background-color": "transparent",
    "cloud-text-amazon": "#4285F4",
    "cloud-text-azure": "#4285F4",
    "cloud-text-gcp": "#4285F4",
    "cloud-text-firebase": "#FFA000",
    "error-background": "#dd0033",
    "error-text": "#242424",
    "git-text": "#238636",
    "kubernetes-text": "#FFBB00",
    "talosctl-text": "#FF6C00",
    "symbol-color": "#ffffff",
    "timer-text": "#dd0033"
  },
  "blocks": [
    {
      "alignment": "left",
      "newline": false,
      "segments": [
        {
          "background": "p:background-color",
          "foreground": "p:timer-text",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "powerline",
          "powerline_symbol": "",
          "template": " <p:symbol-color>\uebaa</> {{ dateInZone .Format .CurrentDate \"UTC\" }} ",
          "type": "time"
        },
        {
          "background": "p:background-color",
          "foreground": "p:kubernetes-text",
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": "<p:symbol-color>\uf308</> {{.Context}}{{if .Namespace}} \uf061 {{.Namespace}}{{end}}",
          "type": "kubectl"
        },
        {
          "background": "p:background-color",
          "foreground": "p:talosctl-text",
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": "<p:symbol-color>\udb84\udcfe</> {{.Context}}",
          "type": "talosctl"
        },
        {
          "background": "p:background-color",
          "foreground": "p:cloud-text-amazon",
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\uf270</> {{.Profile}}{{if .Region}} \uf061 {{.Region}}{{end}}",
          "type": "aws"
        },
        {
          "background": "p:background-color",
          "foreground": "p:cloud-text-azure",
          "properties": {
            "source": "cli"
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\uebd8</> {{ .Name }}",
          "type": "az"
        },
        {
          "background": "p:background-color",
          "foreground": "p:cloud-text-azure",
          "properties": {
            "source": "pwsh"
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\uebd8</> (PS) {{ .Name }}",
          "type": "az"
        },
        {
          "background": "p:background-color",
          "foreground": "p:cloud-text-gcp",
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\ue7b2</> {{ .Project }}",
          "type": "gcp"
        },
        {
          "background": "p:background-color",
          "foreground": "p:cloud-text-firebase",
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\udb82\udd67</> {{ .Project }}",
          "type": "firebase"
        },
        {
          "background": "p:background-color",
          "foreground": "p:git-text",
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\uF408</> {{ .RepoName }}",
          "type": "git"
        },
        {
          "background": "p:background-color",
          "foreground": "p:timer-text",
          "properties": {
            "style": "austin",
            "threshold": 1
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": " <p:symbol-color>\ueba2</> {{ .FormattedMs }}",
          "type": "executiontime"
        },
        {
          "background": "p:background-color",
          "foreground": "p:symbol-color",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": "{{ if eq .Code 0 }} \uf004 {{ end }}",
          "type": "status"
        },
        {
          "background": "p:error-background",
          "foreground": "p:error-text",
          "leading_diamond": " \ue0c5",
          "trailing_diamond": "\ue0c4",
          "style": "diamond",
          "template": "{{ if ne .Code 0 }} \uf00d {{ .Code }}{{ if (ne (reason .Code) (toString .Code)) }} - {{ reason .Code }}{{else}}{{ end }} {{ end }}",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "p:background-color",
          "foreground": "p:timer-text",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "powerline",
          "powerline_symbol": "",
          "template": " <p:symbol-color>\uf49b</> {{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "p:background-color",
          "foreground": "p:symbol-color",
          "properties": {
            "folder_separator_icon": "/",
            "style": "folder"
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": "\ue5ff {{ path .Path .Location }} ",
          "type": "path"
        },
        {
          "background": "p:background-color",
          "foreground": "p:git-text",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b4",
          "template": "{{ .HEAD }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "p:error-background",
          "foreground": "p:backgrond-color",
          "style": "diamond",
          "leading_diamond": "\ue0c7",
          "trailing_diamond": "\ue0c6",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "p:background-color",
          "foreground": "p:git-text",
          "style": "plain",
          "template": "{{ if .Root }}{{ else }}<p:symbol-color> > </>{{ end }}",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ]
}



================================================
FILE: themes/cloud-native-azure.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#c386f1",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}@{{ .HostName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#ff479c",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " \uf07b  {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#fffb38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#2e9599",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \ue23a {{ if gt .Code 0 }}\uf00d {{ reason .Code }}{{ else }}\uf42e{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#0077c2,transparent>\ue0b6</> \uf489 {{ .Name }} <transparent,#0077c2>\ue0b2</>",
          "type": "shell"
        },
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "charged_icon": "\ue22f ",
            "charging_icon": "\ueb2d ",
            "discharging_icon": "\uf244 "
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 ",
          "type": "battery"
        },
        {
          "background": "#2e9599",
          "foreground": "#111111",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " \ue641 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#ebcc34",
          "foreground": "#000000",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " \uf308 Kubernetes {{.Context}} cluster {{if .Namespace}}- {{.Namespace}} namespace{{end}} ",
          "trailing_diamond": "\ue0b0",
          "type": "kubectl"
        },
        {
          "background": "#9ec3f0",
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uebd8 Subscription {{ .Name }} ({{ if .EnvironmentName | contains \"AzureCloud\" }}{{ \"Global\" }}{{ else }}{{ .EnvironmentName }}{{ end }}) ",
          "type": "az"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#E06C75",
          "style": "plain",
          "template": " ~ ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/cobalt2.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#1478DB",
          "foreground": "#000000",
          "leading_diamond": "\ue0b6",
          "trailing_diamond": "\uE0B0",
          "properties": {
            "style": "full"
          },
          "style": "diamond",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#3AD900",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFC600{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFCC80{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#000000",
          "leading_diamond": "<transparent,background>\uE0B0</>",
          "trailing_diamond": "\ue0b4",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "diamond",
          "template": " {{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/craver.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#f1184c",
          "foreground": "#242424",
          "powerline_symbol": "\ue0c4",
          "style": "powerline",
          "template": "\uf0e7",
          "type": "root"
        },
        {
          "background": "#282c34",
          "foreground": "#3A86FF",
          "leading_diamond": " ",
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#242424",
          "foreground": "#FFBB00",
          "powerline_symbol": "\ue0c4",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "powerline",
          "template": "{{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#242424",
          "foreground": "#33DD2D",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": "/",
            "style": "folder"
          },
          "style": "powerline",
          "template": "\ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#242424",
          "foreground": "#3A86FF",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": "{{ .UpstreamIcon }}{{ .HEAD }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#0184bc",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0c4",
          "style": "powerline",
          "template": " \ue70c {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }} ",
          "type": "dotnet"
        },
        {
          "background": "#8800dd",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0c4",
          "properties": {
            "style": "austin",
            "threshold": 1
          },
          "style": "powerline",
          "template": " <#fefefe>\ueba2</> {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#33DD2D",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#242424",
          "powerline_symbol": "\ue0b4",
          "style": "powerline",
          "template": " \ueb05 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#f1184c",
          "style": "plain",
          "template": "\u279c ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}}(Admin) {{end}}{{.Folder}}",
  "version": 3
}



================================================
FILE: themes/darkblood.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#CB4B16>\u250f[</>{{ .UserName }}<#CB4B16>]</>",
          "type": "session"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#CB4B16>[</>{{ .HEAD }}<#CB4B16>]</>",
          "type": "git"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#CB4B16>[</>\uf0e7<#CB4B16>]</>",
          "type": "root"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#CB4B16>[x</>{{ reason .Code }}<#CB4B16>]</>",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffffff",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "<#CB4B16>\u2516[</>{{ .Path }}<#CB4B16>]></>",
          "type": "path"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/devious-diamonds.omp.yaml
================================================
final_space: true
blocks:
  - type: prompt
    alignment: left
    newline: true
    segments:
      - type: iterm
        interactive: true
        style: plain
        foreground: cyan
        template: "{{ .PromptMark }}"
      - type: os
        style: diamond
        foreground: cyan
        properties:
          alpine: 
          arch: 
          centos: 
          debian: 
          elementary: 
          fedora: 
          gentoo: 
          linux: 
          macos: 
          manjaro: 
          mint: 
          opensuse: 
          raspbian: 
          ubuntu: 
          windows: 󰍲
          wsl: 
          wsl_separator: 
        template: " {{ if .WSL }}{{ end }}{{.Icon}}═"
      - type: shell
        style: diamond
        leading_diamond: 
        background: green
        foreground: black
        template: "  {{ .Name }} "
      - type: session
        style: powerline
        powerline_symbol: 
        background: magenta
        foreground: black
        template: " {{ if .SSHSession }}󰌘 {{ end }}{{ .UserName }}@{{ .HostName }} "
      - type: angular
        style: powerline
        powerline_symbol: 
        background: lightRed
        foreground: black
        properties:
          fetch_version: true
        template: " 󰚲 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: aurelia
        style: powerline
        powerline_symbol: 
        background: purple
        foreground: white
        properties:
          fetch_version: true
        template: " α {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: aws
        style: powerline
        powerline_symbol: 
        background: yellow
        foreground: black
        properties:
          display_default: false
        template: "  {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} "
      - type: az
        style: powerline
        powerline_symbol: 
        background: lightBlue
        foreground: black
        properties:
          display_default: false
        template: " ﴃ Subscription {{ .Name }} ({{ if .EnvironmentName | contains \"AzureCloud\" }}{{ \"Global\" }}{{ else }}{{ .EnvironmentName }}{{ end }}) "
      - type: azfunc
        style: powerline
        powerline_symbol: 
        background: yellow
        foreground: black
        properties:
          display_mode: files
          fetch_version: false
        template: " ﴃ {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: go
        style: powerline
        powerline_symbol: 
        background: lightCyan
        foreground: black
        properties:
          fetch_version: true
        template: " 󰟓 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: java
        style: powerline
        powerline_symbol: 
        background: lightCyan
        foreground: black
        template: "  {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: julia
        style: powerline
        powerline_symbol: 
        background: lightCyan
        foreground: black
        properties:
          fetch_version: true
        template: "  {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: kubectl
        style: powerline
        powerline_symbol: 
        background: lightYellow
        foreground: black
        template: " 󰠳 {{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}} "
      - type: node
        style: powerline
        powerline_symbol: 
        background: lightGreen
        foreground: black
        properties:
          fetch_version: true
        template: " 󰎙 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} "
      - type: php
        style: powerline
        powerline_symbol: 
        background: lightCyan
        foreground: black
        template: "  {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} "
      - type: project
        style: powerline
        powerline_symbol: 
        background: lightYellow
        foreground: black
        template: " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Version }} {{.Version}}{{ end }} {{ if .Name }}{{ .Name }}{{ end }}{{ end }} "
      - type: python
        style: powerline
        powerline_symbol: 
        background: lightYellow
        foreground: black
        properties:
          display_mode: files
          fetch_virtual_env: false
        template: "  {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: ruby
        style: powerline
        powerline_symbol: 
        background: red
        foreground: black
        properties:
          display_mode: files
          fetch_version: true
        template: "  {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: rust
        style: powerline
        powerline_symbol: 
        background: lightRed
        foreground: black
        properties:
          display_mode: files
          fetch_version: true
        template: "  {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: swift
        style: powerline
        powerline_symbol: 
        background: blue
        foreground: black
        properties:
          display_mode: files
          fetch_version: true
        template: "  {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} "
      - type: time
        style: powerline
        powerline_symbol: 
        background: yellow
        foreground: black
        properties:
          time_format: Mon | 15:04:05
        template: " {{ .CurrentDate | date .Format }} "
      - type: executiontime
        style: diamond
        trailing_diamond: 
        background: cyan
        foreground: black
        properties:
          style: austin
          threshold: 0
        template: " {{ .FormattedMs }} "
  - type: prompt
    alignment: right
    segments:
      - type: git
        style: diamond
        leading_diamond: 
        trailing_diamond: 
        background: magenta
        foreground: black
        properties:
          branch_icon: " "
          fetch_stash_count: true
          fetch_status: true
          fetch_upstream_icon: true
          fetch_worktree_count: true
        template: "{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}  {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}  {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} 󰆓 {{ .StashCount }}{{ end }}"
  - type: prompt
    alignment: left
    newline: true
    segments:
      - type: text
        style: plain
        foreground: cyan
        template: " ╚"
      - type: status
        style: diamond
        leading_diamond: 
        background: blue
        background_templates:
          - "{{ if gt .Code 0 }}red{{ end }}"
        foreground: black
        properties:
          always_enabled: true
        template: " {{ if gt .Code 0 }}󰋔 {{ else }} {{ end }}{{ if eq ( gt .Code 0 ) .Segments.Path.Writable}} {{ end }}"
      - type: path
        style: powerline
        powerline_symbol: 
        background: blue
        background_templates:
          - "{{ if not .Writable }}red{{ end }}"
        foreground: black
        properties:
          style: agnoster_short
          folder_icon: 
          folder_separator_icon: " 󰁕 "
          home_icon: 󰋜
          max_depth: 3
        template: "{{ if eq ( gt .Code 0 ) .Writable }} {{ end }} {{ .Path }}{{ if not .Writable  }} 󰍁 {{ end }}{{ if and .Writable .Root }} {{end}} "
      - type: text
        style: diamond
        trailing_diamond: 
        background: blue
        background_templates:
          - "{{ if and .Segments.Path.Writable (not .Root) }}{{ else }}red{{ end }}"
        foreground: white
        properties:
          root_icon: 
        template: "{{ if not .Root }}\u2800{{ end }}{{ if and .Root ( not .Segments.Path.Writable ) }} {{ end }}{{ if and .Root .Segments.Path.Writable }}  {{ end }}"
console_title_template: "{{ .Folder }}"
palette:
  black: "#1B1A23"
  blue: "#9580FF"
  black-background: "#22212C"
  lightBlue-brightBlue: "#AA99FF"
  lightCyan-brightCyan: "#99FFEE"
  lightGreen-brightGreen: "#A2FF99"
  lightMagenta-brightPurple: "#FF99CC"
  lightRed-brightRed: "#FFAA99"
  lightWhite-brightWhite: "#FFFFFF"
  lightYellow-brightYellow: "#FFFF80"
  selection-selectionBackground: "#454158"
  comment-brightBlack: "#7970A9"
  cyan: "#80FFEA"
  green: "#8AFF80"
  magenta-purple: "#FF80BF"
  purple: "#DE1F84"
  red: "#FF9580"
  white: "#FFFFFF"
  white-cursorColor-foreground: "#F8F8F2"
  yellow: "#FFCA80"
version: 3



================================================
FILE: themes/di4am0nd.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#FFBD00",
          "style": "plain",
          "template": "{{ .UserName }}'s ",
          "type": "session"
        },
        {
          "foreground": "#00C6F7",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": "{{ .Path }}/ ",
          "type": "path"
        },
        {
          "foreground": "#F62F2E",
          "properties": {
            "fetch_status": true
          },
          "style": "plain",
          "template": "<#ffffff>on</> {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#98C379",
          "properties": {
            "fetch_version": true
          },
          "style": "plain",
          "template": "<#ffffff>via</> \ue781 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#85C980",
          "style": "diamond",
          "template": "RAM:{{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB ",
          "trailing_diamond": " ",
          "type": "sysinfo"
        },
        {
          "foreground": "#ffffff",
          "leading_diamond": "\u250b",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#FFBD00",
          "style": "plain",
          "template": "\u2b9e ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/dracula.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#6272a4",
          "foreground": "#f8f8f2",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "#bd93f9",
          "foreground": "#f8f8f2",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#ffb86c",
          "foreground": "#f8f8f2",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "",
            "fetch_stash_count": true,
            "fetch_status": false,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " \ue725 ({{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }}) ",
          "type": "git"
        },
        {
          "background": "#8be9fd",
          "foreground": "#f8f8f2",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#ff79c6",
          "foreground": "#f8f8f2",
          "properties": {
            "time_format": "15:04"
          },
          "style": "diamond",
          "template": " \u2665 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#f1fa8c",
          "foreground": "#282a36",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " \ue7ad {{.Profile}}{{if .Region}}@{{.Region}}{{end}}",
          "trailing_diamond": "\ue0b4",
          "type": "aws"
        }
      ],
      "type": "rprompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/easy-term.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#0c7bbb",
          "foreground": "#ffffff",
          "leading_diamond": "\u256d\u2500\ue0b2",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}\ue712 on {{ end }}{{ .Icon }}  ",
          "type": "os"
        },
        {
          "background": "#DA627D",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "diamond",
          "template": " 🏠  ",
          "type": "text"
        },
        {
          "background": "#8a62da",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#191f48",
          "foreground": "#43CCEA",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#81ff91",
          "style": "diamond",
          "template": "<#cc7eda> \u007C </><#7eb8da>RAM:</> {{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB",
          "type": "sysinfo"
        },
        {
          "foreground": "#81ff91",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": "<#cc7eda> \u007C </><#7eb8da>\ue718</> {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "type": "node"
        },
        {
          "type": "php",
          "style": "powerline",
          "foreground": "#81ff91",
          "template": "<#cc7eda> \u007C </><#7eb8da>\ue73d</> {{ .Full }}"
        },
        {
          "type": "npm",
          "style": "powerline",
          "foreground": "#81ff91",
          "template": "<#cc7eda> \u007C </><#7eb8da>\ue71e </> {{ .Full }}"
        },
        {
          "type": "sysinfo",
          "style": "powerline",
          "foreground": "#81ff91",
          "template": "<> </>"
        },
        {
          "background": "#cecece",
          "foreground": "#4b4b4b",
          "leading_diamond": "\ue0b2",
          "trailing_diamond": "\ue0b0",
          "properties": {
            "style": "austin",
            "threshold": 150
          },
          "style": "diamond",
          "template": "⌛  {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#cecece",
          "foreground": "#4b4b4b",
          "leading_diamond": "\ue0b2",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": "⏰  {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#0c7bbb",
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/emodipt-extend.omp.json
================================================
{
    "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
    "blocks": [
      {
        "alignment": "left",
        "newline": true,
        "segments": [
          {
            "foreground": "#E5C07B",
            "properties": {
              "time_format": "15:04"
            },
            "style": "plain",
            "template": "[{{ .CurrentDate | date .Format }}]",
            "type": "time"
          },
          {
            "type": "shell",
            "style": "plain",
            "foreground": "#E06C75",
            "properties": {
              "mapped_shell_names": {
                "pwsh": "Shell",
                "powershell": "Shell",
                "cmd": "Cmd",
                "bash": "Bash"
              }
            },
            "template": " \ue795 {{ .Name }}"
          },
          {
            "foreground": "#F3C267",
            "foreground_templates": [
              "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
              "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
              "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
              "{{ if gt .Behind 0 }}#B388FF{{ end }}"
            ],
            "properties": {
              "branch_template": "{{ trunc 25 .Branch }}",
              "fetch_stash_count": true,
              "fetch_status": true,
              "fetch_upstream_icon": true
            },
            "style": "plain",
            "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
            "type": "git"
          }
        ],
        "type": "prompt"
      },
      {
        "alignment": "right",
        "segments": [
          {
            "type": "status",
            "style": "plain",
            "foreground": "#b8ff75",
            "foreground_templates": [
              "{{ if gt .Code 0 }}#E06C75{{ end }}"
            ],
            "template": " x{{ reason .Code }}"
          },
          {
            "foreground": "#b8ff75",
            "foreground_templates": [
              "{{ if gt .Code 0 }}#E06C75{{ end }}"
            ],
            "properties": {
              "style": "roundrock",
              "always_enabled": true
            },
            "style": "diamond",
            "template": " {{ .FormattedMs }} ",
            "type": "executiontime"
          }
        ],
        "type": "prompt"
      },
      {
        "alignment": "left",
        "newline": true,
        "segments": [
          {
            "foreground": "#61AFEF",
            "properties": {
              "style": "full"
            },
            "style": "plain",
            "template": "\ue5ff {{ .Path }}",
            "type": "path"
          }
        ],
        "type": "prompt"
      },
      {
        "alignment": "left",
        "newline": true,
        "segments": [
          {
            "foreground": "#E06C75",
            "style": "plain",
            "template": "\u0021",
            "type": "root"
          },
          {
            "foreground": "#E06C75",
            "style": "plain",
            "template": "\u276f",
            "type": "text"
          }
        ],
        "type": "prompt"
      }
    ],
    "final_space": true,
    "version": 3
  }



================================================
FILE: themes/emodipt.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#E5C07B",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": "[{{ .CurrentDate | date .Format }}]",
          "type": "time"
        },
        {
          "foreground": "#B5B50D",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#61AFEF",
          "properties": {
            "style": "agnoster"
          },
          "style": "plain",
          "template": " {{ .Path }} on",
          "type": "path"
        },
        {
          "foreground": "#F3C267",
          "properties": {
            "branch_gone_icon": "\u274e",
            "branch_identical_icon": "\uf14a"
          },
          "style": "plain",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "foreground": "#C94A16",
          "style": "plain",
          "template": "x{{ reason .Code }} ",
          "type": "status"
        },
        {
          "foreground": "#E06C75",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/fish.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": " {{ reason .Code }}",
          "type": "status"
        },
        {
          "foreground": "#100e23",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#007ACC",
          "foreground": "#ffffff",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "style": "full"
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#007ACC",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#ffffff>\ue0b1</> {{ .HEAD }} ",
          "type": "git"
        },
        {
          "foreground": "#007ACC",
          "style": "plain",
          "template": "\ue0b0 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/free-ukraine.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#0057b7",
          "style": "plain",
          "template": "\ue0c5",
          "type": "text"
        },
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "powerline_symbol": "\ue0c4",
          "style": "powerline",
          "template": " \ue795 ",
          "type": "text"
        },
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "properties": {
            "home_icon": "\ue617",
            "style": "mixed"
          },
          "style": "diamond",
          "template": "{{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "#0057b7",
          "foreground": "#ffd700",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " \uf1d3  {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Staging.Changed) (.Working.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0}}\ueb4b {{ .StashCount }}{{ end }}{{ if gt .WorktreeCount 0}} \uf1bb {{ .WorktreeCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#3379c5",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#3379c5{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#c57f33{{ end }}",
            "{{ if gt .Ahead 0 }}#79c533{{ end }}",
            "{{ if gt .Behind 0 }}#c53379{{ end }}"
          ],
          "foreground": "#0057b7",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": false,
            "fetch_status": false,
            "fetch_upstream_icon": false
          },
          "style": "powerline",
          "template": "\uf105",
          "type": "git"
        },
        {
          "leading_diamond": "<transparent,#49404f>\ue0b0</>",
          "style": "plain",
          "trailing_diamond": "\ue0b0",
          "type": "text"
        },
        {
          "background": "#ffd700",
          "foreground": "#0057b7",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#a30000{{ end }}"
          ],
          "leading_diamond": "<transparent,#ffd700>\ue0b0</>",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " {{ if gt .Code 0 }}\uf421 \uf119 {{ else }}\uf469 \u2665 {{ end }}",
          "trailing_diamond": "\ue0b0",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " \uf0ac <#111111>\ue0b2</>",
          "type": "text"
        },
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "properties": {
            "charged_icon": "\ueb2d ",
            "charging_icon": "\uf492 ",
            "discharging_icon": "\uf243 "
          },
          "style": "diamond",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}% <#111111>\ue0b2</>",
          "type": "battery"
        },
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \ueba2 {{ .FormattedMs }} <#111111>\ue0b2</>",
          "type": "executiontime"
        },
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "properties": {
            "time_format": "_2,15:04"
          },
          "style": "diamond",
          "template": " \uf073 {{ .CurrentDate | date .Format }}",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#0057b7",
          "style": "plain",
          "template": "\ue0c5",
          "type": "text"
        },
        {
          "background": "#0057b7",
          "foreground": "#ffd700",
          "powerline_symbol": "\ue0c4",
          "style": "powerline",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#0057b7",
          "foreground": "#FBD951",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": "\uf0e7 ",
          "type": "root"
        },
        {
          "background": "#FBD951",
          "foreground": "#0057b7",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_host": false
          },
          "style": "powerline",
          "template": " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }} ",
          "type": "session"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#0057b7",
          "style": "plain",
          "template": "\uf004",
          "type": "text"
        },
        {
          "foreground": "#FBD951",
          "style": "plain",
          "template": "\uf004",
          "type": "text"
        },
        {
          "foreground": "#0057b7",
          "style": "plain",
          "template": "\uf004",
          "type": "text"
        },
        {
          "foreground": "#FBD951",
          "style": "plain",
          "template": "\uf004  Ukraine",
          "type": "text"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{if .Root}}Admin: {{end}} {{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/froczh.omp.json
================================================
{
    "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
    "blocks": [
        {
            "alignment": "left",
            "segments": [
                {
                    "background": "#40189c",
                    "foreground": "#ffffff",
                    "leading_diamond": "\ue0b6",
                    "style": "diamond",
                    "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
                    "type": "os"
                },
                {
                    "background": "#40189c",
                    "foreground": "#ffffff",
                    "style": "diamond",
                    "template": "| {{ .UserName }}@{{ .HostName }} ",
                    "type": "session",
                    "trailing_diamond": "\ue0b0"
                },
                {
                    "background": "#01579B",
                    "foreground": "#ffffff",
                    "leading_diamond": "<transparent,#01579B>\ue0b0</>",
                    "properties": {
                        "folder_icon": "...",
                        "folder_separator_icon": "<transparent> \ue0bd </>",
                        "home_icon": "\ueb06",
                        "style": "agnoster_short"
                    },
                    "style": "diamond",
                    "template": " {{ .Path }} ",
                    "trailing_diamond": "\ue0b0",
                    "type": "path"
                },
                {
                    "background": "#00C853",
                    "background_templates": [
                        "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFEB3B{{ end }}",
                        "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFCC80{{ end }}",
                        "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
                        "{{ if gt .Behind 0 }}#B388FF{{ end }}"
                    ],
                    "foreground": "#000000",
                    "powerline_symbol": "\ue0b0",
                    "properties": {
                        "fetch_stash_count": true,
                        "fetch_status": true
                    },
                    "style": "powerline",
                    "template": " {{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
                    "type": "git"
                },
                {
                    "type": "dotnet",
                    "style": "powerline",
                    "powerline_symbol": "\uE0B0",
                    "foreground": "#000000",
                    "background": "#00ffff",
                    "template": " \uE77F {{ .Full }} "
                },
                {
                    "type": "angular",
                    "style": "powerline",
                    "powerline_symbol": "\uE0B0",
                    "background": "#000000",
                    "foreground": "#ffffff",
                    "template": " \uE753 {{ if .Error }}<#FE4A49>?</>{{ else }}{{ .Full }}{{ end }} "
                },
                {
                    "type": "aurelia",
                    "style": "powerline",
                    "powerline_symbol": "\uE0B0",
                    "background": "#000000",
                    "foreground": "#ffffff",
                    "template": " \uE753 {{ if .Error }}<#DE1F84>?</>{{ else }}{{ .Full }}{{ end }} "
                },
                {
                    "type": "node",
                    "style": "powerline",
                    "powerline_symbol": "\ue0b0",
                    "background": "#000000",
                    "foreground": "#45bf17",
                    "template": " \ue718 {{ .Full }} "
                },
                {
                    "type": "npm",
                    "style": "powerline",
                    "powerline_symbol": "\ue0b0",
                    "background": "#000000",
                    "foreground": "#FE4A49",
                    "template": "\ue71e {{ .Full }} "
                },
                {
                    "background": "#910000",
                    "foreground": "#ffffff",
                    "powerline_symbol": "\ue0b0",
                    "style": "powerline",
                    "template": "<transparent> \uf12a</> {{ reason .Code }} ",
                    "type": "status"
                }
            ],
            "type": "prompt"
        },
        {
            "alignment": "right",
            "segments": [
                {
                    "background": "#29315A",
                    "foreground": "#ffffff",
                    "leading_diamond": "\ue0c5",
                    "properties": {
                        "style": "dallas",
                        "threshold": 0
                    },
                    "style": "diamond",
                    "template": "\ueba2 {{ .FormattedMs }}s ",
                    "type": "executiontime"
                },
                {
                    "background": "#29315A",
                    "foreground": "#3EC669",
                    "properties": {
                        "time_format": "15:04:05 | Monday"
                    },
                    "style": "plain",
                    "template": "<transparent> \ue0ba\ue0bc </>{{ .CurrentDate | date .Format }} ",
                    "type": "time"
                }
            ],
            "type": "prompt"
        },
        {
            "alignment": "left",
            "newline": true,
            "segments": [
                {
                    "foreground": "#ffffff",
                    "foreground_templates": [
                        "{{ if gt .Code 0 }}#ff0000{{ end }}"
                    ],
                    "properties": {
                        "always_enabled": true
                    },
                    "style": "plain",
                    "template": "\u276f ",
                    "type": "status"
                }
            ],
            "type": "prompt"
        }
    ],
    "console_title_template": "{{if .Root}} \u26a1 {{end}}{{.Folder | replace \"~\" \"🏚\" }} @ {{.HostName}}",
    "version": 3
}



================================================
FILE: themes/glowsticks.omp.yaml
================================================
# yaml-language-server: $schema=https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json
blocks:
  - alignment: left
    segments:
      # Session
      - background: p:black
        foreground: p:white
        invert_powerline: true
        powerline_symbol: 
        style: powerline
        template: "{{ .UserName }}@{{ .HostName }} "
        type: session

      # Path
      - background: p:orange
        foreground: p:white
        powerline_symbol: 
        properties:
          home_icon: ""
          style: folder
        style: powerline
        template: "  {{ .Path }} "
        type: path

      # Git
      - background: p:green
        foreground: p:white
        powerline_symbol: 
        properties:
          script: |
            BRANCH=$(git branch --show-current 2>/dev/null)
            [[ -z $BRANCH ]] && exit
            status=$(git status --porcelain | awk '{print $1}')
            [[ $status == *"R"* ]] && bits+='>'
            [[ $status == *"A"* ]] && bits+='+'
            [[ $status == *"??"* ]] && bits+='?'
            [[ $status == *"D"* ]] && bits+='x'
            [[ $status == *"M"* ]] && bits+='!'
            [[ "$(git rev-list --count "@{u}..")" -gt 0 ]] && bits+='*'
            [[ -n $bits ]] && STAT="  $bits"
            echo -n " $BRANCH$STAT"
          shell: bash
        style: powerline
        template: " {{ .Output }} "
        type: command

      # Execution time
      - background: p:darkred
        foreground: p:white
        powerline_symbol: 
        properties:
          always_enabled: true
          style: round
        style: powerline
        template: " 󰔟{{ .FormattedMs }} "
        type: executiontime

      # Exit code
      - background: p:blue
        background_templates:
          - "{{ if gt .Code 0 }}p:red{{ end }}"
        foreground: p:white
        powerline_symbol: 
        properties:
          always_enabled: true
        style: diamond
        template: " {{ if gt .Code 0 }} {{ reason .Code }}{{ else }}{{ end }} "
        trailing_diamond: 
        type: status
    type: prompt
  - alignment: right
    segments:
      # Shell
      - background: p:black
        foreground: p:white
        style: plain
        template: <p:black,transparent></> {{ .Name }}<transparent,p:black></>
        type: shell

      # Battery
      - background_templates:
          - '{{if eq "Charging" .State.String }}p:green{{end}}'
          - '{{if eq "Discharging" .State.String}}p:orange{{end}}'
        foreground: p:white
        leading_diamond: 
        properties:
          charged_icon: 󰂄
          charging_icon: 󰂄
          discharging_icon: "󰁹 "
        style: diamond
        template: " {{.Templates }}{{ .Percentage}}󰏰 <transparent></>"
        templates:
          - '{{if eq "Discharging" .State.String}}{{if lt .Percentage 11}}󰁺{{else if lt .Percentage 21}}󰁻{{else if lt .Percentage 31}}󰁼{{else if lt .Percentage 41}}󰁽{{else if lt .Percentage 51}}󰁾{{else if lt .Percentage 61}}󰁾{{else if lt .Percentage 71}}󰂀{{else if lt .Percentage 81}}󰂁{{else if lt .Percentage 91}}󰂂{{else}}󰁹{{end}}{{end}}'
          - '{{if eq "Charging" .State.String}}{{ if lt .Percentage 21}}󰂆{{else if lt .Percentage 31}}󰂇{{else if lt .Percentage 41}}󰂈{{else if lt .Percentage 61}}󰂉{{else if lt .Percentage 81}}󰂊{{else if lt .Percentage 91}}󰂋{{else}}󰂄{{end}}{{end}}'
        templates_logic: first_match
        type: battery

      # Weather & time of day
      - background: p:blue
        foreground: p:white
        leading_diamond: 
        properties:
          script: |
            now="$(date +'%I:%M%P')"
            if [[ -f /tmp/weather.w ]]; then
              update="$(cat /tmp/last_update.w)"
              if [[ -f /tmp/w_lock.w || $(date +'%s') -le $((update + 600)) ]]; then
                echo -n "$now"
                cat /tmp/weather.w
                exit 0
              fi
            elif [[ -f /tmp/w_lock.w ]]; then
              echo "$now"
              exit 0
            fi
            touch /tmp/w_lock.w
            if ! res=$(curl -s wttr.in -Gsm2 --data-urlencode "format=j1"); then
              echo "$now"
              date +'%s' >/tmp/last_update.w
              echo 󰖪 >/tmp/weather.w
              rm /tmp/w_lock.w
              exit 0
            fi
            res=$(jq .current_condition[] -c <<<"$res")
            temp=$(jq -r .temp_C <<<"$res")
            feels_like=$(jq -r .FeelsLikeC <<<"$res")
            [[ $(bc -l <<<"$feels_like!=$temp") -eq 1 ]] && feels_string=" feels $feels_like°C"
            WWC_MAP='{"113":"Sunny","116":"PartlyCloudy","119":"Cloudy","122":"VeryCloudy","143":"Fog","176":"LightShowers","179":"LightSleetShowers","182":"LightSleet","185":"LightSleet","200":"ThunderyShowers","227":"LightSnow","230":"HeavySnow","248":"Fog","260":"Fog","263":"LightShowers","266":"LightRain","281":"LightSleet","284":"LightSleet","293":"LightRain","296":"LightRain","299":"HeavyShowers","302":"HeavyRain","305":"HeavyShowers","308":"HeavyRain","311":"LightSleet","314":"LightSleet","317":"LightSleet","320":"LightSnow","323":"LightSnowShowers","326":"LightSnowShowers","329":"HeavySnow","332":"HeavySnow","335":"HeavySnowShowers","338":"HeavySnow","350":"LightSleet","353":"LightShowers","356":"HeavyShowers","359":"HeavyRain","362":"LightSleetShowers","365":"LightSleetShowers","368":"LightSnowShowers","371":"HeavySnowShowers","374":"LightSleetShowers","377":"LightSleet","386":"ThunderyShowers","389":"ThunderyHeavyRain","392":"ThunderySnowShowers","395":"HeavySnowShowers"}';NF_DAY_MAP='{"Unknown":"󰚌","Cloudy":"","Fog":"","HeavyRain":"","HeavyShowers":"","HeavySnow":"","HeavySnowShowers":"","LightRain":"","LightShowers":"","LightSleet":"","LightSleetShowers":"","LightSnow":"","LightSnowShowers":"","PartlyCloudy":"","Sunny":"","ThunderyHeavyRain":"","ThunderyShowers":"","ThunderySnowShowers":"","VeryCloudy":""}';NF_NIGHT_MAP='{"Unknown":"󰚌","Cloudy":"","Fog":"","HeavyRain":"","HeavyShowers":"","HeavySnow":"","HeavySnowShowers":"","LightRain":"","LightShowers":"","LightSleet":"","LightSleetShowers":"","LightSnow":"","LightSnowShowers":"","PartlyCloudy":"","Sunny":"","ThunderyHeavyRain":"","ThunderyShowers":"","ThunderySnowShowers":"","VeryCloudy":""}'
            cur_h="$(date +'%H')" ;wwc="$(jq '.weatherCode' <<<"$res")"
            if [[ $cur_h -gt 18 || $cur_h -lt 6 ]]; then icon=$(jq -r ".$(echo "$WWC_MAP" | jq -r ".$wwc")" <<<"$NF_DAY_MAP")
            else icon=$(jq -r ".$(echo "$WWC_MAP" | jq -r ".$wwc")" <<<"$NF_NIGHT_MAP"); fi
            weather="$icon  $temp°C$feels_string"
            echo "$now $weather"
            date +'%s' >/tmp/last_update.w
            echo "$weather" >/tmp/weather.w
            rm /tmp/w_lock.w
        style: diamond
        template: "{{ .Output }}"
        trailing_diamond: 
        type: command
    type: rprompt
final_space: true
console_title_template:  {{ .Shell }} in {{ if ne .Folder "~"}} {{ .Folder }}{{else}}{{end}}
palette:
  black: "#33395b"
  blue: "#359ddd"
  darkred: "#7c0a16"
  green: "#277b48"
  orange: "#ff972e"
  red: "#de3142"
  white: "#efeef4"
secondary_prompt:
  background: transparent
  foreground: p:white
  template: " "
transient_prompt:
  background: transparent
  foreground: p:white
  template: " "
version: 3



================================================
FILE: themes/gmay.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#3A86FF",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#3A86FF",
          "foreground": "#ffffff",
          "style": "powerline",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#ff479c",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#4caf50",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "time_format": "2006-01-02 15:04:05"
          },
          "style": "powerline",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#fffb38",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#6CA35E",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#ffff66",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#2e9599",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \ueb05 ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#f1184c",
          "style": "plain",
          "template": "\uf0a9 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/grandpa-style.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#000000",
          "foreground": "#dd1e1e",
          "style": "plain",
          "template": " \u26a1 ",
          "type": "root"
        },
        {
          "background": "transparent",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#5a3d29",
          "foreground": "#43CCEA",
          "properties": {
            "folder_icon": "...",
            "folder_separator_icon": "<transparent> \ue0bd </>",
            "home_icon": "\ueb06",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#00C853",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFEB3B{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFCC80{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#000000",
          "leading_diamond": "<parentBackground,background>\ue0b0</>",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "diamond",
          "template": " {{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#2ba1bb",
          "foreground": "#5a3d29",
          "leading_diamond": "<parentBackground,background>\ue0b0</>",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }}s ",
          "type": "executiontime"
        },
        {
          "background": "#910000",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "{{ if gt .Code 0 }}<parentBackground,background>\ue0b0</><transparent> \uf12a</> {{ reason .Code }} <background,transparent>\ue0b0</>{{ else }}<parentBackground,transparent>\ue0b0</>{{ end }}",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#5a3d29",
          "foreground": "#43CCEA",
          "leading_diamond": "\ue0c5",
          "style": "diamond",
          "template": "  {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}<transparent> / </>{{ .HostName }}",
          "type": "session"
        },
        {
          "background": "#5a3d29",
          "foreground": "#43CCEA",
          "properties": {
            "time_format": "3:04:05 PM"
          },
          "style": "plain",
          "template": "<transparent> \ue0ba\ue0bc </>{{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffffff",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ff0000{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}} \u26a1 {{end}}{{.Folder | replace \"~\" \"🏚\" }} @ {{.HostName}}",
  "version": 3
}



================================================
FILE: themes/gruvbox.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#3A3A3A",
          "foreground": "#ffffff",
          "style": "powerline",
          "template": "{{ if .WSL }}WSL at{{ end }} {{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#458588",
          "foreground": "#282828",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#98971A",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#282828",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "branch_icon": "\uE0A0 ",
            "branch_identical_icon": "\u25CF"
          },
          "style": "powerline",
          "template": " {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "#8ED1F7",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "go"
        },
        {
          "background": "#4063D8",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue624 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "julia"
        },
        {
          "background": "#FFDE57",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_virtual_env": false
          },
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#AE1401",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue791 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "ruby"
        },
        {
          "background": "#FEAC19",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": false
          },
          "style": "powerline",
          "template": " \uf0e7{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "azfunc"
        },
        {
          "background_templates": [
            "{{if contains \"default\" .Profile}}#FFA400{{end}}",
            "{{if contains \"jan\" .Profile}}#f1184c{{end}}"
          ],
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_default": false
          },
          "style": "powerline",
          "template": " \ue7ad {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} ",
          "type": "aws"
        },
        {
          "background": "#ffff66",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0ad ",
          "type": "root"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/half-life.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#7E46B6",
          "style": "plain",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "in ",
          "type": "text"
        },
        {
          "foreground": "#87FF00",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#5FD7FF",
          "properties": {
            "branch_ahead_icon": "",
            "branch_behind_icon": "",
            "branch_gone_icon": "",
            "branch_icon": "",
            "branch_identical_icon": "",
            "cherry_pick_icon": "",
            "commit_icon": "",
            "fetch_status": true,
            "merge_icon": "",
            "rebase_icon": "",
            "revert_icon": "",
            "tag_icon": ""
          },
          "style": "plain",
          "template": "<#ffffff>on</> {{ .HEAD }}{{ if .Staging.Changed }}<#87FF00> \u25cf {{ .Staging.String }}</>{{ end }}{{ if .Working.Changed }}<#D75F00> \u25cf {{ .Working.String }}</>{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#D75F00",
          "style": "plain",
          "template": "λ ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/honukai.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#FFFFFF",
          "style": "plain",
          "template": "<#0377C8># </><#0377C8>{{ .UserName }}</> <#ffffff>in</> <#4A9207>{{ .HostName }}</> ",
          "type": "session"
        },
        {
          "foreground": "#0973C0",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "style": "full"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#B8B80A",
          "style": "plain",
          "template": "<#ffffff>on git:</>{{ .HEAD }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "[{{ .CurrentDate | date .Format }}]",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#CECE04",
          "style": "plain",
          "template": "\uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#100e23",
          "style": "plain",
          "template": "\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "foreground": "#CB4B16",
          "style": "plain",
          "template": " {{ reason .Code }} ",
          "type": "status"
        },
        {
          "foreground": "#CC4B16",
          "style": "plain",
          "template": "\u279c ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/hotstick.minimal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "yellow",
          "style": "plain",
          "template": " \ue0a2 ",
          "type": "root"
        },
        {
          "background": "lightBlue",
          "foreground": "black",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "mixed"
          },
          "style": "diamond",
          "template": " {{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "green",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}yellow{{ end }}"
          ],
          "foreground": "black",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_ahead_icon": "\u2191",
            "branch_behind_icon": "\u2193",
            "branch_gone": "\u2262",
            "branch_icon": "\ue0a0 ",
            "branch_identical_icon": "\u2261",
            "cherry_pick_icon": "\u2713 ",
            "commit_icon": "\u25b7 ",
            "fetch_status": true,
            "merge_icon": "\u25f4 ",
            "no_commits_icon": "[no commits]",
            "rebase_icon": "\u2c62 ",
            "tag_icon": "\u25b6 "
          },
          "style": "powerline",
          "template": " {{ .HEAD }}{{ if .Staging.Changed }} {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} {{ .Working.String }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{.Folder}}{{if .Root}} :: root{{end}} :: {{.Shell}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/hul10.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
    "white": "#f7f7f7",
    "black": "#111111"
  },
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "transparent",
          "foreground": "p:white",
          "style": "plain",
          "template": "\u250c",
          "type": "text"
        },
        {
          "background": "#464646",
          "foreground": "p:white",
          "properties": {
            "windows": "\ue62a",
            "linux": "\uf17c",
            "ubuntu": "\uf31b",
            "macos": "\uf179"
          },
          "style": "plain",
          "template": " {{.Icon}}{{if .WSL}} (WSL){{end}}\u2800",
          "type": "os"
        },
        {
          "background": "p:white",
          "foreground": "p:black",
          "style": "plain",
          "template": " \uf489 {{.Name}}\u2800",
          "type": "shell"
        },
        {
          "background": "#ffe093",
          "foreground": "p:black",
          "style": "plain",
          "template": " \uf2c0 {{.HostName}}\ue0bd{{.UserName}}\u2800",
          "type": "session"
        },
        {
          "background": "#ffffd6",
          "foreground": "p:black",
          "properties": {
            "branch_icon": " \ue0a0 "
          },
          "style": "plain",
          "template": "{{.HEAD}}\u2800",
          "type": "git"
        }
      ]
    },
    {
      "type": "prompt",
      "alignment": "right",
      "segments": [
        {
          "background": "transparent",
          "foreground": "#b3ffde",
          "properties": {
            "style": "austin",
            "threshold": 0
          },
          "style": "plain",
          "template": "{{.FormattedMs}}",
          "type": "executiontime"
        },
        {
          "background": "transparent",
          "foreground": "#b3ffde",
          "properties": {
            "time_format": "02/01/06 15:04"
          },
          "style": "plain",
          "template": "<p:white> · </>{{.CurrentDate | date .Format}}",
          "type": "time"
        }
      ]
    },
    {
      "type": "prompt",
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "transparent",
          "foreground": "p:white",
          "properties": {
            "folder_icon": "\uf07b",
            "folder_separator_template": "<#93d0ff> \u00bb </>",
            "home_icon": "\ueb06",
            "style": "agnoster"
          },
          "style": "plain",
          "template": "<p:white>\u2514</><#93d0ff>[</> {{.Path}} <#93d0ff>]</>",
          "type": "path"
        }
      ]
    },
    {
      "type": "prompt",
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "transparent",
          "foreground": "#81ff91",
          "foreground_templates": [
            "{{if gt .Code 0}}#ff3030{{end}}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f",
          "type": "status"
        }
      ]
    }
  ],
  "console_title_template": "{{if .Root}}[root] {{end}}{{.Shell}} in <{{.Folder}}>",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/hunk.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#c44569",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "properties": {
            "windows": "\ue62a"
          },
          "style": "diamond",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "type": "os"
        },
        {
          "background": "#c44569",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#f78fb3",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#f78fb3",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": false
          },
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#caffbf",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FCA17D{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#89d1dc{{ end }}",
            "{{ if gt .Behind 0 }}#f17c37{{ end }}"
          ],
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#86BBD8",
          "foreground": "#FFD700",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "style": "powerline",
          "template": " \u26a1",
          "type": "root"
        },
        {
          "background": "#86BBD8",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "style": "powerline",
          "template": " {{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "#33658A",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "style": "diamond",
          "template": " {{ .Name }} ",
          "trailing_diamond": "\ue0b4",
          "type": "shell"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#69FF94>\u276f</>",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/huvix.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#FFE082",
          "style": "plain",
          "template": "@{{ .UserName }} \u279c",
          "type": "session"
        },
        {
          "foreground": "#56B6C2",
          "properties": {
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#7FD5EA",
          "style": "powerline",
          "template": "(\ue626{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}) ",
          "type": "go"
        },
        {
          "foreground": "#9e7eff",
          "style": "powerline",
          "template": "(\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}) ",
          "type": "python"
        },
        {
          "foreground": "#56B6C2",
          "properties": {
            "branch_icon": ""
          },
          "style": "plain",
          "template": "<#E8CC97>git(</>{{ .HEAD }}<#E8CC97>) </>",
          "type": "git"
        },
        {
          "foreground": "#FFAB91",
          "properties": {
            "always_enabled": false,
            "style": "austin",
            "threshold": 100
          },
          "style": "powerline",
          "template": "{{ .FormattedMs }}",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#193549",
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#64B5F6{{end}}",
            "{{if eq \"Discharging\" .State.String}}#E36464{{end}}",
            "{{if eq \"Full\" .State.String}}#66BB6A{{end}}"
          ],
          "properties": {
            "charged_icon": "\ue22f ",
            "charging_icon": "\ue234 ",
            "discharging_icon": "\ue231 "
          },
          "style": "powerline",
          "template": "[{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295]",
          "type": "battery"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/if_tea.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#1865f5",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\uf179 ",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31b ",
            "windows": "\ue62a ",
            "wsl": "\ue712"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "trailing_diamond": "<transparent,>\ue0b2</>",
          "type": "os"
        },
        {
          "background": "#00c7fc",
          "foreground": "#000000",
          "style": "diamond",
          "leading_diamond": "<transparent,#00c7fc>\ue0b0</>",
          "properties": {
            "template": " \ue266 CPU: {{ round .PhysicalPercentUsed .Precision }}% | "
          },
          "type": "sysinfo"
        },
        {
          "background": "#00c7fc",
          "foreground": "#000000",
          "style": "diamond",
          "template": "RAM: {{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB \ue266 ",
          "trailing_diamond": "<transparent,#00c7fc>\ue0b2</>",
          "type": "sysinfo"
        },
        {
          "background": "#2343e2",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }} ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#ee79d1",
          "foreground": "#000000",
          "leading_diamond": "",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true
          },
          "style": "diamond",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b0",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#91f2ff",
          "style": "plain",
          "template": "\u256d\u2500",
          "type": "text"
        },
        {
          "background": "#91f2ff",
          "foreground": "#000000",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " \uf489 {{ .Name }} ",
          "trailing_diamond": "<transparent,#91f2ff>\ue0b2</>",
          "type": "shell"
        },
        {
          "background": "#ff8c94",
          "foreground": "#000000",
          "leading_diamond": "\ue0b2",
          "properties": {
            "time_format": "3:04:05 PM | Monday"
          },
          "style": "diamond",
          "template": " \ue641 {{ .CurrentDate | date .Format }} \uf073 ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        },
        {
          "properties": {
            "root_icon": "\uf292 "
          },
          "style": "diamond",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#f8677b",
          "foreground": "#000000",
          "leading_diamond": "<transparent,#F8677b>\ue0b0</>",
          "properties": {
            "folder_icon": "\uf07b ",
            "folder_separator_icon": " \uf061 ",
            "home_icon": "\uf46d",
            "style": "agnoster_full",
            "template": " \ue5ff {{ .Path }} "
          },
          "style": "diamond",
          "trailing_diamond": "",
          "type": "path"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#00BCF9",
          "foreground_templates": ["{{ if gt .Code 0 }}#ef5350{{ end }}"],
          "properties": {
            "always_enabled": true,
            "template": "\u2570\u2500\ue285  "
          },
          "style": "plain",
          "template": " ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title": true,
  "console_title_style": "template",

  "console_title_template": "{{ .Folder }}",
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FEF5ED",
    "template": "\ue285 "
  },
  "version": 3
}



================================================
FILE: themes/illusi0n.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "segments": [
        {
          "foreground": "#ff8800",
          "style": "diamond",
          "template": "{{ round .PhysicalPercentUsed .Precision }}% ",
          "type": "sysinfo"
        },
        {
          "foreground": "#ff8800",
          "style": "diamond",
          "template": "{{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB ",
          "type": "sysinfo"
        }
      ],
      "type": "rprompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ff8800",
          "properties": {
            "macos": "mac"
          },
          "style": "plain",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "foreground": "#ff8800",
          "style": "plain",
          "template": "$",
          "type": "text"
        },
        {
          "foreground": "#ff8800",
          "style": "plain",
          "template": "{{ .UserName }}:",
          "type": "session"
        },
        {
          "foreground": "#62c0ff",
          "properties": {
            "folder_separator_icon": "/",
            "style": "full"
          },
          "style": "plain",
          "type": "path"
        },
        {
          "foreground": "#62c0ff",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#6287ff{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#7f62ff{{ end }}",
            "{{ if gt .Ahead 0 }}#9962ff{{ end }}",
            "{{ if gt .Behind 0 }}#c062ff{{ end }}"
          ],
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "<#ff8800>on</> {{.UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#ff8800",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/iterm2.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#003543",
          "foreground": "#fff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "windows": "\uf179"
          },
          "style": "powerline",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "type": "os"
        },
        {
          "background": "#003543",
          "foreground": "#d2ff5e",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "#0087D8",
          "foreground": "#003544",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": "/",
            "style": "full"
          },
          "style": "powerline",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#d2ff5e",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ff9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#89d1dc{{ end }}",
            "{{ if gt .Behind 0 }}#f17c37{{ end }}"
          ],
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "powerline",
          "template": " {{ .HEAD }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#33DD2D",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#242424",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " \uea6c ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#33DD2D{{end}}",
            "{{if eq \"Discharging\" .State.String}}#FFCD58{{end}}",
            "{{if eq \"Full\" .State.String}}#0476d0{{end}}"
          ],
          "foreground": "#242424",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 \ueb2d ",
          "type": "battery"
        },
        {
          "background": "#0087D8",
          "foreground": "#003544",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "display_mode": "context",
            "fetch_virtual_env": true
          },
          "style": "powerline",
          "template": " \ue235 {{ .Venv }} ",
          "type": "python"
        },
        {
          "background": "#003543",
          "foreground": "#fff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "style": "powerline",
          "template": "<#fff> \ue641 </>{{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#FFD700",
          "style": "plain",
          "template": " \u26a1 ",
          "type": "root"
        },
        {
          "foreground": "#f1184c",
          "style": "plain",
          "template": "🚀 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FFD700",
    "template": "{{if .Root}}\u26a1 {{end}}🚀 "
  },
  "version": 3
}



================================================
FILE: themes/jandedobbeleer.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#c386f1",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#ff479c",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": " \ue0b1 ",
            "home_icon": "~",
            "style": "folder"
          },
          "style": "powerline",
          "template": " \uea83  {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#fffb38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#193549",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },
        {
          "background": "#6CA35E",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#8ED1F7",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "go"
        },
        {
          "background": "#4063D8",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue624 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "julia"
        },
        {
          "background": "#FFDE57",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_virtual_env": false
          },
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#AE1401",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "powerline",
          "template": " \ue791 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "ruby"
        },
        {
          "background": "#FEAC19",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "files",
            "fetch_version": false
          },
          "style": "powerline",
          "template": " \uf0e7{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "azfunc"
        },
        {
          "background_templates": [
            "{{if contains \"default\" .Profile}}#FFA400{{end}}",
            "{{if contains \"jan\" .Profile}}#f1184c{{end}}"
          ],
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_default": false
          },
          "style": "powerline",
          "template": " \ue7ad {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} ",
          "type": "aws"
        },
        {
          "background": "#ffff66",
          "foreground": "#111111",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0ad ",
          "type": "root"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> \ueba2 {{ .FormattedMs }}\u2800",
          "type": "executiontime"
        },
        {
          "background": "#00897b",
          "background_templates": [
            "{{ if gt .Code 0 }}#e91e63{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": "<parentBackground>\ue0b0</> \ue23a ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "segments": [
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#0077c2,transparent>\ue0b6</> \uf489 {{ .Name }} <transparent,#0077c2>\ue0b2</>",
          "type": "shell"
        },
        {
          "background": "#1BD760",
          "foreground": "#111111",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "paused_icon": "\uf04c ",
            "playing_icon": "\uf04b "
          },
          "style": "powerline",
          "template": " \uf167 {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} ",
          "type": "ytm"
        },
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "charged_icon": "\ue22f ",
            "charging_icon": "\ue234 ",
            "discharging_icon": "\ue231 "
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 ",
          "type": "battery"
        },
        {
          "background": "#2e9599",
          "foreground": "#111111",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/jblab_2021.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#0C212F",
          "foreground": "#FFFFFF",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .Icon }} ",
          "trailing_diamond": "\ue0b0",
          "type": "os"
        },
        {
          "background": "#DE2121",
          "foreground": "#FFFFFF",
          "leading_diamond": "<transparent,#DE2121>\ue0b0</>",
          "style": "diamond",
          "template": " \uf0e7 ",
          "trailing_diamond": "\ue0b0",
          "type": "root"
        },
        {
          "background": "#26BDBB",
          "foreground": "#0C212F",
          "leading_diamond": "<transparent,#26BDBB>\ue0b0</>",
          "properties": {
            "folder_icon": "...",
            "folder_separator_icon": "<transparent> \ue0b1 </>",
            "home_icon": "\ueb06",
            "style": "agnoster_short"
          },
          "style": "diamond",
          "template": " {{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "#280C2E",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#7621DE{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#7621DE{{ end }}",
            "{{ if gt .Ahead 0 }}#7621DE{{ end }}",
            "{{ if gt .Behind 0 }}#7621DE{{ end }}"
          ],
          "foreground": "#FFFFFF",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#0C212F",
          "foreground": "#FFFFFF",
          "leading_diamond": "<transparent,#0C212F>\ue0b0</>",
          "properties": {
            "time_format": "15:04"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        },
        {
          "background": "#26BDBB",
          "foreground": "#0C212F",
          "leading_diamond": "<transparent,#26BDBB>\ue0b0</>",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }}s ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        },
        {
          "background": "#910000",
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "style": "diamond",
          "template": "<transparent> \uf12a</> {{ reason .Code }} ",
          "trailing_diamond": "\ue0b0",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}} \u26a1 {{end}}{{.Folder | replace \"~\" \"🏠\"}} @ {{.HostName}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/jonnychipz.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#4707a8",
          "foreground": "#000000",
          "leading_diamond": "\ue0c2\ue0c2",
          "style": "diamond",
          "type": "text"
        },
        {
          "background": "#4707a8",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#1a1af5",
          "foreground": "#ffffff",
          "trailing_diamond": "\ue0b0",
          "style": "diamond",
          "template": " \uebd8 {{ .Name }} ",
          "type": "az"
        },
        {
          "background": "#4707a8",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \ue23a ",
          "leading_diamond": "<transparent>\ue0b0</>",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "leading_diamond": "\ue0c2\ue0c2",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}\ue712 on {{ end }}{{ .Icon }}<#000000> \ue0b1</>",
          "type": "os"
        },
        {
          "background": "#000000",
          "foreground": "#ffffff",
          "style": "diamond",
          "template": " \uf0e7<#ffffff> \ue0b1</>",
          "type": "root"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "properties": {
            "folder_icon": "<#000000>\ue5fe </>",
            "folder_separator_icon": "<#000000>\ue0b1 </>",
            "home_icon": "\ueb06 ",
            "style": "agnoster_short"
          },
          "style": "diamond",
          "template": "<#000000> \ue5ff </>{{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffea00{{ end }}",
            "{{ if gt .Ahead 0 }}#2EC4B6{{ end }}",
            "{{ if gt .Behind 0 }}#8A4FFF{{ end }}"
          ],
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "diamond",
          "template": "<#000000>\ue0b1 </>{{ .UpstreamIcon }}{{ .HEAD }}{{ if .Staging.Changed }}<#2FDA4E> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }}<#E84855> \uf044 {{ .Working.String }}</>{{ end }} ",
          "type": "git"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "style": "powerline",
          "template": " {{ .WorkspaceName }} ",
          "type": "terraform"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "style": "diamond",
          "trailing_diamond": "\ue0b0",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#1a1af5",
          "style": "plain",
          "template": " \u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}}root :: {{end}}{{.Shell}} :: {{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/json.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#F1FA8C",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": "<#42E66C>\ueaf7 </><b>{{ .Path }}</b>",
          "type": "path"
        },
        {
          "foreground": "#43CCEA",
          "properties": {
            "branch_icon": ""
          },
          "style": "diamond",
          "template": "<#ffffff> \u26A1 </><b>{{ .HEAD }}</b>",
          "type": "git"
        },
        {
          "foreground": "#ff0000",
          "style": "diamond",
          "template": "<#ff0000> \u25C9</>",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#FFFFFF",
          "style": "plain",
          "template": ">",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/jtracey93.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#EB9654",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "properties": {
            "display_host": false
          },
          "style": "diamond",
          "template": "{{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "lightYellow",
          "foreground": "#3f3f3f",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#25AFF3",
          "foreground": "#ffffff",
          "properties": {
            "fetch_status": true
          },
          "style": "plain",
          "template": " branch ({{ .HEAD }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}) ",
          "type": "git"
        },
        {
          "background": "#1BD760",
          "foreground": "#ffffff",
          "properties": {
            "paused_icon": "",
            "playing_icon": "",
            "stopped_icon": "",
            "track_separator": " - "
          },
          "style": "plain",
          "template": " {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} ",
          "type": "spotify"
        },
        {
          "background": "#cc00ff",
          "foreground": "#ffffff",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#49404f",
          "foreground": "#ffffff",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "plain",
          "template": " {{ .FormattedMs }}s ",
          "type": "executiontime"
        },
        {
          "type": "status",
          "style": "diamond",
          "foreground": "#ffffff",
          "background": "#00897b",
          "background_templates": [
            "{{ if .Error }}#e91e63{{ end }}"
          ],
          "trailing_diamond": "\ue0b0",
          "properties": {
            "always_enabled": true
          }
        }
      ],
      "type": "prompt"
    },
    {
      "type": "prompt",
      "newline": true,
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ff0000{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ]
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/jv_sitecorian.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#185F7B",
          "style": "plain",
          "template": "\ue0c5",
          "type": "text"
        },
        {
          "background": "#185F7B",
          "foreground": "#185F7B",
          "powerline_symbol": "\ue0c4",
          "style": "powerline",
          "type": "text"
        },
        {
          "background": "#185F7B",
          "foreground": "#ffffff",
          "properties": {
            "home_icon": "\ue617  ",
            "style": "mixed"
          },
          "style": "diamond",
          "template": "{{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "#6f42c1",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "leading_diamond": "<transparent,#49404f>\ue0b0</>",
          "style": "plain",
          "trailing_diamond": "\ue0b0",
          "type": "text"
        },
        {
          "background": "#4caf50",
          "background_templates": [
            "{{ if gt .Code 0 }}red{{ end }}"
          ],
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " {{ if gt .Code 0 }}\uf421{{ else }}\uf469 \u2665{{ end }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#2B2B2B",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "leading_diamond": "\ue0c5",
          "properties": {
            "time_format": "3:04:05 PM"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }}<#ffffff> \ue641 </>",
          "trailing_diamond": "\ue0c4",
          "type": "time"
        },
        {
          "background": "#2B2B2B",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "leading_diamond": "\ue0c5",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }}<#ffffff> \uf252 </>",
          "trailing_diamond": "\ue0c4",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#2B2B2B",
          "style": "plain",
          "template": "\ue0c5",
          "type": "text"
        },
        {
          "background": "#2B2B2B",
          "foreground": "#1CA6A3",
          "powerline_symbol": "\ue0c4",
          "style": "powerline",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#2B2B2B",
          "foreground": "#FBD951",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": "\uf0e7 ",
          "type": "root"
        },
        {
          "background": "#DC291E",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .UserName }} ",
          "type": "session"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#000000",
          "foreground": "#666666",
          "style": "plain",
          "template": "\uf489 {{ .Name }}",
          "type": "shell"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{if .Root}}Admin: {{end}} {{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/kali.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "lightBlue",
          "foreground_templates": [
            "{{ if .Root }}lightRed{{ end }}"
          ],
          "properties": {
            "display_host": true
          },
          "style": "plain",
          "template": "<{{ if .Root }}lightBlue{{ else }}green{{ end }}>\u250c\u2500\u2500(</>{{ .UserName }}{{ if .Root }}💀{{ else }}㉿{{ end }}{{ .HostName }}<{{ if .Root }}lightBlue{{ else }}green{{ end }}>)</>",
          "type": "session"
        },
        {
          "foreground": "yellow",
          "properties": {
            "fetch_version": false,
            "fetch_virtual_env": true
          },
          "style": "plain",
          "template": "<{{ if .Root }}lightBlue{{ else }}green{{ end }}>-[</>\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }}{{ end }}{{ .Full }}{{ end }}<{{ if .Root }}lightBlue{{ else }}green{{ end }}>]</>",
          "type": "python"
        },
        {
          "foreground": "lightWhite",
          "properties": {
            "folder_separator_icon": "<#c0c0c0>/</>",
            "style": "full"
          },
          "style": "plain",
          "template": "<{{ if .Root }}lightBlue{{ else }}green{{ end }}>-[</>{{ .Path }}<{{ if .Root }}lightBlue{{ else }}green{{ end }}>]</>",
          "type": "path"
        },
        {
          "foreground": "white",
          "style": "plain",
          "template": "<{{ if .Root }}lightBlue{{ else }}green{{ end }}>-[</>{{ .HEAD }}<{{ if .Root }}lightBlue{{ else }}green{{ end }}>]</>",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "white",
          "properties": {
            "always_enabled": true,
            "style": "round"
          },
          "style": "plain",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "foreground": "green",
          "foreground_templates": [
            "{{ if gt .Code 0 }}red{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " {{ if gt .Code 0 }}\uea76{{else}}\uf42e{{ end }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "lightBlue",
          "style": "plain",
          "template": "<{{ if .Root }}lightBlue{{ else }}green{{ end }}>\u2514\u2500</>{{ if .Root }}<lightRed>#</>{{ else }}${{ end }} ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/kushal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "console_title_template": "{{ if .Root }}root @ {{ end }}{{ .Shell }} in {{ .Folder }}",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#575656",
          "foreground": "#D6DEEB",
          "leading_diamond": "\ue0b2",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}\ue712 on {{ end }}{{ .Icon }} ",
          "type": "os"
        },
        {
          "background": "#00C7FC",
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf489 {{ .Name }} ",
          "type": "shell"
        },
        {
          "background": "#EF541C",
          "foreground": "#D6DEEB",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf09c admin ",
          "type": "root"
        },
        {
          "type": "cmake",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "foreground": "#E8EAEE",
          "background": "#1E9748",
          "template": " \ue61e \ue61d cmake {{ .Full }} "
        },
        {
          "type": "python",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_mode": "context"
          },
          "foreground": "#011627",
          "background": "#FFDE57",
          "template": " \ue73c {{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }} "
        },
        {
          "type": "go",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "foreground": "#ffffff",
          "background": "#7FD5EA",
          "template": " \u202d\ue626 {{ .Full }} "
        },
        {
          "type": "rust",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "foreground": "#193549",
          "background": "#99908A",
          "template": " \ue7a8 {{ .Full }} "
        },
        {
          "background": "#1BD4CD",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#16B1AC{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#16B1AC{{ end }}",
            "{{ if gt .Ahead 0 }}#B787D7{{ end }}",
            "{{ if gt .Behind 0 }}#B787D7{{ end }}"
          ],
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#CAEBE1> \uf046 {{ .Staging.String }}</>{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#03DED3",
          "background_templates": [
            "{{ if gt .Code 0 }}#E44141{{ end }}"
          ],
          "foreground": "#414141",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#D6DEEB{{ end }}"
          ],
          "leading_diamond": "\ue0b6",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " {{ if gt .Code 0 }}\uf00d{{ else }}\uf00c{{ end }} ",
          "type": "status"
        },
        {
          "background": "#575656",
          "foreground": "#D6DEEB",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " \uf252 {{ .FormattedMs }} ",
          "trailing_diamond": "\ue0b4",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#D6DEEB",
          "style": "plain",
          "template": "\u256d\u2500",
          "type": "text"
        },
        {
          "foreground": "#F2D3B6",
          "properties": {
            "time_format": "<#D6DEEB>\ue641 15:04:05</> <#79DFE1>|</> \uf073 2 Jan, Monday"
          },
          "style": "plain",
          "template": "{{ .CurrentDate | date .Format }} <#79DFE1>|</>",
          "type": "time"
        },
        {
          "foreground": "#B6D6F2",
          "leading_diamond": "<#00C7FC> \uf07b </><#B6D6F2> in </>",
          "properties": {
            "folder_icon": " \uf07c ",
            "folder_separator_icon": " \uf061 ",
            "home_icon": "\ueb06 ",
            "style": "agnoster_short",
            "max_depth": 3
          },
          "style": "diamond",
          "template": " {{ .Path }} ",
          "type": "path"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#D6DEEB",
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        },
        {
          "foreground": "#D6DEEB",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "osc99": true,
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FEF5ED",
    "template": "\ue285 "
  },
  "secondary_prompt": {
    "background": "transparent",
    "foreground": "#D6DEEB",
    "template": "\u2570\u2500\u276f "
  },
  "version": 3
}



================================================
FILE: themes/lambda.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#F5F5F5",
          "style": "plain",
          "template": "\ue7ad ",
          "type": "text"
        },
        {
          "foreground": "#B80101",
          "properties": {
            "style": "agnoster"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#B80101",
          "style": "plain",
          "template": " <#F5F5F5>git:</>{{ .HEAD }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/lambdageneration.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#292929",
          "foreground": "#fb7e14",
          "leading_diamond": "\u256d\u2500\ue0b2",
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} \ue0b1",
          "type": "os"
        },
        {
          "background": "#292929",
          "foreground": "#fb7e14",
          "properties": {
            "always_enabled": true,
            "style": "austin",
            "threshold": 500
          },
          "style": "powerline",
          "template": " {{ .FormattedMs }} \ue0b1",
          "type": "executiontime"
        },
        {
          "background": "#292929",
          "foreground": "#26C6DA",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#292929",
          "foreground": "#fb7e14",
          "properties": {
            "style": "full",
            "trailing_diamond": "\ue0c6"
          },
          "style": "diamond",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#292929",
          "foreground": "#D4E157",
          "style": "plain",
          "type": "git"
        },
        {
          "background": "#292929",
          "foreground": "#26C6DA",
          "foreground_templates": [
            "{{ if eq \"Full\" .State.String }}#292929{{ end }}",
            "{{ if eq \"Charging\" .State.String }}#40c4ff{{ end }}",
            "{{ if eq \"Discharging\" .State.String }}#fb7e14{{ end }}"
          ],
          "properties": {
            "charged_icon": "\uf240 ",
            "charging_icon": "\ueb2d ",
            "discharging_icon": "\ueb2d ",
            "text": "\ue0b0"
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }} \ue0b1",
          "type": "battery"
        },
        {
          "background": "#292929",
          "background_templates": [
            "{{ if gt .Code 0 }}#292929{{ end }}"
          ],
          "foreground": "#fb7e14",
          "properties": {
            "always_enabled": true,
            "display_exit_code": true
          },
          "style": "diamond",
          "template": " {{ if gt .Code 0 }}\uf00d {{ reason .Code }}{{ else }}\uf00c{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#292929",
          "foreground": "#fb7e14",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}@{{ .HostName }} <#fb7e14>\ue0b3</> ",
          "type": "session"
        },
        {
          "background": "#292929",
          "foreground": "#fb7e14",
          "properties": {
            "time_format": "15:04:05, _2"
          },
          "style": "diamond",
          "template": "{{ .CurrentDate | date .Format }} \uf073 ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "properties": {
            "always_enabled": true
          },
          "background": "#fb7e14",
          "foreground": "#292929",
          "style": "diamond",
          "leading_diamond": "\u2570\u2500\ue0b6",
          "template": "\ue7ad",
          "trailing_diamond": "\ue0b4",
          "type": "path"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/larserikfinholt.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#c386f1",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#ff479c",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": " \ue0b1 ",
            "home_icon": "~",
            "style": "folder"
          },
          "style": "powerline",
          "template": " \uea83  {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#fffb38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> \ueba2{{ .FormattedMs }}\u2800",
          "type": "executiontime"
        },
        {
          "background": "#000000",
          "background_templates": [
            "{{ if gt .Hours 100 }}#dc3545{{ end }}",
            "{{ if and (lt .Hours 100) (gt .Hours 50) }}#ffc107{{ end }}",
            "{{ if lt .Hours 50 }}#28a745{{ end }}"
          ],
          "foreground": "#ffffff",
          "foreground_templates": [
            "{{ if gt .Hours 100 }}#FFFFFF{{ end }}",
            "{{ if and (lt .Hours 100) (gt .Hours 50) }}#343a40{{ end }}",
            "{{ if lt .Hours 50 }}#FFFFFF{{ end }}"
          ],
          "properties": {
            "access_token": "0ccbd2ac1e37a5b84101468df3d367177fe02ab3",
            "http_timeout": 1500,
            "refresh_token": "111111111111111111111111111111"
          },
          "style": "powerline",
          "template": " {{.Name}} {{.Ago}} {{.Icon}} ",
          "type": "strava"
        },
        {
          "background": "#00897b",
          "background_templates": [
            "{{ if gt .Code 0 }}#e91e63{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": "<parentBackground>\ue0b0</> \ue23a ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/lightgreen.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#000000",
          "foreground": "#dd1e1e",
          "style": "plain",
          "template": " \u26a1",
          "type": "root"
        },
        {
          "background": "transparent",
          "foreground": "#ffffff",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue62a",
            "wsl": "\ue712"
          },
          "style": "plain",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#272727",
          "foreground": "#3EC669",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": "\ue5ff {{ .Path }}",
          "trailing_diamond": "\ue0b4",
          "type": "path"
        },
        {
          "background": "#272727",
          "foreground": "#00ff0d",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "plain",
          "template": "<#000000>\ue0b1 </>{{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#306998",
          "foreground": "#FFE873",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "python"
        },
        {
          "background": "#ffffff",
          "foreground": "#06aad5",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "go"
        },
        {
          "background": "#565656",
          "foreground": "#faa029",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue7ad {{.Profile}}{{if .Region}}@{{.Region}}{{end}}",
          "trailing_diamond": "\ue0b4 ",
          "type": "aws"
        },
        {
          "type": "terraform",
          "style": "powerline",
          "powerline_symbol": "\uE0B0",
          "foreground": "#000000",
          "background": "#ebcc34",
          "template": "{{.WorkspaceName}}"
        },
        {
          "background": "#316ce4",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\uf308 {{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}}",
          "trailing_diamond": "\ue0b4",
          "type": "kubectl"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "properties": {
              "style": "roundrock",
              "always_enabled": true
            },
            "style": "diamond",
            "template": "{{ .FormattedMs }} ",
            "type": "executiontime"
        },
        {
          "background": "#ffffff",
          "foreground": "#3c3c3c",
          "style": "plain",
          "template": " {{ round .PhysicalPercentUsed .Precision }}% ",
          "type": "sysinfo"
        },
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#b8e994{{end}}",
            "{{if eq \"Discharging\" .State.String}}#fff34e{{end}}",
            "{{if eq \"Full\" .State.String}}#33DD2D{{end}}"
          ],
          "foreground": "#262626",
          "invert_powerline": true,
          "leading_diamond": "\ue0b2",
          "properties": {
            "charged_icon": "\uf240 ",
            "charging_icon": "\uf1e6 ",
            "discharging_icon": "\ue234 "
          },
          "style": "plain",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295 <#262626>\ue0b2</>",
          "type": "battery"
        },
        {
          "background": "#000000",
          "foreground": "lightGreen",
          "style": "plain",
          "template": "{{ .CurrentDate | date .Format }}",
          "type": "time"
        }
      ],
      "type": "rprompt"
    }
  ],
  "pwd": "osc99",
  "version": 3
}



================================================
FILE: themes/M365Princess.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
    "white": "#FFFFFF",
    "tan": "#CC3802",
    "teal": "#047E84",
    "plum": "#9A348E",
    "blush": "#DA627D",
    "salmon": "#FCA17D",
    "sky": "#86BBD8",
    "teal_blue": "#33658A"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "type": "text",
          "style": "diamond",
          "leading_diamond": "\ue0b6",
          "foreground": "p:white",
          "background": "p:tan",
          "template": "{{ if .Env.PNPPSHOST }} \uf8c5 {{ .Env.PNPPSHOST }} {{ end }}"
        },
        {
          "type": "text",
          "style": "powerline",
          "foreground": "p:white",
          "background": "p:teal",
          "powerline_symbol": "\ue0b0",
          "template": "{{ if .Env.PNPPSSITE }} \uf2dd {{ .Env.PNPPSSITE }}{{ end }}"
        },
        {
          "type": "text",
          "style": "diamond",
          "trailing_diamond": "\ue0b4",
          "foreground": "p:white",
          "background": "p:teal",
          "template": "{{ if .Env.PNPPSSITE }}\u00A0{{ end }}"
        }
      ],
      "type": "rprompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "background": "p:plum",
          "foreground": "p:white",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "p:blush",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "p:salmon",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "",
            "fetch_stash_count": true,
            "fetch_status": false,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " \u279c ({{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }}) ",
          "type": "git"
        },
        {
          "background": "p:sky",
          "foreground": "p:white",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "p:teal_blue",
          "foreground": "p:white",
          "properties": {
            "time_format": "15:04"
          },
          "style": "diamond",
          "template": " \u2665 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/marcduiker.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#feae34",
          "foreground": "#262b44",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": " \ue5ff {{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "#fee761",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#f77622{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#e43b44{{ end }}",
            "{{ if gt .Ahead 0 }}#2ce8f5{{ end }}",
            "{{ if gt .Behind 0 }}#f77622{{ end }}"
          ],
          "foreground": "#262b44",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#0095e9",
          "background_templates": [
            "{{ if gt .Code 0 }}#ff0044{{ end }}"
          ],
          "foreground": "#ffffff",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \uf0e7 ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/markbull.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffce7b",
          "style": "plain",
          "template": "\u250c ",
          "type": "text"
        },
        {
          "background": "#ffce7b",
          "foreground": "#1d1626",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf26c  {{ if .SSHSession }}\ueba9  {{ end }}{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#C678DD",
          "foreground": "#fffef9",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "windows": "\uf17a"
          },
          "style": "powerline",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#C678DD",
          "foreground": "#fffef9",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": "{{ path .Path .Location }} ",
          "type": "path"
        },
        {
          "background": "#fffffb",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffeb95{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#fcaf17{{ end }}",
            "{{ if gt .Ahead 0 }}#95ffa4{{ end }}",
            "{{ if gt .Behind 0 }}#f7acbc{{ end }}",
            "{{ if .UpstreamGone }}#d1c7b7{{ end }}"
          ],
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "azure_devops_icon": "\uebd8 ",
            "bitbucket_icon": "\uf171 ",
            "branch_gone_icon": "\uebcc ",
            "branch_icon": "\ue0a0 ",
            "branch_identical_icon": "\uf4c4 ",
            "commit_icon": "\uf417 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true,
            "git_icon": "\uf1d3 ",
            "github_icon": "\uf408 ",
            "gitlab_icon": "\uf296 ",
            "tag_icon": "\uf412 "
          },
          "style": "powerline",
          "template": " {{ if( .UpstreamIcon ) }}{{ url .UpstreamIcon .UpstreamURL }} {{ end }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} <#ed1941>\uf044 {{.Working.String}}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} <#225a1f>\uf046 {{.Staging.String}}</>{{ end }}{{ if gt .StashCount 0 }}  \ueb4b {{.StashCount}}{{ end }}{{ if gt .WorktreeCount 0 }}{{if .IsWorkTree}}<#1d953f>{{ end }}  \uf1bb {{if .IsWorkTree}}</>{{ end }}{{.WorktreeCount}}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#33a3dc",
          "foreground": "#fffef9",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " \uf064  {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#ed1941",
          "foreground": "#fffef9",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf12a >>{{ reason .Code }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffce7b",
          "style": "plain",
          "template": "\u2514",
          "type": "text"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": " $",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}}\u26a1 {{end}}{{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/material.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#C591E8>\u276f</><#69FF94>\u276f</>",
          "type": "text"
        },
        {
          "foreground": "#56B6C2",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#D0666F",
          "properties": {
            "branch_icon": "",
            "fetch_status": false
          },
          "style": "plain",
          "template": "<#5FAAE8>git:(</>{{ .HEAD }}<#5FAAE8>)</>",
          "type": "git"
        },
        {
          "foreground": "#DCB977",
          "style": "plain",
          "template": " \uf119",
          "type": "status"
        },
        {
          "foreground": "#66F68F",
          "properties": {
            "time_format": "15:04"
          },
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/microverse-power.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#3A86FF",
          "style": "plain",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#242424",
          "foreground": "#f1184c",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .UserName }}",
          "type": "session"
        },
        {
          "background": "#242424",
          "foreground": "#f1184c",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": "- root \uf0e7",
          "type": "root"
        },
        {
          "background": "#242424",
          "foreground": "#FFBB00",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "time_format": "2006-01-02 15:04:05"
          },
          "style": "powerline",
          "template": "{{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#242424",
          "foreground": "#33DD2D",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": "/",
            "style": "full"
          },
          "style": "powerline",
          "template": "\ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#242424",
          "foreground": "#3A86FF",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": "{{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#33DD2D",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#242424",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " \uea6c ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#f1184c",
          "style": "plain",
          "template": "\u279c ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/mojada.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#fbfbfb",
          "foreground": "#0077c2",
          "leading_diamond": "\ue0b6",
          "properties": {
            "arch": "\uf303",
            "debian": "\uf306",
            "fedora": "\uf30a",
            "linux": "\uf17c",
            "macos": "\uf179",
            "manjaro": "\uf312",
            "opensuse": "\uf314",
            "ubuntu": "\uf31b",
            "windows": "\uf17a"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#fbfbfb",
          "foreground": "#0077c2",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "display_host": true
          },
          "style": "powerline",
          "template": "{{ .UserName }}<#000000>@</><#e06c75>{{ .HostName }}</> ",
          "type": "session"
        },
        {
          "background": "#e06c75",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue799\u2800",
          "type": "root"
        },
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": "/",
            "home_icon": "~",
            "max_depth": 2,
            "style": "letter"
          },
          "style": "powerline",
          "template": " \ue5fe {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#fffb38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ff9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#f17c37{{ end }}",
            "{{ if gt .Behind 0 }}#89d1dc{{ end }}"
          ],
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#FFD54F",
          "style": "plain",
          "template": " {{if .Root}}#{{else}}${{end}}",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "segments": [
        {
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " {{ if gt .Code 0 }}\udb80\udc30{{ else }}\uf4a7{{ end }} ",
          "type": "status"
        },
        {
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "{{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#f36943",
          "background_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "charged_icon": "\ueb2d ",
            "charging_icon": "\uf241 ",
            "discharging_icon": "\uf242 "
          },
          "style": "powerline",
          "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}% ",
          "type": "battery"
        },
        {
          "background": "#61afef",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "properties": {
            "time_format": "15:04 (Mon)"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{.UserName}}@{{.HostName}} : {{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/montys.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#003543",
          "foreground": "#00c983",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .Icon }} {{ .HostName }} ",
          "type": "os"
        },
        {
          "background": "#DA627D",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": "\\",
            "home_icon": "\ueb06",
            "style": "full"
          },
          "style": "powerline",
          "template": " <#000>\uf07b \uea9c</> {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#FCA17D",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": " <#ffffff>\ue0a0 </>",
            "fetch_stash_count": true,
            "fetch_status": false,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " \u279c ({{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }}) ",
          "type": "git"
        },
        {
          "background": "#76b367",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " \ueba2 {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#33658A",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "time_format": "3:04 PM"
          },
          "style": "powerline",
          "template": " \uf017 {{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#2e9599",
          "background_templates": [
            "{{ if gt .Code 0 }}red{{ end }}"
          ],
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " {{ if gt .Code 0 }}\uf421{{ else }}\uf469{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#cd5e42",
          "style": "plain",
          "template": "\ue3bf ",
          "type": "root"
        },
        {
          "foreground": "#CD4277",
          "style": "plain",
          "template": " <#45F1C2><b>\u26a1</b></><b>{{ .UserName }}</b> <#26C6DA>\u276f</><#45F1C2>\u276f</>",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/mt.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#B4009E",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "#FFFF00",
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#4E44FF",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "",
            "fetch_stash_count": true,
            "fetch_status": false,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " \u279c ({{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }}) ",
          "type": "git"
        },
        {
          "background": "#4e903d",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#16C60C",
          "foreground": "#ffffff",
          "properties": {
            "time_format": "15:04"
          },
          "style": "diamond",
          "template": " \u2665 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/multiverse-neon.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
     "segments": [
        {
          "background": "#29315A",
          "foreground": "#3EC669",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "mixed"
          },
          "style": "diamond",
          "template": "\ue5ff {{ .Path }}",
          "trailing_diamond": "\ue0b4",
          "type": "path"
        },
        {
          "background": "#29315A",
          "foreground": "#43CCEA",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FF9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ff4500{{ end }}",
            "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
            "{{ if gt .Behind 0 }}#B388FF{{ end }}"
          ],
          "leading_diamond": " \ue0b6",
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "diamond",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "git"
        },

        {
          "foreground": "#C94A16",
          "style": "plain",
          "template": "x ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
     {
      "alignment": "right",
      "segments": [
        {
          "type": "node",
          "style": "plain",
          "foreground": "#88e570",
          "properties": {
            "display_mode": "files",
            "fetch_package_manager": true,
            "fetch_version": true,
            "npm_icon": "<#e5272d>\ue616 npm</> ",
            "yarn_icon": "<#37aee5>\ue6a7 yarn</> ",
            "pnpm_icon": "<#e5a100>\udb80\udec1 pnpm</> "
          },
          "template": "{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}\ue718 {{ .Full }}"
        },
        {
          "foreground": "#4063D8",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "plain",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "type": "crystal"
        },
        {
          "foreground": "#DE3F24",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "plain",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "type": "ruby"
        },
        {
          "foreground": "#FED142",
          "properties": {
            "display_mode": "context",
            "fetch_virtual_env": false
          },
          "style": "plain",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "type": "python"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#63F08C",
          "style": "plain",
          "template": "\u279c ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/negligible.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "cyan",
          "style": "powerline",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "type": "os"
        },
        {
          "foreground": "cyan",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#F1502F",
          "properties": {
            "fetch_status": true
          },
          "style": "plain",
          "template": ":: {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "red",
          "style": "plain",
          "template": "| root ",
          "type": "root"
        },
        {
          "foreground": "#06A4CE",
          "style": "powerline",
          "template": "| \ue798 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "dart"
        },
        {
          "foreground": "#6CA35E",
          "style": "powerline",
          "template": "| \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "foreground": "#4584b6",
          "properties": {
            "display_mode": "context",
            "fetch_virtual_env": true
          },
          "style": "plain",
          "template": "| \ue235 {{ .Venv }} ",
          "type": "python"
        },
        {
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#4caf50{{end}}",
            "{{if eq \"Discharging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Full\" .State.String}}#ff0000{{end}}"
          ],
          "invert_powerline": true,
          "properties": {
            "charged_icon": "\uf00d ",
            "charging_icon": "\ue234 "
          },
          "style": "powerline",
          "template": "| {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }} \uf295 ",
          "type": "battery"
        },
        {
          "foreground": "lightGreen",
          "style": "plain",
          "template": "| {{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "lightGreen",
          "foreground_templates": [
            "{{ if gt .Code 0 }}red{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": "\u279c ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/neko.omp.json
================================================
{
    "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
    "blocks": [
      {
        "alignment": "left",
        "segments": [
          {
            "style": "plain",
            "template": "😺💬<#FF8000> Meow! What should I do next? ...</>",
            "type": "text"
          }],
          "type": "prompt"
        },
      {
        "alignment": "right",
        "segments": [
          {
            "foreground": "#56B6C2",
            "properties": {
              "style": "folder"
            },
            "style": "plain",
            "template": "🏡 {{ .Path }} ",
            "type": "path"
          },
          {
            "foreground": "#D0666F",
            "properties": {
              "branch_icon": "",
              "fetch_status": false
            },
            "style": "plain",
            "template":  "<#5FAAE8>git:(</>{{ .HEAD }}<#5FAAE8>)</>",
            "type": "git"
          },
          {
            "foreground": "#1a415d",
						"style": "plain",
						"template": "⌚",
						"type": "text"
					},
          {
            "foreground": "#1a415d",
            "properties": {
              "time_format": "15:04"
            },
            "style": "plain",
            "template": " {{ .CurrentDate | date .Format }} ",
            "type": "time"
          }
        ],
        "type": "prompt"
      },
			{
				"alignment": "left",
				"segments": [
					{
						"foreground": "#FF8000",
						"style": "plain",
						"template": "😀💬<#FF8000> ~ </>",
						"type": "text"
					}
				],
				"type": "prompt"
			}
    ],
    "version": 3
  }



================================================
FILE: themes/night-owl.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#21c7a8",
          "foreground": "#011627",
          "leading_diamond": "\u256d\u2500\ue0b6",
          "properties": {
            "windows": "\ue62a"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}  ",
          "trailing_diamond": "\ue0b0",
          "type": "os"
        },
        {
          "background": "#ef5350",
          "foreground": "#ffeb95",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf292 ",
          "type": "root"
        },
        {
          "background": "#82AAFF",
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "leading_powerline_symbol": "\ue0d7",
          "properties": {
            "folder_icon": "\uf07c ",
            "folder_separator_icon": "<#011627>\ue0b1</> ",
            "home_icon": " \ueb06 ",
            "style": "agnoster"
          },
          "style": "powerline",
          "template": "{{ path .Path .Location }}",
          "type": "path"
        },
        {
          "background": "#addb67",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#e4cf6a{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f78c6c{{ end }}",
            "{{ if gt .Ahead 0 }}#C792EA{{ end }}",
            "{{ if gt .Behind 0 }}#c792ea{{ end }}"
          ],
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true,
            "mapped_branches": {
              "feat/*": "🚀 ",
              "bug/*": "🐛 "
            }
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }} {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#575656",
          "foreground": "#d6deeb",
          "leading_diamond": "\ue0d7",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }}",
          "trailing_diamond": "\ue0b4",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "overflow": "break",
      "segments": [
        {
          "background": "#d6deeb",
          "foreground": "#011627",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\uf489  {{ .Name }} ",
          "trailing_diamond": "\ue0d6",
          "type": "shell"
        },
        {
          "background": "#8f43f3",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue266 {{ round .PhysicalPercentUsed .Precision }}% ",
          "trailing_diamond": "\ue0d6",
          "type": "sysinfo"
        },
        {
          "background": "#ffffff",
          "foreground": "#ce092f",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue753 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "angular"
        },
        {
          "background": "#ffffff",
          "foreground": "#de1f84",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\u03b1 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "aurelia"
        },
        {
          "background": "#565656",
          "foreground": "#faa029",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue7ad {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "aws"
        },
        {
          "background": "#ffffff",
          "foreground": "#337bb6",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uebd8 {{ .EnvironmentName }} ",
          "trailing_diamond": "\ue0d6",
          "type": "az"
        },
        {
          "background": "#ffffff",
          "foreground": "#5398c2",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uf104<#f5bf45>\uf0e7</>\uf105 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "azfunc"
        },
        {
          "background": "#5a7a94",
          "foreground": "#100e23",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue311  cds {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "cds"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uE370 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "crystal"
        },
        {
          "background": "#ffffff",
          "foreground": "#1d5185",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uf40a  cf {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "cf"
        },
        {
          "background": "#ffffff",
          "foreground": "#1d5185",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uf40a {{if .Org }}{{ .Org }}{{ end }}{{ if .Space }}/{{ .Space }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "cftarget"
        },
        {
          "background": "#d2d2d2",
          "foreground": "#01a300",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "<#2829b2>\ue61e</> <#be1818>\ue61d</>  cmake {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "cmake"
        },
        {
          "background": "#e1e8e9",
          "foreground": "#055b9c",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue798 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "dart"
        },
        {
          "background": "#0e0e0e",
          "foreground": "#0d6da8",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue77f  {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "dotnet"
        },
        {
          "background": "#06A4CE",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue28e {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "flutter"
        },
        {
          "background": "#ffffff",
          "foreground": "#06aad5",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "go"
        },
        {
          "background": "#100e23",
          "foreground": "#906cff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue61f {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "haskell"
        },
        {
          "background": "#ffffff",
          "foreground": "#ec2729",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue738 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "java"
        },
        {
          "background": "#945bb3",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "<#ca3c34>\ue624</> {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "julia"
        },
        {
          "background": "#906cff",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "K {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "kotlin"
        },
        {
          "background": "#316ce4",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\uf308 {{.Context}} :: {{if .Namespace}}{{.Namespace}}{{else}}default{{end}} ",
          "trailing_diamond": "\ue0d6",
          "type": "kubectl"
        },
        {
          "background": "#ffffff",
          "foreground": "#000081",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue620 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "lua"
        },
        {
          "background": "#303030",
          "foreground": "#3C873A",
          "leading_diamond": "\ue0b2",
          "properties": {
            "fetch_package_manager": true,
            "npm_icon": "<#cc3a3a>\ue71e</> ",
            "yarn_icon": "<#348cba>\ue6a7</> "
          },
          "style": "diamond",
          "template": "\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "trailing_diamond": "\ue0d6",
          "type": "node"
        },
        {
          "background": "#6488c0",
          "foreground": "#1e293b",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "Nx {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "nx"
        },
        {
          "background": "#41436d",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue769 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "perl"
        },
        {
          "background": "#787CB5",
          "foreground": "#000000",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue73d {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "php"
        },
        {
          "background": "#306998",
          "foreground": "#FFE873",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue235  {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0d6",
          "type": "python"
        },
        {
          "background": "#b9bbbf",
          "foreground": "#1c68bd",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "R {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "r"
        },
        {
          "background": "#ffffff",
          "foreground": "#9c1006",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue791 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "ruby"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue7a8 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "rust"
        },
        {
          "background": "#fe562e",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue755 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "trailing_diamond": "\ue0d6",
          "type": "swift"
        },
        {
          "background": "#234d70",
          "foreground": "#d6deeb",
          "leading_diamond": "\ue0b2",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": "\ue641 {{ .CurrentDate | date .Format }}",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#21c7a8",
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        },
        {
          "background": "#1DB954",
          "foreground": "#011627",
          "leading_diamond": "\ue0b6",
          "properties": {
            "playing_icon": "\uf1bc "
          },
          "style": "diamond",
          "template": " {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} ~ {{ .Track }}{{ end }} ",
          "trailing_diamond": "\ue0c6 ",
          "type": "spotify"
        },
        {
          "foreground": "#22da6e",
          "foreground_templates": ["{{ if gt .Code 0 }}#ef5350{{ end }}"],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\ue285\ue285",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "final_space": true,
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#d6deeb",
    "template": "\ue285 "
  },
  "version": 3
}



================================================
FILE: themes/nordtron.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#88c0d0",
          "style": "plain",
          "template": "<#5e81ac>\u250f[</>{{ .UserName }}<#5e81ac>]</>",
          "type": "session"
        },
        {
          "foreground": "#b48ead",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "<#5e81ac>--[</>{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}<#8fbcbb> \u25cf </>{{ end }}{{ if .Staging.Changed }}<#88c0d0> \u25cf </>{{ end }}<#5e81ac>]</>",
          "type": "git"
        },
        {
          "foreground": "#b48ead",
          "style": "plain",
          "template": "<#5e81ac>--[</>{{.Profile}}{{if .Region}}@{{.Region}}{{end}}<#5e81ac>]</>",
          "type": "aws"
        },
        {
          "foreground": "#b48ead",
          "style": "plain",
          "template": "<#5e81ac>--[</>{{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}}<#5e81ac>]</>",
          "type": "kubectl"
        },
        {
          "foreground": "#d8dee9",
          "style": "plain",
          "template": "<#5e81ac>[</>\uf0e7<#5e81ac>]</>",
          "type": "root"
        },
        {
          "foreground": "#d8dee9",
          "style": "plain",
          "template": "<#5e81ac>[x</>{{ reason .Code }}<#5e81ac>]</>",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#88c0d0",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "<#5e81ac>\u2516[</>{{ .Path }}<#5e81ac>]</>",
          "type": "path"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#5e81ac",
          "style": "plain",
          "template": " \ue602 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/nu4a.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#cfcfc4",
          "background_templates": [
            "{{if .Root}}#ff3026{{else}}#cfcfc4{{end}}"
          ],
          "foreground": "#100e23",
          "properties": {
            "display_host": false
          },
          "style": "powerline",
          "template": "{{if .Root}} \uf0e7 {{.UserName}} {{else}} {{.UserName}} {{end}}",
          "type": "session"
        },
        {
          "background": "#ec9706",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": "\ue5ff",
            "folder_separator_icon": "\ue0b9",
            "home_icon": "\ueb06",
            "mapped_locations": {
              "C:\\Users": "\uf007",
              "C:\\Windows": "\ue62a"
            },
            "mixed_threshold": 8,
            "style": "mixed"
          },
          "style": "powerline",
          "template": " {{ path .Path .Location }} ",
          "type": "path"
        },
        {
          "background": "#3feb56",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#906cff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#ff4040",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0c2",
          "style": "diamond",
          "template": " \ue70f ",
          "trailing_diamond": "\ue0c0",
          "type": "status"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "leading_diamond": "\ue0b2",
          "properties": {
            "style": "austin"
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{if .Root}} \u26a1 {{end}}{{.UserName}} \u2794 📁{{.Folder}}",
  "final_space": true,
  "secondary_prompt": {
    "background": "#ec9706",
    "foreground": "#100e23",
    "template": " \uf061 "
  },
  "version": 3
}



================================================
FILE: themes/onehalf.minimal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "palette": {
    "black": "#282c34",
    "red": "#e06c75",
    "green": "#98c379",
    "yellow": "#e5c07b",
    "blue": "#61afef",
    "magenta": "#c678dd",
    "cyan": "#56b6c2",
    "white": "#dcdfe4",
    "foreground": "#dcdfe4",
    "background": "#282c34"
  },
  "terminal_background": "p:background",
  "console_title_template": "{{ .UserName }}@{{ .HostName }}",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "p:yellow",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "p:blue",
          "style": "plain",
          "properties": {
            "style": "full"
          },
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "properties": {
            "branch_icon": "",
            "fetch_status": true,
            "fetch_stash_count": true,
            "fetch_worktree_count": true
          },
          "style": "plain",
          "template": "<p:yellow>git</>:({{ if or (.Working.Changed) (.Staging.Changed) (gt .StashCount 0) }}<p:magenta>{{ .HEAD }}</>{{ else }}<p:green>{{ .HEAD }}</>{{ end }}{{ if (gt .Ahead 0)}}<p:cyan>{{ .BranchStatus }}</>{{ end }}{{ if (gt .Behind 0)}}<p:cyan>{{ .BranchStatus }}</>{{ end }}{{ if .Staging.Changed }} <p:green>{{ .Staging.String }}</>{{ end }}{{ if .Working.Changed }} <p:red>{{ .Working.String }}</>{{ end }})",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "p:foreground",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "{{ if gt .Code 0 }}<p:red>({{ .Code }}) </>{{ else }}<p:green>({{ .Code }}) </>{{ end }}> ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/paradox.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#ffe9aa",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#ffffff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#91ddff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "style": "full"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#906cff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#ff8080",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue20f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#007ACC",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/pararussel.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#C591E8>\u276f</><#69FF94>\u276f</> ",
          "type": "text"
        },
        {
          "foreground": "#56B6C2",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#D0666F",
          "properties": {
            "branch_icon": ""
          },
          "style": "plain",
          "template": "<#5FAAE8>git:(</>{{ .HEAD }}<#5FAAE8>)</>",
          "type": "git"
        },
        {
          "foreground": "#DCB977",
          "style": "plain",
          "template": " \uf119 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#ffffff",
          "properties": {
            "command": "git log --pretty=format:%cr -1 || date +%H:%M:%S",
            "shell": "bash"
          },
          "style": "plain",
          "template": " {{ .Output }} ",
          "type": "command"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "\uf441 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/patriksvensson.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "red",
          "powerline_symbol": "\ue0b0",
          "style": "plain",
          "template": "\uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "blue",
          "properties": {
            "folder_icon": "\ue5ff",
            "folder_separator_icon": "/",
            "home_icon": "\ueb06",
            "style": "agnoster"
          },
          "style": "plain",
          "template": "{{ .Path }}",
          "type": "path"
        },
        {
          "foreground": "green",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}yellow{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}red{{ end }}",
            "{{ if gt .Ahead 0 }}red{{ end }}",
            "{{ if gt .Behind 0 }}green{{ end }}"
          ],
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "github_icon": "\uf408 "
          },
          "style": "plain",
          "template": " on {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}<red> \uf044 {{ .Working.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<yellow> \uf046 {{ .Staging.String }}</>{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }}",
          "type": "git"
        },
        {
          "foreground": "magenta",
          "style": "plain",
          "template": " [.NET] {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }} ",
          "type": "dotnet"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "yellow",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": "{{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "foreground": "green",
          "style": "plain",
          "template": "\u276f",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/peru.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#26C6DA",
          "style": "plain",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "foreground": "#26C6DA",
          "style": "diamond",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "#0fc469",
          "style": "powerline",
          "template": "\u279c \ue235({{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Major }}.{{ .Minor }}{{ end }}) ",
          "type": "python"
        },
        {
          "foreground": "#FFE700",
          "foreground_templates": [
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFCC80{{ end }}",
            "{{ if gt .Ahead 0 }}#16c60c{{ end }}",
            "{{ if gt .Behind 0 }}#f450de{{ end }}"
          ],
          "properties": {
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#6CA35E",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue718 {{ .Full }} ",
          "trailing_diamond": "\ue0b4",
          "type": "node"
        },
        {
          "background": "#4c1f5e",
          "foreground": "#ffffff",
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": "\ue738 {{ .Full }} ",
          "trailing_diamond": "\ue0b4",
          "type": "java"
        },
        {
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " {{ if gt .Code 0 }}<#ff0000>\uf00d</>{{ else }}<#23d18b>\uf42e</>{{ end }} ",
          "type": "status"
        },
        {
          "foreground": "#bab02a",
          "properties": {
            "threshold": 10
          },
          "style": "plain",
          "template": "took \uf252 {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "foreground": "#00C5C7",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} \uf017 ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#77E4F7",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#43D426",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/pixelrobots.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#ffea00",
          "foreground": "#000000",
          "leading_diamond": "\ue0c7\u2593",
          "style": "diamond",
          "type": "text"
        },
        {
          "background": "#ffea00",
          "foreground": "#000000",
          "style": "powerline",
          "template": " \udb84\udcfe {{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}} ",
          "type": "kubectl"
        },
        {
          "background": "#008AD7",
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "source": "cli"
          },
          "style": "powerline",
          "template": " \uebd8 {{ .Name }} [ {{ .Origin }} ] ",
          "type": "az"
        },
        {
          "background": "#012456",
          "foreground": "#FFFFFF",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "source": "pwsh"
          },
          "style": "powerline",
          "template": " \uebd8 {{ .Name }} [ {{ .Origin }} ] ",
          "type": "az"
        },
        {
          "type": "aws",
          "style": "powerline",
          "powerline_symbol": "",
          "properties": {
            "display_default": true
          },
          "foreground": "#000000",
          "background": "#FFA400",
          "template": " \udb83\ude0f {{.Profile}}{{if .Region}}@{{.Region}}{{end}}"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#2f2f2f",
          "foreground": "#26C6DA",
          "leading_diamond": "\ue0c7\u2593",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue62a"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}{{ .Icon }} on \ue62a{{ end }} <#ffea00>\ue0b1</>",
          "type": "os"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffea00",
          "style": "diamond",
          "template": " {{ if ne .Env.POSH_SESSION_DEFAULT_USER .UserName }}{{ .UserName }}{{ end }}<#ffea00> \ue0b1</>",
          "type": "session"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffea00",
          "style": "diamond",
          "template": " \uf0e7<#ffea00> \ue0b1</>",
          "type": "root"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "properties": {
            "folder_icon": "<#B5B2C2>\ue5fe </>",
            "folder_separator_icon": "<#ffea00>\ue0b1 </>",
            "home_icon": " \uf015 ",
            "style": "agnoster_short"
          },
          "style": "diamond",
          "template": "<#f2f200> \ue5ff </>{{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffea00",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffea00{{ end }}",
            "{{ if gt .Ahead 0 }}#2EC4B6{{ end }}",
            "{{ if gt .Behind 0 }}#8A4FFF{{ end }}"
          ],
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "diamond",
          "template": "<#ffea00>\ue0b1 </>{{ .UpstreamIcon }}{{ .HEAD }}{{ .BranchStatus }}{{ if .Working.Changed }}<#E84855> \uf044 {{ .Working.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#2FDA4E> \uf046 {{ .Staging.String }}</>{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "style": "diamond",
          "trailing_diamond": "\ue0b0",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffea00",
          "style": "plain",
          "template": " \u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}}root :: {{end}}{{.Shell}} :: {{.Folder}}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/plague.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#333333",
          "foreground": "#ff0000",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "trailing_diamond": "\ue0b0",
          "type": "session"
        },
        {
          "background": "#1BD760",
          "foreground": "#434343",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf1bc {{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }} ",
          "type": "spotify"
        },
        {
          "background": "#ff0000",
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#fffb38",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#6CA35E",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "background": "#203248",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf120 {{ .Name }} ",
          "type": "shell"
        },
        {
          "background": "#ffff66",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#2e9599",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "<transparent>\ue0b0</> \ue23a <background,transparent>\ue0b4</>",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/poshmon.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#2e9599",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "style": "diamond",
          "template": "\udb81\udc1d {{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#D51111",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "home_icon": "\uf46d",
            "folder_separator_icon": " <transparent>\ue0b1</> ",
            "folder_icon": "\uf115",
            "style": "agnoster"
          },
          "style": "powerline",
          "template": " {{ path .Path .Location }} ",
          "type": "path"
        },
        {
          "background": "#c19c00",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFEB3B{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFA300{{ end }}",
            "{{ if gt .Ahead 0 }}#FF7070{{ end }}",
            "{{ if gt .Behind 0 }}#90F090{{ end }}"
          ],
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " \uf113 {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#303030",
          "foreground": "#3C873A",
          "leading_diamond": "\ue0b6",
          "properties": {
            "fetch_package_manager": true,
            "npm_icon": " <#cc3a3a>\ue5fa</> ",
            "yarn_icon": " <#348cba>\ue6a7</>"
          },
          "style": "diamond",
          "template": "\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "node"
        },
        {
          "background": "#306998",
          "foreground": "#FFE873",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "python"
        },
        {
          "background": "#ffffff",
          "foreground": "#06aad5",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "\ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4 ",
          "type": "go"
        },
        {
          "background": "#2e9599",
          "foreground": "#fff",
          "background_templates": [
            "{{ if gt .Code 0 }}#D51111{{ end }}"
          ],
          "leading_diamond": "\ue0b6",
          "properties": {
            "time_format": "_2, 15:04:05"
          },
          "style": "diamond",
          "template": " \uf073 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#FFF",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#D51111{{ end }}"
          ],
          "style": "plain",
          "template": " \uf0a4 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "final_space": true,
  "osc99": true,
  "version": 3
}




================================================
FILE: themes/powerlevel10k_classic.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#546E7A",
          "foreground": "#26C6DA",
          "style": "plain",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} \ue0b1",
          "type": "os"
        },
        {
          "background": "#546E7A",
          "foreground": "#26C6DA",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#546E7A",
          "foreground": "#26C6DA",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#546E7A",
          "foreground": "#D4E157",
          "style": "plain",
          "template": "<#26C6DA>\ue0b1 </>{{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "transparent",
          "foreground": "#546E7A",
          "style": "plain",
          "template": "\ue0b0",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#546E7A",
          "foreground": "#D4E157",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": " {{ .UserName }}@{{ .HostName }} <#26C6DA>\ue0b3</> ",
          "type": "session"
        },
        {
          "background": "#546E7A",
          "foreground": "#D4E157",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} \uf017 ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#D4E157",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#FF5252{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/powerlevel10k_lean.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "segments": [
        {
          "foreground": "#00C5C7",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "rprompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#77E4F7",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#FFE700",
          "style": "plain",
          "template": "{{ .HEAD }} ",
          "type": "git"
        },
        {
          "foreground": "#43D426",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/powerlevel10k_modern.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "trailing_diamond": "\ue0b4",
          "type": "os"
        },
        {
          "background": "#0000ff",
          "foreground": "#000000",
          "powerline_symbol": "\ue0b4",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#0000ff",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b4",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#D4E157",
          "foreground": "#000000",
          "powerline_symbol": "\ue0b4",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#D4E157",
          "foreground": "#000000",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} <transparent>\ue0b6</>",
          "type": "python"
        },
        {
          "background": "#7FD5EA",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} <transparent>\ue0b6</>",
          "type": "go"
        },
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "leading_diamond": "\ue0b6",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#D4E157",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#FF5252{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/powerlevel10k_rainbow.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#d3d7cf",
          "foreground": "#000000",
          "leading_diamond": "\u256d\u2500\ue0b2",
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#3465a4",
          "foreground": "#e4e4e4",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "home_icon": "~",
            "style": "full"
          },
          "style": "powerline",
          "template": " \uf07c {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#4e9a06",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#c4a000{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#89d1dc{{ end }}",
            "{{ if gt .Behind 0 }}#4e9a06{{ end }}"
          ],
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "\uf126 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#689f63",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} \ue718 ",
          "type": "node"
        },
        {
          "background": "#00acd7",
          "foreground": "#111111",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} \ue627 ",
          "type": "go"
        },
        {
          "background": "#4063D8",
          "foreground": "#111111",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "fetch_version": true
          },
          "style": "powerline",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} \ue624 ",
          "type": "julia"
        },
        {
          "background": "#FFDE57",
          "foreground": "#111111",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "display_mode": "files",
            "fetch_virtual_env": false
          },
          "style": "powerline",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} \ue235 ",
          "type": "python"
        },
        {
          "background": "#AE1401",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "powerline",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} \ue791 ",
          "type": "ruby"
        },
        {
          "background": "#FEAC19",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "display_mode": "files",
            "fetch_version": false
          },
          "style": "powerline",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} \uf0e7",
          "type": "azfunc"
        },
        {
          "background_templates": [
            "{{if contains \"default\" .Profile}}#FFA400{{end}}",
            "{{if contains \"jan\" .Profile}}#f1184c{{end}}"
          ],
          "foreground": "#ffffff",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "display_default": false
          },
          "style": "powerline",
          "template": " {{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }} \ue7ad ",
          "type": "aws"
        },
        {
          "background": "#ffff66",
          "foreground": "#111111",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "style": "powerline",
          "template": " \uf0ad ",
          "type": "root"
        },
        {
          "background": "#c4a000",
          "foreground": "#000000",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "style": "powerline",
          "template": " {{ .FormattedMs }} \uf252 ",
          "type": "executiontime"
        },
        {
          "background": "#000000",
          "background_templates": [
            "{{ if gt .Code 0 }}#cc2222{{ end }}"
          ],
          "foreground": "#d3d7cf",
          "invert_powerline": true,
          "powerline_symbol": "\ue0b2",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " {{ if gt .Code 0 }}{{ reason .Code }}{{ else }}\uf42e{{ end }} ",
          "type": "status"
        },
        {
          "background": "#d3d7cf",
          "foreground": "#000000",
          "invert_powerline": true,
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} \uf017 ",
          "trailing_diamond": "\ue0b0\u2500\u256e",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#d3d7cf",
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "segments": [
        {
          "foreground": "#d3d7cf",
          "style": "plain",
          "template": "\u2500\u256f",
          "type": "text"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{ .Shell }} in {{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/powerline.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#FFEE58",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": " {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#91ddff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#906cff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#ff8080",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue20f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/probua.minimal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#ffdd86",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "#42a9ff",
          "style": "plain",
          "properties": {
            "style": "full"
          },
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "properties": {
            "branch_icon": "",
            "fetch_status": true
          },
          "style": "plain",
          "template": "git:{{ if or (.Working.Changed) (.Staging.Changed) (gt .StashCount 0) }}<#ffdd86>{{ .HEAD }}</>{{ else }}{{ .HEAD }}{{ end }}{{ if .Staging.Changed }} <#98c379>{{ .Staging.String }}</>{{ end }}{{ if .Working.Changed }} <#d16971>{{ .Working.String }}</>{{ end }}",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffdd86",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#42a9ff{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "> ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/pure.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#BF616A",
          "style": "plain",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "foreground": "#81A1C1",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#6C6C6C",
          "properties": {
            "branch_ahead_icon": "<#88C0D0>\u21e1 </>",
            "branch_behind_icon": "<#88C0D0>\u21e3 </>",
            "branch_icon": "",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "github_icon": ""
          },
          "style": "plain",
          "template": "{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}<#FFAFD7>*</>{{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#A3BE8C",
          "properties": {
            "style": "austin"
          },
          "style": "plain",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#B48EAD",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#BF616A{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{if .Root}}(Admin){{end}} {{.PWD}}",
  "transient_prompt": {
    "foreground": "#B48EAD",
    "foreground_templates": [
      "{{ if gt .Code 0 }}#BF616A{{ end }}"
    ],
    "template": "\u276f "
  },
  "version": 3
}



================================================
FILE: themes/quick-term.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#d75f00",
          "foreground": "#f2f3f8",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "leading_diamond": "\u256d\u2500\ue0b2",
          "template": " {{ .Icon }} ",
          "type": "os"
        },
        {
          "background": "#e4e4e4",
          "foreground": "#4e4e4e",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "template": " {{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "#0087af",
          "foreground": "#f2f3f8",
          "properties": {
            "style": "agnoster_short",
            "max_depth": 3,
            "folder_icon": "\u2026",
            "folder_separator_icon": " <transparent>\ue0b1</> "
          },
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#378504",
          "foreground": "#f2f3f8",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#a97400{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#54433a{{ end }}",
            "{{ if gt .Ahead 0 }}#744d89{{ end }}",
            "{{ if gt .Behind 0 }}#744d89{{ end }}"
          ],
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "branch_icon": "\uf418 ",
            "branch_identical_icon": "\uf444",
            "branch_gone_icon": "\ueab8"
          },
          "style": "diamond",
          "leading_diamond": "<transparent,background>\ue0b0</>",
          "template": " {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} <transparent>\ue0b1</> <#121318>\uf044 {{ .Working.String }}</>{{ end }}{{ if .Staging.Changed }} <transparent>\ue0b1</> <#121318>\uf046 {{ .Staging.String }}</>{{ end }}{{ if gt .StashCount 0 }} <transparent>\ue0b1</> <#121318>\ueb4b {{ .StashCount }}</>{{ end }} ",
          "trailing_diamond": "\ue0b0",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#e4e4e4",
          "foreground": "#585858",
          "properties": {
            "style": "austin",
            "always_enabled": true
          },
          "invert_powerline": true,
          "style": "powerline",
          "powerline_symbol": "\ue0b2",
          "template": " \ueba2 {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#d75f00",
          "foreground": "#f2f3f8",
          "properties": {
            "time_format": "15:04:05"
          },
          "invert_powerline": true,
          "style": "diamond",
          "template": " \uf073 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#d75f00",
          "style": "plain",
          "template": "\u2570\u2500 {{ if .Root }}#{{else}}${{end}}",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/remk.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "lightMagenta",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "lightYellow",
          "foreground": "#3f3f3f",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "lightCyan",
          "foreground": "#ffffff",
          "properties": {
            "branch_icon": ""
          },
          "style": "plain",
          "template": " git({{ .HEAD }}) ",
          "type": "git"
        },
        {
          "background": "lightGreen",
          "foreground": "#ffffff",
          "properties": {
            "time_format": "15:04"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b0",
          "type": "time"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/robbyrussell.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#98C379",
          "style": "plain",
          "template": "\u279c",
          "type": "text"
        },
        {
          "foreground": "#56B6C2",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": " {{ .Path }}",
          "type": "path"
        },
        {
          "foreground": "#D0666F",
          "properties": {
            "branch_icon": ""
          },
          "style": "plain",
          "template": " <#5FAAE8>git:(</>{{ .HEAD }}<#5FAAE8>)</>",
          "type": "git"
        },
        {
          "foreground": "#BF616A",
          "style": "plain",
          "template": " \u2717",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/rudolfs-dark.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#BF231D",
          "foreground": "#ffffff",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#0A703E",
          "foreground": "#ffffff",
          "style": "plain",
          "template": " {{ .Icon }} ",
          "type": "os"
        },
        {
          "background": "#0A703E",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "background": "#256C9D",
          "foreground": "#ffffff",
          "properties": {
            "folder_icon": "\uf115",
            "folder_separator_icon": " \ue0b1 ",
            "max_depth": 2,
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#256C9D",
          "foreground": "#ffffff",
          "properties": {
            "branch_template": "{{ trunc 30 .Branch }}",
            "fetch_stash_count": false,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "[ {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ]",
          "type": "git"
        },
        {
          "background": "#256C9D",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "plain",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "properties": {
            "text": "\ue0b0"
          },
          "type": "python"
        },
        {
          "foreground": "#256C9D",
          "style": "plain",
          "template": "\ue0b0 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/rudolfs-light.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#E0E0E0",
          "foreground": "#BF231D",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#E0E0E0",
          "foreground": "#EF7D00",
          "style": "plain",
          "template": " {{ .Icon }} ",
          "type": "os"
        },
        {
          "background": "#E0E0E0",
          "foreground": "#424242",
          "style": "plain",
          "template": "{{ .UserName }}",
          "type": "session"
        },
        {
          "background": "#E0E0E0",
          "foreground": "#424242",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#053F22{{ end }}",
            "{{ if or (gt .Ahead 0) (gt .Behind 0) }}#0A703E{{ end }}"
          ],
          "properties": {
            "branch_template": "{{ trunc 30 .Branch }}",
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": " [{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}<#BD6200> \uf044 {{ .Working.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#053F22> \uf046 {{ .Staging.String }}</>{{ end }}] ",
          "type": "git"
        },
        {
          "background": "#E0E0E0",
          "foreground": "#424242",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": " {{ .Path }}",
          "type": "path"
        },
        {
          "background": "#E0E0E0",
          "foreground": "#424242",
          "powerline_symbol": "\ue0b0",
          "style": "plain",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "properties": {
            "text": "\ue0b0"
          },
          "type": "python"
        },
        {
          "foreground": "#E0E0E0",
          "style": "plain",
          "template": "\ue0b0 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/schema.json
================================================
{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "type": "object",
  "title": "The Oh My Posh theme definition",
  "description": "https://ohmyposh.dev/docs/configuration/general",
  "definitions": {
    "color": {
      "anyOf": [
        {
          "$ref": "#/definitions/color_string"
        },
        {
          "$ref": "#/definitions/palette_reference"
        }
      ]
    },
    "color_string": {
      "type": "string",
      "pattern": "^(#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})|^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$|black|red|green|yellow|blue|magenta|cyan|white|default|darkGray|lightRed|lightGreen|lightYellow|lightBlue|lightMagenta|lightCyan|lightWhite|transparent|parentBackground|parentForeground|background|foreground|accent)$",
      "title": "Color string",
      "description": "https://ohmyposh.dev/docs/configuration/colors",
      "format": "color"
    },
    "palette_reference": {
      "type": "string",
      "pattern": "^p:.*$",
      "title": "Palette reference",
      "description": "https://ohmyposh.dev/docs/configuration/colors#palette"
    },
    "templates": {
      "type": "array",
      "title": "An array of templates",
      "default": [],
      "items": {
        "$ref": "#/definitions/segment/properties/template"
      }
    },
    "home_enabled": {
      "type": "boolean",
      "title": "Enable in the HOME folder",
      "description": "Display the segment in the HOME folder",
      "default": false
    },
    "fetch_version": {
      "type": "boolean",
      "title": "Fetch Version",
      "description": "Fetch the version number",
      "default": true
    },
    "http_timeout": {
      "type": "integer",
      "title": "Http request timeout",
      "description": "Milliseconds to use for http request timeouts",
      "default": 20
    },
    "expires_in": {
      "type": "integer",
      "title": "Expires in",
      "description": "Access token expiration time in seconds",
      "default": 0
    },
    "access_token": {
      "type": "string",
      "title": "Access token",
      "description": "The initial access token",
      "default": ""
    },
    "refresh_token": {
      "type": "string",
      "title": "Refresh token",
      "description": "The initial refresh token",
      "default": ""
    },
    "display_mode": {
      "type": "string",
      "title": "Display Mode",
      "description": "Determines whether the segment is displayed always or only if a file matching the extensions are present in the current folder",
      "enum": [
        "always",
        "files",
        "environment",
        "context"
      ],
      "default": "context"
    },
    "missing_command_text": {
      "type": "string",
      "title": "Missing command text",
      "description": "The string to display when the command is not available",
      "default": ""
    },
    "version_url_template": {
      "type": "string",
      "title": "Version Url Template",
      "description": "Template that creates the URL of the version info / release notes",
      "default": ""
    },
    "status_formats": {
      "type": "object",
      "title": "Status string formats",
      "description": "Override the status format for a specific change. Example: {\"Added\": \"Added: %d\"}",
      "default": {}
    },
    "folders": {
      "type": "array",
      "title": "Folders",
      "description": "The folders to look for when determining if a folder is a workspace",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "native_fallback": {
      "type": "boolean",
      "title": "Native Fallback",
      "description": "Try to use the WSL 2 native command in a shared Windows drive if the Windows executable is not found.",
      "default": false
    },
    "branch_template": {
      "type": "string",
      "title": "Branch template",
      "description": "the temaplate to use for the branch name, supports {{ .Branch }} for the branch name",
      "default": ""
    },
    "mapped_branches": {
      "type": "object",
      "title": "Mapped Branches",
      "description": "Custom glyph/text for specific branches",
      "default": {}
    },
    "cache_duration": {
      "type": "string",
      "title": "Cache duration",
      "description": "The duration for which the segment will be cached. This is parsed using the `time.ParseDuration` function from the Go standard library (see https://pkg.go.dev/time#ParseDuration for details).",
      "pattern": "^(none|infinite|([0-9]+(h|m|s))+)$"
    },
    "filler": {
      "type": "string",
      "title": "Filler",
      "description": "Right aligned filler text, will span the remaining width."
    },
    "aliases": {
      "type": "object",
      "title": "Aliases",
      "description": "Custom value replacement for template parts",
      "default": {}
    },
    "extra_prompt": {
      "type": "object",
      "default": {},
      "properties": {
        "template": {
          "type": "string",
          "title": "Prompt Template"
        },
        "foreground": {
          "$ref": "#/definitions/color"
        },
        "foreground_templates": {
          "$ref": "#/definitions/templates",
          "description": "https://ohmyposh.dev/docs/configuration/colors#color-templates"
        },
        "background": {
          "$ref": "#/definitions/color"
        },
        "background_templates": {
          "$ref": "#/definitions/templates",
          "description": "https://ohmyposh.dev/docs/configuration/colors#color-templates"
        }
      }
    },
    "block": {
      "type": "object",
      "description": "https://ohmyposh.dev/docs/configuration/block",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "prompt"
              }
            }
          },
          "then": {
            "required": [
              "type",
              "alignment",
              "segments"
            ],
            "title": "Prompt definition, contains 1 or more segments to render"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "rprompt"
              }
            }
          },
          "then": {
            "required": [
              "type",
              "segments"
            ],
            "title": "RPrompt definition, contains 1 or more segments to render to the right of the cursor"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "prompt"
              },
              "alignment": {
                "const": "right"
              }
            }
          },
          "then": {
            "properties": {
              "overflow": {
                "type": "string",
                "title": "Block overflow",
                "description": "https://ohmyposh.dev/docs/configuration/block#overflow",
                "enum": [
                  "break",
                  "hide"
                ],
                "default": ""
              },
              "filler": {
                "$ref": "#/definitions/filler",
                "description": "https://ohmyposh.dev/docs/configuration/block#filler"
              }
            }
          }
        }
      ],
      "properties": {
        "type": {
          "type": "string",
          "title": "Block type",
          "description": "https://ohmyposh.dev/docs/configuration/block#type",
          "enum": [
            "prompt",
            "rprompt"
          ],
          "default": "prompt"
        },
        "alignment": {
          "type": "string",
          "title": "Block alignment",
          "description": "https://ohmyposh.dev/docs/configuration/block#alignment",
          "enum": [
            "left",
            "right"
          ],
          "default": "left"
        },
        "newline": {
          "type": "boolean",
          "title": "Newline",
          "description": "https://ohmyposh.dev/docs/configuration/block#newline",
          "default": false
        },
        "leading_diamond": {
          "type": "string",
          "title": "Leading diamond",
          "description": "https://ohmyposh.dev/docs/configuration/block#leading-diamond",
          "default": ""
        },
        "trailing_diamond": {
          "type": "string",
          "title": "Trailing diamond",
          "description": "https://ohmyposh.dev/docs/configuration/block#trailing-diamond",
          "default": ""
        },
        "segments": {
          "type": "array",
          "title": "Segments list, prompt elements to display based on context",
          "description": "https://ohmyposh.dev/docs/configuration/block#segments",
          "default": [],
          "items": {
            "$ref": "#/definitions/segment"
          }
        }
      }
    },
    "segment": {
      "type": "object",
      "title": "Segment",
      "description": "https://ohmyposh.dev/docs/configuration/segment",
      "default": {},
      "required": [
        "type",
        "style"
      ],
      "properties": {
        "type": {
          "type": "string",
          "title": "Segment Type",
          "description": "https://ohmyposh.dev/docs/configuration/segment",
          "enum": [
            "angular",
            "argocd",
            "aurelia",
            "aws",
            "az",
            "azd",
            "azfunc",
            "battery",
            "bazel",
            "brewfather",
            "buf",
            "bun",
            "carbonintensity",
            "cds",
            "cf",
            "cftarget",
            "cmake",
            "command",
            "connection",
            "crystal",
            "dart",
            "deno",
            "docker",
            "dotnet",
            "elixir",
            "executiontime",
            "firebase",
            "flutter",
            "fortran",
            "fossil",
            "gcp",
            "git",
            "gitversion",
            "go",
            "haskell",
            "helm",
            "http",
            "ipify",
            "java",
            "jujutsu",
            "julia",
            "kotlin",
            "kubectl",
            "lastfm",
            "lua",
            "mercurial",
            "mojo",
            "mvn",
            "nbgv",
            "nightscout",
            "nim",
            "nix-shell",
            "node",
            "npm",
            "nx",
            "ocaml",
            "os",
            "owm",
            "path",
            "perl",
            "php",
            "plastic",
            "pnpm",
            "project",
            "pulumi",
            "python",
            "quasar",
            "r",
            "react",
            "root",
            "ruby",
            "rust",
            "sapling",
            "session",
            "shell",
            "sitecore",
            "spotify",
            "status",
            "strava",
            "svelte",
            "svn",
            "swift",
            "sysinfo",
            "talosctl",
            "tauri",
            "terraform",
            "text",
            "time",
            "ui5tooling",
            "umbraco",
            "unity",
            "upgrade",
            "v",
            "vala",
            "wakatime",
            "winreg",
            "withings",
            "xmake",
            "yarn",
            "ytm",
            "zig"
          ]
        },
        "style": {
          "title": "Segment Style",
          "description": "https://ohmyposh.dev/docs/configuration/segment#style",
          "anyOf": [
            {
              "enum": [
                "plain",
                "powerline",
                "diamond",
                "accordion"
              ]
            },
            {
              "type": "string"
            }
          ]
        },
        "foreground": {
          "$ref": "#/definitions/color"
        },
        "foreground_templates": {
          "$ref": "#/definitions/templates",
          "description": "https://ohmyposh.dev/docs/configuration/colors#color-templates"
        },
        "background": {
          "$ref": "#/definitions/color"
        },
        "background_templates": {
          "$ref": "#/definitions/templates",
          "description": "https://ohmyposh.dev/docs/configuration/colors#color-templates"
        },
        "template": {
          "type": "string",
          "title": "Template text",
          "description": "https://ohmyposh.dev/docs/configuration/templates",
          "default": ""
        },
        "templates_logic": {
          "type": "string",
          "title": "Templates Logic",
          "description": "https://ohmyposh.dev/docs/configuration/segment",
          "enum": [
            "first_match",
            "join"
          ]
        },
        "max_width": {
          "type": "integer",
          "title": "if the terminal width exceeds this value, the segment will be hidden",
          "description": "https://ohmyposh.dev/docs/configuration/segment",
          "default": 0
        },
        "min_width": {
          "type": "integer",
          "title": "if the terminal width is inferior than this value, the segment will be hidden",
          "description": "https://ohmyposh.dev/docs/configuration/segment",
          "default": 0
        },
        "properties": {
          "type": "object",
          "title": "Segment Properties, used to change behavior/displaying",
          "description": "https://ohmyposh.dev/docs/configuration/segment#properties",
          "default": {}
        },
        "interactive": {
          "type": "boolean",
          "title": "Allow the use of interactive prompt escape sequences",
          "description": "https://ohmyposh.dev/docs/configuration/segment",
          "default": false
        },
        "alias": {
          "type": "string",
          "title": "Give the segment an alias for use in templates",
          "description": "https://ohmyposh.dev/docs/configuration/segment",
          "default": ""
        },
        "include_folders": {
          "type": "array",
          "title": "If specified, segment will only render in these folders",
          "description": "https://ohmyposh.dev/docs/configuration/segment#include--exclude-folders",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "exclude_folders": {
          "type": "array",
          "title": "Exclude rendering in these folders",
          "description": "https://ohmyposh.dev/docs/configuration/segment#include--exclude-folders",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "cache": {
          "type": "object",
          "title": "Cache settings",
          "description": "https://ohmyposh.dev/docs/configuration/segment#cache",
          "default": {},
          "properties": {
            "duration": {
              "$ref": "#/definitions/cache_duration"
            },
            "strategy": {
              "type": "string",
              "title": "Cache strategy",
              "description": "https://ohmyposh.dev/docs/configuration/segment#strategy",
              "default": "folder",
              "enum": [
                "folder",
                "session"
              ]
            }
          }
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "angular"
              }
            }
          },
          "then": {
            "title": "Angular CLI Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/angular",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is an Angular project",
                    "default": [
                      "angular.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "aurelia"
              }
            }
          },
          "then": {
            "title": "Aurelia Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/aurelia",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is an Aurelia project",
                    "default": [
                      "package.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "aws"
              }
            }
          },
          "then": {
            "title": "AWS Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/aws",
            "properties": {
              "properties": {
                "properties": {
                  "display_default": {
                    "type": "boolean",
                    "title": "Display Default User Profile",
                    "description": "Display the segment when default user or not",
                    "default": true
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "az"
              }
            }
          },
          "then": {
            "title": "Azure Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/az",
            "properties": {
              "properties": {
                "properties": {
                  "source": {
                    "type": "string",
                    "title": "Source",
                    "description": "https://ohmyposh.dev/docs/segments/cloud/az#properties",
                    "default": "first_match",
                    "enum": [
                      "cli",
                      "pwsh"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "azd"
              }
            }
          },
          "then": {
            "title": "Azure Developer CLI Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/azd"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "azfunc"
              }
            }
          },
          "then": {
            "title": "Azure Function Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/azfunc",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "battery"
              }
            }
          },
          "then": {
            "title": "Battery Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/battery",
            "properties": {
              "properties": {
                "properties": {
                  "display_error": {
                    "type": "boolean",
                    "title": "Display Error",
                    "description": "Show the error context when failing to retrieve the battery information",
                    "default": false
                  },
                  "charging_icon": {
                    "type": "string",
                    "title": "Charging Icon",
                    "description": "Text/icon to display when charging",
                    "default": ""
                  },
                  "discharging_icon": {
                    "type": "string",
                    "title": "discharging Dcon",
                    "description": "Text/icon to display when discharging",
                    "default": ""
                  },
                  "charged_icon": {
                    "type": "string",
                    "title": "Charged Icon",
                    "description": "Text/icon to display when fully charged",
                    "default": ""
                  },
                  "not_charging_icon": {
                    "type": "string",
                    "title": "Not Charging Icon",
                    "description": "Text/icon to display when on AC power",
                    "default": ""
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "bazel"
              }
            }
          },
          "then": {
            "title": "Bazel Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/bazel",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "icon": {
                    "type": "string",
                    "title": "Icon",
                    "description": "The icon representing Bazel's logo",
                    "default": "\ue63a"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Bazel workspace",
                    "default": [
                      "*.bazel",
                      "*.bzl",
                      "BUILD",
                      "WORKSPACE",
                      ".bazelrc",
                      ".bazelversion"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "type": "array",
                    "title": "Folders",
                    "description": "The folders to look for when determining if a folder is a Bazel workspace",
                    "default": [
                      "bazel-bin",
                      "bazel-out",
                      "bazel-testlogs"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "brewfather"
              }
            }
          },
          "then": {
            "title": "Brewfather Batch Status",
            "description": "https://ohmyposh.dev/docs/segments/web/brewfather",
            "properties": {
              "properties": {
                "properties": {
                  "user_id": {
                    "type": "string",
                    "title": "Brewfather UserID (required)",
                    "description": "Provided by Brewfather's Generate API Key settings option",
                    "default": ""
                  },
                  "api_key": {
                    "type": "string",
                    "title": "Brewfather API Key (required)",
                    "description": "Provided by Brewfather's Generate API Key settings option",
                    "default": ""
                  },
                  "batch_id": {
                    "type": "string",
                    "title": "ID of the batch in Brewfather (required)",
                    "description": "At the end of the URL when viewing the batch on the Brewfather site",
                    "default": ""
                  },
                  "day_icon": {
                    "type": "string",
                    "title": "Icon to use to indicate days",
                    "description": "Appended to a number to indicate days, e.g. 25d",
                    "default": "d"
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  },
                  "doubleup_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, very high positive change",
                    "description": "Delta between this and prior temperature reading is very high (> 4C by default), available intemplate as .TemperatureTrend",
                    "default": "↑↑"
                  },
                  "singleup_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, high positive change",
                    "description": "Delta between this and prior temperature reading is high (2C < delta < 4C by default), available intemplate as .TemperatureTrend",
                    "default": "↑"
                  },
                  "fortyfiveup_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, positive change",
                    "description": "Delta between this and prior temperature reading is positive (0.5C < delta < 2C by default), available intemplate as .TemperatureTrend",
                    "default": "↗"
                  },
                  "flat_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, flat/small change",
                    "description": "Delta between this and prior temperature and this temperature reading (< +-0.5C change), available intemplate as .TemperatureTrend",
                    "default": "→"
                  },
                  "fortyfivedown_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, v. negative change",
                    "description": "Delta between this and prior temperature reading is negative (-0.5C > delta > -2C by default), available intemplate as .TemperatureTrend",
                    "default": "↘"
                  },
                  "singledown_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, high negative change",
                    "description": "Delta between this and prior temperature reading is large negative (-2C > delta > -4C by default), available intemplate as .TemperatureTrend",
                    "default": "↓"
                  },
                  "doubledown_icon": {
                    "type": "string",
                    "title": "Temperature trend icon, very high negative change",
                    "description": "Delta between this and prior temperature reading is very large negative (> -4C by default), available intemplate as .TemperatureTrend",
                    "default": "↓↓"
                  },
                  "planning_status_icon": {
                    "type": "string",
                    "title": "Icon for batch in planning",
                    "description": "Available in template as .StatusIcon",
                    "default": "\uF8EA"
                  },
                  "brewing_status_icon": {
                    "type": "string",
                    "title": "Icon for batch being brewed",
                    "description": "Available in template as .StatusIcon",
                    "default": "\uF7DE"
                  },
                  "fermenting_status_icon": {
                    "type": "string",
                    "title": "Icon for batch fermenting",
                    "description": "Available in template as .StatusIcon",
                    "default": "\uF499"
                  },
                  "conditioning_status_icon": {
                    "type": "string",
                    "title": "Icon for batch conditioning",
                    "description": "Available in template as .StatusIcon",
                    "default": "\uE372"
                  },
                  "completed_status_icon": {
                    "type": "string",
                    "title": "Icon for completed batch",
                    "description": "Available in template as .StatusIcon",
                    "default": "\uF7A5"
                  },
                  "archived_status_icon": {
                    "type": "string",
                    "title": "Icon for archived batch",
                    "description": "Available in template as .StatusIcon",
                    "default": "\uF187"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "buf"
              }
            }
          },
          "then": {
            "title": "Buf Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/buf",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Buf workspace",
                    "default": [
                      "buf.yaml",
                      "buf.gen.yaml",
                      "buf.work.yaml"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "bun"
              }
            }
          },
          "then": {
            "title": "Bun CLI Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/bun",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Bun workspace",
                    "default": [
                      "bun.lockb",
                      "bun.lock"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "carbonintensity"
              }
            }
          },
          "then": {
            "title": "Carbon Intensity Segment",
            "description": "Displays the actual and forecast carbon intensity in gCO2/kWh using the Carbon Intensity API",
            "properties": {
              "properties": {
                "properties": {
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "cds"
              }
            }
          },
          "then": {
            "title": "CDS (SAP CAP) segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/cds",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a CDS project",
                    "default": [
                      ".cdsrc.json",
                      ".cdsrc-private.json",
                      "*.cds"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "cf"
              }
            }
          },
          "then": {
            "title": "Clound Foundry CLI segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/cf",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Cloud Foundry project",
                    "default": [
                      "manifest.yml",
                      "mta.yaml"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "cftarget"
              }
            }
          },
          "then": {
            "title": "Clound Foundry Target segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/cftarget",
            "properties": {
              "properties": {
                "properties": {
                  "display_mode": {
                    "type": "string",
                    "title": "Display Mode",
                    "description": "Determines whether the segment is displayed always or only if a file matching the extensions are present in the current folder",
                    "enum": [
                      "always",
                      "files"
                    ],
                    "default": "always"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "cmake"
              }
            }
          },
          "then": {
            "title": "Cmake Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/cmake",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a CMake workspace",
                    "default": [
                      "*.cmake",
                      "CMakeLists.txt"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "command"
              }
            }
          },
          "then": {
            "title": "Command Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/command",
            "properties": {
              "properties": {
                "properties": {
                  "shell": {
                    "type": "string",
                    "title": "Shell",
                    "description": "The shell in which to run the command in. Uses shell -c command under the hood",
                    "default": "bash"
                  },
                  "command": {
                    "type": "string",
                    "title": "Command",
                    "description": "the command(s) to run",
                    "default": ""
                  },
                  "script": {
                    "type": "string",
                    "title": "Script",
                    "description": "A script to run",
                    "default": ""
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "connection"
              }
            }
          },
          "then": {
            "title": "Connection Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/connection",
            "properties": {
              "properties": {
                "properties": {
                  "type": {
                    "type": "string",
                    "title": "Connection type",
                    "description": "The connection type to display",
                    "enum": [
                      "ethernet",
                      "wifi",
                      "cellular",
                      "bluetooth"
                    ],
                    "default": "wifi|ethernet"
                  },
                  "unit": {
                    "type": "string",
                    "title": "Transfer speed unit",
                    "enum": [
                      "none",
                      "b",
                      "bps",
                      "K",
                      "Kbps",
                      "M",
                      "Mbps",
                      "G",
                      "Gbps",
                      "T",
                      "Tbps"
                    ],
                    "default": "none"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "crystal"
              }
            }
          },
          "then": {
            "title": "Crystal Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/crystal",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Crystal workspace",
                    "default": [
                      "*.cr",
                      "shard.yml"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "dart"
              }
            }
          },
          "then": {
            "title": "Dart Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/dart",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Dart workspace",
                    "default": [
                      "*.dart",
                      "pubspec.yaml",
                      "pubspec.yml",
                      "pubspec.lock"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "type": "array",
                    "title": "Folders",
                    "description": "The folders to look for when determining if a folder is a Dart workspace",
                    "default": [
                      ".dart_tool"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "deno"
              }
            }
          },
          "then": {
            "title": "Deno CLI Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/deno",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Deno workspace",
                    "default": [
                      "*.js",
                      "*.ts",
                      "deno.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "style": {
                "const": "diamond"
              }
            }
          },
          "then": {
            "properties": {
              "leading_diamond": {
                "type": "string",
                "title": "Leading diamond",
                "description": "https://ohmyposh.dev/docs/configuration/segment#leading-diamond",
                "default": ""
              },
              "trailing_diamond": {
                "type": "string",
                "title": "Trailing diamond",
                "description": "https://ohmyposh.dev/docs/configuration/segment#trailing-diamond",
                "default": ""
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "docker"
              }
            }
          },
          "then": {
            "title": "Docker Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/docker",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_context": {
                    "type": "boolean",
                    "title": "Fetch Context",
                    "description": "Fetch the Docker context",
                    "default": true
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "dotnet"
              }
            }
          },
          "then": {
            "title": "Dotnet Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/dotnet",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a .NET workspace",
                    "default": [
                      "*.cs",
                      "*.csx",
                      "*.vb",
                      "*.fs",
                      "*.fsx",
                      "*.sln",
                      "*.slnf",
                      "*.csproj",
                      "*.fsproj",
                      "*.vbproj",
                      "global.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "elixir"
              }
            }
          },
          "then": {
            "title": "Elixir Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/elixir",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Elixir workspace",
                    "default": [
                      "*.ex",
                      "*.exs"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "executiontime"
              }
            }
          },
          "then": {
            "title": "Displays the execution time of the previously executed command",
            "description": "https://ohmyposh.dev/docs/segments/system/executiontime",
            "properties": {
              "properties": {
                "properties": {
                  "always_enabled": {
                    "type": "boolean",
                    "title": "Always Enabled",
                    "description": "Always show the duration",
                    "default": false
                  },
                  "threshold": {
                    "type": "number",
                    "title": "Threshold",
                    "description": "minimum duration (milliseconds) required to enable this segment",
                    "default": 500
                  },
                  "style": {
                    "type": "string",
                    "title": "Style",
                    "description": "The style in which the time will be displayed",
                    "enum": [
                      "austin",
                      "roundrock",
                      "dallas",
                      "galveston",
                      "galvestonms",
                      "houston",
                      "amarillo",
                      "round",
                      "lucky7"
                    ],
                    "default": "austin"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "firebase"
              }
            }
          },
          "then": {
            "title": "Firebase Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/firebase"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "flutter"
              }
            }
          },
          "then": {
            "title": "Flutter Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/flutter",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Flutter workspace",
                    "default": [
                      "*.dart",
                      "pubspec.yaml",
                      "pubspec.yml",
                      "pubspec.lock"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "type": "array",
                    "title": "Folders",
                    "description": "The folders to look for when determining if a folder is a Flutter workspace",
                    "default": [
                      ".dart_tool"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "fortran"
              }
            }
          },
          "then": {
            "title": "Fortran Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/fortran",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Fortran workspace",
                    "default": [
                      "fpm.toml",
                      "*.f",
                      "*.for",
                      "*.fpp",
                      "*.f77",
                      "*.f90",
                      "*.f95",
                      "*.f03",
                      "*.f08",
                      "*.F",
                      "*.FOR",
                      "*.FPP",
                      "*.F77",
                      "*.F90",
                      "*.F95",
                      "*.F03",
                      "*.F08"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "fossil"
              }
            }
          },
          "then": {
            "title": "Fossil Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/fossil",
            "properties": {
              "properties": {
                "properties": {
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "gcp"
              }
            }
          },
          "then": {
            "title": "GCP Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/gcp"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "git"
              }
            }
          },
          "then": {
            "title": "Git Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/git",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_status": {
                    "type": "boolean",
                    "title": "Display Status",
                    "description": "Display the local changes or not",
                    "default": true
                  },
                  "fetch_stash_count": {
                    "type": "boolean",
                    "title": "Display Stash Count",
                    "description": "Display the stash count or not",
                    "default": false
                  },
                  "fetch_worktree_count": {
                    "type": "boolean",
                    "title": "Display Worktree Count",
                    "description": "Display the worktree count or not",
                    "default": false
                  },
                  "fetch_upstream_icon": {
                    "type": "boolean",
                    "title": "Display Upstream Icon",
                    "description": "Display upstream icon or not",
                    "default": false
                  },
                  "fetch_bare_info": {
                    "type": "boolean",
                    "title": "Fetch info when in a bare repo",
                    "description": "Fetch info when in a bare repo or not",
                    "default": false
                  },
                  "branch_icon": {
                    "type": "string",
                    "title": "Branch Icon",
                    "description": "The icon to use in front of the git branch name",
                    "default": "\uE0A0 "
                  },
                  "branch_identical_icon": {
                    "type": "string",
                    "title": "Branch Identical Icon",
                    "description": "The icon to display when remote and local are identical",
                    "default": "\u2261"
                  },
                  "branch_ahead_icon": {
                    "type": "string",
                    "title": "Branch Ahead Icon",
                    "description": "The icon to display when the local branch is ahead of its remote",
                    "default": "\u2191"
                  },
                  "branch_behind_icon": {
                    "type": "string",
                    "title": "Branch Behind Icon",
                    "description": "The icon to display when the local branch is behind its remote",
                    "default": "\u2193"
                  },
                  "branch_gone_icon": {
                    "type": "string",
                    "title": "Branch Gone Icon",
                    "description": "The icon to display when there's no remote branch",
                    "default": "\u2262"
                  },
                  "commit_icon": {
                    "type": "string",
                    "title": "Commit Icon",
                    "description": "Icon/text to display before the commit context (detached HEAD)",
                    "default": "\uF417"
                  },
                  "tag_icon": {
                    "type": "string",
                    "title": "Tag Icon",
                    "description": "Icon/text to display before the tag context",
                    "default": "\uF412"
                  },
                  "rebase_icon": {
                    "type": "string",
                    "title": "Rebase Icon",
                    "description": "Icon/text to display before the context when in a rebase",
                    "default": "\uE728"
                  },
                  "cherry_pick_icon": {
                    "type": "string",
                    "title": "Cherry-pick Icon",
                    "description": "Icon/text to display before the context when doing a cherry-pick",
                    "default": "\uE29B"
                  },
                  "revert_icon": {
                    "type": "string",
                    "title": "Revert Icon",
                    "description": "Icon/text to display before the context when doing a revert",
                    "default": "\uF0E2"
                  },
                  "merge_icon": {
                    "type": "string",
                    "title": "Merge Icon",
                    "description": "Icon/text to display before the merge context",
                    "default": "\uE727"
                  },
                  "no_commits_icon": {
                    "type": "string",
                    "title": "No Commits Icon",
                    "description": "Icon/text to display when there are no commits in the repo",
                    "default": "\uF594"
                  },
                  "github_icon": {
                    "type": "string",
                    "title": "Github Icon",
                    "description": "Icon/text to display when the upstream is Github",
                    "default": "\uF408"
                  },
                  "gitlab_icon": {
                    "type": "string",
                    "title": "Gitlab Icon",
                    "description": "Icon/text to display when the upstream is Gitlab",
                    "default": "\uF296"
                  },
                  "bitbucket_icon": {
                    "type": "string",
                    "title": "Bitbucket Icon",
                    "description": "Icon/text to display when the upstream is Bitbucket",
                    "default": "\uF171"
                  },
                  "azure_devops_icon": {
                    "type": "string",
                    "title": "Azure DevOps Icon",
                    "description": "Icon/text to display when the upstream is Azure DevOps",
                    "default": "\uEBE8"
                  },
                  "codecommit_icon": {
                    "type": "string",
                    "title": "CodeCommit Icon",
                    "description": "Icon/text to display when the upstream is CodeCommit",
                    "default": "\uF270"
                  },
                  "codeberg_icon": {
                    "type": "string",
                    "title": "Codeberg Icon",
                    "description": "Icon/text to display when the upstream is Codeberg",
                    "default": "\uF330"
                  },
                  "git_icon": {
                    "type": "string",
                    "title": "Git Icon",
                    "description": "Icon/text to display when the upstream is not known/mapped",
                    "default": "\uE5FB"
                  },
                  "untracked_modes": {
                    "type": "object",
                    "title": "Untracked files mode",
                    "description": "Set the untracked files mode for a repository",
                    "default": {}
                  },
                  "ignore_submodules": {
                    "type": "object",
                    "title": "Ignore submodules",
                    "description": "Ignore changes to submodules when looking for changes",
                    "default": {}
                  },
                  "ignore_status": {
                    "type": "array",
                    "title": "Ignore fetching status in these repo's",
                    "description": "Ignore fetching status for certain repo's, uses the same logic as the exclude_folders property",
                    "default": [],
                    "items": {
                      "type": "string"
                    }
                  },
                  "fetch_user": {
                    "type": "boolean",
                    "title": "Fetch the user",
                    "description": "Fetch the current configured user for the repository",
                    "default": false
                  },
                  "status_formats": {
                    "$ref": "#/definitions/status_formats"
                  },
                  "upstream_icons": {
                    "type": "object",
                    "title": "Status string formats",
                    "description": "a key, value map representing the remote URL (or a part of that URL) and icon to use in case the upstream URL contains the key. These get precedence over the standard icons",
                    "default": {}
                  },
                  "mapped_branches": {
                    "$ref": "#/definitions/mapped_branches"
                  },
                  "branch_template": {
                    "$ref": "#/definitions/branch_template"
                  },
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "gitversion"
              }
            }
          },
          "then": {
            "title": "Display GitVersion segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/gitversion"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "go"
              }
            }
          },
          "then": {
            "title": "Golang Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/golang",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "parse_mod_file": {
                    "type": "boolean",
                    "title": "Parse go.mod file",
                    "description": "Parse go.mod file instead of calling out to go to improve performance.",
                    "default": false
                  },
                  "parse_go_work_file": {
                    "type": "boolean",
                    "title": "Parse go.work file",
                    "description": "Parse go.work file instead of calling out to go to improve performance.",
                    "default": false
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Go workspace",
                    "default": [
                      "*.go",
                      "go.mod"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "haskell"
              }
            }
          },
          "then": {
            "title": "Haskell Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/haskell",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "stack_ghc_mode": {
                    "type": "string",
                    "title": "Use Stack GHC",
                    "description": "Get the GHC version used by Stack. Will decrease performance. Boolean indicating whether stack ghc was used available in template as .StackGhc",
                    "enum": [
                      "always",
                      "package",
                      "never"
                    ],
                    "default": "never"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Haskell project",
                    "default": [
                      "*.hs",
                      "*.lhs",
                      "stack.yaml",
                      "package.yaml",
                      "*.cabal",
                      "cabal.project"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "helm"
              }
            }
          },
          "then": {
            "title": "Helm segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/helm",
            "properties": {
              "properties": {
                "properties": {
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "http"
              }
            }
          },
          "then": {
            "title": "HTTP segment",
            "description": "https://ohmyposh.dev/docs/segments/web/http",
            "properties": {
              "properties": {
                "properties": {
                  "url": {
                    "type": "string",
                    "title": "URL",
                    "description": "The HTTP URL you want to call, supports templates",
                    "default": ""
                  },
                  "method": {
                    "type": "string",
                    "title": "HTTP Method",
                    "description": "The HTTP method to use",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ipify"
              }
            }
          },
          "then": {
            "title": "Display your external IP Address",
            "description": "https://ohmyposh.dev/docs/segments/web/ipify",
            "properties": {
              "properties": {
                "properties": {
                  "url": {
                    "type": "string",
                    "title": "URL",
                    "description": "The Ipify API URL",
                    "default": "https://api.ipify.org"
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "java"
              }
            }
          },
          "then": {
            "title": "Java Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/java",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Java workspace",
                    "default": [
                      "pom.xml",
                      "build.gradle.kts",
                      "build.sbt",
                      ".java-version",
                      ".deps.edn",
                      "project.clj",
                      "build.boot",
                      "*.java",
                      "*.class",
                      "*.gradle",
                      "*.jar",
                      "*.clj",
                      "*.cljc"
                    ]
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "jujutsu"
              }
            }
          },
          "then": {
            "title": "Jujutsu Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/jujutsu",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_status": {
                    "type": "boolean",
                    "title": "Display Status",
                    "description": "Display the changes in the working copy",
                    "default": false
                  },
                  "ignore_working_copy": {
                    "type": "boolean",
                    "title": "Ignore Working Copy",
                    "description": "Don't snapshot the working copy, and don't update it",
                    "default": true
                  },
                  "status_formats": {
                    "$ref": "#/definitions/status_formats"
                  },
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "julia"
              }
            }
          },
          "then": {
            "title": "Julia Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/julia",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Julia workspace",
                    "default": [
                      "*.jl"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "kotlin"
              }
            }
          },
          "then": {
            "title": "Kotlin Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/kotlin",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Kotlin project",
                    "default": [
                      "*.kt",
                      "*.kts",
                      "*.ktm"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "kubectl"
              }
            }
          },
          "then": {
            "title": "Kubectl Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/kubectl",
            "properties": {
              "properties": {
                "properties": {
                  "display_error": {
                    "type": "boolean",
                    "title": "Display Error",
                    "description": "Show the error context when failing to retrieve the kubectl information",
                    "default": false
                  },
                  "parse_kubeconfig": {
                    "type": "boolean",
                    "title": "Parse kubeconfig",
                    "description": "Parse kubeconfig files instead of calling out to kubectl to improve performance.",
                    "default": true
                  },
                  "context_aliases": {
                    "type": "object",
                    "title": "Context aliases",
                    "description": "Custom context names.",
                    "default": {}
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "lastfm"
              }
            }
          },
          "then": {
            "title": "LastFM Segment",
            "description": "https://ohmyposh.dev/docs/segments/music/lastfm",
            "properties": {
              "properties": {
                "properties": {
                  "playing_icon": {
                    "type": "string",
                    "title": "User Info Separator",
                    "description": "Text/icon to show when playing",
                    "default": "\uE602"
                  },
                  "stopped_icon": {
                    "type": "string",
                    "title": "SSH Icon",
                    "description": "Text/icon to show when stopped",
                    "default": "\uF04D"
                  },
                  "api_key": {
                    "type": "string",
                    "title": "API key",
                    "description": "The API key used for the API call (Required)",
                    "default": "."
                  },
                  "username": {
                    "type": "string",
                    "title": "username",
                    "description": "The username used for the API call (Required)",
                    "default": "."
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "lua"
              }
            }
          },
          "then": {
            "title": "Lua Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/lua",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "preferred_executable": {
                    "type": "string",
                    "title": "Preferred Executable",
                    "description": "The preferred executable to use when fetching the version.",
                    "enum": [
                      "lua",
                      "luajit"
                    ],
                    "default": "lua"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Lua project",
                    "default": [
                      "*.lua",
                      "*.rockspec"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "mercurial"
              }
            }
          },
          "then": {
            "title": "Mercurial Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/mercurial",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_status": {
                    "type": "boolean",
                    "title": "Display Status",
                    "description": "Display the local changes or not",
                    "default": false
                  },
                  "status_formats": {
                    "$ref": "#/definitions/status_formats"
                  },
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "mojo"
              }
            }
          },
          "then": {
            "title": "Mojo Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/mojo",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_virtual_env": {
                    "type": "boolean",
                    "title": "Fetch Virtual Env",
                    "description": "Fetch the name of the virtualenv or not",
                    "default": true
                  },
                  "display_default": {
                    "type": "boolean",
                    "title": "Display Default",
                    "description": "Show the name of the virtualenv when it's default",
                    "default": true
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Mojo workspace",
                    "default": [
                      "*.🔥",
                      "*.mojo",
                      "mojoproject.toml"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "nightscout"
              }
            }
          },
          "then": {
            "title": "Display Nightscout segment",
            "description": "https://ohmyposh.dev/docs/segments/health/nightscout",
            "properties": {
              "properties": {
                "properties": {
                  "url": {
                    "type": "string",
                    "title": "URL",
                    "description": "The URL to the Nightscout API",
                    "default": ""
                  },
                  "http_timeout": {
                    "type": "integer",
                    "title": "Http request timeout",
                    "description": "Milliseconds to use for http request timeouts",
                    "default": 500
                  },
                  "headers": {
                    "type": "object",
                    "title": "Headers",
                    "description": "A key, value map of Headers to send with the request",
                    "default": {}
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "nim"
              }
            }
          },
          "then": {
            "title": "Nim Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/nim",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Nim workspace",
                    "default": [
                      "*.nim",
                      "*.nims"
                    ]
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "nix-shell"
              }
            }
          },
          "then": {
            "title": "Nix Shell",
            "description": "https://ohmyposh.dev/docs/segments/cli/nix-shell"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "node"
              }
            }
          },
          "then": {
            "title": "Node Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/node",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "fetch_package_manager": {
                    "type": "boolean",
                    "title": "Fetch Display Package Manager",
                    "description": "Assigns the Yarn or NPM icon to .PackageManagerIcon",
                    "default": false
                  },
                  "yarn_icon": {
                    "type": "string",
                    "title": "Yarn Icon",
                    "description": "Icon/text to use for Yarn",
                    "default": "\uF011B"
                  },
                  "npm_icon": {
                    "type": "string",
                    "title": "NPM Icon",
                    "description": "Icon/text to use for NPM",
                    "default": "\uE71E"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Node workspace",
                    "default": [
                      "*.js",
                      "*.ts",
                      "package.json",
                      ".nvmrc",
                      "pnpm-workspace.yaml",
                      ".pnpmfile.cjs",
                      ".vue"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "npm"
              }
            }
          },
          "then": {
            "title": "NPM Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/npm",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is an NPM workspace",
                    "default": [
                      "package.json",
                      "package-lock.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "nx"
              }
            }
          },
          "then": {
            "title": "Nx Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/nx",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is an Nx project",
                    "default": [
                      "workspace.json",
                      "nx.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ocaml"
              }
            }
          },
          "then": {
            "title": "OCaml Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/ocaml",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is an OCaml project",
                    "default": [
                      "*.ml",
                      "*.mli",
                      "dune",
                      "dune-project",
                      "dune-workspace"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "os"
              }
            }
          },
          "then": {
            "title": "Operating System Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/os",
            "properties": {
              "properties": {
                "properties": {
                  "macos": {
                    "type": "string",
                    "title": "MacOS Icon",
                    "description": "Icon/text to use for macOS",
                    "default": "\uF179"
                  },
                  "linux": {
                    "type": "string",
                    "title": "Linux Icon",
                    "description": "Icon/text to use for Linux",
                    "default": "\uF17C"
                  },
                  "windows": {
                    "type": "string",
                    "title": "Windows Icon",
                    "description": "Icon/text to use for Windows",
                    "default": "\uE62A"
                  },
                  "display_distro_name": {
                    "type": "boolean",
                    "title": "Display Distro Name",
                    "description": "Display the distro name or icon or not",
                    "default": false
                  },
                  "alpine": {
                    "type": "string",
                    "title": "Alpine Icon",
                    "description": "The icon to use for Alpine",
                    "default": "\uF300"
                  },
                  "aosc": {
                    "type": "string",
                    "title": "Aosc Icon",
                    "description": "The icon to use for Aosc",
                    "default": "\uF301"
                  },
                  "arch": {
                    "type": "string",
                    "title": "Arch Icon",
                    "description": "The icon to use for Arch",
                    "default": "\uF303"
                  },
                  "centos": {
                    "type": "string",
                    "title": "Centos Icon",
                    "description": "The icon to use for Centos",
                    "default": "\uF303"
                  },
                  "coreos": {
                    "type": "string",
                    "title": "Coreos Icon",
                    "description": "The icon to use for Coreos",
                    "default": "\uF305"
                  },
                  "debian": {
                    "type": "string",
                    "title": "Debian Icon",
                    "description": "The icon to use for Debian",
                    "default": "\uF306"
                  },
                  "devuan": {
                    "type": "string",
                    "title": "Devuan Icon",
                    "description": "The icon to use for Devuan",
                    "default": "\uF307"
                  },
                  "raspbian": {
                    "type": "string",
                    "title": "Raspbian Icon",
                    "description": "The icon to use for Raspbian",
                    "default": "\uF315"
                  },
                  "elementary": {
                    "type": "string",
                    "title": "Elementary Icon",
                    "description": "The icon to use for Elementary",
                    "default": "\uF309"
                  },
                  "fedora": {
                    "type": "string",
                    "title": "Fedora Icon",
                    "description": "The icon to use for Fedora",
                    "default": "\uF30a"
                  },
                  "gentoo": {
                    "type": "string",
                    "title": "Gentoo Icon",
                    "description": "The icon to use for Gentoo",
                    "default": "\uF30d"
                  },
                  "mageia": {
                    "type": "string",
                    "title": "Mageia Icon",
                    "description": "The icon to use for Mageia",
                    "default": "\uF310"
                  },
                  "manjaro": {
                    "type": "string",
                    "title": "Manjaro Icon",
                    "description": "The icon to use for Manjaro",
                    "default": "\uF312"
                  },
                  "mint": {
                    "type": "string",
                    "title": "Mint Icon",
                    "description": "The icon to use for Mint",
                    "default": "\uF30e"
                  },
                  "nixos": {
                    "type": "string",
                    "title": "Nixos Icon",
                    "description": "The icon to use for Nixos",
                    "default": "\uF313"
                  },
                  "opensuse": {
                    "type": "string",
                    "title": "Opensuse Icon",
                    "description": "The icon to use for Opensuse",
                    "default": "\uF314"
                  },
                  "redhat": {
                    "type": "string",
                    "title": "Redhat Icon",
                    "description": "The icon to use for Redhat",
                    "default": "\uF316"
                  },
                  "sabayon": {
                    "type": "string",
                    "title": "Sabayon Icon",
                    "description": "The icon to use for Sabayon",
                    "default": "\uF317"
                  },
                  "slackware": {
                    "type": "string",
                    "title": "Slackware Icon",
                    "description": "The icon to use for Slackware",
                    "default": "\uF319"
                  },
                  "ubuntu": {
                    "type": "string",
                    "title": "Ubuntu Icon",
                    "description": "The icon to use for Ubuntu",
                    "default": "\uF31b"
                  },
                  "rocky": {
                    "type": "string",
                    "title": "Rocky Icon",
                    "description": "The icon to use for Rocky",
                    "default": "\uF32B"
                  },
                  "alma": {
                    "type": "string",
                    "title": "Alma Icon",
                    "description": "The icon to use for Alma",
                    "default": "\uF31D"
                  },
                  "android": {
                    "type": "string",
                    "title": "Android Icon",
                    "description": "The icon to use for Alma",
                    "default": "\uf17b"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "owm"
              }
            }
          },
          "then": {
            "title": "Open Weather Map Segment",
            "description": "Displays the current weather from the Open Weather Map system",
            "properties": {
              "properties": {
                "properties": {
                  "api_key": {
                    "type": "string",
                    "title": "API key",
                    "description": "The API key used for the api call (Required)",
                    "default": "."
                  },
                  "location": {
                    "type": "string",
                    "title": "location",
                    "description": "Location to use for the API call interpreted only if valid coordinates aren't given. Formatted as <City>,<STATE>,<COUNTRY_CODE>. City name, state code and country code divided by comma. Please, refer to ISO 3166 for the state codes or country codes.",
                    "default": "De Bilt,NL"
                  },
                  "units": {
                    "type": "string",
                    "title": "units",
                    "description": "Units of measurement. Available values are standard (kelvin), metric (celsius), and imperial (fahrenheit). Default is standard",
                    "default": "standard",
                    "enum": [
                      "standard",
                      "metric",
                      "imperial"
                    ]
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "path"
              }
            }
          },
          "then": {
            "title": "Path Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/path",
            "properties": {
              "properties": {
                "properties": {
                  "folder_separator_icon": {
                    "type": "string",
                    "title": "Folder Separator Icon",
                    "description": "The symbol to use as a separator between folders",
                    "default": "/"
                  },
                  "folder_separator_template": {
                    "type": "string",
                    "title": "Folder Separator Template",
                    "description": "the path which is split will be separated by this template",
                    "pattern": ""
                  },
                  "home_icon": {
                    "type": "string",
                    "title": "Home Icon",
                    "description": "The icon to display when at $HOME",
                    "default": "~"
                  },
                  "folder_icon": {
                    "type": "string",
                    "title": "Folder Icon",
                    "description": "The icon to use as a folder indication",
                    "default": ".."
                  },
                  "windows_registry_icon": {
                    "type": "string",
                    "title": "Windows Registry Icon",
                    "description": "The icon to display when in the Windows registry",
                    "default": "\uF013"
                  },
                  "style": {
                    "type": "string",
                    "title": "The Path Style",
                    "description": "How to display the current path",
                    "enum": [
                      "agnoster",
                      "agnoster_full",
                      "agnoster_short",
                      "agnoster_left",
                      "short",
                      "full",
                      "folder",
                      "mixed",
                      "letter",
                      "unique",
                      "powerlevel",
                      "fish"
                    ],
                    "default": "agnoster"
                  },
                  "mapped_locations": {
                    "type": "object",
                    "title": "Mapped Locations",
                    "description": "Custom glyph/text for specific paths",
                    "default": {}
                  },
                  "max_depth": {
                    "type": "integer",
                    "title": "Maximum Depth",
                    "description": "Maximum path depth to display without shortening",
                    "default": 1
                  },
                  "max_width": {
                    "type": [
                      "integer",
                      "string"
                    ],
                    "title": "Maximum Width",
                    "description": "Maximum path width to display for powerlevel style",
                    "default": 0
                  },
                  "mapped_locations_enabled": {
                    "type": "boolean",
                    "title": "Enable the Mapped Locations feature",
                    "description": "Replace known locations in the path with the replacements before applying the style.",
                    "default": true
                  },
                  "mixed_threshold": {
                    "type": "integer",
                    "title": "Mixed threshold",
                    "description": "The maximum length of a path segment that will be displayed when using mixed style.",
                    "default": 4
                  },
                  "hide_root_location": {
                    "type": "boolean",
                    "title": "Hide the root location",
                    "description": "Hides the root location, when using agnoster_short style, if it doesn't fit in the last max_depth folders.",
                    "default": false
                  },
                  "cycle": {
                    "type": "array",
                    "title": "Color overrides to use to cycle through and color the path per folder",
                    "items": {
                      "type": "string"
                    }
                  },
                  "cycle_folder_separator": {
                    "type": "boolean",
                    "title": "Cycle the folder_separator_icon",
                    "description": "Colorize the folder_separator_icon as well when using a cycle.",
                    "default": false
                  },
                  "folder_format": {
                    "type": "string",
                    "title": "The folder format",
                    "description": "Golang string format to apply to the folder name",
                    "pattern": "%s"
                  },
                  "edge_format": {
                    "type": "string",
                    "title": "The format to use on the start and end folder",
                    "description": "Golang string format to apply to the start and end folder",
                    "pattern": "%s"
                  },
                  "left_format": {
                    "type": "string",
                    "title": "The format to use on first folder of the path",
                    "description": "Will default to whatever edge_format is set to",
                    "pattern": "%s"
                  },
                  "right_format": {
                    "type": "string",
                    "title": "The format to use on the last folder of the path",
                    "description": "Will default to whatever edge_format is set to",
                    "pattern": "%s"
                  },
                  "gitdir_format": {
                    "type": "string",
                    "title": "The format to use on a git root directory",
                    "description": "Golang string format to apply to the .git folder",
                    "default": ""
                  },
                  "display_cygpath": {
                    "type": "boolean",
                    "title": "Display the Cygwin (Linux) style path",
                    "description": "Display the Cygwin (Linux) style path using cygpath -u $PWD.",
                    "default": false
                  },
                  "dir_length": {
                    "type": "integer",
                    "title": "Directory Length",
                    "description": "The length of the directory name to display in fish style.",
                    "default": 1
                  },
                  "full_length_dirs": {
                    "type": "integer",
                    "title": "Full Length Dirs",
                    "description": "Indicates how many full length directory names should be displayed in fish style.",
                    "default": 1
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "perl"
              }
            }
          },
          "then": {
            "title": "Perl Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/perl",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Perl workspace",
                    "default": [
                      ".perl-version",
                      "*.pl",
                      "*.pm",
                      "*.t"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "php"
              }
            }
          },
          "then": {
            "title": "PHP Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/php",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a PHP workspace",
                    "default": [
                      "*.php",
                      "composer.json",
                      "composer.lock",
                      ".php-version"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "plastic"
              }
            }
          },
          "then": {
            "title": "Plastic SCM Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/plastic",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_status": {
                    "type": "boolean",
                    "title": "Display Status",
                    "description": "Display the local changes or not",
                    "default": false
                  },
                  "status_formats": {
                    "$ref": "#/definitions/status_formats"
                  },
                  "branch_icon": {
                    "type": "string",
                    "title": "Branch Icon",
                    "description": "The icon to use in front of the selector branch name",
                    "default": "\uE0A0 "
                  },
                  "commit_icon": {
                    "type": "string",
                    "title": "Commit Icon",
                    "description": "Icon/text to display before the selector changeset",
                    "default": "\uF417"
                  },
                  "tag_icon": {
                    "type": "string",
                    "title": "Tag Icon",
                    "description": "Icon/text to display before the seletor label",
                    "default": "\uF412"
                  },
                  "branch_template": {
                    "$ref": "#/definitions/branch_template"
                  },
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  },
                  "mapped_branches": {
                    "$ref": "#/definitions/mapped_branches"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "pnpm"
              }
            }
          },
          "then": {
            "title": "PNPM Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/pnpm",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is an PNPM workspace",
                    "default": [
                      "package.json",
                      "pnpm-lock.yaml"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "style": {
                "const": "powerline"
              }
            }
          },
          "then": {
            "properties": {
              "powerline_symbol": {
                "type": "string",
                "title": "Powerline Symbol",
                "description": "https://ohmyposh.dev/docs/configuration/segment#powerline-symbol",
                "default": "\ue0b0"
              },
              "leading_powerline_symbol": {
                "type": "string",
                "title": "Leading Powerline Symbol",
                "description": "https://ohmyposh.dev/docs/configuration/segment#powerline-symbol",
                "default": "\ue0d7"
              },
              "invert_powerline": {
                "type": "boolean",
                "title": "Flip the Powerline symbol vertically",
                "description": "https://ohmyposh.dev/docs/configuration/segment#invert-powerline",
                "default": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "project"
              }
            }
          },
          "then": {
            "title": "Project Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/project",
            "properties": {
              "properties": {
                "properties": {
                  "always_enabled": {
                    "type": "boolean",
                    "title": "Always Enabled",
                    "description": "Always show the segment",
                    "default": false
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "pulumi"
              }
            }
          },
          "then": {
            "title": "Pulumi Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/pulumi",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_stack": {
                    "type": "boolean",
                    "title": "Fetch Stack",
                    "description": "Fetch the current pulumi stack or not",
                    "default": false
                  },
                  "fetch_about": {
                    "type": "boolean",
                    "title": "Fetch About",
                    "description": "Fetch the URL and user for the current stack",
                    "default": false
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "python"
              }
            }
          },
          "then": {
            "title": "Python Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/python",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_virtual_env": {
                    "type": "boolean",
                    "title": "Fetch Virtual Env",
                    "description": "Fetch the name of the virtualenv or not",
                    "default": true
                  },
                  "display_default": {
                    "type": "boolean",
                    "title": "Display Default",
                    "description": "Show the name of the virtualenv when it's default",
                    "default": true
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Python workspace",
                    "default": [
                      "*.py",
                      "*.ipynb",
                      "pyproject.toml",
                      "venv.bak"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "type": "array",
                    "title": "Folders",
                    "description": "The folders to look for when determining if a folder is a Python workspace",
                    "default": [
                      ".venv",
                      "venv",
                      "virtualenv",
                      "venv-win",
                      "pyenv-win"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folder_name_fallback": {
                    "type": "boolean",
                    "title": "Folder Name Fallback",
                    "description": "Replace virtual environment names in default_venv_names list with parent folder name",
                    "default": "true"
                  },
                  "default_venv_names": {
                    "type": "array",
                    "title": "Default Venv Names",
                    "description": "Names to replace when folder_name_fallback is true",
                    "default": [
                      ".venv",
                      "venv"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "quasar"
              }
            }
          },
          "then": {
            "title": "Quasar Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/quasar",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "fetch_dependencies": {
                    "type": "boolean",
                    "title": "Fetch Dependencies",
                    "description": "Fetch the vite and @quasar/app-vite dependency information or not",
                    "default": true
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Quasar workspace",
                    "default": [
                      "quasar.config",
                      "quasar.config.js"
                    ]
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "r"
              }
            }
          },
          "then": {
            "title": "R Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/r",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is an R project",
                    "default": [
                      "*.R",
                      "*.Rmd",
                      "*.Rsx",
                      "*.Rda",
                      "*.Rd",
                      "*.Rproj",
                      ".Rproj.user"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "react"
              }
            }
          },
          "then": {
            "title": "React Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/react",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a React project",
                    "default": [
                      "package.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "root"
              }
            }
          },
          "then": {
            "title": "Root Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/root"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ruby"
              }
            }
          },
          "then": {
            "title": "Ruby Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/ruby",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Ruby workspace",
                    "default": [
                      "*.rb",
                      "Rakefile",
                      "Gemfile"
                    ]
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "rust"
              }
            }
          },
          "then": {
            "title": "Rust Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/rust",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a Rust workspace",
                    "default": [
                      "*.rs",
                      "Cargo.toml",
                      "Cargo.lock"
                    ]
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "sapling"
              }
            }
          },
          "then": {
            "title": "Sapling Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/sapling",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_status": {
                    "type": "boolean",
                    "title": "Display Status",
                    "description": "Display the local changes or not",
                    "default": true
                  },
                  "status_formats": {
                    "$ref": "#/definitions/status_formats"
                  },
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "session"
              }
            }
          },
          "then": {
            "title": "Session Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/session",
            "properties": {
              "properties": {
                "properties": {
                  "ssh_icon": {
                    "type": "string",
                    "title": "SSH Icon",
                    "description": "Text/icon to display first when in an active SSH session",
                    "default": "\uF817"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "shell"
              }
            }
          },
          "then": {
            "title": "Shell Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/shell",
            "properties": {
              "properties": {
                "properties": {
                  "custom_text": {
                    "type": "object",
                    "title": "Custom Text",
                    "description": "Custom glyph/text for specific shells",
                    "default": {}
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "sitecore"
              }
            }
          },
          "then": {
            "title": "Sitecore Segment",
            "description": "https://ohmyposh.dev/docs/segments/cloud/sitecore",
            "properties": {
              "properties": {
                "properties": {
                  "display_default": {
                    "type": "boolean",
                    "title": "Display Default",
                    "description": "Display the segment or not when the Sitecore environment name matches `default`",
                    "default": true
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "spotify"
              }
            }
          },
          "then": {
            "title": "Spotify Segment",
            "description": "https://ohmyposh.dev/docs/segments/music/spotify",
            "properties": {
              "properties": {
                "properties": {
                  "playing_icon": {
                    "type": "string",
                    "title": "Playing Icon",
                    "description": "Text/icon to show when playing",
                    "default": "\uE602"
                  },
                  "paused_icon": {
                    "type": "string",
                    "title": "Paused Icon",
                    "description": "Text/icon to show when paused",
                    "default": "\uF8E3"
                  },
                  "stopped_icon": {
                    "type": "string",
                    "title": "Stopped Icon",
                    "description": "Text/icon to show when stopped",
                    "default": "\uF04D"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "status"
              }
            }
          },
          "then": {
            "title": "Status Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/status",
            "properties": {
              "properties": {
                "properties": {
                  "always_enabled": {
                    "type": "boolean",
                    "title": "Always Enabled",
                    "description": "Always show the status",
                    "default": false
                  },
                  "status_template": {
                    "type": "string",
                    "title": "Status Template",
                    "description": "The template to use for the status segment",
                    "default": "|"
                  },
                  "status_separator": {
                    "type": "string",
                    "title": "Status Separator",
                    "description": "The separator to use between the status segments",
                    "default": "|"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "strava"
              }
            }
          },
          "then": {
            "title": "Display training data from Strava",
            "description": "https://ohmyposh.dev/docs/segments/health/strava",
            "properties": {
              "properties": {
                "properties": {
                  "url": {
                    "type": "string",
                    "title": "URL of API with Strava data",
                    "description": "Url of your api provinding a Strava activity",
                    "default": ""
                  },
                  "ride_icon": {
                    "type": "string",
                    "title": "Ride icon",
                    "description": "Alternative icon for this activity type",
                    "default": "\uf206"
                  },
                  "run_icon": {
                    "type": "string",
                    "title": "Run icon",
                    "description": "Alternative icon for this activity type",
                    "default": "\ue213"
                  },
                  "skiing_icon": {
                    "type": "string",
                    "title": "Skiing icon",
                    "description": "Alternative icon for this activity type",
                    "default": "\ue213"
                  },
                  "workout_icon": {
                    "type": "string",
                    "title": "Workout icon",
                    "description": "Alternative icon for this activity type",
                    "default": "\ue213"
                  },
                  "unknown_activity_icon": {
                    "type": "string",
                    "title": "Fallback icon",
                    "description": "Fallback icon for other activity types",
                    "default": "\ue213"
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  },
                  "access_token": {
                    "$ref": "#/definitions/access_token"
                  },
                  "refresh_token": {
                    "$ref": "#/definitions/refresh_token"
                  },
                  "expires_in": {
                    "$ref": "#/definitions/expires_in"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "svelte"
              }
            }
          },
          "then": {
            "title": "Svelte Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/svelte",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Svelte project",
                    "default": [
                      "package.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "svn"
              }
            }
          },
          "then": {
            "title": "SVN Segment",
            "description": "https://ohmyposh.dev/docs/segments/scm/svn",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_status": {
                    "type": "boolean",
                    "title": "Display Status",
                    "description": "Display the local changes or not",
                    "default": true
                  },
                  "status_formats": {
                    "$ref": "#/definitions/status_formats"
                  },
                  "native_fallback": {
                    "$ref": "#/definitions/native_fallback"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "swift"
              }
            }
          },
          "then": {
            "title": "Swift Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/swift",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Swift project",
                    "default": [
                      "*.swift",
                      "*.SWIFT"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "sysinfo"
              }
            }
          },
          "then": {
            "title": "Get sysinfo",
            "description": "https://ohmyposh.dev/docs/segments/system/sysinfo",
            "properties": {
              "properties": {
                "properties": {
                  "precision": {
                    "type": "integer",
                    "title": "Precision",
                    "description": "number of decimal places to show",
                    "default": 2
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "talosctl"
              }
            }
          },
          "then": {
            "title": "Talosctl Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/talosctl"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "tauri"
              }
            }
          },
          "then": {
            "title": "Tauri Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/tauri",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Tauri project",
                    "default": [
                      "package.json"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "terraform"
              }
            }
          },
          "then": {
            "title": "Terraform Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/terraform",
            "properties": {
              "properties": {
                "properties": {
                  "fetch_version": {
                    "type": "boolean",
                    "title": "Fetch Version",
                    "description": "Fetch the version number",
                    "default": false
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "text"
              }
            }
          },
          "then": {
            "title": "Text Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/text"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "time"
              }
            }
          },
          "then": {
            "title": "Time Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/time",
            "properties": {
              "properties": {
                "properties": {
                  "time_format": {
                    "type": "string",
                    "title": "Time Format",
                    "description": "Format to use, follows the golang standard: https://gobyexample.com/time-formatting-parsing",
                    "default": "15:04:05"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ui5tooling"
              }
            }
          },
          "then": {
            "title": "UI5 tooling CLI segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/ui5tooling",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a UI5 project",
                    "default": [
                      "*ui5*.y*ml"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "umbraco"
              }
            }
          },
          "then": {
            "title": "Umbraco Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/umbraco"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "unity"
              }
            }
          },
          "then": {
            "title": "Unity Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/unity",
            "properties": {
              "properties": {
                "properties": {
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "upgrade"
              }
            }
          },
          "then": {
            "title": "Upgrade Segment",
            "description": "https://ohmyposh.dev/docs/segments/system/upgrade",
            "properties": {
              "properties": {
                "properties": {
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "v"
              }
            }
          },
          "then": {
            "title": "V Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/v",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a V project",
                    "default": [
                      "*.v"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "vala"
              }
            }
          },
          "then": {
            "title": "Vala Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/vala",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is a Vala project",
                    "default": [
                      "*.vala"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "wakatime"
              }
            }
          },
          "then": {
            "title": "Wakatime",
            "description": "Displays the tracked time on wakatime.com",
            "properties": {
              "properties": {
                "properties": {
                  "apikey": {
                    "type": "string",
                    "title": "apikey",
                    "description": "The apikey used for the api call (Required)",
                    "default": "."
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "winreg"
              }
            }
          },
          "then": {
            "title": "Windows Registry Query",
            "description": "https://ohmyposh.dev/docs/segments/system/winreg",
            "properties": {
              "properties": {
                "properties": {
                  "path": {
                    "type": "string",
                    "title": "Registry Path",
                    "description": "The path to the registry key (case insensitive, must use backslashes).  Ending with \\ will retrieve \"(Default)\" key in that path.",
                    "default": ""
                  },
                  "fallback": {
                    "type": "string",
                    "title": "Fallback value",
                    "description": "Value to display if registry value cannot be retrieved",
                    "default": ""
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "withings"
              }
            }
          },
          "then": {
            "title": "Display activity data from Withings",
            "description": "https://ohmyposh.dev/docs/segments/health/withings",
            "properties": {
              "properties": {
                "properties": {
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  },
                  "access_token": {
                    "$ref": "#/definitions/access_token"
                  },
                  "refresh_token": {
                    "$ref": "#/definitions/refresh_token"
                  },
                  "expires_in": {
                    "$ref": "#/definitions/expires_in"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "xmake"
              }
            }
          },
          "then": {
            "title": "XMake Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/xmake",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is a XMake workspace",
                    "default": [
                      "xmake.lua"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "yarn"
              }
            }
          },
          "then": {
            "title": "Yarn Segment",
            "description": "https://ohmyposh.dev/docs/segments/cli/yarn",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if a folder is an Yarn workspace",
                    "default": [
                      "package.json",
                      "yarn.lock"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ytm"
              }
            }
          },
          "then": {
            "title": "YouTube Music Desktop App Segment",
            "description": "https://ohmyposh.dev/docs/segments/music/ytm",
            "properties": {
              "properties": {
                "properties": {
                  "playing_icon": {
                    "type": "string",
                    "title": "Playing Icon",
                    "description": "Text/icon to show when playing",
                    "default": "\uE602 "
                  },
                  "paused_icon": {
                    "type": "string",
                    "title": "Paused Icon",
                    "description": "Text/icon to show when paused",
                    "default": "\uF8E3 "
                  },
                  "stopped_icon": {
                    "type": "string",
                    "title": "Stopped Icon",
                    "description": "Text/icon to show when stopped",
                    "default": "\uF04D "
                  },
                  "api_url": {
                    "type": "string",
                    "title": "API URL",
                    "description": "The YTMDA Remote Control API URL",
                    "default": "http://127.0.0.1:9863"
                  },
                  "http_timeout": {
                    "$ref": "#/definitions/http_timeout"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "zig"
              }
            }
          },
          "then": {
            "title": "Zig Segment",
            "description": "https://ohmyposh.dev/docs/segments/languages/zig",
            "properties": {
              "properties": {
                "properties": {
                  "home_enabled": {
                    "$ref": "#/definitions/home_enabled"
                  },
                  "fetch_version": {
                    "$ref": "#/definitions/fetch_version"
                  },
                  "cache_duration": {
                    "$ref": "#/definitions/cache_duration",
                    "default": "none"
                  },
                  "display_mode": {
                    "$ref": "#/definitions/display_mode"
                  },
                  "missing_command_text": {
                    "$ref": "#/definitions/missing_command_text"
                  },
                  "version_url_template": {
                    "$ref": "#/definitions/version_url_template"
                  },
                  "extensions": {
                    "type": "array",
                    "title": "Extensions",
                    "description": "The extensions to look for when determining if the current directory is an zig project",
                    "default": [
                      "*.zig",
                      "*.zon"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "folders": {
                    "$ref": "#/definitions/folders"
                  }
                }
              }
            }
          }
        }
      ]
    }
  },
  "required": [
    "blocks"
  ],
  "properties": {
    "final_space": {
      "type": "boolean",
      "title": "Final Space",
      "description": "https://ohmyposh.dev/docs/configuration/general#general-settings",
      "default": true
    },
    "enable_cursor_positioning": {
      "type": "boolean",
      "title": "Enable Cursor Positioning",
      "description": "https://ohmyposh.dev/docs/configuration/general#general-settings",
      "default": false
    },
    "shell_integration": {
      "type": "boolean",
      "title": "FTCS command marks for shell integration",
      "default": false
    },
    "pwd": {
      "type": "string",
      "title": "Enable OSC99/7/51",
      "description": "https://ohmyposh.dev/docs/configuration/general#general-settings",
      "default": ""
    },
    "upgrade": {
      "type": "object",
      "title": "Enable Upgrade Notice",
      "description": "https://ohmyposh.dev/docs/configuration/general#general-settings",
      "default": {
        "source": "cdn",
        "auto": false,
        "notice": false
      },
      "properties": {
        "interval": {
          "$ref": "#/definitions/cache_duration"
        },
        "source": {
          "type": "string",
          "enum": [
            "cdn",
            "github"
          ],
          "default": "cdn"
        },
        "auto": {
          "type": "boolean",
          "default": false
        },
        "notice": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "patch_pwsh_bleed": {
      "type": "boolean",
      "title": "Patch PowerShell Color Bleed",
      "description": "https://ohmyposh.dev/docs/configuration/general#general-settings",
      "default": false
    },
    "console_title_template": {
      "type": "string",
      "title": "Console Title Template",
      "description": "https://ohmyposh.dev/docs/configuration/title#console-title-template",
      "default": "{{ .Shell }} in {{ .Folder }}"
    },
    "terminal_background": {
      "$ref": "#/definitions/color"
    },
    "blocks": {
      "type": "array",
      "title": "Block array",
      "default": [],
      "description": "https://ohmyposh.dev/docs/configuration/general#blocks",
      "items": {
        "$ref": "#/definitions/block"
      }
    },
    "tooltips": {
      "type": "array",
      "title": "Tooltip list, prompt elements to display based on context",
      "description": "https://ohmyposh.dev/docs/configuration/tooltips",
      "default": [],
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/segment"
          }
        ],
        "properties": {
          "tips": {
            "type": "array",
            "title": "The commands for which you want the segment to show",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tips"
        ]
      }
    },
    "transient_prompt": {
      "$ref": "#/definitions/extra_prompt",
      "title": "Transient Prompt Setting",
      "description": "https://ohmyposh.dev/docs/configuration/transient",
      "anyOf": [
        {
          "properties": {
            "filler": {
              "$ref": "#/definitions/filler"
            },
            "newline": {
              "type": "boolean",
              "title": "Newline",
              "description": "Add a newline before the prompt",
              "default": false
            }
          }
        }
      ]
    },
    "valid_line": {
      "$ref": "#/definitions/extra_prompt",
      "title": "Valid Line Setting (for PowerShell only)",
      "description": "https://ohmyposh.dev/docs/configuration/line-error"
    },
    "error_line": {
      "$ref": "#/definitions/extra_prompt",
      "title": "Error Line Setting (for PowerShell only)",
      "description": "https://ohmyposh.dev/docs/configuration/line-error"
    },
    "secondary_prompt": {
      "$ref": "#/definitions/extra_prompt",
      "title": "Secondary Prompt Setting",
      "description": "https://ohmyposh.dev/docs/configuration/secondary-prompt"
    },
    "debug_prompt": {
      "$ref": "#/definitions/extra_prompt",
      "title": "Debug Prompt Setting (for PowerShell only)",
      "description": "https://ohmyposh.dev/docs/configuration/debug-prompt"
    },
    "palette": {
      "type": "object",
      "title": "Palette",
      "description": "https://ohmyposh.dev/docs/configuration/colors#palette",
      "default": {},
      "patternProperties": {
        ".*": {
          "$ref": "#/definitions/color"
        }
      }
    },
    "palettes": {
      "type": "object",
      "title": "Palettes",
      "description": "https://ohmyposh.dev/docs/configuration/colors#palettes",
      "default": {},
      "properties": {
        "template": {
          "type": "string",
          "title": "Prompt Template"
        },
        "list": {
          "type": "object",
          "title": "List of palettes",
          "patternProperties": {
            ".*": {
              "$ref": "#/properties/palette"
            }
          }
        }
      }
    },
    "cycle": {
      "type": "array",
      "title": "List of settings to cycle through segment by segment",
      "description": "https://ohmyposh.dev/docs/configuration/cycle",
      "default": [],
      "items": {
        "properties": {
          "foreground": {
            "$ref": "#/definitions/color"
          },
          "background": {
            "$ref": "#/definitions/color"
          }
        }
      }
    },
    "accent_color": {
      "title": "Accent color",
      "$ref": "#/definitions/color"
    },
    "iterm_features": {
      "type": "array",
      "title": "The iTerm2 features to enable",
      "items": {
        "type": "string",
        "enum": [
          "prompt_mark",
          "current_dir",
          "remote_host"
        ]
      }
    },
    "var": {
      "type": "object",
      "title": "Config variables to use in templates (can be any value)",
      "description": "https://ohmyposh.dev/docs/configuration/templates#config-variables",
      "default": {}
    },
    "maps": {
      "type": "object",
      "title": "Custom text mappings",
      "description": "https://ohmyposh.dev/docs/configuration/general#maps",
      "default": {},
      "items": {
        "properties": {
          "user_name": {
            "$ref": "#/definitions/aliases"
          },
          "host_name": {
            "$ref": "#/definitions/aliases"
          },
          "shell_name": {
            "$ref": "#/definitions/aliases"
          }
        }
      }
    },
    "async": {
      "type": "boolean",
      "title": "Async loading",
      "default": false
    },
    "tooltips_action": {
      "type": "string",
      "title": "Tooltips action",
      "description": "https://ohmyposh.dev/docs/configuration/tooltips#tooltips-action",
      "enum": [
        "replace",
        "extend",
        "prepend"
      ],
      "default": "replace"
    }
  }
}



================================================
FILE: themes/sim-web.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "type": "prompt",
      "alignment": "right",
      "overflow": "hide",
      "segments": [
        {
          "type": "executiontime",
          "style": "powerline",
          "foreground": "#a9ffb4",
          "template": " {{ .FormattedMs }}s <#ffffff>\ue601</>",
          "properties": {
            "threshold": 0,
            "style": "dallas"
          }
        },
        {
          "type": "node",
          "style": "powerline",
          "foreground": "#45bf17",
          "template": " \ue718 {{ .Full }} "
        },
        {
          "type": "npm",
          "style": "powerline",
          "foreground": "#FE4A49",
          "template": "<#F3EFF5>and</> \ue71e {{ .Full }} "
        }
      ]
    },
    {
      "type": "prompt",
      "alignment": "left",
      "newline": true,
      "overflow": "break",
      "segments": [
        {
          "type": "path",
          "style": "powerline",
          "foreground": "#ffafd2",
          "properties": {
            "style": "agnoster_full",
            "home_icon": "home",
            "folder_icon": "\uf07b",
            "folder_separator_icon": " \u276f "
          },
          "template": "\ue5ff {{ .Path }} "
        },
        {
          "type": "git",
          "style": "powerline",
          "foreground": "#f14e32",
          "properties": {
            "branch_icon": "\ue725 "
          },
          "template": "({{ .HEAD }})"
        }
      ]
    },
    {
      "alignment": "left",
      "newline": true,
      "type": "prompt",
      "segments": [
        {
          "type": "status",
          "style": "diamond",
          "foreground": "#00c7fc",
          "properties": {
            "always_enabled": true
          },
          "template": "<#00c7fc>\u276f</>_: "
        }
      ]
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FEF5ED",
    "template": "{{ .Shell }}"
  },
  "version": 3
}



================================================
FILE: themes/slim.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#2f2f2f",
          "foreground": "#26C6DA",
          "leading_diamond": "\ue0c7\u2593",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}\ue712 on {{ end }}{{ .Icon }}<#7a7a7a> \ue0b1</>",
          "type": "os"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "style": "diamond",
          "template": " {{ if ne .Env.POSH_SESSION_DEFAULT_USER .UserName }}<#77f5d6>{{ .UserName }}</><#7a7a7a>\uf1fa</>{{ end }}<#2EEFBF>{{ .HostName }}</><#7a7a7a> \ue0b1</>",
          "type": "session"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffff66",
          "style": "diamond",
          "template": " \uf0e7<#7a7a7a> \ue0b1</>",
          "type": "root"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "properties": {
            "folder_icon": "<#B5B2C2>\ue5fe </>",
            "folder_separator_icon": "<#B5B2C2>\ue0bf </>",
            "home_icon": "\uf015",
            "style": "agnoster_short"
          },
          "style": "diamond",
          "template": "<#f2f200> \ue5ff </>{{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffeb3b",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffeb3b{{ end }}",
            "{{ if gt .Ahead 0 }}#2EC4B6{{ end }}",
            "{{ if gt .Behind 0 }}#8A4FFF{{ end }}"
          ],
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "diamond",
          "template": "<#7a7a7a>\ue0b1 </>{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}<#E84855> \uf044 {{ .Working.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#2FDA4E> \uf046 {{ .Staging.String }}</>{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "style": "diamond",
          "trailing_diamond": "\ue0b0",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "type": "text"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#6CA35E",
          "style": "diamond",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}<#7a7a7a> \ue0b3</>",
          "type": "node"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#96E072",
          "style": "diamond",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}<#7a7a7a> \ue0b3</>",
          "type": "python"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#3891A6",
          "style": "diamond",
          "template": " \ue77f {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }}<#7a7a7a> \ue0b3</>",
          "type": "dotnet"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }}<#007ACC> \ue641 </>",
          "trailing_diamond": "\u2593\ue0c6",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#7a7a7a",
          "style": "plain",
          "template": "~#@\u276f",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#7a7a7a",
          "style": "plain",
          "template": " \u276e ",
          "type": "text"
        },
        {
          "foreground": "#FFCE5C",
          "properties": {
            "style": "roundrock",
            "threshold": 500
          },
          "style": "plain",
          "template": " {{ .FormattedMs }}<#fafafa> \uf252 </>",
          "type": "executiontime"
        },
        {
          "foreground": "#9FD356",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#E84855{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " \uea9f {{ if gt .Code 0 }}{{ .Code }}{{ end }} ",
          "type": "status"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{if .Root}}root :: {{end}}{{.Shell}} :: {{.Folder}}",
  "final_space": true,
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#7a7a7a",
    "template": " ~#@\u276f "
  },
  "version": 3
}



================================================
FILE: themes/slimfat.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#2f2f2f",
          "foreground": "#26C6DA",
          "leading_diamond": "\ue0c7\u2593",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue70f"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}\ue712 on {{ end }}{{ .Icon }}<#7a7a7a> \ue0b1</>",
          "type": "os"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "style": "diamond",
          "template": " {{ if ne .Env.POSH_SESSION_DEFAULT_USER .UserName }}<#77f5d6>{{ .UserName }}</><#7a7a7a>\uf1fa</>{{ end }}<#2EEFBF>{{ .HostName }}</><#7a7a7a> \ue0b1</>",
          "type": "session"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffff66",
          "style": "diamond",
          "template": " \uf0e7<#7a7a7a> \ue0b1</>",
          "type": "root"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "properties": {
            "folder_icon": "<#B5B2C2>\ue5fe </>",
            "style": "full"
          },
          "style": "diamond",
          "template": "<#f2f200> \ue5ff </>{{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#ffeb3b",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffeb3b{{ end }}",
            "{{ if gt .Ahead 0 }}#2EC4B6{{ end }}",
            "{{ if gt .Behind 0 }}#8A4FFF{{ end }}"
          ],
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "diamond",
          "template": "<#7a7a7a>\ue0b1 </>{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }}<#E84855> \uf044 {{ .Working.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#2FDA4E> \uf046 {{ .Staging.String }}</>{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "style": "diamond",
          "trailing_diamond": "\ue0b0",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "type": "text"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#6CA35E",
          "style": "diamond",
          "template": " \ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}<#7a7a7a> \ue0b3</>",
          "type": "node"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#96E072",
          "style": "diamond",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}<#7a7a7a> \ue0b3</>",
          "type": "python"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#3891A6",
          "style": "diamond",
          "template": " \ue77f {{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }}<#7a7a7a> \ue0b3</>",
          "type": "dotnet"
        },
        {
          "background": "#2f2f2f",
          "foreground": "#fafafa",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }}<#007ACC> \ue641 </>",
          "trailing_diamond": "\u2593\ue0c6",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#7a7a7a",
          "style": "plain",
          "template": " ~#@\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#7a7a7a",
          "style": "plain",
          "template": " \u276e ",
          "type": "text"
        },
        {
          "foreground": "#FFCE5C",
          "properties": {
            "style": "roundrock",
            "threshold": 500
          },
          "style": "plain",
          "template": " {{ .FormattedMs }}<#fafafa> \uf252 </>",
          "type": "executiontime"
        },
        {
          "foreground": "#9FD356",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#E84855{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " \uea9f {{ if gt .Code 0 }}{{ .Code }}{{ end }} ",
          "type": "status"
        }
      ],
      "type": "rprompt"
    }
  ],
  "console_title_template": "{{if .Root}}root :: {{end}}{{.Shell}} :: {{.Folder}}",
  "final_space": true,
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#7a7a7a",
    "template": " ~#@\u276f "
  },
  "version": 3
}



================================================
FILE: themes/smoothie.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#b1ff4f",
          "style": "powerline",
          "template": "[🐍 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}] ",
          "type": "python"
        },
        {
          "foreground": "#ffaed8",
          "properties": {
            "folder_separator_icon": " | ",
            "home_icon": "\uf46d",
            "style": "letter"
          },
          "style": "plain",
          "template": "<#eaeaea>\u23a7</> \u27e8{{ .Path }}\u27e9 ",
          "type": "path"
        },
        {
          "foreground": "#62beff",
          "properties": {
            "branch_icon": "\uf418",
            "branch_identical_icon": "\u2261",
            "fetch_status": true
          },
          "style": "plain",
          "template": "\u27e8{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \u2206{{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}\u27e9",
          "type": "git"
        },
        {
          "foreground": "#98C379",
          "properties": {
            "fetch_version": true
          },
          "style": "plain",
          "template": "<#ffffff>\u25e6</> \u2622{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#fb0207",
          "style": "plain",
          "template": " ××× ",
          "type": "status"
        },
        {
          "foreground": "#9966ff",
          "properties": {
            "style": "austin",
            "threshold": 0
          },
          "style": "plain",
          "template": "\u27e8{{ .FormattedMs }}\u27e9 <#eaeaea>\u23ab</>",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#3ce6bf",
          "style": "plain",
          "template": "<#eaeaea>\u23a9</>\u27e9\u27e9\u27e9\u27e9\u27e9\u27e9 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#f5f5a6",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": "\u27e8{{ .CurrentDate | date .Format }}\u27e9 <#eaeaea>\u23ad</>",
          "type": "time"
        }
      ],
      "type": "rprompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/sonicboom_dark.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#000000",
          "foreground": "#dd1e1e",
          "style": "plain",
          "template": " \u26a1",
          "type": "root"
        },
        {
          "background": "#000000",
          "foreground": "#ffffff",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue62a",
            "wsl": "\ue712"
          },
          "style": "plain",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#272727",
          "foreground": "#43CCEA",
          "properties": {
            "folder_icon": "\ue5fe",
            "folder_separator_icon": " <#000000>\ue0bd </>",
            "home_icon": "\ueb06",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#272727",
          "foreground": "#00ff0d",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "plain",
          "template": "<#000000>\ue0b1 </>{{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#272727",
          "foreground": "#ffffff",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": "<#000000>\ue0b1 </>{{ .FormattedMs }}s ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#272727",
          "foreground": "#43CCEA",
          "leading_diamond": "\ue0c5",
          "style": "diamond",
          "template": " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}<transparent> / </>{{ .HostName }}",
          "type": "session"
        },
        {
          "background": "#272727",
          "foreground": "#43CCEA",
          "properties": {
            "time_format": "3:04:05 PM"
          },
          "style": "diamond",
          "template": "<#000000> \ue31e\uf0fb </>{{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0c5",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#00ff0d",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ff0000{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\uf432 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/sonicboom_light.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#000000",
          "foreground": "#dd1e1e",
          "style": "plain",
          "template": " \u26a1",
          "type": "root"
        },
        {
          "background": "#000000",
          "foreground": "#ffffff",
          "properties": {
            "alpine": "\uf300",
            "arch": "\uf303",
            "centos": "\uf304",
            "debian": "\uf306",
            "elementary": "\uf309",
            "fedora": "\uf30a",
            "gentoo": "\uf30d",
            "linux": "\ue712",
            "macos": "\ue711",
            "manjaro": "\uf312",
            "mint": "\uf30f",
            "opensuse": "\uf314",
            "raspbian": "\uf315",
            "ubuntu": "\uf31c",
            "windows": "\ue62a",
            "wsl": "\ue712"
          },
          "style": "plain",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#4d4d4d",
          "foreground": "#43CCEA",
          "properties": {
            "folder_icon": "\ue5fe",
            "folder_separator_icon": "<transparent> \ue0bd </>",
            "home_icon": "\ueb06",
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#4d4d4d",
          "foreground": "#00ff0d",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true
          },
          "style": "plain",
          "template": "<#000000>\ue0b1 </>{{ .HEAD }}{{ if .Staging.Changed }}<#FF6F00> \uf046 {{ .Staging.String }}</>{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#4d4d4d",
          "foreground": "#ffffff",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": "<#000000>\ue0b1 </>{{ .FormattedMs }}s ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#4d4d4d",
          "foreground": "#43CCEA",
          "leading_diamond": "\ue0c5",
          "style": "diamond",
          "template": " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}<transparent> / </>{{ .HostName }}",
          "type": "session"
        },
        {
          "background": "#4d4d4d",
          "foreground": "#43CCEA",
          "properties": {
            "time_format": "3:04:05 PM"
          },
          "style": "diamond",
          "template": "<#000000> \ue31e\uf0fb </>{{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0c5",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#00ff0d",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ff0000{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\uf432 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/sorin.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#CB4B16",
          "style": "plain",
          "template": " {{ reason .Code }} ",
          "type": "status"
        },
        {
          "foreground": "#CECE04",
          "style": "plain",
          "template": " \uf0e7 ",
          "type": "root"
        },
        {
          "foreground": "#FFFFFF",
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "#0973C0",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#C1C106",
          "style": "plain",
          "template": "<#ffffff>git:</>{{ .HEAD }} ",
          "type": "git"
        },
        {
          "foreground": "#100e23",
          "style": "plain",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "<#CB4B16>\u276f</><#CACA02>\u276f</><#4E9A06>\u276f</> ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/space.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#26C6DA",
          "properties": {
            "macos": "mac"
          },
          "style": "plain",
          "template": "{{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "type": "os"
        },
        {
          "foreground": "#26C6DA",
          "style": "plain",
          "template": " {{ .UserName }}: ",
          "type": "session"
        },
        {
          "foreground": "lightGreen",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "properties": {
            "branch_icon": "",
            "fetch_stash_count": true
          },
          "style": "plain",
          "template": "<#ffffff>on</> {{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#906cff",
          "style": "powerline",
          "template": "[\ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}] ",
          "type": "python"
        },
        {
          "foreground": "#7FD5EA",
          "style": "powerline",
          "template": "[\ue626 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}] ",
          "type": "go"
        },
        {
          "foreground": "#76b367",
          "style": "powerline",
          "template": "[\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}] ",
          "type": "node"
        },
        {
          "foreground": "#f44336",
          "style": "powerline",
          "template": "[\ue791{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}] ",
          "type": "ruby"
        },
        {
          "foreground": "#ea2d2e",
          "style": "powerline",
          "template": "[\ue738 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}] ",
          "type": "java"
        },
        {
          "foreground": "#4063D8",
          "style": "powerline",
          "template": " \ue624 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
          "type": "julia"
        },
        {
          "foreground": "#FFD54F",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/spaceship.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "lightYellow",
          "style": "plain",
          "template": "{{ .UserName }} ",
          "type": "session"
        },
        {
          "foreground": "cyan",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": "<#ffffff>in</> {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#ff94df",
          "properties": {
            "branch_icon": " <#ff94df><b>\ue0a0 </b></>",
            "fetch_stash_count": true
          },
          "style": "plain",
          "template": "<#ffffff>on</> {{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "lightGreen",
          "style": "plain",
          "template": "\u276f",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/star.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#E06C75",
          "style": "plain",
          "template": "root <#ffffff>in</> ",
          "type": "root"
        },
        {
          "foreground": "#55B9C4",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#C678DD",
          "properties": {
            "fetch_status": true
          },
          "style": "plain",
          "template": "<#ffffff>on</> {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#98C379",
          "properties": {
            "fetch_version": true
          },
          "style": "plain",
          "template": "<#ffffff>via</> \ue781 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
          "type": "node"
        },
        {
          "foreground": "#C94A16",
          "style": "plain",
          "template": "x ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#63F08C",
          "style": "plain",
          "template": "\u279c ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/stelbent-compact.minimal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "console_title_template": "{{if .Segments.Git.RepoName}} {{.Segments.Git.RepoName}} {{else}} {{.Folder}} {{end}}",
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "type": "session",
          "foreground": "#757575",
          "properties": {
            "display_host": true
          },
          "style": "plain",
          "template": "\u250c {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}@{{ .HostName }} "
        },
        {
          "type": "path",
          "background": "#91ddff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "agnoster_full"
          },
          "style": "powerline",
          "template": " {{ .Path }} "
        },
        {
          "type": "git",
          "style": "powerline",
          "powerline_symbol": "\ue0b0",
          "foreground": "#100e23",
          "background": "#95ffa4",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ff9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#89d1dc{{ end }}",
            "{{ if gt .Behind 0 }}#c5b6ad{{ end }}"
          ],
          "template": " {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} \u2502{{ end }}{{ if .Staging.Changed }} {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} {{ .StashCount }}{{ end }} ",
          "properties": {
            "branch_ahead_icon": "\u2191",
            "branch_behind_icon": "\u2193",
            "branch_gone": "\u2262",
            "branch_icon": "\ue0a0 ",
            "branch_identical_icon": "\u2261",
            "cherry_pick_icon": "\u2713 ",
            "commit_icon": "\u25b7 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "merge_icon": "\u25f4 ",
            "no_commits_icon": "[no commits]",
            "rebase_icon": "\u2c62 ",
            "tag_icon": "\u25b6 ",
            "untracked_modes": {
              "/Users/user/Projects/oh-my-posh/": "no"
            }
          }
        },
        {
          "type": "terraform",
          "background": "#ffee58",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .WorkspaceName }}{{ if .Version }} {{ .Version }}{{ end }} "
        },
        {
          "type": "status",
          "background": "#ff8080",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ if gt .Code 0 }}error{{ else }}\uf42e{{ end }} "
        },
        {
          "type": "time",
          "foreground": "#689f38",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " <#757575,>|</> {{ .CurrentDate | date .Format }}"
        }
      ]
    },
    {
      "type": "prompt",
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "type": "text",
          "foreground": "#757575",
          "style": "plain",
          "template": "\u2514"
        },
        {
          "type": "text",
          "foreground": "#ffffff",
          "style": "plain",
          "template": "$"
        }
      ]
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/stelbent.minimal.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#007acc",
          "style": "plain",
          "template": "{{ .Name }}",
          "type": "shell"
        },
        {
          "foreground": "#ff8080",
          "style": "plain",
          "template": " <#757575,>as</> root",
          "type": "root"
        },
        {
          "foreground": "#689f38",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "plain",
          "template": " <#757575,>|</> {{ .CurrentDate | date .Format }}",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#757575",
          "style": "plain",
          "template": "\u250c {{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#91ddff",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "folder"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#95ffa4",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ff9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#89d1dc{{ end }}",
            "{{ if gt .Behind 0 }}#c5b6ad{{ end }}"
          ],
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_ahead_icon": "\u2191",
            "branch_behind_icon": "\u2193",
            "branch_gone": "\u2262",
            "branch_icon": "\ue0a0 ",
            "branch_identical_icon": "\u2261",
            "cherry_pick_icon": "\u2713 ",
            "commit_icon": "\u25b7 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "merge_icon": "\u25f4 ",
            "no_commits_icon": "[no commits]",
            "rebase_icon": "\u2c62 ",
            "tag_icon": "\u25b6 "
          },
          "style": "powerline",
          "template": " {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} \u2502{{ end }}{{ if .Staging.Changed }} {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#ffee58",
          "foreground": "#100e23",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " {{ .WorkspaceName }} ",
          "type": "terraform"
        },
        {
          "background": "#ff8080",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " error ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#757575",
          "style": "plain",
          "template": "\u2514 ",
          "type": "text"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "$",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/takuya.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#0077c2",
          "foreground": "#ffffff",
          "leading_diamond": "\u256d\u2500\ue0b6",
          "style": "diamond",
          "template": " {{ .Name }} ",
          "type": "shell"
        },
        {
          "background": "#ef5350",
          "foreground": "#FFFB38",
          "properties": {
            "root_icon": "\uf292"
          },
          "style": "diamond",
          "template": "<parentBackground>\ue0b0</> \uf0e7 ",
          "type": "root"
        },
        {
          "background": "#444444",
          "foreground": "#E4E4E4",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#FFFB38",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ffeb95{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#c5e478{{ end }}",
            "{{ if gt .Ahead 0 }}#C792EA{{ end }}",
            "{{ if gt .Behind 0 }}#C792EA{{ end }}"
          ],
          "foreground": "#011627",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .HEAD }} {{ if .Working.Changed }}{{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }}<#ef5350> \uf046 {{ .Staging.String }}</>{{ end }} ",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#303030",
          "foreground": "#3C873A",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_package_manager": true,
            "npm_icon": " <#cc3a3a>\ue5fa</> ",
            "yarn_icon": " <#348cba>\ue6a7</>"
          },
          "style": "diamond",
          "template": "\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4",
          "type": "node"
        },
        {
          "background": "#40c4ff",
          "foreground": "#ffffff",
          "invert_powerline": true,
          "leading_diamond": " \ue0b6",
          "style": "diamond",
          "template": " \ue641 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#21c7c7",
          "style": "plain",
          "template": "\u2570\u2500",
          "type": "text"
        },
        {
          "foreground": "#e0f8ff",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#ef5350{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "\u276f ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/the-unnamed.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#15C2CB",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#F141A8",
          "properties": {
            "branch_icon": "\ue0a0 "
          },
          "style": "plain",
          "template": "<#F3EFF5>on</> {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }} ",
          "type": "git"
        },
        {
          "foreground": "#5EADF2",
          "style": "plain",
          "template": "{{if .Version}}<#F3EFF5>is</> \uf487 {{.Version}} {{end}}",
          "type": "project"
        },
        {
          "foreground": "#44FFD2",
          "properties": {
            "fetch_version": true
          },
          "style": "plain",
          "template": "<#F3EFF5>via</> \ue718 {{ .Full }} ",
          "type": "node"
        },
        {
          "foreground": "#FE4A49",
          "style": "plain",
          "template": "<#F3EFF5>and</> \ue71e {{.Full}} ",
          "type": "npm"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#FFE45E",
          "style": "plain",
          "template": "\u276f ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/thecyberden.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#2e9599",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "powerline_symbol": "\ue0b0",
          "style": "diamond",
          "template": "\uf108 {{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#0080ff",
          "foreground": "#ffffff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "style": "full"
          },
          "style": "powerline",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#c19c00",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFEB3B{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFA300{{ end }}",
            "{{ if gt .Ahead 0 }}#FF7070{{ end }}",
            "{{ if gt .Behind 0 }}#90F090{{ end }}"
          ],
          "foreground": "#000000",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#2e9599",
          "background_templates": [
            "{{ if gt .Code 0 }}#f1184c{{ end }}"
          ],
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": "  ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#2e9599",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ff0000",
          "style": "plain",
          "template": "\ue00a ",
          "type": "root"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": " {{ .Name }} ",
          "type": "shell"
        },
        {
          "foreground": "#ffffff",
          "style": "plain",
          "template": "\uf054 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "version": 3
}



================================================
FILE: themes/tiwahu.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#007ACC",
          "foreground": "#222222",
          "properties": {
            "style": "austin",
            "threshold": 321
          },
          "style": "plain",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#880000",
          "foreground": "#ff8888",
          "style": "plain",
          "template": "{{ if gt .Code 0 }} {{ .Code }} {{ end }}",
          "type": "status"
        },
        {
          "background": "#ffcc88",
          "foreground": "#222222",
          "style": "plain",
          "template": "\uf0e7",
          "type": "root"
        },
        {
          "background": "#222222",
          "foreground": "#666666",
          "style": "plain",
          "template": " {{ if .WSL }}\uebcc {{ end }}{{.Icon}}",
          "type": "os"
        },
        {
          "background": "#222222",
          "foreground": "#666666",
          "style": "plain",
          "template": " {{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "background": "#444444",
          "foreground": "#cccccc",
          "properties": {
            "folder_icon": "\u2026",
            "style": "mixed"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#cf432B",
          "foreground": "#f1f0e9",
          "properties": {
            "branch_icon": "\ue725 ",
            "cherry_pick_icon": "\ue29b ",
            "commit_icon": "\uf417 ",
            "fetch_status": false,
            "fetch_upstream_icon": false,
            "merge_icon": "\ue727 ",
            "no_commits_icon": "\uf0c3 ",
            "rebase_icon": "\ue728 ",
            "revert_icon": "\uf0e2 ",
            "tag_icon": "\uf412 "
          },
          "style": "plain",
          "template": " {{ .HEAD }} ",
          "type": "git"
        },
        {
          "background": "#7014eb",
          "foreground": "#ffffff",
          "properties": {
            "fetch_version": false
          },
          "style": "plain",
          "template": " \ue77f ",
          "type": "dotnet"
        },
        {
          "background": "#7FD5EA",
          "foreground": "#ffffff",
          "properties": {
            "fetch_version": false
          },
          "style": "plain",
          "template": " \ue626 ",
          "type": "go"
        },
        {
          "background": "#906cff",
          "foreground": "#100e23",
          "properties": {
            "fetch_version": false
          },
          "style": "plain",
          "template": " \ue235 ",
          "type": "python"
        },
        {
          "background": "#99908a",
          "foreground": "#193549",
          "properties": {
            "fetch_version": false
          },
          "style": "plain",
          "template": " \ue7a8 ",
          "type": "rust"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#007ACC",
          "style": "plain",
          "template": "{{ .Name }} ",
          "type": "shell",
          "properties": {
            "mapped_shell_names": {
              "pwsh": "\u276f",
              "shell": "\u276f",
              "cmd": ">",
              "lua": ">",
              "nu": ":)",
              "fish": "~>",
              "zsh": "%",
              "bash": "$"
            }
          }
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/tokyo.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "leading_diamond": "<#7eb8da>\u250f</>",
      "segments": [
        {
          "foreground": "#7eb8da",
          "properties": {
            "time_format": "01/02/2006 @ 3:04:05 PM MST"
          },
          "style": "diamond",
          "template": "[<#ffffff>\uf073</> {{ .CurrentDate | date .Format }}]",
          "type": "time"
        },
        {
          "foreground": "#7eb8da",
          "style": "plain",
          "template": "[<#ffffff>\ueb99</> {{ .UserName }} :: <#ffffff>\uf108</> {{ .HostName }}]",
          "type": "session"
        },
        {
          "foreground": "#be9ddf",
          "style": "diamond",
          "template": "[<#ffffff>\ue266</> RAM: {{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB]",
          "type": "sysinfo"
        },
        {
          "foreground": "#f36943",
          "foreground_templates": [
            "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
            "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
            "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
          ],
          "properties": {
            "charged_icon": "<#ffffff>\ue22f</> ",
            "charging_icon": "\ueb2d ",
            "discharging_icon": "<#ffff00>\uf244</> "
          },
          "style": "plain",
          "template": "[{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}\uf295]",
          "type": "battery"
        },
        {
          "foreground": "#be9ddf",
          "properties": {
            "style": "dallas",
            "threshold": 0
          },
          "style": "diamond",
          "template": "[<#ffffff>\uf252</> {{ .FormattedMs }}s]",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "leading_diamond": "<#7eb8da>\u2523</>",
      "segments": [
        {
          "foreground": "#7eb8da",
          "style": "diamond",
          "template": "[<#ffffff>\uebd8</> Subscription: <#ffff00>{{ .Name }}</>]",
          "type": "az"
        },
        {
          "foreground": "#7eb8da",
          "style": "diamond",
          "template": "[<#ffffff>\uebd8</> Azure Developer CLI Environment: <#ffff00>{{ .DefaultEnvironment  }}</> :: <#ffff00>{{ .Version }}</>]",
          "type": "azd"
        },
        {
          "foreground": "#7eb8da",
          "style": "diamond",
          "template": "[<#ffffff>\uf270</> <#ffff00>{{ .Profile }}</>{{if .Region}}@<#ffff00>{{ .Region }}</>{{ end }}]",
          "type": "aws"
        },
        {
          "foreground": "#7eb8da",
          "style": "diamond",
          "template": "[{{ if .Error }}{{ .Error }}{{ else }}<#ffffff>\uf1a0</> <#ffff00>{{ .Project }}</> :: <#ffff00>{{.Account}}</>{{ end }}]",
          "type": "gcp"
        },
        {
          "foreground": "#ffa5d8",
          "style": "diamond",
          "template": "[<#ffffff>\uf10fe</> <#ffff00>{{.Context}}</>{{if .Namespace}} :: <#ffff00>{{.Namespace}}</>{{end}}]",
          "type": "kubectl"
        },
        {
          "foreground": "#ffa5d8",
          "style": "diamond",
          "template": "[{{ if .Error }}{{ .Error }}{{ else }}{{ if .Name }}<#ffffff>\uf487</> {{ .Name }}{{ end }}{{ if .Target }} {{ .Target }}{{ end }}{{ end }}]",
          "type": "project"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "leading_diamond": "<#7eb8da>\u2523</>",
      "segments": [
        {
          "foreground": "#7eb8da",
          "properties": {
            "style": "full"
          },
          "style": "diamond",
          "template": "[<#ffffff>\uf115</> <#98bfad>{{ .Path }}</>]",
          "type": "path"
        },
        {
          "foreground": "#ffa5d8",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "plain",
          "template": "[<#ffffff>{{ .UpstreamIcon }} </>{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} <#ffffff>\uf044</> {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} <#ffffff>\uf046</> {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} <#ffffff>\ueb4b</> {{ .StashCount }}{{ end }}]",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "leading_diamond": "<#7eb8da>\u2514\u2500</>",
      "segments": [
        {
          "style": "diamond",
            "template": "<#ffff00>[#]</>",
          "type": "root"
        },
        {
          "foreground": "#ffa5d8",
          "style": "diamond",
          "template": "[<#ffffff>\uea6c</> Error, check your command]",
          "type": "status"
        },
        {
          "style": "diamond",
          "template": ">",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "secondary_prompt": {
    "background": "transparent",
    "template": " "
  },
  "valid_line": {
    "background": "transparent",
    "template": "> "
  },
  "error_line": {
    "background": "transparent",
    "template": "<#ff0000>\uea87</> "
  },
  "version": 3
}


================================================
FILE: themes/tokyonight_storm.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "console_title_template": " {{ .Folder }} :: {{if .Root}}Admin{{end}}",
  "palette": {
    "main-bg": "#24283b",
    "terminal-red": "#f7768e",
    "pistachio-green": "#9ece6a",
    "terminal-green": "#73daca",
    "terminal-yellow": "#e0af68",
    "terminal-blue": "#7aa2f7",
    "celeste-blue": "#b4f9f8",
    "light-sky-blue": "#7dcfff",
    "terminal-white": "#c0caf5",
    "white-blue": "#a9b1d6",
    "blue-bell": "#9aa5ce",
    "pastal-grey": "#cfc9c2",
    "terminal-magenta": "#bb9af7",
    "blue-black": "#565f89",
    "terminal-black": "#414868",
    "t-background": "p:main-bg"
  },
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "type": "text",
          "style": "plain",
          "background": "transparent",
          "foreground": "p:terminal-blue",
          "template": "\u279c "
        },
        {
          "type": "path",
          "style": "plain",
          "foreground": "p:terminal-magenta",
          "properties": {
            "style": "folder"
          },
          "template": "<b>{{ .Path }}</b> <p:light-sky-blue>\u26a1</>"
        },
        {
          "type": "git",
          "style": "plain",
          "foreground": "p:light-sky-blue",
          "foreground_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}p:terminal-red{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0)}}p:light-sky-blue {{ end }}",
            "{{ if gt .Ahead 0 }}p:terminal-blue{{ end }}",
            "{{ if gt .Behind 0 }}p:celeste-blue{{ end }}"
          ],
          "template": "({{ .HEAD}})",
          "properties": {
            "fetch_status": true,
            "branch_icon": "\ue725 "
          }
        },
        {
          "type": "status",
          "style": "plain",
          "foreground": "p:terminal-red",
          "template": " \uf00d"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "overflow": "hide",
      "segments": [
        {
          "type": "node",
          "style": "plain",
          "foreground": "p:pistachio-green",
          "template": "\ue718 {{ .Full }} "
        },
        {
          "type": "php",
          "style": "plain",
          "foreground": "p:terminal-blue",
          "template": "\ue73d {{ .Full }} "
        },
        {
          "type": "python",
          "style": "plain",
          "foreground": "p:terminal-yellow",
          "template": "\uE235 {{ .Full }}"
        },
        {
          "type": "julia",
          "style": "plain",
          "foreground": "p:terminal-magenta",
          "template": "\uE624 {{ .Full }}"
        },
        {
          "type": "ruby",
          "style": "plain",
          "foreground": "p:terminal-red",
          "template": "\uE791 {{ .Full}}"
        },
        {
          "type": "go",
          "style": "plain",
          "foreground": "p:light-sky-blue",
          "template": "\uFCD1 {{ .Full}}"
        },
        {
          "type": "command",
          "style": "plain",
          "foreground": "p:white-blue",
          "properties": {
            "command": "git log --pretty=format:%cr -1 || date +%H:%M:%S",
            "shell": "bash"
          }
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "p:pistachio-green",
          "style": "plain",
          "template": "\u25b6",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "secondary_prompt": {
    "background": "transparent",
    "foreground": "p:terminal-blue",
    "template": "\u279c "
  },
  "transient_prompt": {
    "background": "p:t-background",
    "foreground": "p:terminal-blue",
    "template": "\u279c "
  },
  "final_space": true,
  "version": 3,
  "terminal_background": "p:t-background"
}



================================================
FILE: themes/tonybaloney.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#18354c",
          "foreground": "#ffc107",
          "leading_diamond": "\ue0b6",
          "properties": {
            "style": "folder"
          },
          "style": "diamond",
          "template": " \ue5ff {{ .Path }} ",
          "trailing_diamond": "\ue0b0",
          "type": "path"
        },
        {
          "background": "#18354c",
          "foreground": "#ffc107",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#ffc107",
          "foreground": "#18354c",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \ue235 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }} ",
          "type": "python"
        },
        {
          "background": "#ffc107",
          "foreground": "#18354c",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": " \uf0e7 ",
          "type": "root"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/uew.omp.json
================================================
{
    "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
    "blocks": [
      {
        "alignment": "left",
        "newline": true,
        "segments": [
          {
            "foreground": "#BBC4B9",
            "leading_diamond":"<#BFA8BF>~</> ",
            "properties": {
              "display_host": true
            },
            "style": "diamond",
            "template": "{{ .UserName }} ",
            "type": "session"
          },
          {
            "foreground": "#BFA8BF",
            "properties": {
              "branch_icon": "\ue725 ",
              "fetch_stash_count": true,
              "fetch_status": true,
              "fetch_upstream_icon": true,
              "fetch_worktree_count": true
            },
            "style": "diamond",
            "template": "<#fff>{{ .UpstreamIcon }}</>{{ .HEAD }}",
            "type": "git"
          },
          {
            "foreground": "#BFA8BF",
            "style": "powerline",
            "template": " <#fff>\uf120</> {{ .Name }} ",
            "type": "shell"
          }
        ],
        "type": "prompt"
      },
      {
        "alignment": "right",
        "segments": [
          {
            "foreground": "#fff",
            "style": "plain",
            "type": "text"
          },
          {
            "foreground": "#fff",
            "properties": {
              "style": "dallas",
              "threshold": 0
            },
            "style": "diamond",
            "template": " <#BBC4B9>{{ .FormattedMs }}s</> <#fff>\udb80\udddd</>",
            "type": "executiontime"
          },
          {
            "foreground": "#BBC4B9",
            "properties": {
              "time_format": "Monday <#fff>at</> 3:04 PM"
            },
            "style": "diamond",
            "template": " {{ .CurrentDate | date .Format }} ",
            "type": "time"
          },
          {
            "properties": {
              "root_icon": "\uf292 "
            },
            "style": "diamond",
            "template": " \uf0e7",
            "type": "root"
          },
          {
            "foreground": "#BBC4B9",
            "style": "diamond",
            "template": " <#fff>\ue718</> {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }} ",
            "type": "node"
          }
        ],
        "type": "prompt"
      },
      {
        "alignment": "left",
        "newline": true,
        "segments": [
          {
            "foreground": "#B6D6F2",
            "leading_diamond": "<#BFA8BF>~</>",
            "properties": {
              "folder_icon": "\u002F",
              "folder_separator_icon": " \u002F ",
              "home_icon": "home",
              "style": "agnoster_full"
            },
            "style": "diamond",
            "template": " \ue5ff {{ .Path }}",
            "trailing_diamond": "",
            "type": "path"
          },
          {
            "foreground": "#BFA8BF",
            "foreground_templates": [
              "{{ if gt .Code 0 }}#fff{{ end }}"
            ],
            "properties": {
              "always_enabled": true
            },
            "style": "plain",
            "template": " \u007E ",
            "type": "status"
          }
        ],
        "type": "prompt"
      }
    ],
    "console_title_template": "{{ .Folder }}",
    "transient_prompt": {
      "background": "transparent",
      "foreground": "#FEF5ED",
      "template": "\ue285 "
    },
    "version": 3
  }



================================================
FILE: themes/unicorn.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#003543",
          "foreground": "#fff",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "windows": "\ue62a "
          },
          "style": "powerline",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "type": "os"
        },
        {
          "background": "#0087D8",
          "foreground": "#003544",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "folder_separator_icon": "/",
            "style": "full"
          },
          "style": "powerline",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#d2ff5e",
          "background_templates": [
            "{{ if or (.Working.Changed) (.Staging.Changed) }}#ff9248{{ end }}",
            "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#f26d50{{ end }}",
            "{{ if gt .Ahead 0 }}#89d1dc{{ end }}",
            "{{ if gt .Behind 0 }}#f17c37{{ end }}"
          ],
          "foreground": "#193549",
          "powerline_symbol": "\ue0b0",
          "properties": {
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#003543",
          "foreground": "#fff",
          "powerline_symbol": "\ue0b0",
          "style": "powerline",
          "template": "<#fff> \ue641 </>{{ .CurrentDate | date .Format }} ",
          "type": "time"
        },
        {
          "background": "#83769c",
          "foreground": "#ffffff",
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \ueba2 {{ .FormattedMs }}\u2800",
          "trailing_diamond": "\ue0b4",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#fff",
          "style": "plain",
          "template": " \u26a1 ",
          "type": "root"
        },
        {
          "foreground": "#f1184c",
          "style": "plain",
          "template": "🦄 ",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{.UserName}}@{{.HostName}} in {{ .PWD }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/velvet.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#0E050F",
          "foreground": "#EFDCF9",
          "properties": {
            "arch": "\uf303",
            "debian": "\uf306",
            "fedora": "\uf30a",
            "linux": "\uf17c",
            "macos": "\uf179",
            "manjaro": "\uf312",
            "opensuse": "\uf314",
            "ubuntu": "\uf31b",
            "windows": "\uf17a"
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}} ",
          "type": "os"
        },
        {
          "background": "#170B3B",
          "foreground": "#EFDCF9",
          "powerline_symbol": "\ue0b4",
          "properties": {
            "folder_icon": "...",
            "folder_separator_icon": "/",
            "home_icon": "~",
            "max_depth": 3,
            "style": "agnoster_short"
          },
          "style": "powerline",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "background": "#341948",
          "foreground": "#EFDCF9",
          "powerline_symbol": "\ue0b4",
          "properties": {
            "branch_template": "{{ trunc 25 .Branch }}",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true
          },
          "style": "powerline",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "type": "git"
        },
        {
          "background": "#4c1f5e",
          "foreground": "#EFDCF9",
          "powerline_symbol": "\ue0b4",
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": " {{ .FormattedMs }} ",
          "type": "executiontime"
        },
        {
          "background": "#69307A",
          "foreground": "#EFDCF9",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#FF3C3C{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "diamond",
          "template": " \uf08a{{ if gt .Code 0 }} {{.Code}}{{ end }} ",
          "trailing_diamond": "\ue0b4",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#4c1f5e",
          "foreground": "#E4F34A",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue235{{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "python"
        },
        {
          "background": "#4c1f5e",
          "foreground": "#7FD5EA",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue626{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "go"
        },
        {
          "background": "#4c1f5e",
          "foreground": "#42E66C",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue718{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "\ue0b4",
          "type": "node"
        },
        {
          "background": "#4c1f5e",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue791{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "ruby"
        },
        {
          "background": "#4c1f5e",
          "foreground": "#E64747",
          "leading_diamond": " \ue0b6",
          "properties": {
            "fetch_version": false
          },
          "style": "diamond",
          "template": "\ue738{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "trailing_diamond": "\ue0b4",
          "type": "java"
        }
      ],
      "type": "rprompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "background": "#4c1f5e",
          "foreground": "#EFDCF9",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": " {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "\ue0b4",
          "type": "time"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Shell }} - {{ .Folder }}",
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/wholespace.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "background": "#FEF5ED",
          "foreground": "#011627",
          "leading_diamond": "\ue0b2",
          "properties": {
            "macos": "\uf179 ",
            "ubuntu": "\uf31b ",
            "windows": "\ue62a "
          },
          "style": "diamond",
          "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}",
          "trailing_diamond": "<transparent,#FEF5ED>\ue0b2</>",
          "type": "os"
        },
        {
          "background": "#FEF5ED",
          "foreground": "#011627",
          "leading_diamond": "\ue0b2",
          "properties": {
            "time_format": "15:04:05"
          },
          "style": "diamond",
          "template": " \u2665 {{ .CurrentDate | date .Format }} ",
          "trailing_diamond": "<transparent,#FEF5ED>\ue0b2</>",
          "type": "time"
        },
        {
          "background": "#516BEB",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b2",
          "style": "diamond",
          "template": "\ue266 CPU: {{ round .PhysicalPercentUsed .Precision }}% | ",
          "type": "sysinfo"
        },
        {
          "background": "#516BEB",
          "foreground": "#ffffff",
          "style": "diamond",
          "template": "RAM: {{ (div ((sub .PhysicalTotalMemory .PhysicalAvailableMemory)|float64) 1073741824.0) }}/{{ (div .PhysicalTotalMemory 1073741824.0) }}GB \ue266 ",
          "trailing_diamond": "<transparent,#516BEB>\ue0b2</>",
          "type": "sysinfo"
        },
        {
          "background": "#575656",
          "foreground": "#d6deeb",
          "leading_diamond": "\ue0b2",
          "properties": {
            "style": "roundrock",
            "threshold": 0
          },
          "style": "diamond",
          "template": " {{ .FormattedMs }} ",
          "trailing_diamond": "\ue0b0",
          "type": "executiontime"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "background": "#ffffff",
          "foreground": "#000000",
          "leading_diamond": "\ue0b2",
          "properties": {
            "fetch_package_manager": true,
            "npm_icon": " <#cc3a3a>\ue5fa</> ",
            "yarn_icon": " <#348cba>\ue6a7</>"
          },
          "style": "diamond",
          "template": "\ue718 {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "trailing_diamond": "<transparent,#ffffff>\ue0b2</>",
          "type": "node"
        },
        {
          "background": "#17D7A0",
          "foreground": "#011627",
          "leading_diamond": "\ue0b2",
          "properties": {
            "branch_icon": "\ue725 ",
            "fetch_stash_count": true,
            "fetch_status": true,
            "fetch_upstream_icon": true,
            "fetch_worktree_count": true
          },
          "style": "diamond",
          "template": " {{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uf046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \ueb4b {{ .StashCount }}{{ end }} ",
          "trailing_diamond": "\ue0b0",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "#ffafd2",
          "properties": {
            "folder_icon": "\uf07b",
            "home_icon": "home",
            "style": "agnoster_full"
          },
          "style": "diamond",
          "template": " \ue5ff {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#00ff15",
          "foreground_templates": ["{{ if gt .Code 0 }}#ff0000{{ end }}"],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": " \ueb05 ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "console_title_template": "{{ .Folder }}",
  "transient_prompt": {
    "background": "transparent",
    "foreground": "#FEF5ED",
    "template": "\ue285 "
  },
  "version": 3
}



================================================
FILE: themes/wopian.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "cyan",
          "style": "powerline",
          "template": "{{ .Icon }}",
          "type": "os"
        },
        {
          "foreground": "cyan",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": " {{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "lightYellow",
          "style": "plain",
          "template": ":: <lightBlue>git(</>{{ .HEAD }}<lightBlue>)</>",
          "type": "git"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "right",
      "segments": [
        {
          "foreground": "#68a063",
          "properties": {
            "display_mode": "files",
            "fetch_package_manager": true,
            "fetch_version": true,
            "npm_icon": "/npm",
            "yarn_icon": "/yarn"
          },
          "style": "plain",
          "template": " {{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}",
          "type": "node"
        },
        {
          "foreground": "#4063D8",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "plain",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "type": "crystal"
        },
        {
          "foreground": "#DE3F24",
          "properties": {
            "display_mode": "files",
            "fetch_version": true
          },
          "style": "plain",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "type": "ruby"
        },
        {
          "foreground": "#FED142",
          "properties": {
            "display_mode": "context",
            "fetch_virtual_env": false
          },
          "style": "plain",
          "template": " {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}",
          "type": "python"
        },
        {
          "foreground": "lightGreen",
          "style": "plain",
          "template": " {{ .CurrentDate | date .Format }} ",
          "type": "time"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "lightGreen",
          "foreground_templates": [
            "{{ if gt .Code 0 }}red{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "powerline",
          "template": "\u279c ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/xtoys.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#CECE04",
          "style": "plain",
          "template": "# ",
          "type": "root"
        },
        {
          "style": "plain",
          "template": "{{ .UserName }}@{{ .HostName }} ",
          "type": "session"
        },
        {
          "foreground": "#7B68EE",
          "properties": {
            "style": "agnoster_short"
          },
          "style": "plain",
          "template": "{{ .Path }} ",
          "type": "path"
        },
        {
          "foreground": "#48D1CC",
          "properties": {
            "branch_icon": "",
            "fetch_upstream_icon": false
          },
          "style": "plain",
          "template": "HEAD:{{ .UpstreamIcon }}{{ .HEAD }} ",
          "type": "git"
        },
        {
          "foreground": "#7FFFD4",
          "foreground_templates": [
            "{{ if gt .Code 0 }}#E84855{{ end }}"
          ],
          "properties": {
            "always_enabled": true
          },
          "style": "plain",
          "template": "<#66CDAA>\u276f</><#76EEC6>\u276f</><foreground>\u276f</> ",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "version": 3
}



================================================
FILE: themes/ys.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "white",
          "properties": {
            "fetch_version": false
          },
          "style": "plain",
          "template": "({{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }})",
          "type": "python"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "lightBlue",
          "style": "plain",
          "template": "# ",
          "type": "text"
        },
        {
          "foreground": "red",
          "style": "plain",
          "template": " % ",
          "type": "root"
        },
        {
          "style": "plain",
          "template": "<cyan>{{ .UserName }}</> <darkGray>@</> <green>{{ .HostName }}</> ",
          "type": "session"
        },
        {
          "foreground": "lightYellow",
          "properties": {
            "style": "full"
          },
          "style": "plain",
          "template": "<darkGray>in </>{{ .Path }} ",
          "type": "path"
        },
        {
          "style": "plain",
          "template": "<darkGray>on</> <white>git:</><cyan>{{ .HEAD }}</>{{ if .Working.Changed }}<red> x</>{{ end }} ",
          "type": "git",
          "properties": {
            "fetch_status": true
          }
        },
        {
          "foreground": "darkGray",
          "style": "plain",
          "template": "[{{ .CurrentDate | date .Format }}]",
          "type": "time"
        },
        {
          "foreground": "red",
          "style": "plain",
          "template": " C:{{ if gt .Code 0 }}{{ .Code }}{{ end }} ",
          "type": "status"
        }
      ],
      "type": "prompt"
    },
    {
      "alignment": "left",
      "newline": true,
      "segments": [
        {
          "foreground": "lightRed",
          "style": "plain",
          "template": "$",
          "type": "text"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: themes/zash.omp.json
================================================
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "blocks": [
    {
      "alignment": "left",
      "segments": [
        {
          "foreground": "#E36464",
          "style": "plain",
          "template": "@{{ .UserName }} ",
          "type": "session"
        },
        {
          "foreground": "#62ED8B",
          "style": "plain",
          "template": "\u279c",
          "type": "text"
        },
        {
          "foreground": "#56B6C2",
          "properties": {
            "style": "folder"
          },
          "style": "plain",
          "template": " {{ .Path }}",
          "type": "path"
        },
        {
          "foreground": "#D4AAFC",
          "properties": {
            "branch_icon": ""
          },
          "style": "plain",
          "template": " <#DDB15F>git(</>{{ .HEAD }}<#DDB15F>)</>",
          "type": "git"
        },
        {
          "foreground": "#DCB977",
          "style": "plain",
          "template": " \uf119",
          "type": "status"
        }
      ],
      "type": "prompt"
    }
  ],
  "final_space": true,
  "version": 3
}



================================================
FILE: website/README.md
================================================
# Website

This website is built using [Docusaurus](https://docusaurus.io/), a modern static website generator.

## Installation

```shell
$ npm install
```

## Local Development

```shell
$ npm run start
```

This command starts a local development server and open up a browser window.
Most changes are reflected live without having to restart the server.



================================================
FILE: website/docusaurus.config.js
================================================
const path = require('path');

module.exports = {
  title: 'Oh My Posh',
  tagline: 'A prompt theme engine for any shell.',
  url: 'https://ohmyposh.dev',
  baseUrl: '/',
  favicon: 'img/favicons.svg',
  organizationName: 'jandedobbeleer',
  projectName: 'oh-my-posh',
  onBrokenLinks: 'ignore',
  plugins: [
    path.resolve(__dirname, 'plugins', 'appinsights'),
    'docusaurus-node-polyfills'
  ],
  stylesheets: [
    "https://rsms.me/inter/inter.css",
    "https://fonts.googleapis.com/css2?family=Fira+Code&display=swap"
  ],
  themeConfig: {
    colorMode: {
      defaultMode: 'light',
      disableSwitch: false,
      respectPrefersColorScheme: true,
    },
    prism: {
      additionalLanguages: ['powershell', 'lua', 'jsstacktrace', 'toml', 'json', 'yaml'],
    },
    docs: {
        sidebar: {
          hideable: true,
        },
    },
    navbar: {
      title: 'Oh My Posh',
      logo: {
        alt: 'Oh My Posh Logo',
        src: 'img/logo-dark.svg',
        srcDark: 'img/logo-light.svg',
      },
      items: [
        {
          to: 'docs',
          activeBasePath: 'docs',
          label: 'Docs',
          position: 'left',
        },
        {
          to: 'blog',
          label: 'Blog',
          position: 'left'
        },
        {
          href: 'https://github.com/sponsors/JanDeDobbeleer',
          label: 'Sponsor',
          position: 'left',
        },
        {
          href: 'https://polar.sh/oh-my-posh',
          label: 'Buy',
          position: 'left',
        },
        {
          href: 'https://swag.ohmyposh.dev',
          label: 'Swag',
          position: 'left',
        },
        {
          href: 'https://github.com/jandedobbeleer/oh-my-posh',
          className: 'header-github-link',
          'aria-label': 'GitHub repository',
          position: 'right',
        },
        {
          href: 'https://www.warp.dev/oh-my-posh',
          className: 'header-affiliate-link',
          'aria-label': 'Warp',
          position: 'right',
        },
        {
          href: 'https://discord.gg/n7E3DkXssv',
          className: 'header-discord-link',
          'aria-label': 'Discord',
          position: 'right',
        },
        {
          href: 'https://staging.bsky.app/profile/ohmyposh.dev',
          className: 'header-bluesky-link',
          'aria-label': 'Bluesky',
          position: 'right',
        }
      ],
    },
    footer: {
      style: 'dark',
      links: [
        {
          title: 'How to',
          items: [
            {
              label: 'Getting started',
              to: 'docs/',
            },
            {
              label: 'Contributing',
              to: 'docs/contributing/started',
            },
          ],
        },
        {
          title: 'Social',
          items: [
            {
              label: 'GitHub',
              href: 'https://github.com/jandedobbeleer/oh-my-posh',
            },
            {
              label: 'Discord',
              href: 'https://discord.gg/n7E3DkXssv',
            },
            {
              label: 'Bluesky',
              href: 'https://staging.bsky.app/profile/ohmyposh.dev',
            }
          ],
        },
        {
          title: 'Links',
          items: [
            {
              label: 'Sponsor',
              href: 'https://github.com/sponsors/JanDeDobbeleer',
            },
            {
              label: 'Buy',
              href: 'https://polar.sh/oh-my-posh',
            },
            {
              label: 'Warp',
              href: 'https://www.warp.dev/oh-my-posh',
            },
            {
              label: 'Docusaurus',
              href: 'https://github.com/facebook/docusaurus',
            },
            {
              label: 'Privacy',
              href: '/privacy',
            },
          ],
        },
      ],
      copyright: `Copyright © ${new Date().getFullYear()} <a href='https://github.com/sponsors/JanDeDobbeleer' target='_blank'>Jan De Dobbeleer</a> and <a href='/docs/contributors'>contributors</a>.`,
    },
    announcementBar: {
      id: 'support_us',
      content:
        'If you\'re enjoying Oh My Posh, consider becoming a <a target="_blank" rel="noopener noreferrer" href="https://github.com/sponsors/JanDeDobbeleer">sponsor</a> to keep the project going strong 💪',
      backgroundColor: '#2c7ae0',
      textColor: '#ffffff',
      isCloseable: false,
    },
    appInsights: {
      instrumentationKey: '51741aa7-e087-4e80-b7b0-0863d467462a',
    },
    algolia: {
      appId: 'XIR4RB3TM1',
      apiKey: '15c5f4340520612ed98fe21d15882029',
      indexName: 'ohmyposh',
    },
  },
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          sidebarPath: require.resolve('./sidebars.js'),
          editUrl: 'https://github.com/jandedobbeleer/oh-my-posh/edit/main/website/',
        },
        theme: {
          customCss: [
            require.resolve('./src/css/prism-rose-pine-moon.css'),
            require.resolve('./src/css/custom.css')
          ],
        },
        blog: {
          onInlineAuthors: 'ignore'
        },
      },
    ],
  ],
};



================================================
FILE: website/export_themes.js
================================================
//jshint esversion:8
//jshint node:true
const fs = require('fs');
const path = require('path');
const util = require('util');
const exec = util.promisify(require('child_process').exec);

const themesConfigDir = "./../themes";
const themesStaticDir = "./static/img/themes";

function newThemeConfig(author = "", bgColor = "#151515") {
  var config = {
    author: author,
    bgColor: bgColor
  };
  return config;
}

function isValidTheme(theme) {
  return theme.endsWith('.omp.json') || theme.endsWith('.omp.toml') || theme.endsWith('.omp.yaml');
}

async function* asyncPool(concurrency, iterable, iteratorFn) {
  // https://github.com/rxaviers/async-pool/blob/master/lib/es9.js
  const executing = new Set();
  async function consume() {
    const [promise, value] = await Promise.race(executing);
    executing.delete(promise);
    return value;
  }
  for (const item of iterable) {
    // Wrap iteratorFn() in an async fn to ensure we get a promise.
    // Then expose such promise, so it's possible to later reference and
    // remove it from the executing pool.
    const promise = (async () => await iteratorFn(item, iterable))().then(
      value => [promise, value]
    );
    executing.add(promise);
    if (executing.size >= concurrency) {
      yield await consume();
    }
  }
  while (executing.size) {
    yield await consume();
  }
}

let themeConfigOverrrides = new Map();
themeConfigOverrrides.set('amro.omp.json', newThemeConfig('AmRo', '#1C2029'));
themeConfigOverrrides.set('chips.omp.json', newThemeConfig('CodexLink | v1.2.4, Single Width (07/11/2023) | https://github.com/CodexLink/chips.omp.json'));
themeConfigOverrrides.set('craver.omp.json', newThemeConfig('Nick Craver', '#282c34'));
themeConfigOverrrides.set('hunk.omp.json', newThemeConfig('Paris Qian'));
themeConfigOverrrides.set('kushal.omp.json', newThemeConfig('Kushal-Chandar'));
themeConfigOverrrides.set('night-owl.omp.json', newThemeConfig('Mr-Vipi', '#011627'));
themeConfigOverrrides.set('quick-term.omp.json', newThemeConfig('SokLay'))
themeConfigOverrrides.set('catppuccin.omp.json', newThemeConfig('IrwinJuice', '#24273A'));
themeConfigOverrrides.set('catppuccin_latte.omp.json', newThemeConfig('IrwinJuice', '#EFF1F5'));
themeConfigOverrrides.set('catppuccin_frappe.omp.json', newThemeConfig('IrwinJuice', '#303446'));
themeConfigOverrrides.set('catppuccin_macchiato.omp.json', newThemeConfig('IrwinJuice', '#24273A'));
themeConfigOverrrides.set('catppuccin_mocha.omp.json', newThemeConfig('IrwinJuice', '#1E1E2E'));

async function exportTheme(theme) {
  if (!isValidTheme(theme)) {
    return;
  }

  const configPath = path.join(themesConfigDir, theme);

  const config = themeConfigOverrrides.get(theme) || newThemeConfig();

  const themeName = theme.slice(0, -9);
  const image = themeName + '.png';

  let poshCommand = `oh-my-posh config export image --config=${configPath} --output=${image}`;
  poshCommand += ` --background-color=${config.bgColor}`;
  if (config.author !== '') {
    poshCommand += ` --author="${config.author}"`;
  }

  const { _, stderr } = await exec(poshCommand);

  if (stderr !== '') {
    console.error(`Unable to create image for ${theme}, please try manually`);
    return;
  }

  console.info(`Exported ${theme} to ${image}`);

  const toPath = path.join(themesStaticDir, image);

  await fs.promises.rename(image, toPath);

  const themeData = `
### [${themeName}]

[![${themeName}](/img/themes/${themeName}.png)][${themeName}]
`;
  const link = `[${themeName}]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/themes/${theme} '${themeName}'\n`;
  return {themeData, link};
}

(async () => {
  const themes = await fs.promises.readdir(themesConfigDir);
  const links = [];
  for await (const result of asyncPool(8, themes, exportTheme)) {
    if (!result) { // invalid theme or unable to create image
      continue;
    }
    const {themeData, link} = result;
    await fs.promises.appendFile('./docs/themes.md', themeData);
    links.push(link);
  }

  await fs.promises.appendFile('./docs/themes.md', '\n');

  for (const link of links) {
    await fs.promises.appendFile('./docs/themes.md', link);
  }
})();



================================================
FILE: website/package.json
================================================
{
  "name": "website",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "cross-env NODE_ENV=development docusaurus start --poll 1000",
    "build": "docusaurus build",
    "serve": "docusaurus serve",
    "themes": "node export_themes.js",
    "clear": "docusaurus clear"
  },
  "dependencies": {
    "@docusaurus/core": "^3.8.0",
    "@docusaurus/preset-classic": "^3.8.0",
    "@docusaurus/theme-search-algolia": "^3.8.0",
    "@iarna/toml": "^2.2.5",
    "@mdx-js/react": "^3.1.0",
    "classnames": "^2.5.1",
    "query-string": "9.2.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router": "^7.6.1",
    "yaml": "^2.8.0"
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "docusaurus-node-polyfills": "^1.0.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "npm": "10.1.0",
    "node": "20.9.0"
  },
  "volta": {
    "node": "20.9.0"
  }
}



================================================
FILE: website/sidebars.js
================================================
module.exports = {
  docs: [
    {
      type: "category",
      label: "💡 Getting Started",
      collapsed: false,
      items: [
        {
          type: "category",
          label: "🚀 Get started",
          collapsed: false,
          items: [
            {
              type: "category",
              label: "📦 Installation",
              collapsed: false,
              items: [
                "installation/windows",
                "installation/macos",
                "installation/linux",
              ],
            },
            "installation/fonts",
            "installation/prompt",
            "installation/customize",
            "installation/upgrade",
          ],
        },
      ],
    },
    {
      type: "category",
      label: "⚙️ Configuration",
      link: {
        type: 'doc',
        id: 'configuration/introduction',
      },
      items: [
        "configuration/general",
        "configuration/block",
        "configuration/segment",
        "configuration/title",
        "configuration/colors",
        "configuration/templates",
        "configuration/secondary-prompt",
        "configuration/debug-prompt",
        "configuration/transient",
        "configuration/line-error",
        "configuration/tooltips",
        "configuration/sample",
      ],
    },
    {
      type: "category",
      label: "🌟 Segments",
      collapsed: true,
      items: [
        {
          type: "category",
          label: "🧰 CLI",
          collapsed: true,
          items: [
            "segments/cli/angular",
            "segments/cli/argocd",
            "segments/cli/aurelia",
            "segments/cli/bazel",
            "segments/cli/buf",
            "segments/cli/bun",
            "segments/cli/cmake",
            "segments/cli/deno",
            "segments/cli/docker",
            "segments/cli/firebase",
            "segments/cli/flutter",
            "segments/cli/gitversion",
            "segments/cli/helm",
            "segments/cli/kubectl",
            "segments/cli/mvn",
            "segments/cli/nbgv",
            "segments/cli/nix-shell",
            "segments/cli/npm",
            "segments/cli/nx",
            "segments/cli/pnpm",
            "segments/cli/quasar",
            "segments/cli/react",
            "segments/cli/svelte",
            "segments/cli/talosctl",
            "segments/cli/tauri",
            "segments/cli/terraform",
            "segments/cli/ui5tooling",
            "segments/cli/umbraco",
            "segments/cli/unity",
            "segments/cli/xmake",
            "segments/cli/yarn",
          ]
        },
        {
          type: "category",
          label: "☁️ Cloud",
          collapsed: true,
          items: [
            "segments/cloud/aws",
            "segments/cloud/az",
            "segments/cloud/azd",
            "segments/cloud/azfunc",
            "segments/cloud/cds",
            "segments/cloud/cf",
            "segments/cloud/cftarget",
            "segments/cloud/gcp",
            "segments/cloud/pulumi",
            "segments/cloud/sitecore",
          ]
        },
        {
          type: "category",
          label: "🩺 Health",
          collapsed: true,
          items: [
            "segments/health/nightscout",
            "segments/health/strava",
            "segments/health/withings",
          ]
        },
        {
          type: "category",
          label: "✍️ Languages",
          collapsed: true,
          items: [
            "segments/languages/crystal",
            "segments/languages/dart",
            "segments/languages/dotnet",
            "segments/languages/elixir",
            "segments/languages/fortran",
            "segments/languages/golang",
            "segments/languages/haskell",
            "segments/languages/java",
            "segments/languages/julia",
            "segments/languages/kotlin",
            "segments/languages/lua",
            "segments/languages/mojo",
            "segments/languages/nim",
            "segments/languages/node",
            "segments/languages/ocaml",
            "segments/languages/perl",
            "segments/languages/php",
            "segments/languages/python",
            "segments/languages/r",
            "segments/languages/ruby",
            "segments/languages/rust",
            "segments/languages/swift",
            "segments/languages/v",
            "segments/languages/vala",
            "segments/languages/zig",
          ]
        },
        {
          type: "category",
          label: "🎧 Music",
          collapsed: true,
          items: [
            "segments/music/lastfm",
            "segments/music/spotify",
            "segments/music/ytm",
          ]
        },
        {
          type: "category",
          label: "🗂️ Source control",
          collapsed: true,
          items: [
            "segments/scm/fossil",
            "segments/scm/git",
            "segments/scm/jujutsu",
            "segments/scm/mercurial",
            "segments/scm/plastic",
            "segments/scm/sapling",
            "segments/scm/svn",
          ]
        },
        {
          type: "category",
          label: "🖥️ System",
          collapsed: true,
          items: [
            "segments/system/battery",
            "segments/system/command",
            "segments/system/connection",
            "segments/system/executiontime",
            "segments/system/os",
            "segments/system/path",
            "segments/system/project",
            "segments/system/root",
            "segments/system/session",
            "segments/system/shell",
            "segments/system/status",
            "segments/system/sysinfo",
            "segments/system/text",
            "segments/system/time",
            "segments/system/upgrade",
            "segments/system/winreg",
          ]
        },
        {
          type: "category",
          label: "🌐 Web",
          collapsed: true,
          items: [
            "segments/web/brewfather",
            "segments/web/carbonintensity",
            "segments/web/ipify",
            "segments/web/http",
            "segments/web/nba",
            "segments/web/owm",
            "segments/web/wakatime",
          ]
        },
      ],
    },
    {
      type: "category",
      label: "🤝 Contributing",
      collapsed: true,
      items: [
        "contributing/started",
        "contributing/segment",
        "contributing/git",
        "contributing/plastic",
      ],
    },
    "themes",
    "share",
    "faq",
    "migrating",
    "contributors",
  ],
};



================================================
FILE: website/staticwebapp.config.json
================================================
{
  "platform": {
    "apiRuntime": "node:20"
  }
}



================================================
FILE: website/api/host.json
================================================
{
  "version": "2.0",
  "logging": {
    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "excludedTypes": "Request"
      }
    }
  },
  "extensionBundle": {
    "id": "Microsoft.Azure.Functions.ExtensionBundle",
    "version": "[2.*, 3.0.0)"
  }
}



================================================
FILE: website/api/package.json
================================================
{
  "name": "api",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "start": "func start",
    "test": "echo \"No tests yet...\""
  },
  "dependencies": {
    "axios": "^1.7.9"
  }
}



================================================
FILE: website/api/proxies.json
================================================
{
  "$schema": "http://json.schemastore.org/proxies",
  "proxies": {
    "callback": {
      "debug": true,
      "matchCondition": {
        "methods": ["GET", "POST"],
        "route": "/api/auth"
      },
      "backendUri": "https://localhost/api/auth",
      "requestOverrides": {
        "backend.request.querystring.code": "",
        "backend.request.querystring._code": "{request.querystring.code}"
      }
    }
  }
}



================================================
FILE: website/api/.funcignore
================================================
*.js.map
*.ts
.git*
.vscode
local.settings.json
test
tsconfig.json


================================================
FILE: website/api/auth/function.json
================================================
{
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "res"
    }
  ]
}



================================================
FILE: website/api/auth/index.js
================================================
const strava = require('../shared/strava.js');
const withings = require('../shared/withings.js');

module.exports = async function (context, req) {
  context.log('Auth function processed a request');
  // strava example:
  // https://www.strava.com/oauth/authorize?client_id=76033&response_type=code&redirect_uri=https://ohmyposh.dev/api/auth&approval_prompt=force&scope=read,activity:read&state=strava
  const code = (req.query.code || req.query._code || (req.body && req.body.code));
  const segment = (req.query.state || (req.body && req.body.state));
  let tokens = {
    access_token: '',
    refresh_token: '',
    expires_in: '',
  };
  try {
    if (!code || !segment) {
      context.log(`Issue processing request: missing code (${code}) or segment (${segment})`);
      redirect(context, segment, tokens, 'missing code or segment');
      return;
    }

    context.log(`Processing the ${segment} code`);

    switch (segment) {
      case "strava":
        tokens = await strava.getToken(code);
        break;
      case "withings":
        tokens = await withings.getToken(code);
        break;
      default:
        context.log(`Unknown segment: ${segment}`);
        redirect(context, segment, tokens, `Unknown segment: ${segment}`);
        return;
    }

    redirect(context, segment, tokens, '');
  } catch (error) {
    if (!error.stack) {
      redirect(context, segment, tokens, toBase64(error));
      return;
    }
    context.log(`Error: ${error.stack}`);
    redirect(context, segment, tokens, toBase64(error.stack));
  }
}

function toBase64(str) {
  return Buffer.from(str).toString('base64');
}

function redirect(context, segment, tokens, error) {
  const url = `${process.env['DOCS_LOCATION']}/docs/auth?segment=${segment}&access_token=${tokens.access_token}&refresh_token=${tokens.refresh_token}&expires_in=${tokens.expires_in}&error=${error}`;
  context.res = {
    status: 302,
    headers: {
      Location: url
    },
    body: {}
  }
  context.done();
}



================================================
FILE: website/api/refresh/function.json
================================================
{
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "res"
    }
  ]
}



================================================
FILE: website/api/refresh/index.js
================================================
const strava = require('../shared/strava.js');
const withings = require('../shared/withings.js');

module.exports = async function (context, req) {
  context.log('Refresh function processed a request');
  // strava example:
  // https://ohmyposh.dev/api/refresh?segment=strava&token=<refresh_token>

  try {
    const refresh_token = (req.query.token || (req.body && req.body.token));
    const segment = (req.query.segment || (req.body && req.body.segment));
    if (!refresh_token || !segment) {
      context.res = {
        status: 400
      };
      return;
    }

    context.log(`Refreshing the ${segment} token`);
    let body = null;
    switch (segment) {
      case "strava":
        body = await strava.refreshToken(refresh_token);
        break;
      case "withings":
        body = await withings.refreshToken(refresh_token);
        break;
      default:
        context.log(`Unknown segment: ${segment}`);
        context.res = {
          body: "Unknown segment",
          status: 400
        };
        return;
    }

    context.res.json(body);
  } catch (error) {
    context.log(error);
    context.res = {
      body: {
        "message": (error.message) ? error.message : "unable to refresh token"
      },
      status: 500
    };
  }
}



================================================
FILE: website/api/shared/strava.js
================================================
const axios = require('axios');

async function getToken(code) {
  const params = {
    client_id: process.env['STRAVA_CLIENT_ID'],
    client_secret: process.env['STRAVA_CLIENT_SECRET'],
    code: code,
    grant_type: 'authorization_code',
  };
  const resp = await axios.post('https://www.strava.com/api/v3/oauth/token', null, { params: params });

  return {
    access_token: resp.data.access_token,
    refresh_token: resp.data.refresh_token,
    expires_in: resp.data.expires_in
  };
}

async function refreshToken(refresh_token) {
  const params = {
    client_id: process.env['STRAVA_CLIENT_ID'],
    client_secret: process.env['STRAVA_CLIENT_SECRET'],
    refresh_token: refresh_token,
    grant_type: 'refresh_token',
  };
  const resp = await axios.post('https://www.strava.com/api/v3/oauth/token', null, { params: params });

  return {
    access_token: resp.data.access_token,
    refresh_token: resp.data.refresh_token,
    expires_in: resp.data.expires_in
  };
}

module.exports = {
  getToken: getToken,
  refreshToken: refreshToken,
}



================================================
FILE: website/api/shared/withings.js
================================================
const axios = require('axios');

async function getToken(code) {
  const params = {
    client_id: process.env['WITHINGS_CLIENT_ID'],
    client_secret: process.env['WITHINGS_CLIENT_SECRET'],
    code: code,
    grant_type: 'authorization_code',
    action: 'requesttoken',
    redirect_uri: 'https://ohmyposh.dev/api/auth',
  };

  const resp = await axios.post('https://wbsapi.withings.net/v2/oauth2', null, { params: params });

  if (resp.data.error) {
    throw resp.data.error;
  }

  return {
    access_token: resp.data.body.access_token,
    refresh_token: resp.data.body.refresh_token,
    expires_in: resp.data.body.expires_in
  };
}

async function refreshToken(refresh_token) {
  const params = {
    client_id: process.env['WITHINGS_CLIENT_ID'],
    client_secret: process.env['WITHINGS_CLIENT_SECRET'],
    refresh_token: refresh_token,
    grant_type: 'refresh_token',
    action: 'requesttoken',
    redirect_uri: 'https://ohmyposh.dev/api/auth',
  };
  const resp = await axios.post('https://wbsapi.withings.net/v2/oauth2', null, { params: params });

  return {
    access_token: resp.data.body.access_token,
    refresh_token: resp.data.body.refresh_token,
    expires_in: resp.data.body.expires_in
  };
}

module.exports = {
  getToken: getToken,
  refreshToken: refreshToken,
}



================================================
FILE: website/blog/2022-03-20-whats-new-1.mdx
================================================
---
title: "What's new #1"
description: "What's new #1"
slug: whats-new-1
authors:
- name: Jan De Dobbeleer
  title: Maintainer
  url: https://github.com/jandedobbeleer
  image_url: https://avatars.githubusercontent.com/u/2492783?v=4
tags: [weekly, ohmyposh]
hide_table_of_contents: false
---

What a week it’s been! Oh My Posh turned 6 years old and we dropped a ton of stuff!

<!--truncate-->
## Swag

After seeing Scott Hanselman wear his oh my zsh shirt while we got to talk about
Oh My Posh on [Windows Wednesdays] [windows-wednesdays], I got the sudden urge to expand his wardrobe.

<iframe class="youtube" src="https://www.youtube.com/embed/uO_F5W2LbSk" frameborder="0" allowfullscreen></iframe>

And so, we did. Got in touch with [Marc Duiker][marc] and we got to work. The result? A ton of new goodies.
Consider this to be **the first artist series** for Oh My Posh, a way to also highlight some talented
people in the community. All profits go to the development of the project and artists also get a 20% royalty
per item sold. If you know any interesting artists to work with for the next batch, be sure to let me know!

So, what are you waiting for? Get some!

- [Shirts][shirts]
- [Stickers][stickers]

## Features

### CLI interface

Something I've been sleeping on for a long time, Oh My Posh finally has a new CLI interface.
Starting out I had no experience in Go, nor any idea on how to create a proper CLI interface.
Over the years the interface grew, but **_not in a very sustainable way_**, it was a chain of if statements
which was a bit of a pain to support.

You can now interact with Oh My Posh via an interface powered by [Cobra][cobra]. Not only does this
bring maintainability and extensibility, it at once introduces a few added features.

#### Init

If you paid attention to the evolution of the `init` functionality which automatically supercharges
your prompt, you might have noticed I was always trying to make it easier for anyone to get started. When working on the
[shirts][shirts] with Marc, it hit me we didn't really have an identifiable prompt as a first time
experience. So, as of [7.42.0][7.42.0] Oh My Posh can initialize your prompt without specifying the
`--config` flag. Because we have no way to know how you installed Oh My Posh, and if you have themes
installed locally, we download the default theme, cache and use it to get you up and running right there.

When using PowerShell for example, this is all it takes from now on:

```powershell
oh-my-posh init pwsh | Invoke-Expression
```

:::info remote config
In case you missed it, as I haven't really done these updates before, you can also use
a remote config file nowadays. Also **triggered by Scott Hanselman** who uses multiple devices
but still wants the same, seamless experience everywhere. I'm sure he's not alone 😄.
:::

#### Export config

While this functionality was already present, you can now also save the current config to a new
file in the format of your choice. Combining that with the new initialization above, new users can
right away save the default config elsewhere and tweak it to make it their own.

```powershell

oh-my-posh config export --output=~/.mytheme.omp.json

```

#### Edit

Putting things together, all we needed additionally was a way to edit the config.

```powershell

oh-my-posh config edit

```

Almost feels natural right?

### RRRRRRR Matey!

Thanks to [Jed Willick][jed], who's already been on a roll for a while adding segments to Oh My Posh,
we now have a [segment][r-segment] for [R][r] 🏴‍☠️. Read all about it [here][r-segment].

## Bug fixes

Obviously, nothing is perfect. But we aim to be! The following issues have been found and fixed:

- We now display the right distro name in WSL
- The poshgit prompt is now disabled when using Oh My Posh
- Terminal titles are stripped from ANSI escape sequences, otherwise they are not displayed correctly
- The config file now also works with the `.yml` extension and not only `.yaml`

That's it for this week, I'll try to keep this up 🤞🏻.

_Keep that prompt posh everyone! _

[windows-wednesdays]: https://devblogs.microsoft.com/commandline/windows-wednesday/
[marc]: https://twitter.com/marcduiker
[shirts]: https://swag.ohmyposh.dev
[stickers]: https://pimpyourowndevice.com/community/
[cobra]: https://github.com/spf13/cobra
[7.42.0]: https://github.com/JanDeDobbeleer/oh-my-posh/releases/tag/v7.42.0
[jed]: https://github.com/jedwillick
[r-segment]: https://ohmyposh.dev/docs/r
[r]: https://www.r-project.org/about.html



================================================
FILE: website/blog/2022-03-27-whats-new-2.mdx
================================================
---
title: "What's new #2"
description: "What's new #2"
slug: whats-new-2
authors:
- name: Jan De Dobbeleer
  title: Maintainer
  url: https://github.com/jandedobbeleer
  image_url: https://avatars.githubusercontent.com/u/2492783?v=4
tags: [weekly, ohmyposh]
hide_table_of_contents: false
---

Wouldn't have imagined doing part two in a week's time, but here we are again!

<!--truncate-->
## Features

### CLI interface (also #2)

In the [previous post][blog-1] I highlighted some changes in the CLI interface. Turns out I could make it
even more straightfoward. As Oh My Posh is a prompt generating utility, the `prompt` command
doesn't make sense as that's implied. It has been removed, although it **will keep working** to
not break existing functionality on upgrade.

#### Init

The following initialization:

```powershell
oh-my-posh prompt init pwsh | Invoke-Expression
```

now becomes:

```powershell
oh-my-posh init pwsh | Invoke-Expression
```

#### Debug

To debug Oh My Posh, you can simply use the `debug` command. It's smart enough to know your config
so you don't have to specify the `--config` option.

```powershell
oh-my-posh debug
```

### Fish shell

We already supported [fish shell][fish] for a while, but we stepped up the game. I started using fish
as my primary shell, so obviously it couldn't stay behind. I suggest you also have
a go at it, it's a very enjoyable experience.

But OK, what changed? We now support the following out-of-the-box:

- [right prompt][right]
- [transient prompt][transient]
- [tooltips][tooltips]

It seems there's **_no support (yet) for a secondary prompt in fish_**, once that's available we can easily add that too.
To enjoy all of this, upgrade to the latest and initialize fish by adding the following line to `~/.config/fish/config.fish`:

```bash
oh-my-posh init fish | source
```

### Transient prompt

Speaking of [transient][transient], it learned some new tricks. First, you can now use the `.Code` property to work with the last
command's error code (if any) in the template. This can for example be used to color the transient prompt
differently when the last command failed. That did imply we also needed support for color [templates][color-templates], as that
wasn't possible just yet. Say no more, we now have a [transient prompt][transient] that supports color templates.

```json
"transient_prompt": {
    "background": "p:yellow",
    "background_templates": [
      "{{ if gt .Code 0 }}p:red{{ end }}"
    ],
    "foreground": "p:black",
    "foreground_templates": [
      "{{ if gt .Code 0 }}p:white{{ end }}"
    ],
    "template": "<background,transparent>\ue0b6</> {{ .Folder }} <background,transparent>\ue0b0</><,transparent> </>"
}
```

Which produces the following result:

![Terminal](../static/img/transient-color.png)

### Config version 2

Remember we did a migration to config version 1 in the beginning of the year? Well, we did a migration to version 2.
Looking at Oh My Posh's architecture, the different prompts (transient, secondary, ...) were moving closer to the model used
by segments. The only difference was that `template` wasn't a property, but a field of those prompts. As **all segments
now have template support**, it was a no-brainer to align both models and do a migration to config version 2 so nobody
would have any manual work in the process.

The following segment definition:

```json
{
  "background": "#9A348E",
  "foreground": "#ffffff",
  "leading_diamond": "\ue0b6",
  "properties": {
    "template": "{{ .UserName }} "
  },
  "style": "diamond",
  "type": "session"
}
```

Will now be migrated to this for version 2:

```json
{
  "background": "#9A348E",
  "foreground": "#ffffff",
  "leading_diamond": "\ue0b6",
  "style": "diamond",
  "template": "{{ .UserName }} ",
  "type": "session"
}
```

## Go 1.18

Not something that impacts the end user directly, but maybe interesting to know is that Oh My Posh is now
using [go 1.18][go1.18] by default. This brings obvious language improvements and a few new features we can play with.
The most notable is generics, but it doesn't seem like we can benefit just yet as it's not yet supported
for methods, and that's the main use-case for us.

Nontheless, it's good to stay up-to-date, if you notice any quirks though, be sure to let us know!

That's it for this week, see you for the next one 🤞🏻

_Keep that prompt posh everyone! _

[blog-1]: /blog/whats-new-1
[fish]: https://fishshell.com/
[right]: /docs/configuration/block#type
[transient]: /docs/configuration/transient
[tooltips]: /docs/configuration/tooltips
[color-templates]: /docs/configuration/colors#color-templates
[go1.18]: https://tip.golang.org/doc/go1.18



================================================
FILE: website/blog/2022-03-28-idiots-everywhere.md
================================================
---
title: "What idiot wrote this code?"
description: "It was me..."
slug: idiots-everywhere
authors:
- name: Jan De Dobbeleer
  title: Maintainer
  url: https://github.com/jandedobbeleer
  image_url: https://avatars.githubusercontent.com/u/2492783?v=4
tags: [weekly, ohmyposh]
hide_table_of_contents: false
---

It finally happened, **I introduced a bug** that only appears in 1 use case and it can’t be resolved as it’s the result of
using an old and new version of Oh My Posh at the same time. Who does that you might ask? Well, it can be because you’re
using WSL on Windows, or VM’s on any system while sharing the same configuration cross installation.
Not the main use-case, but also not exotic either.

<!-- truncate -->

## What happened?

In the beginning of the year, after what has been quite the struggle, I was finally able to deliver **the most important
architectural update** since the introduction of the rewrite in Go. Because of this, a migration of old configs was needed
so that no end user would have to go through the ordeal of figuring out what to map where, it's a very logical process
and obviously computers are better at that.

To facilitate this, I added a config property called `version` which can be incremented when the configuration evolves
and triggers an automatic migration when necessary. The logic to identify the need for migration is as follows:

```go
if !env.Flags().Migrate && cfg.Version != configVersion {
    cfg.BackupAndMigrate(env)
}
```

If you're observant, you might already spot the issue now that you know the use-case. For those of us who like to read
and not think, the result is rather straightforward as it will always run the migration, either when forced (because you
can use `oh-my-posh config migrate` manually), or when the current config version doesn't match the required config
version. _Simple, right?_ And this works according to expectations when updating Oh My Posh. The problem starts when you
have a shared config, and use multiple versions of Oh My Posh on the same machine.

Imagine working using multiple shells, one is WSL Ubuntu with a version of Oh My Posh that's still on version 1
(**S1**). One day, you update PowerShell in Windows to use the latest greatest, using version 2 (**S2**). Starting S2,
**it automatically migrates the config to version 2**, moving the `template` property to the segment's model.

In practice, the following version 1 config:

```json
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "version": 1,
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "background": "#9A348E",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "properties": {
            // highlight-next-line
            "template": "{{ .UserName }} "
          },
          "style": "diamond",
          "type": "session"
        }
      ]
    }
  ]
}
```

Is migrated to:

```json
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "version": 2,
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "background": "#9A348E",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          // highlight-next-line
          "template": "{{ .UserName }} ",
          "style": "diamond",
          "type": "session"
        }
      ]
    }
  ]
}
```

Awesome, no user interaction at all and _everything works as designed_. However, you now want to do something using S1, and
due to the logic, Oh My Posh sees that `2 != 1` and **the migration is triggered for version 1**. The migration as such
is non-breaking, but Oh My Posh doesn't know the `template` property on `segment` in this case. The end result of our
config above is rather annoying as we're now left with this:

```json
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "version": 1,
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "background": "#9A348E",
          "foreground": "#ffffff",
          "leading_diamond": "\ue0b6",
          "style": "diamond",
          "type": "session"
        }
      ]
    }
  ]
}
```

😱 the template is gone! Nothing to worry about just yet, Oh My Posh will use the default template so you will still see
a prompt, and the migration also _creates a backup_ of your previously correct version 2 config. Up to this point you
can still revert, it's unfortunate, but your local tweaks are still available. If you happen to continue working in S2 at
this point however, it will once again trigger the migration to version 2 and **overwrite your backup with the faulty
version 1 config**.

While the fix for this issue in code is trivial, it's impossible to push that to older versions. People will upgrade
to the most recent version, and in this specific setup, this is potentially breaking. **The advice is to upgrade all versions
at once**, so you only migrate once and there's no "old" version of Oh My Posh left to trigger this unwanted side-effect.

The actual fix for the issue can be found in [7.52.1][fix-version], but due to obvious reasons, it will only work
going from version 2 to any new config version in the future.

```go
if !env.Flags().Migrate && cfg.Version < configVersion {
    cfg.BackupAndMigrate(env)
}
```

While I try hard to come up with every possible edge case when validating this logic, sometimes things slip through.
Even when looking at this one **I find it challenging not having considered that case**, but it still happened. The
good news? It won't happen again 😅

[fix-version]: https://github.com/JanDeDobbeleer/oh-my-posh/releases/tag/v7.52.1



================================================
FILE: website/blog/2022-05-19-whats-new-3.mdx
================================================
---
title: "What's new #3"
description: "What's new #3"
slug: whats-new-3
authors:
- name: Jan De Dobbeleer
  title: Maintainer
  url: https://github.com/jandedobbeleer
  image_url: https://avatars.githubusercontent.com/u/2492783?v=4
tags: [weekly, ohmyposh]
hide_table_of_contents: false
---

So long, old friend!

<!--truncate-->
## PowerShell module

In the beginning, all we had was the [PowerShell Module][module]. It's the _origin of Oh My Posh_
and has remained available ever since, even with the move to Go. With that evolution however,
its advantages have been greatly reduced. In fact, it even introduced [additional hurdles][hurdles] along
the way.

As of March, the module no longer offers new functionality and displays a warning message. Have a look
at the [migration page][migration] for a guide on how to migrate from the module to other means of
installation. It only takes a minute.

## Giveaway

A fews weeks ago I started a [giveaway][giveaway] to celebrate the 6 year anniversary of Oh My Posh.
But then I went on holiday, and didn't follow up to announce the winner. So without further ado,
**congratulations to [@samerde][samerde]** for getting picked by a random online random picker and
winning the giveaway!

## Features

It's been a while, so you might want to hang tight 😅

### PowerShell UTF-8

In the early days, Oh My Posh was forcibly setting PowerShell to UTF-8 due to issues with fonts and paths.
However, it turned out that wasn't really necessary. A new way of invocation was introduced, which removes
the need to set this shell wide and **avoids unwanted side effects**. This can however still break path when
for example your `--config` path contains a non-ascii character. Can't win them all I guess. In that case,
set the shell to UTF-8 in the scope of initializing Oh My Posh.

```powershell
$previousOutputEncoding = [Console]::OutputEncoding
[Console]::OutputEncoding = [Text.Encoding]::UTF8
try {
    oh-my-posh init pwsh --config ~/custom.omp.json | Invoke-Expression
} finally {
    [Console]::OutputEncoding = $previousOutputEncoding
}
```

### Nu shell

If you haven't seen [Nu shell][nu] yet, it's a new kid on the block. Oh My Posh now supports it just
like we support any other popular shell (bash, zsh, fish, etc). This means we can keep adding functionality
without the need for user interaction apart from updating Oh My Posh.

### Accordion

Ever wanted to have a `powerline` segment to display collapsed when disabled? Now you can!
Use the `accordion` style to display a segment in a collapsible state.

![Accordion prompt](/img/accordeon.png)

### Project

Things just keep growing. The [project][project] segment now supports the following project definitions:

- [cargo][cargo]
- [poetry][poetry]
- [php][php]
- [nuspec][nuspec]

### Shell

If you work with multiple shell versions, this one's for you. You can now use the `.Version` property
in the [shell][shell] segment to distinct between versions:

```json
"template": " in {{ .Name }} {{ .Version }} "
```

### Git

The [git][git] segment learned a new trick to make your life easier (or faster). Before we hardcoded the
untracked files mode to `normal`. However, on larger repo's this can get rather cumbersome, so we now allow
you to **override this per repo**.

```json
"untracked_modes": {
  "/Users/user/Projects/oh-my-posh/": "no"
}
```

The available options are listed in the [git documentation][git-status], use them as you see fit!

### Cross segment template properties

Wait, what? Yes, you read that right. Oh My Posh now supports **cross segment template properties**.
This means you can use one segment's properties in another segment's template. How? Oh My Posh
exposes the `.Segments` property which contains all segment's properties in a map. To make use
of another segment's data, use `{{ .Segments.Segment }}` in your template where `.Segment`
is the name of the segment you want to use with the first letter uppercased.

If you want to for example use the [git][git] segment's `.UpstreamGone` property in the [exit][exit] segment, you can
do so like this:

```json
"template": " {{ if .Segments.Git.UpstreamGone }}\uf7d3{{ else if gt .Code 0 }}\uf00d{{ else }}\uf00c{{ end }} "
```

:::caution
For this to work, the segment you refer to needs to be in your config. The above example won't work if
your config does not contain a git segment as Oh My Posh only populates the properties when it needs to.
:::

### Other

- `oh-my-posh debug` now measures the run time correctly and can log startup logic
- The language segments can now distinct between files and folders
- The [python][python] segment now supports pyenv `.python-version` files
- The `init` command has a new switch called `--strict` which no longer resolves the executable
- The [battery][battery] segment can now display all relevant states on macOS
- The [dotnet][dotnet] segment now supports `.slnf` files
- A [new][iterm] segment to display iTerm shell integration prompt marks
- The [memory][memory] segment can now display available memory
- The [path][path] segment now has a `.Writable` property, indicating if the current user
can write to the current folder

### Fixes

- The [git][git] segment can now handle repo's with `--separate-git-dir`
- Hyperlinks are correctly measured (which should display the right aligned prompt correctly)
- Prompt escape sequences are correctly escaped, this avoids unwanted visual side effects
- Spotify now works correctly on Windows for non-English systems
- Parallel logic to make things fast no longer randomly crashes on Windows
- Upstream gone logic for git was broken, and has been fixed
- PSReadLine in PowerShell now receives the correct amount of prompt lines (`Set-PSReadlineOption -ExtraPromptLineCount`),
this fixes weird behaviour when using a transient prompt when your config results in a multiline prompt
- The [winget][winget] installer now adds `PATH` entries correctly, regardless of the installation mode

That's it for this time, see you for the next one 🤞🏻

Keep that prompt posh everyone!


[module]: https://www.powershellgallery.com/packages/oh-my-posh/7.85.2
[hurdles]: /docs/migrating#problem-statement
[migration]: /docs/migrating
[giveaway]: https://twitter.com/jandedobbeleer/status/1511031115569639428?s=20&t=5aZbBZxGXbCBmc-R4WAdIQ
[samerde]: https://twitter.com/samerde
[project]: /docs/segments/system/project
[git]: /docs/segments/scm/git
[python]: /docs/segments/languages/python
[shell]: /docs/segments/system/shell
[nu]: https://www.nushell.sh
[git-status]: https://git-scm.com/docs/git-status#Documentation/git-status.txt--ultmodegt
[cargo]: https://crates.io
[poetry]: https://python-poetry.org
[php]: https://getcomposer.org
[nuspec]: https://docs.microsoft.com/en-us/nuget/reference/nuspec
[battery]: /docs/segments/system/battery
[winget]: https://docs.microsoft.com/en-us/windows/package-manager/winget/
[dotnet]: /docs/segments/languages/dotnet
[iterm]: /docs/segments/system/iterm
[memory]: /docs/segments/system/memory
[exit]: /docs/segments/system/status
[path]: /docs/segments/system/path



================================================
FILE: website/blog/2024-07-22-bash-rprompt.mdx
================================================
---
title: "Deprecating the bash rprompt"
description: "Deprecating the bash rprompt"
slug: deprecating-bash-rprompt
authors:
- name: Jan De Dobbeleer
  title: Maintainer
  url: https://github.com/jandedobbeleer
  image_url: https://avatars.githubusercontent.com/u/2492783?v=4
tags: [breaking, ohmyposh]
hide_table_of_contents: false
---

After careful consideration, it was decided to remove support for the [`rprompt`][rprompt] in bash. If you are
interested in the reasons behind this decision, please read on.

<!--truncate-->
## Context

[`rprompt`][rprompt] is a feature that allows you to display a prompt at the right side of the terminal, on
the same line as your cursor. This feature is available natively on a lot of shells, but not on bash.
To work around this limitation, Oh My Posh has a **custom implementation** we use for both bash and PowerShell.

## History

### First implementation

There were two evolutions of bash' custom [`rprompt`][rprompt] in Oh My Posh. The first one printed the [`rprompt`][rprompt]
together with the primany prompt in the `PS1` variable, so we only need one CLI call to visualize the prompt.

The challenge is that, as the [`rprompt`][rprompt] is printed together with the primary prompt, we need to make sure
bash' readline can interprete the prompt correctly. In bash, every character that isn't a printable character,
like color codes, needs to be wrapped in `\[` and `\]`. This is necessary to make sure bash can **calculate the length**
of the prompt and ultimately **position the cursor** correctly.

It turned out that for [`rprompt`][rprompt], this _needed to be done differently_. The [`rprompt`][rprompt] is printed after what
bash interpretes as the end of the prompt. We found out that we need to wrap the entire [`rprompt`][rprompt] in `\[` and `\]`,
and not escape individual non-printable characters.

We did that for a while, but apparently this approach was **not very robust**. It was easy to break readline's
cursor position calculation, and it was hard to debug. The behaviour of this was also different cross platform,
so we had to go back to the drawing board.

### Second implementation

The second implementation of the [`rprompt`][rprompt] was a lot more robust. We decided to print the [`rprompt`][rprompt] in a separate
CLI call, so we could control the output more easily. It leveraged the use of the `PROMPT_COMMAND` variable in bash, which
is a hook that is executed before the prompt is printed. We would first print the [`rprompt`][rprompt] in the `PROMPT_COMMAND`,
and then set the primary prompt in the `PS1` variable so bash would not bother about the [`rprompt`][rprompt] being there.

This approach was a lot **cleaner from an achitectural point of view**, but it came with its own challenges.
The most obvious one is needing two CLI calls to print the prompt, which made rendering a bit slower than the first implementation.

Additionally, as we print before `PS1` is evaluated, we noticed the following issues along the way:

1. when the output of the previous command didn't end with a newline, the [`rprompt`][rprompt] would be printed on the same line
  as the output of the previous command
2. when the prompt was at the bottom of the terminal buffer, the [`rprompt`][rprompt] would be printed on the same line as the
  prompt, which would break the prompt
3. depending on the platform, it would still break command history navigation
4. it required different logic for multiline prompts as we print before `PS1` and need to reposition the cursor correctly

Of these issues, **only bullet 4 could be fixed**. Everything else was outside of our control.

## Conclusion

Oh My Posh is a tool that needs to be easy to use, maintain and be 100% reliable. One of the core principles of Oh My Posh is that it should
**never break the shell**. The [`rprompt`][rprompt] feature in bash has never been reliable enough, and it was _hard to debug_ when it broke.
I spent countless hours debugging issues with the [`rprompt`][rprompt] in bash, but it's **time to move on**. If you
want to use the [`rprompt`][rprompt] feature, I would recommend using a shell that supports it natively, like [nushell], [zsh] or [fish].

## What about Powershell?

The [`rprompt`][rprompt] feature in PowerShell is **100% reliable**, even if it's not natively supported. PowerShell doesn't
have the same challenges calculating the actual prompt width like bash, there's _no need to escape anything_.
We can use the first implementation mentioned above, and it works like a charm.

[rprompt]: /docs/configuration/block#type
[nushell]: https://www.nushell.sh/
[zsh]: https://www.zsh.org/
[fish]: https://fishshell.com/



================================================
FILE: website/docs/auth.mdx
================================================
---
id: auth
title: Segment Authentication
sidebar_label: Authentication
---

import CodeBlock from '@site/src/components/Auth.js';

<CodeBlock/>



================================================
FILE: website/docs/contributors.md
================================================
---
id: contributors
title: Contributors
sidebar_label: 🙏 Contributors
---

Thanks goes to these wonderful people ([emoji key][acek]):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/lnu"><img src="https://avatars.githubusercontent.com/u/1829553?v=4?s=100" width="100px;" alt="Laurent Nullens"/><br /><sub><b>Laurent Nullens</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lnu" title="Code">💻</a> <a href="#design-lnu" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lnu" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/TravisTX"><img src="https://avatars.githubusercontent.com/u/934490?v=4?s=100" width="100px;" alt="Travis Collins"/><br /><sub><b>Travis Collins</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=TravisTX" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jos3s"><img src="https://avatars.githubusercontent.com/u/50359547?v=4?s=100" width="100px;" alt="José Ulisses"/><br /><sub><b>José Ulisses</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jos3s" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/nwykes"><img src="https://avatars.githubusercontent.com/u/593993?v=4?s=100" width="100px;" alt="Nathan Wykes"/><br /><sub><b>Nathan Wykes</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=nwykes" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.paraesthesia.com/"><img src="https://avatars.githubusercontent.com/u/1156571?v=4?s=100" width="100px;" alt="Travis Illig"/><br /><sub><b>Travis Illig</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=tillig" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.evilznet.com/"><img src="https://avatars.githubusercontent.com/u/2937862?v=4?s=100" width="100px;" alt="Vincent B."/><br /><sub><b>Vincent B.</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=evilz" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://erclu.github.io/cv/"><img src="https://avatars.githubusercontent.com/u/30255227?v=4?s=100" width="100px;" alt="Luca Ercole"/><br /><sub><b>Luca Ercole</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=erclu" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://larsbauer.xyz/"><img src="https://avatars.githubusercontent.com/u/3920045?v=4?s=100" width="100px;" alt="Lars Bauer"/><br /><sub><b>Lars Bauer</b></sub></a><br /><a href="#design-LarsBauer" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/RobCannon"><img src="https://avatars.githubusercontent.com/u/189862?v=4?s=100" width="100px;" alt="Rob Cannon"/><br /><sub><b>Rob Cannon</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=RobCannon" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Vixb1122"><img src="https://avatars.githubusercontent.com/u/17810492?v=4?s=100" width="100px;" alt="Vixb"/><br /><sub><b>Vixb</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Vixb1122" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/zeyugao"><img src="https://avatars.githubusercontent.com/u/6374697?v=4?s=100" width="100px;" alt="Elsa Granger"/><br /><sub><b>Elsa Granger</b></sub></a><br /><a href="#design-zeyugao" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/softweaprograma"><img src="https://avatars.githubusercontent.com/u/35231092?v=4?s=100" width="100px;" alt="Anthony G"/><br /><sub><b>Anthony G</b></sub></a><br /><a href="#design-softweaprograma" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/gitolicious"><img src="https://avatars.githubusercontent.com/u/26963495?v=4?s=100" width="100px;" alt="gitolicious"/><br /><sub><b>gitolicious</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=gitolicious" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://alzhanov.ru/"><img src="https://avatars.githubusercontent.com/u/8657078?v=4?s=100" width="100px;" alt="Maxim"/><br /><sub><b>Maxim</b></sub></a><br /><a href="#design-irdkwmnsb" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/PIYUSH194"><img src="https://avatars.githubusercontent.com/u/2896456?v=4?s=100" width="100px;" alt="PIYUSH194"/><br /><sub><b>PIYUSH194</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=PIYUSH194" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/97krihop"><img src="https://avatars.githubusercontent.com/u/24739853?v=4?s=100" width="100px;" alt="97krihop"/><br /><sub><b>97krihop</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=97krihop" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/stefanes"><img src="https://avatars.githubusercontent.com/u/5484354?v=4?s=100" width="100px;" alt="Stefan"/><br /><sub><b>Stefan</b></sub></a><br /><a href="#design-stefanes" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=stefanes" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/moritz-meier"><img src="https://avatars.githubusercontent.com/u/60762067?v=4?s=100" width="100px;" alt="Moritz Meier"/><br /><sub><b>Moritz Meier</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=moritz-meier" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jetersen"><img src="https://avatars.githubusercontent.com/u/1661688?v=4?s=100" width="100px;" alt="Joseph Petersen"/><br /><sub><b>Joseph Petersen</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jetersen" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Goliaita"><img src="https://avatars.githubusercontent.com/u/11245411?v=4?s=100" width="100px;" alt="Davide Basile"/><br /><sub><b>Davide Basile</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Goliaita" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://youngbin.xyz/"><img src="https://avatars.githubusercontent.com/u/1916739?v=4?s=100" width="100px;" alt="Youngbin Han"/><br /><sub><b>Youngbin Han</b></sub></a><br /><a href="#design-sukso96100" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://mateusnssp.github.io/mateusnssp/"><img src="https://avatars.githubusercontent.com/u/69170710?v=4?s=100" width="100px;" alt="Mateus Nunes"/><br /><sub><b>Mateus Nunes</b></sub></a><br /><a href="#design-mateusnssn" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://pixelrobots.co.uk/"><img src="https://avatars.githubusercontent.com/u/22979170?v=4?s=100" width="100px;" alt="PixelRobots"/><br /><sub><b>PixelRobots</b></sub></a><br /><a href="#design-PixelRobots" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/RishabhSood"><img src="https://avatars.githubusercontent.com/u/55499929?v=4?s=100" width="100px;" alt="RishabhSood"/><br /><sub><b>RishabhSood</b></sub></a><br /><a href="#design-RishabhSood" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/SagarYadav17"><img src="https://avatars.githubusercontent.com/u/47110215?v=4?s=100" width="100px;" alt="Sagar Yadav"/><br /><sub><b>Sagar Yadav</b></sub></a><br /><a href="#design-SagarYadav17" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/WolfspiritM"><img src="https://avatars.githubusercontent.com/u/5904171?v=4?s=100" width="100px;" alt="Adrian"/><br /><sub><b>Adrian</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=WolfspiritM" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/MJECloud"><img src="https://avatars.githubusercontent.com/u/22131101?v=4?s=100" width="100px;" alt="Maurice"/><br /><sub><b>Maurice</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=MJECloud" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/samuelfahrngruber"><img src="https://avatars.githubusercontent.com/u/35682879?v=4?s=100" width="100px;" alt="samuelfahrngruber"/><br /><sub><b>samuelfahrngruber</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=samuelfahrngruber" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/zilmarr"><img src="https://avatars.githubusercontent.com/u/5557367?v=4?s=100" width="100px;" alt="Zilmar de Souza Junior"/><br /><sub><b>Zilmar de Souza Junior</b></sub></a><br /><a href="#design-zilmarr" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/AsafMah"><img src="https://avatars.githubusercontent.com/u/6424271?v=4?s=100" width="100px;" alt="AsafMah"/><br /><sub><b>AsafMah</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AsafMah" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/cinnamon-msft"><img src="https://avatars.githubusercontent.com/u/48369326?v=4?s=100" width="100px;" alt="Kayla Cinnamon"/><br /><sub><b>Kayla Cinnamon</b></sub></a><br /><a href="#design-cinnamon-msft" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/cbargren"><img src="https://avatars.githubusercontent.com/u/1050712?v=4?s=100" width="100px;" alt="Chris Bargren"/><br /><sub><b>Chris Bargren</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=cbargren" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://tonybaloney.github.io/"><img src="https://avatars.githubusercontent.com/u/1532417?v=4?s=100" width="100px;" alt="Anthony Shaw"/><br /><sub><b>Anthony Shaw</b></sub></a><br /><a href="#design-tonybaloney" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mifieldxu"><img src="https://avatars.githubusercontent.com/u/5520179?v=4?s=100" width="100px;" alt="Mifield"/><br /><sub><b>Mifield</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mifieldxu" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/benallred"><img src="https://avatars.githubusercontent.com/u/3902274?v=4?s=100" width="100px;" alt="Ben Allred"/><br /><sub><b>Ben Allred</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=benallred" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://riazxrazor.herokuapp.com/"><img src="https://avatars.githubusercontent.com/u/13194363?v=4?s=100" width="100px;" alt="Riaz Laskar"/><br /><sub><b>Riaz Laskar</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=riazXrazor" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Don-Vito"><img src="https://avatars.githubusercontent.com/u/4639110?v=4?s=100" width="100px;" alt="Don-Vito"/><br /><sub><b>Don-Vito</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Don-Vito" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/FabianEscarate"><img src="https://avatars.githubusercontent.com/u/19978896?v=4?s=100" width="100px;" alt="Fabian Roberto Escarate"/><br /><sub><b>Fabian Roberto Escarate</b></sub></a><br /><a href="#design-FabianEscarate" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/xt0rted"><img src="https://avatars.githubusercontent.com/u/831974?v=4?s=100" width="100px;" alt="Brian Surowiec"/><br /><sub><b>Brian Surowiec</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=xt0rted" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://twitter.com/OJullien"><img src="https://avatars.githubusercontent.com/u/3778194?v=4?s=100" width="100px;" alt="Olivier Jullien"/><br /><sub><b>Olivier Jullien</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ojullien" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/cdonnellytx"><img src="https://avatars.githubusercontent.com/u/183046?v=4?s=100" width="100px;" alt="Chris Donnelly"/><br /><sub><b>Chris Donnelly</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=cdonnellytx" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/KyleCrowley"><img src="https://avatars.githubusercontent.com/u/6757487?v=4?s=100" width="100px;" alt="Kyle Crowley"/><br /><sub><b>Kyle Crowley</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=KyleCrowley" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/gitolicious"><img src="https://avatars.githubusercontent.com/u/26963495?v=4?s=100" width="100px;" alt="gitolicious"/><br /><sub><b>gitolicious</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=gitolicious" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jeroen7s"><img src="https://avatars.githubusercontent.com/u/10954827?v=4?s=100" width="100px;" alt="Jeroen Evens"/><br /><sub><b>Jeroen Evens</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jeroen7s" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/equinox"><img src="https://avatars.githubusercontent.com/u/6139999?v=4?s=100" width="100px;" alt="equinox"/><br /><sub><b>equinox</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=equinox" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/DamianoPellegrini"><img src="https://avatars.githubusercontent.com/u/41305552?v=4?s=100" width="100px;" alt="Damiano Pellegrini"/><br /><sub><b>Damiano Pellegrini</b></sub></a><br /><a href="#design-DamianoPellegrini" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://timokrates.de/"><img src="https://avatars.githubusercontent.com/u/36821505?v=4?s=100" width="100px;" alt="Timon Schelling"/><br /><sub><b>Timon Schelling</b></sub></a><br /><a href="#design-timon-schelling" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/zeyugao"><img src="https://avatars.githubusercontent.com/u/6374697?v=4?s=100" width="100px;" alt="Elsa Granger"/><br /><sub><b>Elsa Granger</b></sub></a><br /><a href="#design-zeyugao" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://daksh.eu.org/"><img src="https://avatars.githubusercontent.com/u/43648146?v=4?s=100" width="100px;" alt="Daksh P. Jain"/><br /><sub><b>Daksh P. Jain</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Daksh777" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://bit-shift.com/"><img src="https://avatars.githubusercontent.com/u/19351?v=4?s=100" width="100px;" alt="Willie Zutz"/><br /><sub><b>Willie Zutz</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=boarder2" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/uruz-7"><img src="https://avatars.githubusercontent.com/u/15071454?v=4?s=100" width="100px;" alt="uruz-7"/><br /><sub><b>uruz-7</b></sub></a><br /><a href="#design-uruz-7" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/beppler"><img src="https://avatars.githubusercontent.com/u/66092?v=4?s=100" width="100px;" alt="Carlos Alberto Costa Beppler"/><br /><sub><b>Carlos Alberto Costa Beppler</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=beppler" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/sky96111"><img src="https://avatars.githubusercontent.com/u/22412214?v=4?s=100" width="100px;" alt="sky96111"/><br /><sub><b>sky96111</b></sub></a><br /><a href="#design-sky96111" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://j.tlns.be/"><img src="https://avatars.githubusercontent.com/u/9884103?v=4?s=100" width="100px;" alt="Jan Tielens"/><br /><sub><b>Jan Tielens</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jantielens" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/shedric1"><img src="https://avatars.githubusercontent.com/u/56672838?v=4?s=100" width="100px;" alt="shedric1"/><br /><sub><b>shedric1</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=shedric1" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/sectorogo"><img src="https://avatars.githubusercontent.com/u/32959212?v=4?s=100" width="100px;" alt="sectorogo"/><br /><sub><b>sectorogo</b></sub></a><br /><a href="#design-sectorogo" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/phil-scott-78"><img src="https://avatars.githubusercontent.com/u/2447331?v=4?s=100" width="100px;" alt="Phil Scott"/><br /><sub><b>Phil Scott</b></sub></a><br /><a href="#design-phil-scott-78" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://suuu.us/"><img src="https://avatars.githubusercontent.com/u/40822355?v=4?s=100" width="100px;" alt="Suus"/><br /><sub><b>Suus</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=suuus" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://wopian.me/"><img src="https://avatars.githubusercontent.com/u/3440094?v=4?s=100" width="100px;" alt="James Harris"/><br /><sub><b>James Harris</b></sub></a><br /><a href="#design-wopian" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mdlopresti"><img src="https://avatars.githubusercontent.com/u/1293090?v=4?s=100" width="100px;" alt="Michael LoPresti"/><br /><sub><b>Michael LoPresti</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mdlopresti" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/floh96"><img src="https://avatars.githubusercontent.com/u/49693964?v=4?s=100" width="100px;" alt="Florian Heberl"/><br /><sub><b>Florian Heberl</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=floh96" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://tobiashoelzer.dynu.net"><img src="https://avatars.githubusercontent.com/u/37540371?v=4?s=100" width="100px;" alt="Tobias Hölzer"/><br /><sub><b>Tobias Hölzer</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=relativityhd" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=relativityhd" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://h4iku.github.io"><img src="https://avatars.githubusercontent.com/u/3812788?v=4?s=100" width="100px;" alt="Reza Gharibi"/><br /><sub><b>Reza Gharibi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=h4iku" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://justingrote.github.io"><img src="https://avatars.githubusercontent.com/u/15258962?v=4?s=100" width="100px;" alt="Justin Grote"/><br /><sub><b>Justin Grote</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=JustinGrote" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/henry-js"><img src="https://avatars.githubusercontent.com/u/79054685?v=4?s=100" width="100px;" alt="James"/><br /><sub><b>James</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=henry-js" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://wittig.dev"><img src="https://avatars.githubusercontent.com/u/1031515?v=4?s=100" width="100px;" alt="Timothy Wittig"/><br /><sub><b>Timothy Wittig</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=iarejenius" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Descalon"><img src="https://avatars.githubusercontent.com/u/1098500?v=4?s=100" width="100px;" alt="Nico Glas"/><br /><sub><b>Nico Glas</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Descalon" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/hanskokx"><img src="https://avatars.githubusercontent.com/u/1911919?v=4?s=100" width="100px;" alt="Hans Kokx"/><br /><sub><b>Hans Kokx</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=hanskokx" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://alchatti.com"><img src="https://avatars.githubusercontent.com/u/9209306?v=4?s=100" width="100px;" alt="Majed Al-Chatti"/><br /><sub><b>Majed Al-Chatti</b></sub></a><br /><a href="#design-alchatti" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://jan0660.dev"><img src="https://avatars.githubusercontent.com/u/58996212?v=4?s=100" width="100px;" alt="Jan0660"/><br /><sub><b>Jan0660</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Jan0660" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://www.m365princess.com"><img src="https://avatars.githubusercontent.com/u/49960482?v=4?s=100" width="100px;" alt="Luise Freese"/><br /><sub><b>Luise Freese</b></sub></a><br /><a href="#design-LuiseFreese" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/asherber"><img src="https://avatars.githubusercontent.com/u/5248041?v=4?s=100" width="100px;" alt="Aaron Sherber"/><br /><sub><b>Aaron Sherber</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=asherber" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://SeanKilleen.com"><img src="https://avatars.githubusercontent.com/u/2148318?v=4?s=100" width="100px;" alt="Sean Killeen"/><br /><sub><b>Sean Killeen</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=SeanKilleen" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://nickcraver.com"><img src="https://avatars.githubusercontent.com/u/454813?v=4?s=100" width="100px;" alt="Nick Craver"/><br /><sub><b>Nick Craver</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=NickCraver" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/justin-vogt"><img src="https://avatars.githubusercontent.com/u/84424169?v=4?s=100" width="100px;" alt="Justin Vogt"/><br /><sub><b>Justin Vogt</b></sub></a><br /><a href="#design-justin-vogt" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://theonlytails.com"><img src="https://avatars.githubusercontent.com/u/65342367?v=4?s=100" width="100px;" alt="TheOnlyTails"/><br /><sub><b>TheOnlyTails</b></sub></a><br /><a href="#ideas-TheOnlyTails" title="Ideas, Planning, & Feedback">🤔</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/bewing"><img src="https://avatars.githubusercontent.com/u/4759896?v=4?s=100" width="100px;" alt="bewing"/><br /><sub><b>bewing</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=bewing" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://wildermuth.com"><img src="https://avatars.githubusercontent.com/u/568272?v=4?s=100" width="100px;" alt="Shawn Wildermuth"/><br /><sub><b>Shawn Wildermuth</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=shawnwildermuth" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=shawnwildermuth" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/onpikono"><img src="https://avatars.githubusercontent.com/u/25362465?v=4?s=100" width="100px;" alt="Ondrej Pinka"/><br /><sub><b>Ondrej Pinka</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=onpikono" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.emanuelebartolesi.com"><img src="https://avatars.githubusercontent.com/u/2757486?v=4?s=100" width="100px;" alt="Emanuele Bartolesi"/><br /><sub><b>Emanuele Bartolesi</b></sub></a><br /><a href="#design-kasuken" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://qiansen1386.github.io"><img src="https://avatars.githubusercontent.com/u/1759658?v=4?s=100" width="100px;" alt="Paris Qian"/><br /><sub><b>Paris Qian</b></sub></a><br /><a href="#design-qiansen1386" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://blog.itadams.co.uk"><img src="https://avatars.githubusercontent.com/u/2307314?v=4?s=100" width="100px;" alt="Thomas Adams"/><br /><sub><b>Thomas Adams</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=tjackadams" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.terrasoft.gr/"><img src="https://avatars.githubusercontent.com/u/598065?v=4?s=100" width="100px;" alt="George Schizas"/><br /><sub><b>George Schizas</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=gschizas" title="Code">💻</a> <a href="#design-gschizas" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/denelon"><img src="https://avatars.githubusercontent.com/u/61799811?v=4?s=100" width="100px;" alt="denelon"/><br /><sub><b>denelon</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=denelon" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/AbdelrahmanHafez"><img src="https://avatars.githubusercontent.com/u/19984935?v=4?s=100" width="100px;" alt="Hafez"/><br /><sub><b>Hafez</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AbdelrahmanHafez" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/TedCrocker"><img src="https://avatars.githubusercontent.com/u/382001?v=4?s=100" width="100px;" alt="Ted Ballou"/><br /><sub><b>Ted Ballou</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=TedCrocker" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=TedCrocker" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://discardchanges.com"><img src="https://avatars.githubusercontent.com/u/811177?v=4?s=100" width="100px;" alt="Mike Sigsworth"/><br /><sub><b>Mike Sigsworth</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mikesigs" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mikesigs" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/memcpy-rand-rand-rand"><img src="https://avatars.githubusercontent.com/u/90210865?v=4?s=100" width="100px;" alt="Will"/><br /><sub><b>Will</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=memcpy-rand-rand-rand" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=memcpy-rand-rand-rand" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.hanselman.com"><img src="https://avatars.githubusercontent.com/u/2892?v=4?s=100" width="100px;" alt="Scott Hanselman"/><br /><sub><b>Scott Hanselman</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=shanselman" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=shanselman" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/hgreving"><img src="https://avatars.githubusercontent.com/u/23560667?v=4?s=100" width="100px;" alt="Harmjan Greving"/><br /><sub><b>Harmjan Greving</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=hgreving" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Khaos66"><img src="https://avatars.githubusercontent.com/u/4013009?v=4?s=100" width="100px;" alt="Khaos"/><br /><sub><b>Khaos</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Khaos66" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Khaos66" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://mattwojo.github.io/"><img src="https://avatars.githubusercontent.com/u/7566797?v=4?s=100" width="100px;" alt="Matt Wojciakowski"/><br /><sub><b>Matt Wojciakowski</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mattwojo" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.powershellgallery.com/profiles/TaylorLee"><img src="https://avatars.githubusercontent.com/u/53202926?v=4?s=100" width="100px;" alt="TheTaylorLee"/><br /><sub><b>TheTaylorLee</b></sub></a><br /><a href="#design-TheTaylorLee" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/PapiPeppers"><img src="https://avatars.githubusercontent.com/u/57047860?v=4?s=100" width="100px;" alt="Papi Peppers"/><br /><sub><b>Papi Peppers</b></sub></a><br /><a href="#design-PapiPeppers" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://erresen.github.io"><img src="https://avatars.githubusercontent.com/u/5566441?v=4?s=100" width="100px;" alt="erresen"/><br /><sub><b>erresen</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=erresen" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://aniketteredesai.com"><img src="https://avatars.githubusercontent.com/u/50461557?v=4?s=100" width="100px;" alt="Aniket Teredesai"/><br /><sub><b>Aniket Teredesai</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=icy-comet" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://debruyn.dev"><img src="https://avatars.githubusercontent.com/u/963413?v=4?s=100" width="100px;" alt="Sam Debruyn"/><br /><sub><b>Sam Debruyn</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=sdebruyn" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/larserikfinholt"><img src="https://avatars.githubusercontent.com/u/1328417?v=4?s=100" width="100px;" alt="Lars Erik Finholt"/><br /><sub><b>Lars Erik Finholt</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=larserikfinholt" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/simorgh1"><img src="https://avatars.githubusercontent.com/u/5792905?v=4?s=100" width="100px;" alt="Bahram Maravandi"/><br /><sub><b>Bahram Maravandi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=simorgh1" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://developingux.com"><img src="https://avatars.githubusercontent.com/u/211001?v=4?s=100" width="100px;" alt="Caleb Jenkins"/><br /><sub><b>Caleb Jenkins</b></sub></a><br /><a href="#ideas-calebjenkins" title="Ideas, Planning, & Feedback">🤔</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/FlavienMacquignon"><img src="https://avatars.githubusercontent.com/u/70152975?v=4?s=100" width="100px;" alt="FlavienMacquignon"/><br /><sub><b>FlavienMacquignon</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=FlavienMacquignon" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Victoria-DR"><img src="https://avatars.githubusercontent.com/u/68347113?v=4?s=100" width="100px;" alt="Victoria"/><br /><sub><b>Victoria</b></sub></a><br /><a href="#design-Victoria-DR" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/UlanaXY"><img src="https://avatars.githubusercontent.com/u/12629308?v=4?s=100" width="100px;" alt="Mikolaj"/><br /><sub><b>Mikolaj</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=UlanaXY" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/markbullplus"><img src="https://avatars.githubusercontent.com/u/88931495?v=4?s=100" width="100px;" alt="markbull"/><br /><sub><b>markbull</b></sub></a><br /><a href="#design-markbullplus" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/brian6932"><img src="https://avatars.githubusercontent.com/u/18603393?v=4?s=100" width="100px;" alt="Brian"/><br /><sub><b>Brian</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=brian6932" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://www.patrickhyatt.com"><img src="https://avatars.githubusercontent.com/u/296125?v=4?s=100" width="100px;" alt="Patrick Hyatt"/><br /><sub><b>Patrick Hyatt</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=patHyatt" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/hezhizhen"><img src="https://avatars.githubusercontent.com/u/7611700?v=4?s=100" width="100px;" alt="Zhizhen He"/><br /><sub><b>Zhizhen He</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=hezhizhen" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jedwillick"><img src="https://avatars.githubusercontent.com/u/85419773?v=4?s=100" width="100px;" alt="Jed Willick"/><br /><sub><b>Jed Willick</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jedwillick" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://bandism.net/"><img src="https://avatars.githubusercontent.com/u/22633385?v=4?s=100" width="100px;" alt="Ikko Ashimine"/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=eltociear" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://prokopto.dev/"><img src="https://avatars.githubusercontent.com/u/32304933?v=4?s=100" width="100px;" alt="Courtney Caldwell"/><br /><sub><b>Courtney Caldwell</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=CapularisPerpetua" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/rfverbruggen"><img src="https://avatars.githubusercontent.com/u/2320197?v=4?s=100" width="100px;" alt="Robbert Verbruggen"/><br /><sub><b>Robbert Verbruggen</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rfverbruggen" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Merlin2001"><img src="https://avatars.githubusercontent.com/u/13134791?v=4?s=100" width="100px;" alt="Marcus Mangelsdorf"/><br /><sub><b>Marcus Mangelsdorf</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Merlin2001" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://linkedin.com/andresrinivasan"><img src="https://avatars.githubusercontent.com/u/134301?v=4?s=100" width="100px;" alt="André Srinivasan"/><br /><sub><b>André Srinivasan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=andresrinivasan" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ehawman-rosenberg"><img src="https://avatars.githubusercontent.com/u/81652082?v=4?s=100" width="100px;" alt="ehawman-rosenberg"/><br /><sub><b>ehawman-rosenberg</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ehawman-rosenberg" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ehawman-rosenberg" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://spizzi.net/"><img src="https://avatars.githubusercontent.com/u/1934246?v=4?s=100" width="100px;" alt="Claudio Spizzi"/><br /><sub><b>Claudio Spizzi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=claudiospizzi" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.eliostruyf.com"><img src="https://avatars.githubusercontent.com/u/2900833?v=4?s=100" width="100px;" alt="Elio Struyf"/><br /><sub><b>Elio Struyf</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=estruyf" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=estruyf" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.olafalders.com/"><img src="https://avatars.githubusercontent.com/u/96205?v=4?s=100" width="100px;" alt="Olaf Alders"/><br /><sub><b>Olaf Alders</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=oalders" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://blog.deltacode.be"><img src="https://avatars.githubusercontent.com/u/352626?v=4?s=100" width="100px;" alt="David De Sloovere"/><br /><sub><b>David De Sloovere</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=DavidDeSloovere" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://lensor-radii.netlify.app"><img src="https://avatars.githubusercontent.com/u/69637718?v=4?s=100" width="100px;" alt="LensPlaysGames"/><br /><sub><b>LensPlaysGames</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=LensPlaysGames" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://takiya.eu"><img src="https://avatars.githubusercontent.com/u/6952402?v=4?s=100" width="100px;" alt="Alex 'Avunia' Takiya"/><br /><sub><b>Alex 'Avunia' Takiya</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=atakiya" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/kenmorse"><img src="https://avatars.githubusercontent.com/u/63734484?v=4?s=100" width="100px;" alt="kenmorse"/><br /><sub><b>kenmorse</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kenmorse" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/xadozuk"><img src="https://avatars.githubusercontent.com/u/780423?v=4?s=100" width="100px;" alt="xadozuk"/><br /><sub><b>xadozuk</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=xadozuk" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://bittu.eu.org"><img src="https://avatars.githubusercontent.com/u/83997633?v=4?s=100" width="100px;" alt="Vedant"/><br /><sub><b>Vedant</b></sub></a><br /><a href="#design-vedantmgoyal9" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=vedantmgoyal9" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/lewis-yeung"><img src="https://avatars.githubusercontent.com/u/83903009?v=4?s=100" width="100px;" alt="L. Yeung"/><br /><sub><b>L. Yeung</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lewis-yeung" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lewis-yeung" title="Documentation">📖</a> <a href="#design-lewis-yeung" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/antoson"><img src="https://avatars.githubusercontent.com/u/36371990?v=4?s=100" width="100px;" alt="Ondrej Antos"/><br /><sub><b>Ondrej Antos</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=antoson" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Bahnschrift"><img src="https://avatars.githubusercontent.com/u/31170809?v=4?s=100" width="100px;" alt="Bahnschrift"/><br /><sub><b>Bahnschrift</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Bahnschrift" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jakeboone02"><img src="https://avatars.githubusercontent.com/u/366438?v=4?s=100" width="100px;" alt="Jake Boone"/><br /><sub><b>Jake Boone</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jakeboone02" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/kapsiR"><img src="https://avatars.githubusercontent.com/u/7165033?v=4?s=100" width="100px;" alt="kapsiR"/><br /><sub><b>kapsiR</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kapsiR" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kapsiR" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/csrakowski"><img src="https://avatars.githubusercontent.com/u/1303967?v=4?s=100" width="100px;" alt="Christiaan Rakowski"/><br /><sub><b>Christiaan Rakowski</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=csrakowski" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=csrakowski" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mosullivan93"><img src="https://avatars.githubusercontent.com/u/7676935?v=4?s=100" width="100px;" alt="Mitchell J. O'Sullivan"/><br /><sub><b>Mitchell J. O'Sullivan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mosullivan93" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mosullivan93" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/felpel"><img src="https://avatars.githubusercontent.com/u/5000004?v=4?s=100" width="100px;" alt="Félix Pelletier"/><br /><sub><b>Félix Pelletier</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=felpel" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://nexiom.net/"><img src="https://avatars.githubusercontent.com/u/3214803?v=4?s=100" width="100px;" alt="Samuel D. Leslie"/><br /><sub><b>Samuel D. Leslie</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ralish" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/AjayKMehta"><img src="https://avatars.githubusercontent.com/u/11180071?v=4?s=100" width="100px;" alt="Ajay Mehta"/><br /><sub><b>Ajay Mehta</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AjayKMehta" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/the-eduardo"><img src="https://avatars.githubusercontent.com/u/40523695?v=4?s=100" width="100px;" alt="the-eduardo"/><br /><sub><b>the-eduardo</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=the-eduardo" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/antonpiatek"><img src="https://avatars.githubusercontent.com/u/175077?v=4?s=100" width="100px;" alt="Anton Piatek"/><br /><sub><b>Anton Piatek</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=antonpiatek" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://careers.stackoverflow.com/dehghan"><img src="https://avatars.githubusercontent.com/u/1384790?v=4?s=100" width="100px;" alt="Mohammad Dehghan"/><br /><sub><b>Mohammad Dehghan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=prodehghan" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/bhagerty"><img src="https://avatars.githubusercontent.com/u/7828454?v=4?s=100" width="100px;" alt="bhagerty"/><br /><sub><b>bhagerty</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=bhagerty" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/CodyScavenger"><img src="https://avatars.githubusercontent.com/u/94334877?v=4?s=100" width="100px;" alt="Cody Scavenger"/><br /><sub><b>Cody Scavenger</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=CodyScavenger" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://fwest98.nl/"><img src="https://avatars.githubusercontent.com/u/1918658?v=4?s=100" width="100px;" alt="Floris Westerman"/><br /><sub><b>Floris Westerman</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=FWest98" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mjcarman"><img src="https://avatars.githubusercontent.com/u/121028?v=4?s=100" width="100px;" alt="Michael Carman"/><br /><sub><b>Michael Carman</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mjcarman" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mjcarman" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/entr0pia"><img src="https://avatars.githubusercontent.com/u/30486766?v=4?s=100" width="100px;" alt="风沐白"/><br /><sub><b>风沐白</b></sub></a><br /><a href="#design-entr0pia" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/schallm"><img src="https://avatars.githubusercontent.com/u/331167?v=4?s=100" width="100px;" alt="Michael T. Schall"/><br /><sub><b>Michael T. Schall</b></sub></a><br /><a href="#design-schallm" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/craiglpeters"><img src="https://avatars.githubusercontent.com/u/9445180?v=4?s=100" width="100px;" alt="Craig Peters"/><br /><sub><b>Craig Peters</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=craiglpeters" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/dorian-li"><img src="https://avatars.githubusercontent.com/u/49279922?v=4?s=100" width="100px;" alt="Dongyu Li"/><br /><sub><b>Dongyu Li</b></sub></a><br /><a href="#design-dorian-li" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/cyberbliss"><img src="https://avatars.githubusercontent.com/u/5401528?v=4?s=100" width="100px;" alt="Stephen Judd"/><br /><sub><b>Stephen Judd</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=cyberbliss" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://douug.dev"><img src="https://avatars.githubusercontent.com/u/59324692?v=4?s=100" width="100px;" alt="Douglas Silva"/><br /><sub><b>Douglas Silva</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=douugdev" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/BoseSj"><img src="https://avatars.githubusercontent.com/u/58129377?v=4?s=100" width="100px;" alt="SJ Basak"/><br /><sub><b>SJ Basak</b></sub></a><br /><a href="#design-BoseSj" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://tedreed.info"><img src="https://avatars.githubusercontent.com/u/71910?v=4?s=100" width="100px;" alt="Ted Reed"/><br /><sub><b>Ted Reed</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=treed" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=treed" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://albertp.dev"><img src="https://avatars.githubusercontent.com/u/14863373?v=4?s=100" width="100px;" alt="Albert Portnoy"/><br /><sub><b>Albert Portnoy</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=asportnoy" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=asportnoy" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.msbrg.net/"><img src="https://avatars.githubusercontent.com/u/1346676?v=4?s=100" width="100px;" alt="Sebastian"/><br /><sub><b>Sebastian</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Lemorz56" title="Code">💻</a> <a href="#design-Lemorz56" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Lemorz56" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mirsella"><img src="https://avatars.githubusercontent.com/u/45905567?v=4?s=100" width="100px;" alt="Lucas"/><br /><sub><b>Lucas</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mirsella" title="Code">💻</a> <a href="#design-mirsella" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mirsella" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ethansocal"><img src="https://avatars.githubusercontent.com/u/79533577?v=4?s=100" width="100px;" alt="Ethan"/><br /><sub><b>Ethan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ethansocal" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/astronaako"><img src="https://avatars.githubusercontent.com/u/18577543?v=4?s=100" width="100px;" alt="Mohamed Naamy"/><br /><sub><b>Mohamed Naamy</b></sub></a><br /><a href="#design-astronaako" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://bend-n.github.io"><img src="https://avatars.githubusercontent.com/u/70787919?v=4?s=100" width="100px;" alt="bendn"/><br /><sub><b>bendn</b></sub></a><br /><a href="#design-bend-n" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://www.david-anthoff.com"><img src="https://avatars.githubusercontent.com/u/1036561?v=4?s=100" width="100px;" alt="David Anthoff"/><br /><sub><b>David Anthoff</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=davidanthoff" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=davidanthoff" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jooooel"><img src="https://avatars.githubusercontent.com/u/9303280?v=4?s=100" width="100px;" alt="jooooel"/><br /><sub><b>jooooel</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jooooel" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/maxlandon"><img src="https://avatars.githubusercontent.com/u/25826036?v=4?s=100" width="100px;" alt="maxlandon"/><br /><sub><b>maxlandon</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=maxlandon" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://linolevan.com"><img src="https://avatars.githubusercontent.com/u/11367844?v=4?s=100" width="100px;" alt="Lino Le Van"/><br /><sub><b>Lino Le Van</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lino-levan" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/dvlprJobayer"><img src="https://avatars.githubusercontent.com/u/76583359?v=4?s=100" width="100px;" alt="Jobayer Ahammed Patwary"/><br /><sub><b>Jobayer Ahammed Patwary</b></sub></a><br /><a href="#design-dvlprJobayer" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/NoF0rte"><img src="https://avatars.githubusercontent.com/u/64100993?v=4?s=100" width="100px;" alt="NoF0rte"/><br /><sub><b>NoF0rte</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=NoF0rte" title="Code">💻</a> <a href="#design-NoF0rte" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=NoF0rte" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/LNKLEO"><img src="https://avatars.githubusercontent.com/u/10334184?v=4?s=100" width="100px;" alt="LNKLEO"/><br /><sub><b>LNKLEO</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=LNKLEO" title="Code">💻</a> <a href="#design-LNKLEO" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=LNKLEO" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/kamfaima"><img src="https://avatars.githubusercontent.com/u/23546392?v=4?s=100" width="100px;" alt="kamfaima"/><br /><sub><b>kamfaima</b></sub></a><br /><a href="#design-kamfaima" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/dhrdlicka"><img src="https://avatars.githubusercontent.com/u/13226155?v=4?s=100" width="100px;" alt="David Hrdlička"/><br /><sub><b>David Hrdlička</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dhrdlicka" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dhrdlicka" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://davidcourtney.com"><img src="https://avatars.githubusercontent.com/u/1019134?v=4?s=100" width="100px;" alt="David Courtney"/><br /><sub><b>David Courtney</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=davidcourtney" title="Code">💻</a> <a href="#design-davidcourtney" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=davidcourtney" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Jensdevloo"><img src="https://avatars.githubusercontent.com/u/2276152?v=4?s=100" width="100px;" alt="jensdevloo"/><br /><sub><b>jensdevloo</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Jensdevloo" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/thomasdoerr"><img src="https://avatars.githubusercontent.com/u/6919685?v=4?s=100" width="100px;" alt="Thomas Dörr"/><br /><sub><b>Thomas Dörr</b></sub></a><br /><a href="#design-thomasdoerr" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://blog.aelterman.com"><img src="https://avatars.githubusercontent.com/u/17446043?v=4?s=100" width="100px;" alt="Sven Aelterman"/><br /><sub><b>Sven Aelterman</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=SvenAelterman" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/CodexLink"><img src="https://avatars.githubusercontent.com/u/5953927?v=4?s=100" width="100px;" alt="Janrey Licas"/><br /><sub><b>Janrey Licas</b></sub></a><br /><a href="#design-CodexLink" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=CodexLink" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=CodexLink" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/padilo"><img src="https://avatars.githubusercontent.com/u/783959?v=4?s=100" width="100px;" alt="Pablo Díaz-López"/><br /><sub><b>Pablo Díaz-López</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=padilo" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/DarkMagicSource"><img src="https://avatars.githubusercontent.com/u/35950530?v=4?s=100" width="100px;" alt="Caitlyn Williams"/><br /><sub><b>Caitlyn Williams</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=DarkMagicSource" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/gork3n"><img src="https://avatars.githubusercontent.com/u/1086155?v=4?s=100" width="100px;" alt="Christopher Henderson"/><br /><sub><b>Christopher Henderson</b></sub></a><br /><a href="#design-gork3n" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.coltbauman.com"><img src="https://avatars.githubusercontent.com/u/6819362?v=4?s=100" width="100px;" alt="Colt"/><br /><sub><b>Colt</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=cabauman" title="Code">💻</a> <a href="#design-cabauman" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=cabauman" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/craftzneko"><img src="https://avatars.githubusercontent.com/u/662108?v=4?s=100" width="100px;" alt="craftzneko"/><br /><sub><b>craftzneko</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=craftzneko" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://waferlab.dev"><img src="https://avatars.githubusercontent.com/u/17683244?v=4?s=100" width="100px;" alt="甘亭"/><br /><sub><b>甘亭</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=atlanswer" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Mertsch"><img src="https://avatars.githubusercontent.com/u/9402861?v=4?s=100" width="100px;" alt="Mertsch"/><br /><sub><b>Mertsch</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Mertsch" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://mespin.me/"><img src="https://avatars.githubusercontent.com/u/38158676?v=4?s=100" width="100px;" alt="Marc Espín"/><br /><sub><b>Marc Espín</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=marc2332" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ksdpmx"><img src="https://avatars.githubusercontent.com/u/3256083?v=4?s=100" width="100px;" alt="jasonz"/><br /><sub><b>jasonz</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ksdpmx" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ksdpmx" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://bentsukun.ch"><img src="https://avatars.githubusercontent.com/u/866330?v=4?s=100" width="100px;" alt="Benny Siegert"/><br /><sub><b>Benny Siegert</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=bsiegert" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.kemadev.fr/fr/"><img src="https://avatars.githubusercontent.com/u/54537427?v=4?s=100" width="100px;" alt="kema"/><br /><sub><b>kema</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kema-dev" title="Code">💻</a> <a href="#design-kema-dev" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kema-dev" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://mavaddat.ca"><img src="https://avatars.githubusercontent.com/u/5055400?v=4?s=100" width="100px;" alt="Mavaddat Javid"/><br /><sub><b>Mavaddat Javid</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mavaddat" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://iavael.name/"><img src="https://avatars.githubusercontent.com/u/905853?v=4?s=100" width="100px;" alt="Iavael"/><br /><sub><b>Iavael</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=iavael" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Kushal-Chandar"><img src="https://avatars.githubusercontent.com/u/83660514?v=4?s=100" width="100px;" alt="Kushal-Chandar"/><br /><sub><b>Kushal-Chandar</b></sub></a><br /><a href="#design-Kushal-Chandar" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://www.project-miller.com/"><img src="https://avatars.githubusercontent.com/u/2429638?v=4?s=100" width="100px;" alt="Matthew Miller"/><br /><sub><b>Matthew Miller</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=BigBear0812" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=BigBear0812" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/javidcf"><img src="https://avatars.githubusercontent.com/u/1098280?v=4?s=100" width="100px;" alt="Javier Dehesa"/><br /><sub><b>Javier Dehesa</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=javidcf" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://alex-v.blog/"><img src="https://avatars.githubusercontent.com/u/716334?v=4?s=100" width="100px;" alt="Alex Villarreal"/><br /><sub><b>Alex Villarreal</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=alexvy86" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/krzysdz"><img src="https://avatars.githubusercontent.com/u/12915102?v=4?s=100" width="100px;" alt="krzysdz"/><br /><sub><b>krzysdz</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=krzysdz" title="Code">💻</a> <a href="#design-krzysdz" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=krzysdz" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://blog.baslijten.com"><img src="https://avatars.githubusercontent.com/u/11842067?v=4?s=100" width="100px;" alt="Bas Lijten"/><br /><sub><b>Bas Lijten</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=BasLijten" title="Code">💻</a> <a href="#design-BasLijten" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=BasLijten" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ParkerM"><img src="https://avatars.githubusercontent.com/u/5124113?v=4?s=100" width="100px;" alt="Parker Mauney"/><br /><sub><b>Parker Mauney</b></sub></a><br /><a href="#design-ParkerM" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.brusella.com.ar"><img src="https://avatars.githubusercontent.com/u/115679?v=4?s=100" width="100px;" alt="Gonzalo Brusella"/><br /><sub><b>Gonzalo Brusella</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=gbrusella" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/krokofant"><img src="https://avatars.githubusercontent.com/u/5908498?v=4?s=100" width="100px;" alt="Emil Sundin"/><br /><sub><b>Emil Sundin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=krokofant" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://dysuby.github.io"><img src="https://avatars.githubusercontent.com/u/26317510?v=4?s=100" width="100px;" alt="dysuby"/><br /><sub><b>dysuby</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dysuby" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/dorokhin-bohdan"><img src="https://avatars.githubusercontent.com/u/24988081?v=4?s=100" width="100px;" alt="Bohdan Dorokhin"/><br /><sub><b>Bohdan Dorokhin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dorokhin-bohdan" title="Code">💻</a> <a href="#design-dorokhin-bohdan" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dorokhin-bohdan" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/CY-Pan"><img src="https://avatars.githubusercontent.com/u/59761962?v=4?s=100" width="100px;" alt="Ad Red"/><br /><sub><b>Ad Red</b></sub></a><br /><a href="#design-CY-Pan" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/nopeless"><img src="https://avatars.githubusercontent.com/u/38830903?v=4?s=100" width="100px;" alt="nopeless"/><br /><sub><b>nopeless</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=nopeless" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=nopeless" title="Documentation">📖</a> <a href="#design-nopeless" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://linkedin.com/in/vinhloc30796"><img src="https://avatars.githubusercontent.com/u/19675202?v=4?s=100" width="100px;" alt="Loc Nguyen"/><br /><sub><b>Loc Nguyen</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=vinhloc30796" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://tavis.page"><img src="https://avatars.githubusercontent.com/u/66774833?v=4?s=100" width="100px;" alt="Tavi"/><br /><sub><b>Tavi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Coder-Tavi" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://ndawson.me"><img src="https://avatars.githubusercontent.com/u/37987430?v=4?s=100" width="100px;" alt="Nick Dawson"/><br /><sub><b>Nick Dawson</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=NicholasDawson" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.jntrnr.com/"><img src="https://avatars.githubusercontent.com/u/547158?v=4?s=100" width="100px;" alt="JT"/><br /><sub><b>JT</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jntrnr" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ChandanChainani"><img src="https://avatars.githubusercontent.com/u/28807775?v=4?s=100" width="100px;" alt="ChandanChainani"/><br /><sub><b>ChandanChainani</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ChandanChainani" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jenspinney"><img src="https://avatars.githubusercontent.com/u/3200507?v=4?s=100" width="100px;" alt="Jen Spinney"/><br /><sub><b>Jen Spinney</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jenspinney" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jenspinney" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/rotu"><img src="https://avatars.githubusercontent.com/u/119948?v=4?s=100" width="100px;" alt="Dan Rose"/><br /><sub><b>Dan Rose</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rotu" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://carlwa.com"><img src="https://avatars.githubusercontent.com/u/2829438?v=4?s=100" width="100px;" alt="Carl Walsh"/><br /><sub><b>Carl Walsh</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=darthwalsh" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ercpereda"><img src="https://avatars.githubusercontent.com/u/13546685?v=4?s=100" width="100px;" alt="Ernesto R. C. Pereda"/><br /><sub><b>Ernesto R. C. Pereda</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ercpereda" title="Code">💻</a> <a href="#design-ercpereda" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ercpereda" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/0Ky"><img src="https://avatars.githubusercontent.com/u/16103757?v=4?s=100" width="100px;" alt="ｃｒｙｐｔｉｘ"/><br /><sub><b>ｃｒｙｐｔｉｘ</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=0Ky" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ehawman"><img src="https://avatars.githubusercontent.com/u/52979227?v=4?s=100" width="100px;" alt="Evan Hawman"/><br /><sub><b>Evan Hawman</b></sub></a><br /><a href="#design-ehawman" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://zerdox.dev"><img src="https://avatars.githubusercontent.com/u/49815452?v=4?s=100" width="100px;" alt="Mark Lansky"/><br /><sub><b>Mark Lansky</b></sub></a><br /><a href="#design-ZerdoX-x" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/pulsation"><img src="https://avatars.githubusercontent.com/u/1838397?v=4?s=100" width="100px;" alt="pulsation"/><br /><sub><b>pulsation</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=pulsation" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://oriondev.fr"><img src="https://avatars.githubusercontent.com/u/38093786?v=4?s=100" width="100px;" alt="orionsource"/><br /><sub><b>orionsource</b></sub></a><br /><a href="#design-oriionn" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/CesarGBkR"><img src="https://avatars.githubusercontent.com/u/99093357?v=4?s=100" width="100px;" alt="Cesar Garduño"/><br /><sub><b>Cesar Garduño</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=CesarGBkR" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Adi-vig"><img src="https://avatars.githubusercontent.com/u/123308369?v=4?s=100" width="100px;" alt="Aditya Sakhare"/><br /><sub><b>Aditya Sakhare</b></sub></a><br /><a href="#design-Adi-vig" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/deepak-dev-96"><img src="https://avatars.githubusercontent.com/u/134447761?v=4?s=100" width="100px;" alt="Deepak Dev"/><br /><sub><b>Deepak Dev</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=deepak-dev-96" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://creativewebspecialist.co.uk"><img src="https://avatars.githubusercontent.com/u/1389894?v=4?s=100" width="100px;" alt="Warren Buckley"/><br /><sub><b>Warren Buckley</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=warrenbuckley" title="Code">💻</a> <a href="#design-warrenbuckley" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=warrenbuckley" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/LunarMarathon"><img src="https://avatars.githubusercontent.com/u/113847439?v=4?s=100" width="100px;" alt="LunarMarathon"/><br /><sub><b>LunarMarathon</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=LunarMarathon" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://ginglis.me"><img src="https://avatars.githubusercontent.com/u/43075615?v=4?s=100" width="100px;" alt="Gavin Inglis"/><br /><sub><b>Gavin Inglis</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ginglis13" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://jaliyaudagedara.blogspot.com"><img src="https://avatars.githubusercontent.com/u/5653381?v=4?s=100" width="100px;" alt="Jaliya Udagedara"/><br /><sub><b>Jaliya Udagedara</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jaliyaudagedara" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/BPplays"><img src="https://avatars.githubusercontent.com/u/58504799?v=4?s=100" width="100px;" alt="BPplays"/><br /><sub><b>BPplays</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=BPplays" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mateusz-bajorek"><img src="https://avatars.githubusercontent.com/u/11185738?v=4?s=100" width="100px;" alt="Mateusz Bajorek"/><br /><sub><b>Mateusz Bajorek</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mateusz-bajorek" title="Code">💻</a> <a href="#design-mateusz-bajorek" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mateusz-bajorek" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://joshbduncan.com"><img src="https://avatars.githubusercontent.com/u/44387852?v=4?s=100" width="100px;" alt="Josh Duncan"/><br /><sub><b>Josh Duncan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=joshbduncan" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/princesaini"><img src="https://avatars.githubusercontent.com/u/25565506?v=4?s=100" width="100px;" alt="Prince Saini"/><br /><sub><b>Prince Saini</b></sub></a><br /><a href="#design-princesaini" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.linkedin.com/in/fabriciojuliano/"><img src="https://avatars.githubusercontent.com/u/70244182?v=4?s=100" width="100px;" alt="fabriciojlm"/><br /><sub><b>fabriciojlm</b></sub></a><br /><a href="#design-fabriciojlm" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/SriRamanujam"><img src="https://avatars.githubusercontent.com/u/2983875?v=4?s=100" width="100px;" alt="Sri Ramanujam"/><br /><sub><b>Sri Ramanujam</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=SriRamanujam" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=SriRamanujam" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Juneezee"><img src="https://avatars.githubusercontent.com/u/20135478?v=4?s=100" width="100px;" alt="Eng Zer Jun"/><br /><sub><b>Eng Zer Jun</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Juneezee" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://alexpotter.dev"><img src="https://avatars.githubusercontent.com/u/14200888?v=4?s=100" width="100px;" alt="Alex Potter"/><br /><sub><b>Alex Potter</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AlexJPotter" title="Code">💻</a> <a href="#design-AlexJPotter" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AlexJPotter" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://mishmanners.info"><img src="https://avatars.githubusercontent.com/u/36594527?v=4?s=100" width="100px;" alt="Michelle Mannering"/><br /><sub><b>Michelle Mannering</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mishmanners" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/paulomorgado"><img src="https://avatars.githubusercontent.com/u/470455?v=4?s=100" width="100px;" alt="Paulo Morgado"/><br /><sub><b>Paulo Morgado</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=paulomorgado" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=paulomorgado" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/joadoumie"><img src="https://avatars.githubusercontent.com/u/98557455?v=4?s=100" width="100px;" alt="joadoumie"/><br /><sub><b>joadoumie</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=joadoumie" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=joadoumie" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://about.me/flanakin"><img src="https://avatars.githubusercontent.com/u/399533?v=4?s=100" width="100px;" alt="Michael Flanakin"/><br /><sub><b>Michael Flanakin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=flanakin" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.linkedin.com/in/thiagobarros95/"><img src="https://avatars.githubusercontent.com/u/88802518?v=4?s=100" width="100px;" alt="Thiago Barros"/><br /><sub><b>Thiago Barros</b></sub></a><br /><a href="#design-thiagoszbarros" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/TendTo"><img src="https://avatars.githubusercontent.com/u/65033249?v=4?s=100" width="100px;" alt="Tend"/><br /><sub><b>Tend</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=TendTo" title="Code">💻</a> <a href="#design-TendTo" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=TendTo" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://kibbewater.com"><img src="https://avatars.githubusercontent.com/u/35224538?v=4?s=100" width="100px;" alt="Snow"/><br /><sub><b>Snow</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=KibbeWater" title="Code">💻</a> <a href="#design-KibbeWater" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=KibbeWater" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/randombenj"><img src="https://avatars.githubusercontent.com/u/5184499?v=4?s=100" width="100px;" alt="Benj Fassbind"/><br /><sub><b>Benj Fassbind</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=randombenj" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://blog.liudonghua.top"><img src="https://avatars.githubusercontent.com/u/2276718?v=4?s=100" width="100px;" alt="liudonghua"/><br /><sub><b>liudonghua</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=liudonghua123" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://somoy.me"><img src="https://avatars.githubusercontent.com/u/40368688?v=4?s=100" width="100px;" alt="Somoy Subandhu"/><br /><sub><b>Somoy Subandhu</b></sub></a><br /><a href="#design-Somoy73" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/oleksbabieiev"><img src="https://avatars.githubusercontent.com/u/64398691?v=4?s=100" width="100px;" alt="Oleksandr Babieiev"/><br /><sub><b>Oleksandr Babieiev</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=oleksbabieiev" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=oleksbabieiev" title="Documentation">📖</a> <a href="#design-oleksbabieiev" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mrbeardad"><img src="https://avatars.githubusercontent.com/u/54128430?v=4?s=100" width="100px;" alt="Heache Bear"/><br /><sub><b>Heache Bear</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mrbeardad" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://ensif.com"><img src="https://avatars.githubusercontent.com/u/125232146?v=4?s=100" width="100px;" alt="Christopher Narowski"/><br /><sub><b>Christopher Narowski</b></sub></a><br /><a href="#design-ChrisNSki" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/sino1641"><img src="https://avatars.githubusercontent.com/u/13870295?v=4?s=100" width="100px;" alt="Sin"/><br /><sub><b>Sin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=sino1641" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://kebo.xyz"><img src="https://avatars.githubusercontent.com/u/601636?v=4?s=100" width="100px;" alt="Kenta Kubo"/><br /><sub><b>Kenta Kubo</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kkk669" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://mfedatto.com"><img src="https://avatars.githubusercontent.com/u/5623739?v=4?s=100" width="100px;" alt="MFedatto"/><br /><sub><b>MFedatto</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mfedatto" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.linkedin.com/in/riikka-l-861694b2/"><img src="https://avatars.githubusercontent.com/u/56921531?v=4?s=100" width="100px;" alt="Riikka"/><br /><sub><b>Riikka</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=RiikkaDream" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/srpmtt"><img src="https://avatars.githubusercontent.com/u/11175503?v=4?s=100" width="100px;" alt="srpmtt"/><br /><sub><b>srpmtt</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=srpmtt" title="Code">💻</a> <a href="#design-srpmtt" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=srpmtt" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://chris-johnston.me"><img src="https://avatars.githubusercontent.com/u/16418643?v=4?s=100" width="100px;" alt="Chris Johnston"/><br /><sub><b>Chris Johnston</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Chris-Johnston" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Daimonion1980"><img src="https://avatars.githubusercontent.com/u/12880413?v=4?s=100" width="100px;" alt="Thomas"/><br /><sub><b>Thomas</b></sub></a><br /><a href="#design-Daimonion1980" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://veert00x.com"><img src="https://avatars.githubusercontent.com/u/72668825?v=4?s=100" width="100px;" alt="Veko"/><br /><sub><b>Veko</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=VEERT00X" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://lucascosti.com"><img src="https://avatars.githubusercontent.com/u/4434330?v=4?s=100" width="100px;" alt="Lucas Costi"/><br /><sub><b>Lucas Costi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lucascosti" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://krason.dev/"><img src="https://avatars.githubusercontent.com/u/11185582?v=4?s=100" width="100px;" alt="Grzegorz Krasoń"/><br /><sub><b>Grzegorz Krasoń</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=gergelyk" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/rockyoung"><img src="https://avatars.githubusercontent.com/u/1207971?v=4?s=100" width="100px;" alt="rockyoung"/><br /><sub><b>rockyoung</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rockyoung" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rockyoung" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/shravanasati"><img src="https://avatars.githubusercontent.com/u/69118069?v=4?s=100" width="100px;" alt="Shravan Asati"/><br /><sub><b>Shravan Asati</b></sub></a><br /><a href="#design-shravanasati" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/lzecca78"><img src="https://avatars.githubusercontent.com/u/3881844?v=4?s=100" width="100px;" alt="Luca Zecca"/><br /><sub><b>Luca Zecca</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lzecca78" title="Code">💻</a> <a href="#design-lzecca78" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lzecca78" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jreilly-lukava"><img src="https://avatars.githubusercontent.com/u/30353736?v=4?s=100" width="100px;" alt="Joshua Reilly"/><br /><sub><b>Joshua Reilly</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jreilly-lukava" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jreilly-lukava" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://ivan-the-terrible.github.io/"><img src="https://avatars.githubusercontent.com/u/56458442?v=4?s=100" width="100px;" alt="Ivan"/><br /><sub><b>Ivan</b></sub></a><br /><a href="#design-ivan-the-terrible" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ivan-the-terrible" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ivan-the-terrible" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mountcount"><img src="https://avatars.githubusercontent.com/u/166301065?v=4?s=100" width="100px;" alt="mountcount"/><br /><sub><b>mountcount</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mountcount" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Bondrake"><img src="https://avatars.githubusercontent.com/u/11696?v=4?s=100" width="100px;" alt="Bondrake"/><br /><sub><b>Bondrake</b></sub></a><br /><a href="#design-Bondrake" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Bondrake" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/R00dRallec"><img src="https://avatars.githubusercontent.com/u/9081954?v=4?s=100" width="100px;" alt="R00dRallec"/><br /><sub><b>R00dRallec</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=R00dRallec" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=R00dRallec" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/publicfacingusername"><img src="https://avatars.githubusercontent.com/u/13956145?v=4?s=100" width="100px;" alt="Justin Wolfington"/><br /><sub><b>Justin Wolfington</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=publicfacingusername" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://bio.link/jacktracey"><img src="https://avatars.githubusercontent.com/u/41163455?v=4?s=100" width="100px;" alt="Jack Tracey"/><br /><sub><b>Jack Tracey</b></sub></a><br /><a href="#design-jtracey93" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/MarkDaveny"><img src="https://avatars.githubusercontent.com/u/168091250?v=4?s=100" width="100px;" alt="MarkDaveny"/><br /><sub><b>MarkDaveny</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=MarkDaveny" title="Code">💻</a> <a href="#design-MarkDaveny" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=MarkDaveny" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.tiwahu.com/"><img src="https://avatars.githubusercontent.com/u/590564?v=4?s=100" width="100px;" alt="Timothy Huber"/><br /><sub><b>Timothy Huber</b></sub></a><br /><a href="#design-tiwahu" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://yashjmistry.me"><img src="https://avatars.githubusercontent.com/u/63824041?v=4?s=100" width="100px;" alt="Yash Mistry"/><br /><sub><b>Yash Mistry</b></sub></a><br /><a href="#design-YashJM" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jlabonski"><img src="https://avatars.githubusercontent.com/u/2981369?v=4?s=100" width="100px;" alt="Jeffrey Labonski"/><br /><sub><b>Jeffrey Labonski</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jlabonski" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jlabonski" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/herbygillot"><img src="https://avatars.githubusercontent.com/u/618376?v=4?s=100" width="100px;" alt="Herby Gillot"/><br /><sub><b>Herby Gillot</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=herbygillot" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/arjan-s"><img src="https://avatars.githubusercontent.com/u/10400299?v=4?s=100" width="100px;" alt="arjan-s"/><br /><sub><b>arjan-s</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=arjan-s" title="Code">💻</a> <a href="#design-arjan-s" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=arjan-s" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/0323pin"><img src="https://avatars.githubusercontent.com/u/90570748?v=4?s=100" width="100px;" alt="pin"/><br /><sub><b>pin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=0323pin" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://fireis.dev"><img src="https://avatars.githubusercontent.com/u/109556932?v=4?s=100" width="100px;" alt="FireIsGood"/><br /><sub><b>FireIsGood</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=FireIsGood" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=FireIsGood" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Joxtacy"><img src="https://avatars.githubusercontent.com/u/10127673?v=4?s=100" width="100px;" alt="Jesper Hasselquist"/><br /><sub><b>Jesper Hasselquist</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Joxtacy" title="Code">💻</a> <a href="#design-Joxtacy" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Joxtacy" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.aaron-powell.com"><img src="https://avatars.githubusercontent.com/u/434140?v=4?s=100" width="100px;" alt="Aaron Powell"/><br /><sub><b>Aaron Powell</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=aaronpowell" title="Code">💻</a> <a href="#design-aaronpowell" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=aaronpowell" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Dartypier"><img src="https://avatars.githubusercontent.com/u/22201626?v=4?s=100" width="100px;" alt="Jacopo Zecchi"/><br /><sub><b>Jacopo Zecchi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Dartypier" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/rose-m"><img src="https://avatars.githubusercontent.com/u/4354632?v=4?s=100" width="100px;" alt="Michael Rose"/><br /><sub><b>Michael Rose</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rose-m" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rose-m" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://denehoffman.com"><img src="https://avatars.githubusercontent.com/u/36977879?v=4?s=100" width="100px;" alt="Nathaniel D. Hoffman"/><br /><sub><b>Nathaniel D. Hoffman</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=denehoffman" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=denehoffman" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://schwobe.dev"><img src="https://avatars.githubusercontent.com/u/926242?v=4?s=100" width="100px;" alt="Michael Schwobe"/><br /><sub><b>Michael Schwobe</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=michaelschwobe" title="Code">💻</a> <a href="#design-michaelschwobe" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=michaelschwobe" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Nibodhika"><img src="https://avatars.githubusercontent.com/u/729967?v=4?s=100" width="100px;" alt="Nibodhika"/><br /><sub><b>Nibodhika</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Nibodhika" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Nibodhika" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://davidsass.io"><img src="https://avatars.githubusercontent.com/u/10754765?v=4?s=100" width="100px;" alt="David Sass"/><br /><sub><b>David Sass</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=sassdawe" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.carehart.org"><img src="https://avatars.githubusercontent.com/u/389746?v=4?s=100" width="100px;" alt="Charlie Arehart"/><br /><sub><b>Charlie Arehart</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=carehart" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/aramikuto"><img src="https://avatars.githubusercontent.com/u/116561995?v=4?s=100" width="100px;" alt="Aleksandr Kondrashov"/><br /><sub><b>Aleksandr Kondrashov</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=aramikuto" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://jacobbundgaard.dk"><img src="https://avatars.githubusercontent.com/u/984760?v=4?s=100" width="100px;" alt="Jacob Bundgaard"/><br /><sub><b>Jacob Bundgaard</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kimsey0" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://thisaru.me"><img src="https://avatars.githubusercontent.com/u/40016057?v=4?s=100" width="100px;" alt="Thisaru Guruge"/><br /><sub><b>Thisaru Guruge</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ThisaruGuruge" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/edwin-shdw"><img src="https://avatars.githubusercontent.com/u/62764562?v=4?s=100" width="100px;" alt="Edwin"/><br /><sub><b>Edwin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=edwin-shdw" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://dickinson.id"><img src="https://avatars.githubusercontent.com/u/522465?v=4?s=100" width="100px;" alt="Jonathan Dickinson"/><br /><sub><b>Jonathan Dickinson</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=jcdickinson" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/po1o"><img src="https://avatars.githubusercontent.com/u/5702825?v=4?s=100" width="100px;" alt="Polo-François Poli"/><br /><sub><b>Polo-François Poli</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=po1o" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/EDIflyer"><img src="https://avatars.githubusercontent.com/u/13610277?v=4?s=100" width="100px;" alt="EDIflyer"/><br /><sub><b>EDIflyer</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=EDIflyer" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=EDIflyer" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://felipezorzo.com.br"><img src="https://avatars.githubusercontent.com/u/13829?v=4?s=100" width="100px;" alt="Felipe Zorzo"/><br /><sub><b>Felipe Zorzo</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=felipebz" title="Code">💻</a> <a href="#design-felipebz" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=felipebz" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/DeepSpace2"><img src="https://avatars.githubusercontent.com/u/6841988?v=4?s=100" width="100px;" alt="Adi Vaknin"/><br /><sub><b>Adi Vaknin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=DeepSpace2" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=DeepSpace2" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://leevs.dev/"><img src="https://avatars.githubusercontent.com/u/835319?v=4?s=100" width="100px;" alt="Elad Leev"/><br /><sub><b>Elad Leev</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=EladLeev" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=EladLeev" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Soyvolon"><img src="https://avatars.githubusercontent.com/u/16871668?v=4?s=100" width="100px;" alt="Bounds"/><br /><sub><b>Bounds</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Soyvolon" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Soyvolon" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://yashgarg.dev"><img src="https://avatars.githubusercontent.com/u/33605526?v=4?s=100" width="100px;" alt="Yash Garg"/><br /><sub><b>Yash Garg</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Yash-Garg" title="Code">💻</a> <a href="#design-Yash-Garg" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Yash-Garg" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/sarpuser"><img src="https://avatars.githubusercontent.com/u/23362324?v=4?s=100" width="100px;" alt="Sarp User"/><br /><sub><b>Sarp User</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=sarpuser" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=sarpuser" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/clemyan"><img src="https://avatars.githubusercontent.com/u/41266433?v=4?s=100" width="100px;" alt="Clement Yan"/><br /><sub><b>Clement Yan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=clemyan" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/thep0y"><img src="https://avatars.githubusercontent.com/u/51874567?v=4?s=100" width="100px;" alt="thep0y"/><br /><sub><b>thep0y</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=thep0y" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ClxUne09"><img src="https://avatars.githubusercontent.com/u/175628107?v=4?s=100" width="100px;" alt="Artin"/><br /><sub><b>Artin</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ClxUne09" title="Documentation">📖</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ClxUne09" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/guspan-tanadi"><img src="https://avatars.githubusercontent.com/u/36249910?v=4?s=100" width="100px;" alt="Guspan Tanadi"/><br /><sub><b>Guspan Tanadi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=guspan-tanadi" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://vivosys.com"><img src="https://avatars.githubusercontent.com/u/53049?v=4?s=100" width="100px;" alt="Raman Gupta"/><br /><sub><b>Raman Gupta</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=rocketraman" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/hsnabszhdn"><img src="https://avatars.githubusercontent.com/u/16090309?v=4?s=100" width="100px;" alt="Hossein Abbasi"/><br /><sub><b>Hossein Abbasi</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=hsnabszhdn" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://kizivat.eu"><img src="https://avatars.githubusercontent.com/u/3535926?v=4?s=100" width="100px;" alt="David Kizivat"/><br /><sub><b>David Kizivat</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kizivat" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kizivat" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mgrubb"><img src="https://avatars.githubusercontent.com/u/351301?v=4?s=100" width="100px;" alt="Michael Grubb"/><br /><sub><b>Michael Grubb</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mgrubb" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/oliviaBahr"><img src="https://avatars.githubusercontent.com/u/98684296?v=4?s=100" width="100px;" alt="Olivia Bahr"/><br /><sub><b>Olivia Bahr</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=oliviaBahr" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=oliviaBahr" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/garysassano"><img src="https://avatars.githubusercontent.com/u/10464497?v=4?s=100" width="100px;" alt="Gary Sassano"/><br /><sub><b>Gary Sassano</b></sub></a><br /><a href="#design-garysassano" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ilaumjd"><img src="https://avatars.githubusercontent.com/u/16514431?v=4?s=100" width="100px;" alt="Ilham AM"/><br /><sub><b>Ilham AM</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ilaumjd" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ilaumjd" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://trajano.net/"><img src="https://avatars.githubusercontent.com/u/110627?v=4?s=100" width="100px;" alt="Archimedes Trajano"/><br /><sub><b>Archimedes Trajano</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=trajano" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/devxpain"><img src="https://avatars.githubusercontent.com/u/170700110?v=4?s=100" width="100px;" alt="devxpain"/><br /><sub><b>devxpain</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=devxpain" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://www.antonin-ruan.fr"><img src="https://avatars.githubusercontent.com/u/43148004?v=4?s=100" width="100px;" alt="Antonin Ruan"/><br /><sub><b>Antonin Ruan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AntoninRuan" title="Code">💻</a> <a href="#design-AntoninRuan" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=AntoninRuan" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/00ll00"><img src="https://avatars.githubusercontent.com/u/40747228?v=4?s=100" width="100px;" alt="00ll00"/><br /><sub><b>00ll00</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=00ll00" title="Code">💻</a> <a href="#design-00ll00" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=00ll00" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://devnotes.ernstc.net/"><img src="https://avatars.githubusercontent.com/u/130360?v=4?s=100" width="100px;" alt="Ernesto Cianciotta"/><br /><sub><b>Ernesto Cianciotta</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ernstc" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=ernstc" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/eelispeltola"><img src="https://avatars.githubusercontent.com/u/15069074?v=4?s=100" width="100px;" alt="Eelis Peltola"/><br /><sub><b>Eelis Peltola</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=eelispeltola" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/vshulcz"><img src="https://avatars.githubusercontent.com/u/99616188?v=4?s=100" width="100px;" alt="Vlad Shulcz"/><br /><sub><b>Vlad Shulcz</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=vshulcz" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Silzinc"><img src="https://avatars.githubusercontent.com/u/128738169?v=4?s=100" width="100px;" alt="Silzinc"/><br /><sub><b>Silzinc</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Silzinc" title="Code">💻</a> <a href="#design-Silzinc" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Silzinc" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Hampter"><img src="https://avatars.githubusercontent.com/u/23213489?v=4?s=100" width="100px;" alt="Noah Springer"/><br /><sub><b>Noah Springer</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Hampter" title="Code">💻</a> <a href="#design-Hampter" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Hampter" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/dusktreader"><img src="https://avatars.githubusercontent.com/u/713676?v=4?s=100" width="100px;" alt="Tucker Beck"/><br /><sub><b>Tucker Beck</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dusktreader" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=dusktreader" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://mpb-dev.fr/"><img src="https://avatars.githubusercontent.com/u/38607067?v=4?s=100" width="100px;" alt="Sunshio"/><br /><sub><b>Sunshio</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Pietrucci-Blacher" title="Code">💻</a> <a href="#design-Pietrucci-Blacher" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Pietrucci-Blacher" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://pashagolub.github.io/blog"><img src="https://avatars.githubusercontent.com/u/9463113?v=4?s=100" width="100px;" alt="Pavlo Golub"/><br /><sub><b>Pavlo Golub</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=pashagolub" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://heaths.dev"><img src="https://avatars.githubusercontent.com/u/1532486?v=4?s=100" width="100px;" alt="Heath Stewart"/><br /><sub><b>Heath Stewart</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=heaths" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://xelph.me"><img src="https://avatars.githubusercontent.com/u/29693543?v=4?s=100" width="100px;" alt="Xelph"/><br /><sub><b>Xelph</b></sub></a><br /><a href="#design-HypheX" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://tristanleclair.github.io/personal-website/index.html"><img src="https://avatars.githubusercontent.com/u/60434271?v=4?s=100" width="100px;" alt="Tristan Leclair-Vani"/><br /><sub><b>Tristan Leclair-Vani</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=TristanLeclair" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/vil02"><img src="https://avatars.githubusercontent.com/u/65706193?v=4?s=100" width="100px;" alt="Piotr Idzik"/><br /><sub><b>Piotr Idzik</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=vil02" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://wiyco.dev"><img src="https://avatars.githubusercontent.com/u/72733890?v=4?s=100" width="100px;" alt="wiyco"/><br /><sub><b>wiyco</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=wiyco" title="Code">💻</a> <a href="#design-wiyco" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=wiyco" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/abhro"><img src="https://avatars.githubusercontent.com/u/5664668?v=4?s=100" width="100px;" alt="abhro"/><br /><sub><b>abhro</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=abhro" title="Documentation">📖</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://sharepointgurus.net"><img src="https://avatars.githubusercontent.com/u/25376734?v=4?s=100" width="100px;" alt="Ivan Wilson"/><br /><sub><b>Ivan Wilson</b></sub></a><br /><a href="#design-spg-iwilson" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mdanish-kh"><img src="https://avatars.githubusercontent.com/u/88161975?v=4?s=100" width="100px;" alt="Muhammad Danish"/><br /><sub><b>Muhammad Danish</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mdanish-kh" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://dub.sh/boscodomingo"><img src="https://avatars.githubusercontent.com/u/46006784?v=4?s=100" width="100px;" alt="Bosco Domingo"/><br /><sub><b>Bosco Domingo</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=BoscoDomingo" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://edu4rdshl.dev"><img src="https://avatars.githubusercontent.com/u/32582878?v=4?s=100" width="100px;" alt="Eduard Tolosa"/><br /><sub><b>Eduard Tolosa</b></sub></a><br /><a href="#design-Edu4rdSHL" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Edu4rdSHL" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/JamesAndrewJackson13"><img src="https://avatars.githubusercontent.com/u/27647566?v=4?s=100" width="100px;" alt="James Jackson"/><br /><sub><b>James Jackson</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=JamesAndrewJackson13" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=JamesAndrewJackson13" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Mr-Vipi"><img src="https://avatars.githubusercontent.com/u/58825526?v=4?s=100" width="100px;" alt="Jul Guga"/><br /><sub><b>Jul Guga</b></sub></a><br /><a href="#design-Mr-Vipi" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://txzhan.io"><img src="https://avatars.githubusercontent.com/u/178074436?v=4?s=100" width="100px;" alt="tiaoxizhan"/><br /><sub><b>tiaoxizhan</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=tiaoxizhan" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/chrisant996"><img src="https://avatars.githubusercontent.com/u/17440311?v=4?s=100" width="100px;" alt="Chris Antos"/><br /><sub><b>Chris Antos</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=chrisant996" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://robertbleattler.com"><img src="https://avatars.githubusercontent.com/u/40604784?v=4?s=100" width="100px;" alt="Robert Bleattler"/><br /><sub><b>Robert Bleattler</b></sub></a><br /><a href="#design-rbleattler" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://artis-auxilium.fr/fr"><img src="https://avatars.githubusercontent.com/u/1815655?v=4?s=100" width="100px;" alt="dev2a"/><br /><sub><b>dev2a</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=d3v2a" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://gardunos.tech"><img src="https://avatars.githubusercontent.com/u/30121656?v=4?s=100" width="100px;" alt="Luis"/><br /><sub><b>Luis</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=luisegarduno" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/tleepa"><img src="https://avatars.githubusercontent.com/u/7734919?v=4?s=100" width="100px;" alt="Leepa"/><br /><sub><b>Leepa</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=tleepa" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=tleepa" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://blog.raylu.net"><img src="https://avatars.githubusercontent.com/u/90059?v=4?s=100" width="100px;" alt="raylu"/><br /><sub><b>raylu</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=raylu" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=raylu" title="Documentation">📖</a> <a href="#design-raylu" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/lechwolowski"><img src="https://avatars.githubusercontent.com/u/33866950?v=4?s=100" width="100px;" alt="Lech Wołowski"/><br /><sub><b>Lech Wołowski</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=lechwolowski" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/OwlBurst"><img src="https://avatars.githubusercontent.com/u/158167545?v=4?s=100" width="100px;" alt="Owl Burst"/><br /><sub><b>Owl Burst</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=OwlBurst" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://rubixdev.de"><img src="https://avatars.githubusercontent.com/u/35602040?v=4?s=100" width="100px;" alt="Silas Groh"/><br /><sub><b>Silas Groh</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=RubixDev" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=RubixDev" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://mwiede.me/blog"><img src="https://avatars.githubusercontent.com/u/4295189?v=4?s=100" width="100px;" alt="Marco Wiedemeyer"/><br /><sub><b>Marco Wiedemeyer</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mwiedemeyer" title="Code">💻</a> <a href="#design-mwiedemeyer" title="Design">🎨</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mwiedemeyer" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/0-0-1-0-1-0-1-0"><img src="https://avatars.githubusercontent.com/u/43226073?v=4?s=100" width="100px;" alt="0-0-1-0-1-0-1-0"/><br /><sub><b>0-0-1-0-1-0-1-0</b></sub></a><br /><a href="#design-0-0-1-0-1-0-1-0" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/player131007"><img src="https://avatars.githubusercontent.com/u/77326303?v=4?s=100" width="100px;" alt="player131007"/><br /><sub><b>player131007</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=player131007" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/kaien07"><img src="https://avatars.githubusercontent.com/u/160471571?v=4?s=100" width="100px;" alt="kaien07"/><br /><sub><b>kaien07</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=kaien07" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/BusHero"><img src="https://avatars.githubusercontent.com/u/24370515?v=4?s=100" width="100px;" alt="Cervac Petru"/><br /><sub><b>Cervac Petru</b></sub></a><br /><a href="#design-BusHero" title="Design">🎨</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/Marukome0743"><img src="https://avatars.githubusercontent.com/u/146040408?v=4?s=100" width="100px;" alt="マルコメ"/><br /><sub><b>マルコメ</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Marukome0743" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=Marukome0743" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mreinhardt"><img src="https://avatars.githubusercontent.com/u/582461?v=4?s=100" width="100px;" alt="Michael Reinhardt"/><br /><sub><b>Michael Reinhardt</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mreinhardt" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=mreinhardt" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/AspectBruise09"><img src="https://avatars.githubusercontent.com/u/141767586?v=4?s=100" width="100px;" alt="Artin"/><br /><sub><b>Artin</b></sub></a><br /><a href="#design-AspectBruise09" title="Design">🎨</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://bsimjoo.pcworms.ir"><img src="https://avatars.githubusercontent.com/u/117530839?v=4?s=100" width="100px;" alt="Behnam Simjoo"/><br /><sub><b>Behnam Simjoo</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=b-simjoo" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/plamendelchev"><img src="https://avatars.githubusercontent.com/u/25668366?v=4?s=100" width="100px;" alt="Plamen Delchev"/><br /><sub><b>Plamen Delchev</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=plamendelchev" title="Code">💻</a> <a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=plamendelchev" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/beaualbritton"><img src="https://avatars.githubusercontent.com/u/112587801?v=4?s=100" width="100px;" alt="beau albritton"/><br /><sub><b>beau albritton</b></sub></a><br /><a href="https://github.com/JanDeDobbeleer/oh-my-posh/commits?author=beaualbritton" title="Code">💻</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors][ac] specification.
Contributions of any kind welcome!

[acek]: https://allcontributors.org/docs/en/emoji-key
[ac]: https://github.com/all-contributors/all-contributors



================================================
FILE: website/docs/faq.mdx
================================================
---
id: faq
title: FAQ
sidebar_label: 🤔 FAQ
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import Config from "@site/src/components/Config.js";

Before validating anything, make sure you're on the [latest version][latest] of Oh My Posh and your terminal and shell are up-to-date.

### My prompt is broken after upgrading to PowerShell 7.4

PowerShell 7.4 has an [issue][pwsh-20733] in encoding which affects the rendering of Oh My Posh.
You can work around this by forcing the entire shell to UTF8.

```powershell
[Console]::OutputEncoding = [Text.Encoding]::UTF8
oh-my-posh init pwsh --config ~/custom.omp.json | Invoke-Expression
```

:::warning
Forcing the entire session to UTF8 can have unwanted side effects for other executables. We can't be held liable for that,
consider this a temporary workaround until the original PowerShell [issue][pwsh-20733] is resolved.
:::

### I want to disable the upgrade notice

You can disable the upgrade notice using the following command once:

```bash
oh-my-posh disable notice
```

If you want to enable it again, run:

```bash
oh-my-posh enable notice
```

### The prompt is slow (delay in showing the prompt between commands)

:::tip Windows
The delay you're experiencing may be linked to the real-time protection features of antivirus software.

To potentially alleviate this delay, ensure that Windows Defender or your primary antivirus software has an [exclusion][exclusion] set for the full path of the executable. To identify the full path of the executable in question, you can run the following command in a PowerShell prompt:

```powershell
(Get-Command oh-my-posh).Source
```

Additionally, check your antivirus settings for features that actively scan scripts during execution. Even with exclusions set, some antivirus programs might still actively scan scripts, which can introduce a noticeable delay.
:::

:::caution
Always proceed with caution to maintain a balance between system performance and security. Modifying security settings or adding exclusions can expose your system to potential threats.
:::

<Tabs
  defaultValue="powershell"
  groupId="shell"
  values={[
    { label: 'powershell', value: 'powershell', },
    { label: 'others', value: 'others', },
  ]
}>
<TabItem value="powershell">

You can use the `oh-my-posh debug` functionality to see where Oh My Posh spends its time.
In case there's no clear culprit (timings indicate everything's OK), chances are some modules are the culprit.
We bootstrap a few PowerShell modules to maximize compatibility, but sometimes these can introduce unwanted side-effects.

The modules we support are:

- posh-git

</TabItem>
<TabItem value="others">

You can use Oh My Posh's built-in debug functionality to identify slow segments.

```bash
oh-my-posh debug
```

Whenever there's a segment that spikes, see if there might be updates to the underlying functionality (usually shell commands).

</TabItem>
</Tabs>

If only your Git repo paths are slow, then try running [`git gc`][git-gc] to clean up and optimize the local repository.

If nothing seems to resolve the issue, feel free to [create an issue][new-issue].

### There are rectangles instead of icons in my prompt

The font you're using doesn't have the needed standard extended glyph set like [Nerd Font][nf] does.
Windows Terminal ships with Cascadia Code by default which has a powerline patched variant called Cascadia Code PL,
but also that one misses certain interesting icons. You can fall back to any theme with the `.minimal` indication,
or make use of a Nerd Font. Have a look at the [font][font] section for more context in case you're using all the right conditions.

### Text decoration styles like bold and dimmed don't work

The text decoration styles are based on your terminal emulator's capabilities.

A quick way to check if your terminal supports a specific style escape sequence is to take a look at the `terminfo` database, on Linux.
Refer [this page on ArchWiki][arch-terminfo].

If you are on Windows, use Windows Terminal. It closely copies the `xterm-256color` capabilities.
See the [PowerShell docs on terminal support][ps-ansi-docs] and [this GitHub comment][xterm-gh-comment].

### Windows Terminal: Unexpected space between segments/text

Windows Terminal has some issues with [rendering certain glyphs][wt-glyph]. These issues are on [their backlog][wt-glyphs].
A temporary workaround is to use an invisible character at the end (`\u2800`), or a zero width character (`\u200a`) before the icon.

In case you didn't export the config yet (it's the default, or you're using the `--config` flag with a predefined theme), you can follow
the steps [here][export] to export it to a local file so you can adjust the [segment's][segment] `template`.

In the example below, it's assumed that the execution segment's icon `\ueba2` has an unexpected space after it in Windows Terminal.

<Config
  data={{
    type: "executiontime",
    template: "\ueba2", // unexpected space
  }}
/>

Adjust it by adding `\u2800` immediately after the icon.

<Config
  data={{
    type: "executiontime",
    template: "\ueba2\u2800", // solved
  }}
/>

### Jetbrains terminals: Icons do not render

They need to work on their terminal, somehow it only supports UTF-8 and not UTF-16.
[An issue][jb-icons] is available for a follow-up here.

### Strange colouring after exiting VIM or when using the PowerShell progress bootstrap

This bug is caused by Windows Terminal and/or VIM. There are two issues for this, one at [Windows Terminal][wt-vim] and
one at [VIM][vim-wt].

### Conda: environment name displayed in front of the prompt

Conda will automatically prepend the prompt with the name of the environment you're in.
To solely rely on Oh My Posh to set the prompt, you can configure the following setting to hide it.
Make sure to add this **before** initializing Oh My Posh.

```bash
conda config --set changeps1 False
```

### Python venv: Prompt changes on activating virtual environment

Virtual environments created with `venv` add the active environment's name to the prompt automatically.
To disable this behaviour, set `VIRTUAL_ENV_DISABLE_PROMPT` environment variable to `1` on your system. Example files:

Note: Tilde (~) in paths refers to your user's home directory.

<Tabs
  defaultValue="powershell"
  groupId="shell"
  values={[
    { label: 'powershell', value: 'powershell', },
    { label: 'fish', value: 'fish', },
    { label: 'others', value: 'others', },
  ]
}>
<TabItem value="powershell">

```powershell
# Your PowerShell $PROFILE
$env:VIRTUAL_ENV_DISABLE_PROMPT=1
```

</TabItem>
<TabItem value="fish">

```fish
# ~/.config/fish/config.fish
set -x VIRTUAL_ENV_DISABLE_PROMPT 1
```

</TabItem>
<TabItem value="others">

```bash
# ~/.bashrc (bash) or ~/.zprofile or ~/.zshrc (zsh)
export VIRTUAL_ENV_DISABLE_PROMPT=1
```

</TabItem>
</Tabs>

### PowerShell: The term 'Set-Theme' is not recognized as the name of a cmdlet, function, script file, or operable program.

You need to migrate using the following [guide][migrating].

### PowerShell: Running in ConstrainedLanguage mode

You're here because you've seen the following message:

```powershell
[WARNING] ConstrainedLanguage mode detected, unable to set console to UTF-8.
When using PowerShell in ConstrainedLanguage mode, please set the
console mode manually to UTF-8. See here for more information:
https://ohmyposh.dev/docs/faq#powershell-running-in-constrainedlanguage-mode
```

When running PowerShell in ConstrainedLanguage mode, we can't set the console to UTF-8. This will cause the prompt to be rendered incorrectly.
There's a few [options][utf-8] to set the console to UTF-8 from an OS perspective on Windows, other systems shouldn't be impacted.

To remove the message after manual configuration, you can add the following to your `$PROFILE` before importing Oh My Posh:

```powershell
$env:POSH_CONSTRAINED_LANGUAGE = 1
```

### PowerShell: The term '.../oh-my-posh.exe' is not recognized as a name of a cmdlet...

For example:

```
&: The term 'C:/Users/TommiGr├╢nlund/.oh-my-posh/oh-my-posh.exe' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
```

The issue is that PowerShell on Windows doesn't yet default to UTF-8. Resolve the issue by setting the shell to UTF-8 in the scope of initializing Oh My Posh.

:::info Why it matters?
If the location contains non-ASCII characters, non-UTF-8 PowerShell may provide a wrong path to Oh My Posh, which can break the initialization.

The scenario for non-ASCII location:

- Your computer has a non-ASCII username.
- Your [config file](./installation/customize.mdx) is under your `$HOME`.
  :::

To do so, edit your `$PROFILE`, find the line that initializes Oh My Posh (as highlighted below), and change it to the following:

```powershell
$previousOutputEncoding = [Console]::OutputEncoding
[Console]::OutputEncoding = [Text.Encoding]::UTF8
try {
    // highlight-start
    oh-my-posh init pwsh --config ~/custom.omp.json | Invoke-Expression
    // highlight-end
} finally {
    [Console]::OutputEncoding = $previousOutputEncoding
}
```

Alternatively, let the whole shell become UTF-8. (Be aware: Unwanted side effects can happen.) Add the following line to the top of your `$PROFILE`:

```powershell
$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding
```

### Zsh: No command history (Ctrl+R does not work)

This issue occurs when you're using plain zsh in combination with Oh My Posh.
You can fix this by adding the right configuration to `~/.zshrc`.

```bash
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
```

### ZSH: No such shell function 'zle-line-init'

This is most likely caused by two Oh My Posh init lines in your `.zshrc`, remove one of them. See [here][zsh-init].

### Fish: Display current bind (Vim) mode

By default, Oh My Posh will not re-render the prompt (i.e., generate a new prompt) until a new command is run, so you should
export `$fish_bind_mode` to `FISH__BIND_MODE` and call the `omp_repaint_prompt` function to do prompt re-rendering when
`$fish_bind_mode` changes:

```fish
function rerender_on_bind_mode_change --on-variable fish_bind_mode
    if test "$fish_bind_mode" != paste -a "$fish_bind_mode" != "$FISH__BIND_MODE"
        set -gx FISH__BIND_MODE $fish_bind_mode
        omp_repaint_prompt
    end
end
```

Next, mask the `fish_default_mode_prompt` function to prevent it from echoing the current mode:

```fish
function fish_default_mode_prompt --description "Display vi prompt mode"
    # This function is masked and does nothing
end
```

After that, you can use the value in a template. The following replicates the [example in the Fish documentation][fish-mode-prompt]:

<Config
  data={{
    type: "text",
    template:
      '{{ if eq .Env.FISH__BIND_MODE "default" }}<red>[N]</>{{ else if eq .Env.FISH__BIND_MODE "insert" }}<green>[I]</>{{ else if eq .Env.FISH__BIND_MODE "replace_one" }}<green>[R]</>{{ else if eq .Env.FISH__BIND_MODE "visual"}}<brmagenta>[V]</>{{ else }}<red>[?]</>{{ end }}',
  }}
/>

### Fish: Integrate with `Alt+←` and `Alt+→` Bindings to `prevd` and `nextd`

Fish supports using `Alt+←` (Alt+Left) and `Alt+→` (Alt+Right) bindings to [navigate the directory history](https://fishshell.com/docs/current/interactive.html#id13).

To have oh-my-posh update the directory context as the directory history is navigated, use a function that calls `omp_repaint_prompt` when the `$PWD` variable changes:

```fish
function rerender_on_dir_change --on-variable PWD
  omp_repaint_prompt
end
```

### After updating my Nerd Font to a newer version, the prompt displays unknown characters

Nerd Fonts moved the icons to a different location in the font for v3.
This can cause the prompt to display unknown characters. There's a built-in migration in Oh My Posh to fix this.

To migrate, run the following command:

```bash
oh-my-posh config migrate glyphs --write
```

This will update your configuration file to use the new glyph locations. Do know they might look different, as they also
updated the icons themselves. A backup of the current config can be found in the same location with a `.bak` extension.

### Xonsh: Right prompt jumps to bottom of the screen

This is a known problem with Xonsh. The issue is tracked [here][xonsh-issue].

[pwsh-20733]: https://github.com/PowerShell/PowerShell/issues/20733
[exclusion]: https://support.microsoft.com/en-us/windows/add-an-exclusion-to-windows-security-811816c0-4dfd-af4a-47e4-c301afe13b26
[arch-terminfo]: https://wiki.archlinux.org/title/Bash/Prompt_customization#Terminfo_escape_sequences
[ps-ansi-docs]: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_ansi_terminals?view=powershell-7.2
[xterm-gh-comment]: https://github.com/microsoft/terminal/issues/6045#issuecomment-631743728
[git-gc]: https://git-scm.com/docs/git-gc
[new-issue]: https://github.com/JanDeDobbeleer/oh-my-posh/issues/new/choose
[latest]: https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest
[wt-glyph]: https://github.com/microsoft/terminal/issues/3546
[wt-glyphs]: https://github.com/microsoft/terminal/issues?q=is%3Aissue+is%3Aopen+unicode+width
[export]: installation/customize.mdx#custom-configuration
[segment]: configuration/segment.mdx
[nf]: https://www.nerdfonts.com/
[font]: /docs/installation/fonts
[jb-icons]: https://youtrack.jetbrains.com/issue/IDEA-248010
[migrating]: /docs/migrating
[wt-vim]: https://github.com/microsoft/terminal/issues/3794
[vim-wt]: https://github.com/vim/vim/issues/5092
[utf-8]: https://github.com/PowerShell/PowerShell/issues/7233#issuecomment-640243647
[fish-changelog]: https://fishshell.com/docs/current/relnotes.html#id1
[xonsh-issue]: https://github.com/xonsh/xonsh/issues/3810
[zsh-init]: https://github.com/JanDeDobbeleer/oh-my-posh/discussions/3462#discussioncomment-5155790
[fish-mode-prompt]: https://fishshell.com/docs/current/cmds/fish_mode_prompt.html#example



================================================
FILE: website/docs/migrating-module.md
================================================
---
id: migrating
title: PowerShell module
sidebar_label: ⚰️ PowerShell Module
---

## Problem statement

Traditionally, the module was the only way to install oh-my-posh using `Install-Module oh-my-posh`.
Today, with the shift to the executable version over a year ago, it only acts as a wrapper around the
executable, offering no additional functionality. Throughout the year, the following changes have been made:

- don't ship all binaries in the Module but download on `Import-Module`
- move all functionality from the Module to the [init][init] script

There's a problem with the Module due to the following:

- downloading the binary is a problem on company managed computers
- the module syncs cross device thanks to OneDrive sync, causing versions to be out of sync and [configs to break][idiots]
- it's impactful having to explain the difference time and time again (for me)

## Migration steps

### Remove the module's cached files

```powershell
Remove-Item $env:POSH_PATH -Force -Recurse
```

:::warning
If you added custom elements to this location, they will be deleted with the command above.
Make sure to move these before running the command.
:::

### Install oh-my-posh

See your platform's installation guide. The preferred ways are **winget** and **Homebrew**.

- [Windows][windows]
- [macOS][macos]
- [Linux][linux]

### Uninstall the PowerShell module

```powershell
Uninstall-Module oh-my-posh -AllVersions
```

Delete the import of the PowerShell module in your `$PROFILE`

```powershell
Import-Module oh-my-posh
```

### Adjust setting the prompt

If you're still using `Set-PoshPrompt`, replace that statement with the following:

#### I have a custom theme

```powershell
oh-my-posh init pwsh --config ~/.custom.omp.json | Invoke-Expression
```

And replace `~/.custom.omp.json` with the location of your theme.

#### I have an out-of-the-box theme

```powershell
oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\jandedobbeleer.omp.json" | Invoke-Expression
```

Replace `jandedobbeleer.omp.json` with the theme you use.

:::caution
Only winget and the Windows Store add the environment variable `POSH_THEMES_PATH` automatically. For Homebrew, use
`$(brew --prefix oh-my-posh)/themes/jandedobbeleer.omp.json`.
:::

[init]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/src/shell/scripts/omp.ps1
[idiots]: https://ohmyposh.dev/blog/idiots-everywhere
[windows]: /docs/installation/windows
[macos]: /docs/installation/macos
[linux]: /docs/installation/linux



================================================
FILE: website/docs/share-theme.md
================================================
---
id: share
title: Share theme
sidebar_label: 📸 Share theme
---

You can export your prompt to an image which you can share online. You have the ability to align
it correctly and add your name for credits too.

:::caution
Some glyphs aren't rendered correctly, that's not you but the limitations of the renderer.
Depending on your config, you might have to tweak the output a little bit.
:::

The oh-my-posh executable has the `config export image` command to export your current theme configuration
to a PNG image file (if no other options are specified this will be the name of the config file, or `prompt.png`).

```powershell
oh-my-posh config export image
```

There are a couple of additional flags you can use to tweak the image rendering:

- `--author`: the name of the creator, added after `ohmyposh.dev`
- `--background-color`: the hex background color to use (e.g. `#222222`)
- `--output`: the file to export to (e.g. `mytheme.png`)

For all options, and additional examples, use `oh-my-posh config export image --help`



================================================
FILE: website/docs/themes.md
================================================
---
id: themes
title: Themes
sidebar_label: 🎨 Themes
---

Oh My Posh comes with many themes included out-of-the-box. Below are some screenshots of the more common themes.
For the full updated list of themes, [view the themes][themes] in Github.

Once you're ready to swap to a theme, follow the steps described in [🚀 Get started > Customize][installation-customize].

Themes with `minimal` in their names do not require a Nerd Font. Read about [🆎Fonts][fonts] for more information.

[themes]: https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes
[fonts]: /docs/installation/fonts
[installation-customize]: /docs/installation/customize

<!-- Do not change the content below, themes are rendered automatically -->



================================================
FILE: website/docs/configuration/block.mdx
================================================
---
id: block
title: Block
sidebar_label: Block
---

Let's take a closer look at what defines a block.

import Config from "@site/src/components/Config.js";

<Config
  data={{
    blocks: [
      {
        type: "prompt",
        alignment: "left",
        segments: [],
      },
    ],
  }}
/>

## Settings

| Name               | Type      |
| ------------------ | --------- |
| `type`             | `string`  |
| `newline`          | `boolean` |
| `alignment`        | `string`  |
| `filler`           | `string`  |
| `overflow`         | `string`  |
| `leading_diamond`  | `string`  |
| `trailing_diamond` | `string`  |
| `segments`         | `array`   |
| `force`            | `boolean` |

### Type

Tells the engine what to do with the block. There are two options:

- `prompt` renders one or more segments
- `rprompt` renders one or more segments aligned to the right of the cursor. Only one `rprompt` block is permitted.
  Supported on bash (with [ble.sh]), zsh, PowerShell, cmd, nu and fish.

### Newline

Start the block on a new line - defaults to `false`. For `pwsh` and `cmd` this will not print a newline
that's defined on the first block when the prompt is on the first line (when using clear), or when the shell session
starts (1st prompt). To enable the same behavior for `bash` and `zsh`, set `enable_cursor_positioning` to `true`.
This can have the side effect of swallowing commands you type while the prompt loads, or while the current
command is still ongoing. This is a limitation of the shell and not Oh My Posh.

### Alignment

- `left`
- `right`

Tell the engine if the block should be left or right-aligned.

### Filler

When you want to join a right and left aligned block with a repeated set of characters, add the character(s)
to be repeated to this property. Add this property to the _right_ aligned block. This supports the use of
[color overrides][color-overrides].

<Config
  data={{
    block: {
      alignment: "right",
      filler: ".",
    },
  }}
/>

Filler allows you to specify a template to tweak the text used as filler. This template behaves the same as
Segment templates, however, fewer properties are available.

| Name        | Type   | Description                                                           |
| ----------- | ------ | --------------------------------------------------------------------- |
| `.Overflow` | `text` | if no overflow was needed, this is empty. Otherwise `hide` or `break` |
| `.Padding`  | `int`  | the computed length of the padding between left and right blocks      |

This can be very useful if you wish to use a filler text when there is no overflow and use
empty space when the right block is hidden or drawn on a newline due to overflow.

<Config
  data={{
    block: {
      alignment: "right",
      overflow: "hide",
      filler: "{{ if .Overflow }} {{ else }}-{{ end }}",
    },
  }}
/>

### Overflow

- `break`
- `hide`

When the right aligned block is so long it will overflow the left aligned block, the engine will either
break the block or hide it based on the setting. By default it is printed as is on the same line.

### Leading Diamond

The character to use as a leading diamond for the first segment in case you always want to start the block
with the same leading diamond, regardless of which segment is enabled or not.

### Trailing Diamond

The character to use as a trailing diamond for the last segment in case you always want to end the block
with the same trailing diamond, regardless of which segment is enabled or not.

### Segments

Array of one or more [segments][segment].

### Force

When set to `true`, the block will always be rendered, even if all segments are empty. Defaults to `false`.

[ble.sh]: https://github.com/akinomyoga/ble.sh
[color-overrides]: /docs/configuration/colors#color-overrides
[segment]: segment.mdx



================================================
FILE: website/docs/configuration/colors.mdx
================================================
---
id: colors
title: Colors
sidebar_label: Colors
---

import Config from "@site/src/components/Config.js";

## Standard colors

Oh My Posh supports multiple different color references, being:

- True color using [hex colors][hexcolors] (for example `#CB4B16`).
- 16 [ANSI color names][ansicolors].
  These include 8 basic ANSI colors and `default`

  `black` `red` `green` `yellow` `blue` `magenta` `cyan` `white` `default`

  as well as 8 extended ANSI colors:

  `darkGray` `lightRed` `lightGreen` `lightYellow` `lightBlue` `lightMagenta` `lightCyan` `lightWhite`

- 256 color palette using their number representation.
  For example `0` is black, `1` is red, `2` is green, etc.
- The `transparent` keyword which can be used to create either a transparent foreground override
  or transparent background color using the segment's foreground property.
- The `foreground` keyword which can be used to reference the current segment's foreground color.
- The `background` keyword which can be used to reference the current segment's background color.
- The `parentForeground` keyword which can be used to inherit the previous active segment's foreground color.
- The `parentBackground` keyword which can be used to inherit the previous active segment's background color.
- The `accent` keyword which references the OS accent color (Windows and macOS only).

## Color templates

Array of string [templates][templates] to define the color based on the current context.
Under the hood this uses go's [text/template][go-text-template] feature extended with [sprig][sprig] and
offers a few standard properties to work with. For segments, you can look at the **Template Properties**
section in the documentation. The general template properties are listed [here][template-properties].

The following sample is based on the [AWS Segment][aws].

<Config
  data={{
    type: "aws",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#111111",
    foreground_templates: [
      '{{if contains "default" .Profile}}#FFA400{{end}}',
      '{{if contains "jan" .Profile}}#f1184c{{end}}',
    ],
  }}
/>

The logic is as follows: when `foreground_templates` contains an array, we will check every template line until there's
one that returns a non-empty string. So, when the contents of `.Profile` contain the word `default`, the first template
returns `#FFA400` and that's the color that will be used. If it contains `jan`, it returns `#f1184c`. When none of the
templates returns a value, the foreground value `#ffffff` is used as a fallback value.

## Color overrides

You have the ability to override the foreground and/or background color for text in any property that accepts it.
The syntax is custom but should be rather straight-forward: `<foreground,background>text</>`. For example,
`<#ffffff,#000000>this is white with black background</> <#FF479C>but this is pink</>`.
Anything between the color start `<#FF479C>` and end `</>` will be colored accordingly.

If you want to print a colored bracket that isn't the same as the segment's `foreground`, you can
do so like this:

<Config
  data={{
    template: "<#CB4B16>┏[</>",
  }}
/>

If you also wanted to change the background color in the previous command, you would do so like this:

<Config
  data={{
    template: "<#CB4B16,#FFFFFF>┏[</>",
  }}
/>

To change _only_ the background color, just omit the first color from the above string:

<Config
  data={{
    template: "<,#FFFFFF>┏[</>",
  }}
/>

## Palette

If your configuration defined the Palette, you can use the _Palette reference_ `p:<palette key>` in places where the
**Standard color** is expected.

### Defining a Palette

Palette is a set of named **Standard colors**. To use a Palette, define a `"palette"` object
at the top level of your configuration:

<Config
  data={{
    palette: {
      "git-foreground": "#193549",
      git: "#FFFB38",
      "git-modified": "#FF9248",
      "git-diverged": "#FF4500",
      "git-ahead": "#B388FF",
      "git-behind": "#B388FF",
      red: "#FF0000",
      green: "#00FF00",
      blue: "#0000FF",
      white: "#FFFFFF",
      black: "#111111",
    },
  }}
/>

Color names (palette keys) can have any string value, so be creative.
Color values, on the other hand, should adhere to the **Standard color** format.

### Using a Palette

You can now use _Palette references_ in any [Segment's][segment] `foreground`, `foreground_templates`,
`background`, `background_templates` properties, and other config properties that expect **Standard color** value.
_Palette reference_ format is `p:<palette key>`. Take a look at the [Git][git] segment using _Palette references_:

<Config
  data={{
    type: "git",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "p:git-foreground",
    background: "p:git",
    background_templates: [
      "{{ if or (.Working.Changed) (.Staging.Changed) }}p:git-modified{{ end }}",
      "{{ if and (gt .Ahead 0) (gt .Behind 0) }}p:git-diverged{{ end }}",
      "{{ if gt .Ahead 0 }}p:git-ahead{{ end }}",
      "{{ if gt .Behind 0 }}p:git-behind{{ end }}",
    ],
  }}
/>

Having all of the colors defined in one place allows you to import existing color configurations (usually with slight
tweaking to adhere to the format), easily change colors of multiple segments at once, and have a more
organized configuration overall. Be creative!

### _Palette references_ and **Standard colors**

Using Palette does not interfere with using **Standard colors** in your configuration. You can still use **Standard colors**
everywhere. This can be useful if you want to use a specific color for a single segment element, or in a
_Color override_ ([Battery segment][battery]):

<Config
  data={{
    type: "battery",
    style: "powerline",
    invert_powerline: true,
    powerline_symbol: "\uE0B2",
    foreground: "p:white",
    background: "p:black",
    properties: {
      discharging_icon: "<#ffa500>-</> ",
      charging_icon: "+ ",
      charged_icon: "* ",
    },
  }}
/>

### Handling of invalid references

Should you use an invalid _Palette reference_ as a color (for example typo `p:bleu` instead of `p:blue`),
the Pallete engine will use the Transparent keyword as a fallback value. So if you see your prompt segments
rendered with incorrect colors, and you are using a Palette, be sure to check the correctness of your references.

### Recursive resolution

Palette allows for recursive _Palette reference_ resolution. You can use a _Palette reference_ as a color
value in Palette. This allows you to define named colors, and use references to those colors as Palette values.
For example, `p:foreground` and `p:background` will be correctly set to "#CAF0F80" and "#023E8A":

<Config
  data={{
    palette: {
      "light-blue": "#CAF0F8",
      "dark-blue": "#023E8A",
      foreground: "p:light-blue",
      background: "p:dark-blue",
    },
  }}
/>

## Palettes

If you want to use a `palette` conditionally, for example for **light or dark mode**, you can define multiple
`palettes` and a [template][templates] that resolves to the `palette` key. The `template` is evaluated at
runtime so your prompt can change at any time based on the outcome of the `template`.

Take the following configuration:

<Config
  data={{
    palettes: {
      template: '{{ if eq .Shell "pwsh" }}latte{{ else }}frappe{{ end }}',
      list: {
        latte: {
          black: "#262B44",
          green: "#59C9A5",
          orange: "#F07623",
          red: "#e64553",
          white: "#E0DEF4",
          yellow: "#df8e1d",
          blue: "#7287fd",
        },
        frappe: {
          black: "#262B44",
          green: "#59C9A5",
          orange: "#F07623",
          red: "#D81E5B",
          white: "#E0DEF4",
          yellow: "#F3AE35",
          blue: "#4B95E9",
        },
      },
    },
  }}
/>

In this case, when the shell is `pwsh`, the `latte` palette will be used, otherwise it uses the `frappe` palette. If you want,
you could also add `frappe` as the default `palette`, given that one is used as a fallback when not match can be found based on what
the `template` resolves to. In case no match is available and no `palette` is defined, it will also fallback to `transparent`
for any palette color reference in templates/colors.

If you want to avoid color duplication, you can use palettes in combination with the `palette` property. This way you can define
a color once and reuse it in multiple palettes. For example:

<Config
  data={{
    palette: {
      black: "#262B44",
      green: "#59C9A5",
      orange: "#F07623",
    },
    palettes: {
      template: '{{ if eq .Shell "pwsh" }}latte{{ else }}frappe{{ end }}',
      list: {
        latte: {
          red: "#e64553",
          white: "#E0DEF4",
          yellow: "#df8e1d",
          blue: "#7287fd",
        },
        frappe: {
          red: "#D81E5B",
          white: "#E0DEF4",
          yellow: "#F3AE35",
          blue: "#4B95E9",
        },
      },
    },
  }}
/>

:::info
If a color is defined in both palette and palettes, the palettes' resolved color will take precedence.
:::

## Cycle

When you want to display the same **sequence of colors** (background and foreground) regardless of which segments are active, you can
make use of the cycle property. This property is a list of colors which are used one after the other in a continuous loop. A defined
cycle always gets precedence over everything else.

<Config
  data={{
    cycle: [
      {
        background: "p:blue",
        foreground: "p:white",
      },
      {
        background: "p:green",
        foreground: "p:black",
      },
      {
        background: "p:orange",
        foreground: "p:white",
      },
    ],
  }}
/>

[hexcolors]: https://htmlcolorcodes.com/color-chart/material-design-color-chart/
[ansicolors]: https://htmlcolorcodes.com/color-chart/material-design-color-chart/
[git]: /docs/segments/scm//git
[battery]: /docs/segments/system/battery
[template-properties]: /docs/configuration/templates#global-properties
[aws]: /docs/segments/cloud/aws
[go-text-template]: https://golang.org/pkg/text/template/
[sprig]: https://masterminds.github.io/sprig/
[templates]: templates.mdx



================================================
FILE: website/docs/configuration/debug-prompt.mdx
================================================
---
id: debug-prompt
title: Debug prompt
sidebar_label: Debug prompt
---

import Config from "@site/src/components/Config.js";

:::info
This feature only works in `powershell` for the time being.
:::

The debug prompt is displayed when you debug a script from the command line or Visual Studio Code.
The default is `[DBG]: `.

You can use go [text/template][go-text-template] [templates][templates] extended with [sprig][sprig] to enrich the text.
Environment variables are available, just like the [`console_title_template`][console-title] functionality.

## Configuration

You need to extend or create a custom theme with your debug prompt override. For example:

<Config
  data={{
    debug_prompt: {
      background: "transparent",
      foreground: "#ffffff",
      template: "Debugging ",
    },
  }}
/>

## Properties

| Name                   | Type     | Description                                                                                                                         |
| ---------------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| `foreground`           | `string` | [color][colors]                                                                                                                     |
| `foreground_templates` | `string` | [color templates][color-templates]                                                                                                  |
| `background`           | `string` | [color][colors]                                                                                                                     |
| `background_templates` | `string` | [color templates][color-templates]                                                                                                  |
| `template`             | `string` | a go [text/template][go-text-template] template extended with [sprig][sprig] utilizing the properties below - defaults to `[DBG]: ` |

## Template ([info][templates])

| Name           | Type      | Description                                                               |
| -------------- | --------- | ------------------------------------------------------------------------- |
| `.Root`        | `boolean` | is the current user root/admin or not                                     |
| `.PWD`         | `string`  | the current working directory                                             |
| `.Folder`      | `string`  | the current working folder                                                |
| `.Shell`       | `string`  | the current shell name                                                    |
| `.UserName`    | `string`  | the current user name                                                     |
| `.HostName`    | `string`  | the host name                                                             |
| `.Code`        | `int`     | the last exit code                                                        |
| `.Env.VarName` | `string`  | Any environment variable where `VarName` is the environment variable name |

[go-text-template]: https://golang.org/pkg/text/template/
[sprig]: https://masterminds.github.io/sprig/
[console-title]: /docs/configuration/title#console-title-template
[templates]: /docs/configuration/templates
[colors]: /docs/configuration/colors
[color-templates]: /docs/configuration/colors#color-templates



================================================
FILE: website/docs/configuration/example.mdx
================================================
---
id: sample
title: Sample
sidebar_label: Sample
---

import Config from "@site/src/components/Config.js";

<Config
  data={{
    $schema:
      "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
    blocks: [
      {
        segments: [
          {
            foreground: "#007ACC",
            template: " {{ .CurrentDate | date .Format }} ",
            properties: {
              time_format: "15:04:05",
            },
            style: "plain",
            type: "time",
          },
        ],
        type: "rprompt",
      },
      {
        alignment: "left",
        newline: true,
        segments: [
          {
            background: "#ffb300",
            foreground: "#ffffff",
            leading_diamond: "\ue0b6",
            template: " {{ .UserName }} ",
            style: "diamond",
            trailing_diamond: "\ue0b0",
            type: "session",
          },
          {
            background: "#61AFEF",
            foreground: "#ffffff",
            powerline_symbol: "\ue0b0",
            template: " {{ .Path }} ",
            properties: {
              style: "folder",
            },
            exclude_folders: ["/super/secret/project"],
            style: "powerline",
            type: "path",
          },
          {
            background: "#2e9599",
            background_templates: [
              "{{ if or (.Working.Changed) (.Staging.Changed) }}#f36943{{ end }}",
              "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#a8216b{{ end }}",
              "{{ if gt .Ahead 0 }}#35b5ff{{ end }}",
              "{{ if gt .Behind 0 }}#f89cfa{{ end }}",
            ],
            foreground: "#193549",
            foreground_templates: [
              "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#ffffff{{ end }}",
            ],
            powerline_symbol: "\ue0b0",
            template:
              " {{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }} ",
            properties: {
              branch_template: "{{ trunc 25 .Branch }}",
              fetch_status: true,
            },
            style: "powerline",
            type: "git",
          },
          {
            background: "#00897b",
            background_templates: ["{{ if gt .Code 0 }}#e91e63{{ end }}"],
            foreground: "#ffffff",
            template: "<parentBackground>\ue0b0</> \ue23a ",
            properties: {
              always_enabled: true,
            },
            style: "diamond",
            trailing_diamond: "\ue0b4",
            type: "status",
          },
        ],
        type: "prompt",
      },
    ],
    final_space: true,
    version: 3,
  }}
/>



================================================
FILE: website/docs/configuration/general.mdx
================================================
---
id: general
title: General
sidebar_label: General
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

Oh My Posh renders your prompt based on the definition of _blocks_ (like Lego) which contain one or more _segments_.
A really simple configuration could look like this. The default format is `json`, but we also support `toml` and `yaml`.
There's a [schema][schema] available which is kept up-to-date and helps with autocomplete and validation of the configuration.

:::info
There are a few [themes][themes] available which are basically predefined configurations. You can use these as they are, or as a
starting point to create your own configuration.
:::

<Tabs
  defaultValue="json"
  groupId="sample"
  values={[
    { label: 'json', value: 'json', },
    { label: 'yaml', value: 'yaml', },
    { label: 'toml', value: 'toml', },
  ]
}>
<TabItem value="json">

```json
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json",
  "final_space": true,
  "version": 3,
  "blocks": [
    {
      "type": "prompt",
      "alignment": "left",
      "segments": [
        {
          "type": "path",
          "style": "powerline",
          "powerline_symbol": "\uE0B0",
          "foreground": "#ffffff",
          "background": "#61AFEF",
          "properties": {
            "style": "folder"
          }
        }
      ]
    }
  ]
}
```

</TabItem>
<TabItem value="yaml">

```yaml
# yaml-language-server: $schema=https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json
final_space: true
version: 3
blocks:
  - type: prompt
    alignment: left
    segments:
      - type: path
        style: powerline
        powerline_symbol: ""
        foreground: "#ffffff"
        background: "#61AFEF"
        properties:
          style: folder
```

</TabItem>
<TabItem value="toml">

```toml
"$schema" = "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json"
final_space = true
version = 3

[[blocks]]
type = "prompt"
alignment = "left"

  [[blocks.segments]]
  type = "path"
  style = "powerline"
  powerline_symbol = ""
  foreground = "#ffffff"
  background = "#61AFEF"

    [blocks.segments.properties]
    style = "folder"
```

</TabItem>
</Tabs>

With this configuration, a single powerline segment is rendered that shows the name of the folder you're currently in.
To set this configuration in combination with a Oh My Posh [executable][releases], use the `--config` flag to
set a path to a file containing the above code. The `--shell universal` flag is used to print the prompt without
escape characters to see the prompt as it would be shown inside a prompt function for your shell.

:::caution
The command below will not persist the configuration for your shell but print the prompt in your terminal.
If you want to use your own configuration permanently, adjust the prompt configuration to use your custom
configuration.
:::

```bash
oh-my-posh print primary --config sample.json --shell uni
```

If all goes according to plan, you should see the prompt being printed out on the line below. In case you see a lot of
boxes with question marks, set up your terminal to use a [supported font][font] before continuing.

:::tip
The `--config` flag can accept either a local filepath or a remotely hosted config file.

For example, the following is a valid `--config` flag:
`--config 'https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/jandedobbeleer.omp.json'`
:::

## Settings

| Name                        | Type             | Default | Description                                                                                                                                                                                                                                                                  |
| --------------------------- | ---------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `final_space`               | `boolean`        |         | when true adds a space at the end of the prompt                                                                                                                                                                                                                              |
| `pwd`                       | `string`         |         | notify terminal of current working directory, values can be `osc99`, `osc7` or `osc51` depending on your terminal. Supports [templates][templates]                                                                                                                           |
| `terminal_background`       | `string`         |         | [color][colors] - terminal background color, set to your terminal's background color when you notice black elements in Windows Terminal or the Visual Studio Code integrated terminal                                                                                        |
| `accent_color`              | `string`         |         | [color][colors] - accent color, used as a fallback when the `accent` [color][accent] is not supported                                                                                                                                                                        |
| `var`                       | `map[string]any` |         | config variables to use in [templates][templates]. Can be any value                                                                                                                                                                                                          |
| `shell_integration`         | `boolean`        | `false` | enable shell integration using FinalTerm's OSC sequences. Works in bash, cmd (Clink v1.14.25+), fish, powershell and zsh                                                                                                                                                     |
| `enable_cursor_positioning` | `boolean`        | `false` | enable fetching the cursor position in bash and zsh to allow automatic hiding of leading newlines when at the top of the shell                                                                                                                                               |
| `patch_pwsh_bleed`          | `boolean`        | `false` | patch a PowerShell bug where the background colors bleed into the next line at the end of the buffer (can be removed when [this][pwsh-bleed] is merged)                                                                                                                      |
| `upgrade`                   | `Upgrade`        |         | enable auto upgrade or the upgrade notice. See [Upgrade]                                                                                                                                                                                                                     |
| `iterm_features`            | `[]string`       | `false` | enable iTerm2 specific features:<ul><li>`prompt_mark`: add the `iterm2_prompt_mark` [function][iterm2-si] for supported shells</li><li>`current_dir`: expose the current directory for iTerm2</li><li>`remote_host`: expose the current remote and user for iTerm2</li></ul> |
| `maps`                      | [`Maps`](#maps)  |         | a list of custom text mappings                                                                                                                                                                                                                                               |
| `async`                     | `boolean`        | `false` | load the prompt async. Will either load the standard prompt, or allow you to start typing right away. Supperted for `pwsh`, `powershell`, `zsh`, `bash` and `fish`                                                                                                           |

### Maps

| Name         | Type     | Description                              |
| ------------ | -------- | ---------------------------------------- |
| `user_name`  | `object` | text replacement mapping for user names  |
| `host_name`  | `object` | text replacement mapping for host names  |
| `shell_name` | `object` | text replacement mapping for shell names |

import Config from "@site/src/components/Config.js";

<Config
  data={{
    maps: {
      user_name: {
        jan: "🚀",
        root: "⚡",
      },
      host_name: {
        laptop123: "work",
      },
    },
  }}
/>

### JSON Schema Validation

As mentioned above, Oh My Posh configurations can utilize JSON Schema to validate their contents. Configurations should include a link to
the [external schema document][schema] which prescribes the appropriate structure and contents for various elements. If
your code editor is configured to use JSON Schema, it will compare your configuration to the external document, and issue
warnings for discrepancies.

For example, given the following code:

```json
...
"segments": [
  {
    "type": "an_invalid_entry",
    "template": "{{ if gt .Code 0 }}\uf134{{ end }}",
  }
]
...
```

Warnings will be raised for type, since `an_invalid_entry` is not in the list of acceptable values, as well as
for the entire segment item (enclosed in `{}`), since it lacks the required `style` key. Take advantage of these
warnings, and ignore them at your peril.

### Accepted Formats

Oh My Posh supports three file formats for configurations: `json`, `yaml`, and `toml`.

Various converters exist to convert between these, although they aren't perfect and will require manual
adjustment. Notably, the schema implementation for json is as follows:

```json
{
  "$schema": "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json"
}
```

While for yaml:

```yaml
# yaml-language-server: $schema=https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json
```

Converters won't catch this change, so you will need to adjust manually.

[releases]: https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest
[font]: /docs/installation/fonts
[schema]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/themes/schema.json
[themes]: https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes
[colors]: /docs/configuration/colors
[accent]: /docs/configuration/colors#standard-colors
[templates]: /docs/configuration/templates#config-variables
[pwsh-bleed]: https://github.com/PowerShell/PowerShell/pull/19019
[iterm2-si]: https://iterm2.com/documentation-shell-integration.html
[Upgrade]: /docs/installation/upgrade



================================================
FILE: website/docs/configuration/introduction.md
================================================
---
id: introduction
title: Introduction
sidebar_label: 👋 Introduction
slug: /
---

import Config from "@site/src/components/Config.js";

Oh My Posh is a custom prompt engine for any shell that has the ability to adjust
the prompt string with a function or variable.

## Concept

Traditionally, prompt tools work with custom scripts per theme (just like [Oh My Posh 2][omp] did) or a lot
of CLI configuration switches to define what it looks like. With Oh My Posh, I wanted to start from a single
configuration file that could easily be shared anywhere, removing the need to really grasp what goes on underneath.

When you look at prompts like Agnoster or Paradox, you notice they usually consist of a few building
**blocks** which contain one or more **segments** that display some sort of information. The configuration of
Oh My Posh works exactly like that. Blocks are a combination of one or more segments.

The basic layout of the config file is as follows.

<Config
  data={{
"blocks": []
  }}
/>

A [block][block] has properties that indicate its position and the [segments][segment] it will render.

<Config
  data={{
    "blocks": [
        {
            "segments": []
        }
    ]
  }}
/>

A [segment][segment] renders a single context like showing the current folder, user information or git status
when relevant. It can be styled any way you want, resulting in visualizing the prompt you are looking for.

For your convenience, the existing [themes][themes] from [Oh My Posh][themes] have been added to version 3, so you
can get started even without having to understand the theming. So, let's no longer waste time on theory, have a look at the
installation guide to get started right away!

[omp]: https://github.com/JanDeDobbeleer/oh-my-posh2
[block]: /docs/configuration/block
[segment]: /docs/configuration/segment
[themes]: https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes



================================================
FILE: website/docs/configuration/line-error.mdx
================================================
---
id: line-error
title: Line error
sidebar_label: Line error
---

import Config from "@site/src/components/Config.js";

:::info
This feature only works in `powershell` for the time being.
:::

Line error, when enabled, replaces the last part of the prompt when the text entered is invalid. It leverages
[PSReadLine's][psreadline] `-PromptText` setting by adding two distinct prompts. One for a valid line,
and one for when there's an error. As PSReadLine will rewrite the last part of
your prompt with the value of either based on the line's context, you will need to make sure everything
is compatible with your config as **these values are only set once** on shell start.

There are two config settings you need to tweak:

- `valid_line`: displays when the line is valid (again)
- `error_line`: displays when the line is faulty

You can use go [text/template][go-text-template] templates extended with [sprig][sprig] to enrich the text.

## Configuration

You need to extend or create a custom theme with your prompt overrides. For example:

<Config
  data={{
    valid_line: {
      background: "transparent",
      foreground: "#ffffff",
      template: "<#e0def4,#286983>\uf42e </><#286983,transparent>\ue0b4</> ",
    },
    error_line: {
      background: "transparent",
      foreground: "#ffffff",
      template: "<#eb6f92,#286983>\ue009 </><#286983,transparent>\ue0b4</> ",
    },
  }}
/>

## Properties

| Name         | Type     | Description                                                |
| ------------ | -------- | ---------------------------------------------------------- |
| `background` | `string` | [color][colors]                                            |
| `foreground` | `string` | [color][colors]                                            |
| `template`   | `string` | a fully featured [template][templates] - defaults to empty |

[colors]: /docs/configuration/colors
[go-text-template]: https://golang.org/pkg/text/template/
[sprig]: https://masterminds.github.io/sprig/
[console-title]: /docs/configuration/title#console-title-template
[psreadline]: https://github.com/PowerShell/PSReadLine
[templates]: /docs/configuration/templates
[cstp]: /docs/configuration/templates#cross-segment-template-properties



================================================
FILE: website/docs/configuration/secondary-prompt.mdx
================================================
---
id: secondary-prompt
title: Secondary prompt
sidebar_label: Secondary prompt
---

import Config from "@site/src/components/Config.js";

:::info
This feature only works in `powershell`, `zsh` and `bash` for the time being.
:::

The secondary prompt is displayed when a command text spans multiple lines. The default is `> `.

You can use go [text/template][go-text-template] templates extended with [sprig][sprig] to enrich the text.
Environment variables are available, just like the [`console_title_template`][console-title] functionality.

## Configuration

You need to extend or create a custom theme with your secondary prompt override. For example:

<Config
  data={{
    secondary_prompt: {
      background: "transparent",
      foreground: "#ffffff",
      template: "-> ",
    },
  }}
/>

## Properties

| Name         | Type     | Description                                                                                                                    |
| ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------ |
| `background` | `string` | [color][colors]                                                                                                                |
| `foreground` | `string` | [color][colors]                                                                                                                |
| `template`   | `string` | a go [text/template][go-text-template] template extended with [sprig][sprig] utilizing the properties below - defaults to `> ` |

## Template ([info][templates])

| Name        | Type      | Description                           |
| ----------- | --------- | ------------------------------------- |
| `.Root`     | `boolean` | is the current user root/admin or not |
| `.Shell`    | `string`  | the current shell name                |
| `.UserName` | `string`  | the current user name                 |
| `.HostName` | `string`  | the host name                         |

[go-text-template]: https://golang.org/pkg/text/template/
[sprig]: https://masterminds.github.io/sprig/
[console-title]: /docs/configuration/title#console-title-template
[templates]: /docs/configuration/templates
[colors]: /docs/configuration/colors



================================================
FILE: website/docs/configuration/segment.mdx
================================================
---
id: segment
title: Segment
sidebar_label: Segment
---

import Config from "@site/src/components/Config.js";

A segment is a part of the prompt with a certain context. There are different types available out-of-the-box, if you're
looking for what's included, feel free to skip this part and browse through the [segments][segments]. Keep reading to
understand how to configure a segment.

<Config
  data={{
    blocks: [
      {
        segments: [
          {
            type: "path",
            style: "powerline",
            powerline_symbol: "\uE0B0",
            foreground: "#ffffff",
            background: "#61AFEF",
            template: " {{ .Path }} ",
            include_folders: ["/Users/posh/Projects"],
          },
        ],
      },
    ],
  }}
/>

## Settings

| Name                       | Type         | Description                                                                                                                                                                                                                                                                                                                |
| -------------------------- | ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `type`                     | `string`     | takes the `string` value referencing which segment logic it needs to run (see [segments][segments] for possible values)                                                                                                                                                                                                    |
| `style`                    | `string`     | see [Style][style] below. Possible values:<ul><li>`powerline`</li><li>`plain`</li><li>`diamond`</li><li>`accordion`</li><li>a go [text/template][go-text-template] [template][templates] resolving to the above values</li></ul>                                                                                           |
| `powerline_symbol`         | `string`     | character to use when `"style": "powerline"`                                                                                                                                                                                                                                                                               |
| `leading_powerline_symbol` | `string`     | when `"style": "powerline"` we use an ANSI hack to invert the `powerline_symbol` to create a transparent glyph. This gives the best alignment, but might not work in every terminal. If you see black elements at the start of powerline segments, you can set this to the "opening" version of the `powerline_symbol`.    |
| `invert_powerline`         | `boolean`    | if `true` swaps the foreground and background colors. Can be useful when the character you want does not exist in the perfectly mirrored variant for example - defaults to `false`                                                                                                                                         |
| `leading_diamond`          | `string`     | character to use at the start of the segment. Will take the background color of the segment as its foreground color                                                                                                                                                                                                        |
| `trailing_diamond`         | `string`     | character to use at the end of the segment. Will take the background color of the segment as its foreground color                                                                                                                                                                                                          |
| `foreground`               | `string`     | [color][colors]                                                                                                                                                                                                                                                                                                            |
| `foreground_templates`     | `[]Template` | [color templates][color-templates]                                                                                                                                                                                                                                                                                         |
| `background`               | `string`     | [color][colors]                                                                                                                                                                                                                                                                                                            |
| `background_templates`     | `[]Template` | [color templates][color-templates]                                                                                                                                                                                                                                                                                         |
| `template`                 | `string`     | a go [text/template][go-text-template] [template][templates] to render the prompt                                                                                                                                                                                                                                          |
| `templates`                | `[]Template` | in some cases having a single [template][templates] string is a bit cumbersome. Templates allows you to span the segment's [template][templates] string multiple lines where every [template][templates] is evaluated and depending on what you aim to achieve, there are two possible outcomes based on `templates_logic` |
| `templates_logic`          | `string`     | <ul><li>`first_match`: return the first non-whitespace string and skip everything else</li><li>`join`:evaluate all templates and join all non-whitespace strings (**default**)</li></ul>                                                                                                                                   |
| `properties`               | `[]Property` | see [Properties][properties] below                                                                                                                                                                                                                                                                                         |
| `interactive`              | `boolean`    | when true, the segment text is not escaped to allow the use of interactive prompt escape sequences in Bash/Zsh - defaults to `false`                                                                                                                                                                                       |
| `alias`                    | `string`     | for use with [cross segment template properties][cstp]                                                                                                                                                                                                                                                                     |
| `min_width`                | `int`        | if the terminal width is smaller than this value, the segment will be hidden. For your terminal width, see `oh-my-posh get width`. Defaults to `0` (disable)                                                                                                                                                               |
| `max_width`                | `int`        | if the terminal width exceeds this value, the segment will be hidden. For your terminal width, see `oh-my-posh get width`. Defaults to `0` (disable)                                                                                                                                                                       |
| `cache`                    | `Cache`      | how to cache the segment to avoid fetching information too much, see [below][cache]                                                                                                                                                                                                                                        |
| `include_folders`          | `[]string`   | define which folders to include to enable the segment, see [below][include-exclude]                                                                                                                                                                                                                                        |
| `exclude_folders`          | `[]string`   | define which folders to exclude to disable the segment, see [below][include-exclude]                                                                                                                                                                                                                                       |
| `force`                    | `boolean`    | when true, the segment is always rendered, even when it's only whitespace - defaults to `false`                                                                                                                                                                                                                            |

:::warning
In Bash/Zsh, when the property `interactive` is `true` for a segment, the prompt length calculation can be wrong
because of possible string expansions (e.g., `\w` in Bash and `%d` in Zsh which both expand to the current working
directory), thus a right-aligned block is not being properly right-aligned.

Unfortunately, it's not possible for Oh My Posh to know the final prompt length since the string expansion is done
by your shell, so use this at your own risk.
:::

## Style

Style defines how a prompt is rendered. Looking at the most prompt
themes out there, we identified 4 types. All of these require a different configuration and depending on the look
you want to achieve you might need to understand/use them all.

### Powerline

What started it all for us. Makes use of a single symbol (`powerline_symbol`) to separate the segments. It takes the
background color of the previous segment (or transparent if none) and the foreground of the current one (or transparent
if we're at the last segment). Expects segments to have a colored background, else there little use for this one.

When you see black triangles (or other characters depending on the `powerline_symbol` you use) at the start of a segment,
you can set `leading_powerline_symbol` to the "opening" version of the `powerline_symbol`.
This will not use the inverted ANSI hack we have in place as that's not supported in every terminal. You might need to tweak
your font settings to get the best alignment.

:::warning Git Bash
The `powerline` style has issues in Git Bash due to the icons width being incorrectly calculated, rendering
the prompt broken when typing long commands or searching the history.

The following prompt configuration has the same problem:

```bash
export PS1=" "
```

:::

### Plain

Simple. Colored text on a transparent background. Make sure to set `foreground` for maximum enjoyment.

### Diamond

While Powerline works great with a single symbol, sometimes you want a segment to have a different start and end symbol.
Just like a diamond: `< my segment text >`. The difference between this and plain is that the diamond symbols take the
segment background as their foreground color.

### Accordion

Same as Powerline except that it will display even when disabled, but without text. That way it seems
as if the segment is not expanded, just like an accordion.

## Properties

The `properties` attribute allows you to customize the behavior and appearance of a segment beyond the default settings.
These options can be anything from feature flags, configuration or additional styling details that will only apply to the segment in question.
To understand the available properties for a particular segment, refer to its corresponding documentation section where each property is explained in detail.

## Cache

The cache property allows you to control how often a segment is refreshed. This is useful when a segment is slow to
generate or when you want to avoid fetching information too often. The cache property is an object with the following
properties:

| Name       | Type     | Description                                                                                                                                                                                                                       |
| ---------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `duration` | `string` | the duration for which the segment will be cached. The duration is a string in the format `1h2m3s`. The duration is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none` |
| `strategy` | `string` | the strategy to use to identify if we should show the segment's cache value. See below for more information on strategy                                                                                                           |

<Config
  data={{
    cache: {
      duration: "1h",
      strategy: "folder",
    },
  }}
/>

### Strategy

#### Folder

The folder strategy will cache the segment based on the current working directory. It will cache a separate value for each
directory. This is useful when you for example work with language segments, or source control segments. The source control
segments understand repository context in this case, so the same segment cache value is used when in a git repository,
regardless of the folder you're in.

#### Session

The session strategy will cache the segment based on the current shell session. Use this for segments you want to display at all times
but don't want to refresh too often.

## Include / Exclude Folders

Sometimes you might want to have a segment only rendered in certain folders. If `include_folders` is specified,
the segment will only be rendered when in one of those locations. If `exclude_folders` is specified, the segment
will not be rendered when in one of the excluded locations.

<Config
  data={{
    include_folders: ["/Users/posh/Projects"],
  }}
/>

<Config
  data={{
    exclude_folders: ["/Users/posh/Projects"],
  }}
/>

The strings specified in these properties are evaluated as [regular expressions][regex]. You
can use any valid regular expression construct, but the regular expression must match the **ENTIRE** directory
name. The following will match `/Users/posh/Projects/Foo` but not `/home/Users/posh/Projects/Foo`.

<Config
  data={{
    include_folders: ["/Users/posh/Projects/.*"],
  }}
/>

You can also combine these properties:

<Config
  data={{
    include_folders: ["/Users/posh/Projects/.*"],
    exclude_folders: ["/Users/posh/Projects/secret-project.*"],
  }}
/>

:::info

- Oh My Posh will accept both `/` and `\` as path separators for a folder and will match regardless of which
  is used by the current operating system.
- Because the strings are evaluated as regular expressions, if you want to use a backslash (`\`) in a Windows
  directory name, you need to specify it as double backslashes, and if using JSON format you should escape it as `\\\\`.
- The character `~` at the start of a specified folder will match the user's home directory.
- The comparison is case-insensitive on Windows and macOS, but case-sensitive on other operating systems.

This means that for user Bill, who has a user account `Bill` on Windows and `bill` on Linux, `~/Foo` might match
`C:\Users\Bill\Foo` or `C:\Users\Bill\foo` on Windows but only `/home/bill/Foo` on Linux.
:::

## Hiding segments

### Conditionally

To hide a whole segment including the leading and trailing symbol based on a [template][templates], the template must
**evaluate to an empty string**. This can be achieved with conditional statements (`if`). The example below will render
a diamond segment, only if the environment variable `POSH_ENV` is not empty.

Only spaces are excluded, meaning you can still add line breaks and tabs if that is something you're after.

<Config
  data={{
    type: "text",
    style: "diamond",
    leading_diamond: " \ue0b6",
    trailing_diamond: "\ue0b4",
    foreground: "#ffffff",
    background: "#d53c14",
    template: "{{ if .Env.POSH_ENV }} \uf8c5 {{ .Env.POSH_ENV }} {{ end }}",
  }}
/>

### On the fly

Sometimes run into a situation where you don't want to see a specific segment but the use-case does not justify
using a conditional template. In this case you can use the `oh-my-posh toggle <type>` command to toggle the
segment on or off. This works on a **per shell session basis**, meaning that if you toggle a segment off in one instance
of a shell, it will not disable in the others.

To list the currently toggled segments, use `oh-my-posh get toggles`.

[segments]: /docs/segments/cli/angular
[properties]: #properties
[style]: #style
[colors]: /docs/configuration/colors
[go-text-template]: https://golang.org/pkg/text/template/
[sprig]: https://masterminds.github.io/sprig/
[regex]: https://www.regular-expressions.info/tutorial.html
[templates]: templates.mdx
[color-templates]: /docs/configuration/colors#color-templates
[cstp]: templates.mdx#cross-segment-template-properties
[cache]: #cache
[include-exclude]: #include--exclude-folders
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/configuration/templates.mdx
================================================
---
id: templates
title: Templates
sidebar_label: Templates
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import Config from "@site/src/components/Config.js";

Every segment has a `template` property to tweak the text that is displayed.
Under the hood, this uses go's [text/template][go-text-template] feature extended with [sprig][sprig] and
offers a few standard properties to work with.

## Global properties

These properties can be used anywhere, in any segment. If a segment contains a property with the same name,
the segment property value will be used instead. In case you want to use the global property, you can prefix
it with `.$` to reference it directly.

| Name            | Type                  | Description                                                                 |
| --------------- | --------------------- | --------------------------------------------------------------------------- |
| `.Root`         | `boolean`             | is the current user root/admin or not                                       |
| `.PWD`          | `string`              | the current working directory (`~` for `$HOME`)                             |
| `.AbsolutePWD`  | `string`              | the current working directory (unaltered)                                   |
| `.PSWD`         | `string`              | the current non-filesystem working directory in PowerShell                  |
| `.Folder`       | `string`              | the current working folder                                                  |
| `.Shell`        | `string`              | the current shell name                                                      |
| `.ShellVersion` | `string`              | the current shell version                                                   |
| `.SHLVL`        | `int`                 | the current shell level                                                     |
| `.UserName`     | `string`              | the current user name                                                       |
| `.HostName`     | `string`              | the host name                                                               |
| `.Code`         | `int`                 | the last exit code                                                          |
| `.Jobs`         | `int`                 | number of background jobs (only available for zsh, PowerShell, and Nushell) |
| `.OS`           | `string`              | the operating system                                                        |
| `.WSL`          | `boolean`             | in WSL yes/no                                                               |
| `.Templates`    | `string`              | the [templates][templates] result                                           |
| `.PromptCount`  | `int`                 | the prompt counter, increments with 1 for every prompt invocation           |
| `.Version`      | `string`              | the Oh My Posh version                                                      |
| `.Segment`      | [`Segment`](#segment) | the current segment's metadata                                              |

### Segment

| Name             | Type     | Description                               |
| ---------------- | -------- | ----------------------------------------- |
| `.Segment.Index` | `int`    | the current segment's index (as rendered) |
| `.Segment.Text`  | `string` | the segment's rendered text               |

## Environment variables

| Name           | Type     | Description                                                               |
| -------------- | -------- | ------------------------------------------------------------------------- |
| `.Env.VarName` | `string` | Any environment variable where `VarName` is the environment variable name |

:::tip
For the shells below, you can override a function to execute some logic before the prompt is rendered.
This can be used to for example populate an environment variable with a specific context.

<Tabs
  defaultValue="powershell"
  groupId="shell"
  values={[
    { label: 'powershell', value: 'powershell', },
    { label: 'zsh', value: 'zsh', },
    { label: 'bash', value: 'bash', },
    { label: 'fish', value: 'fish', },
    { label: 'nu', value: 'nu', },
  ]
}>
<TabItem value="powershell">

```powershell
function Set-EnvVar([bool]$originalStatus) {
    $env:POSH=$(Get-Date)
}
New-Alias -Name 'Set-PoshContext' -Value 'Set-EnvVar' -Scope Global -Force
```

</TabItem>
<TabItem value="zsh">

```bash
function set_poshcontext() {
    export POSH=$(date)
}
```

</TabItem>
<TabItem value="bash">

```bash
function set_poshcontext() {
    export POSH=$(date)
}
```

</TabItem>
<TabItem value="fish">

```shell
function set_poshcontext
  set --export POSH $(date)
end
```

</TabItem>
<TabItem value="nu">

```bash
$env.SET_POSHCONTEXT = {
	$env.POSH = ( date now );
}
```

</TabItem>
</Tabs>

:::

## Config variables

| Name           | Type  | Description                                              |
| -------------- | ----- | -------------------------------------------------------- |
| `.Var.VarName` | `any` | Any config variable where `VarName` is the variable name |

### Example

<Config
  data={{
    version: 3,
    // highlight-start
    var: {
      Hello: "hello",
      World: "world",
    },
    // highlight-end
    blocks: [
      {
        type: "prompt",
        alignment: "left",
        segments: [
          {
            type: "text",
            style: "plain",
            foreground: "p:white",
            // highlight-next-line
            template: "{{ .Var.Hello }} {{ .Var.World }} ",
          },
        ],
      },
    ],
  }}
/>

## Template logic

<!--  markdownlint-disable MD013 -->

| Template                                                             | Description                                                                                                                                                                                                                                                                                                     |
| -------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `{{.}}`                                                              | Root element.                                                                                                                                                                                                                                                                                                   |
| `{{.Var}}`                                                           | Variable in a struct, where Var is a variable.                                                                                                                                                                                                                                                                  |
| `{{- .Var -}}`                                                       | Remove extra white space surrounding the .Var variable and remove the newline. Either side is fine too.                                                                                                                                                                                                         |
| `{{ $planet := "Earth"}}`                                            | `{{ $planet }}` Store a value in a custom variable to reference later. Note that .$ is used to reference the global/parent context, like in the full example below with $.                                                                                                                                      |
| `Hi {{if .Name}} {{.Name}} {{else}} visitor {{end}}`                 | If-else statement. If will evaluate whether or not the argument is empty. Using the elseif conditional is also an option. The not negation is available too.                                                                                                                                                    |
| `{{if and .Arg1 .Arg2}} both complete. {{else}} incomplete. {{end}}` | The and function compares multiple arguments to return the boolean AND (if arg1 then arg2 else arg1). Both arguments are evaluated. The or function compares multiple arguments to return the boolean OR. Similar to if arg1 then arg1 else arg2, so arg2 will never be evaluated if arg1 is false (not empty). |
| `{{with .Var}} {{end}}`                                              | With statement, where Var is a variable. It skips the block if the variable is absent.                                                                                                                                                                                                                          |
| `{{range .Array}} {{end}}`                                           | Range statement, where Array is an array, slice, map, or channel.                                                                                                                                                                                                                                               |
| `{{ lt 3 4 }}`                                                       | This lt comparison function evaluates to true since 3 is less than 4 (other boolean operators: eq, ne, lt, le, gt, ge).                                                                                                                                                                                         |

<!-- markdownlint-enable MD013 -->

## Helper functions

### Sprig

Oh My Posh has all [sprig][sprig] functions included, meaning you can do operations on strings, paths and a lot of other
manipulations straight from your template. Have a look at [their documentation][sprig] for available options and how to
use them.

### Custom

<!-- markdownlint-disable MD013 -->

| Template                                                           | Description                                                                                                                |
| ------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------- |
| `{{ url .UpstreamIcon .UpstreamURL }}`                             | Create an `OSC8` hyperlink to a website to open your default browser (needs terminal [support][terminal-list-hyperlinks]). |
| `{{ path .Path .Location }}`                                       | Create an `OSC8` file link to a folder to open your file explorer (needs terminal [support][terminal-list-hyperlinks]).    |
| `{{ secondsRound 3600 }}`                                          | Round seconds to a time indication. In this case the output is `1h`.                                                       |
| `{{ if glob "*.go" }}OK{{ else }}NOK{{ end }}`                     | Exposes [filepath.Glob][glob] as a boolean template function.                                                              |
| `{{ if matchP ".*\\.Repo$" .Path }}Repo{{ else }}No Repo{{ end }}` | Exposes [regexp.MatchString][regexpms] as a boolean template function.                                                     |
| `{{ replaceP "c.t" "cut code cat" "dog" }}`                        | Exposes [regexp.ReplaceAllString][regexpra] as a string template function.                                                 |
| <code>\{\{ .Code &vert; hresult \}\}</code>                        | Transform a status code to its HRESULT value for easy troubleshooting. For example `-1978335212` becomes `0x8A150014`.     |
| `{{ readFile ".version.json" }}`                                   | Read a file in the current directory. Returns a string.                                                                    |
| `{{ random (list \"a\" 2 .MyThirdItem) }}`                         | Selects a random element from a list. The list can be an array or slice containing any types (use sprig's `list`).         |

<!-- markdownlint-enable MD013 -->

## Cross segment template properties

To use another segment's template properties in a template, you can make use of `{{ .Segments.Segment }}`
in your template where `.Segment` is the name of the segment you want to use with the first letter uppercased.

If you want to for example use the [git][git] segment's `.UpstreamGone` property in the [status][status] segment, you can
do so like this:

<Config
  data={{
    template:
      " {{ if .Segments.Git.UpstreamGone }}\ueb05{{ else if gt .Code 0 }}\uf00d{{ else }}\uf00c{{ end }} ",
  }}
/>

:::caution
For this to work, the segment you refer to needs to be in your config. The above example won't work if
your config does not contain a git segment as Oh My Posh only populates the properties when it needs to.
:::

:::tip
If you have two identical segments for a different purpose, you can make use of the `alias` property on the segment
to distinct between both.
:::

<Config
  data={{
    segments: [
      {
        type: "command",
        alias: "Hello",
        style: "plain",
        foreground: "#ffffff",
        properties: {
          command: "echo Hello",
        },
      },
      {
        type: "command",
        alias: "World",
        style: "plain",
        foreground: "#ffffff",
        properties: {
          command: "echo World",
        },
      },
      {
        type: "text",
        style: "plain",
        foreground: "#ffffff",
        template: "{{ .Segments.Hello.Output }} {{ .Segments.World.Output }}",
      },
    ],
  }}
/>

If you want to know if a specific segment is active, you can use the `.Segments.Contains` function, for example:

<Config
  data={{
    template:
      '{{ if .Segments.Contains "Git" }}\ueb05{{ else if gt .Code 0 }}\uf00d{{ else }}\uf00c{{ end }} ',
  }}
/>

## Text decoration

You can make use of the following syntax to decorate text:

| Syntax                 | Description                           |
| ---------------------- | ------------------------------------- |
| `<b>bold</b>`          | `bold` as bold text                   |
| `<u>underline</u>`     | `underline` as underlined text        |
| `<o>overline</o>`      | `overline` as overlined text          |
| `<i>italic</i>`        | `italic` as italic text               |
| `<s>strikethrough</s>` | `strikethrough` as strikethrough text |
| `<d>dimmed</d>`        | `dimmed` as dimmed text               |
| `<f>blink</f>`         | `blink` as blinking (flashing) text   |
| `<r>reversed</r>`      | `reversed` as reversed text           |

This can be used in templates and icons/text inside your config.

[terminal-list-hyperlinks]: https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
[path-segment]: /docs/path
[git-segment]: /docs/git
[go-text-template]: https://pkg.go.dev/text/template
[sprig]: https://masterminds.github.io/sprig/
[glob]: https://pkg.go.dev/path/filepath#Glob
[git]: /docs/segments/scm/git
[status]: /docs/segments/system/status
[templates]: /docs/configuration/segment
[regexpms]: https://pkg.go.dev/regexp#Regexp.MatchString
[regexpra]: https://pkg.go.dev/regexp#Regexp.ReplaceAllString



================================================
FILE: website/docs/configuration/title.mdx
================================================
---
id: title
title: Console title
sidebar_label: Console title
---

import Config from "@site/src/components/Config.js";

<Config
  data={{
    console_title_template:
      "{{.Folder}}{{if .Root}} :: root{{end}} :: {{.Shell}}",
  }}
/>

### Console Title Template

The following examples illustrate possible contents for `console_title_template`, provided
the current working directory is `/usr/home/omp` and the shell is `zsh`.

To learn more about templates and their possibilities, have a look at the [template][templates] section.

```json
{
  "console_title_template": "{{.Folder}}{{if .Root}} :: root{{end}} :: {{.Shell}}",
  // outputs:
  // when root == false: omp :: zsh
  // when root == true: omp :: root :: zsh
  "console_title_template": "{{.Folder}}", // outputs: omp
  "console_title_template": "{{.Shell}} in {{.PWD}}", // outputs: zsh in /usr/home/omp
  "console_title_template": "{{.UserName}}@{{.HostName}} {{.Shell}} in {{.PWD}}", // outputs: MyUser@MyMachine zsh in /usr/home/omp
  "console_title_template": "{{.Env.USERDOMAIN}} {{.Shell}} in {{.PWD}}" // outputs: MyCompany zsh in /usr/home/omp
}
```

[sprig]: https://masterminds.github.io/sprig/
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/configuration/tooltips.mdx
================================================
---
id: tooltips
title: Tooltips
sidebar_label: Tooltips
---

:::info
Due to limitations (or not having found a way just yet), this feature only works in `fish`, `zsh`, `powershell`
(`ConstrainedLanguage` mode unsupported) and `cmd` (as of [Clink][clink] v1.2.46+) for the time being.
:::

![Tooltip Demo](/img/posh-tooltip.gif)

Tooltips are segments that are rendered as a right-aligned prompt while you're typing certain keywords.
They behave similarly to the other segments when it comes to how and when they are shown so you can tweak
them to act and look like you want. The key difference is that they can be invoked using `tips` which are the
commands you are typing. Due to the possibility of the use of an alias, you can define for which keyword
the segment should be rendered.

### Configuration

You need to extend or create a custom theme with your tooltips. For example:

import Config from "@site/src/components/Config.js";

<Config
  data={{
    blocks: [],
    tooltips_action: "replace",
    tooltips: [
      {
        type: "git",
        tips: ["git", "g"],
        style: "diamond",
        foreground: "#193549",
        background: "#fffb38",
        leading_diamond: "\ue0b6",
        trailing_diamond: "\ue0b4",
        template:
          "{{ .HEAD }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}",
        properties: {
          fetch_status: true,
          fetch_upstream_icon: true,
        },
      },
    ],
  }}
/>

This configuration will render a right-aligned git segment when you type `git` or `g` followed by a space.
A tip should not include any spaces. Keep in mind that this is a blocking call, meaning that if the segment renders slow,
you can't type until it's visible. Optimizations in this space are being explored.

Note that you can also define multiple tooltips for the same tip to compose tooltips for individual commands. For example,
this configuration will render the AWS profile as well as the Azure subscription information when you type `terraform`
followed by a space.

<Config
  data={{
    blocks: [],
    tooltips: [
      {
        type: "aws",
        tips: ["aws", "terraform"],
        style: "plain",
        foreground: "#e0af68",
        template: "\uf0e0f {{.Profile}}{{if .Region}}@{{.Region}}{{end}}",
      },
      {
        type: "az",
        tips: ["az", "terraform"],
        style: "plain",
        foreground: "#b4f9f8",
        template: "\uebd8 {{ .Name }}",
      },
    ],
  }}
/>

### Tooltips action

You can configure the tooltips to display in extension to the current rprompt (if any) or replace it (default behavior).
You can do this by setting the `tooltips_action` property in your configuration. The possible values are:

- `replace`: Replaces the current rprompt with the tooltips. This is the default behavior.
- `extend`: Appends the tooltips to the current rprompt.
- `prepend`: Prepends the tooltips to the current rprompt.

You can set this property in your configuration like so:

<Config
  data={{
    blocks: [],
    tooltips_action: "extend",
    tooltips: [],
  }}
/>

[clink]: https://chrisant996.github.io/clink/



================================================
FILE: website/docs/configuration/transient.mdx
================================================
---
id: transient
title: Transient prompt
sidebar_label: Transient prompt
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import Config from "@site/src/components/Config.js";

:::info
This feature only works in `nu`, `fish`, `zsh`, `powershell` (`ConstrainedLanguage` mode unsupported), bash (with [ble.sh]) and `cmd` for the time being.
:::

Transient prompt, when enabled, replaces the prompt with a simpler one to allow more screen real estate.
You can use go [text/template][go-text-template] templates extended with [sprig] to enrich the text.
All [template][templates] functionality is available, even reusing [cross segment template properties][cstp] from
the previous primary prompt run.

Typically, your prompt will simply leave the prompt on the screen when you execute a command (or press enter) like so:

![Before Transient](/img/transient-before.gif)

By enabling Transient Prompt, you can replace the prompt with some other content for a cleaner console as shown here:

![After Transient](/img/transient-after.gif)

## Configuration

You need to extend or create a custom theme with your transient prompt. For example:

<Config
  data={{
    transient_prompt: {
      background: "transparent",
      foreground: "#ffffff",
      template: "{{ .Shell }}> ",
    },
  }}
/>

## Properties

| Name                   | Type      | Description                                                                                                                                    |
| ---------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |
| `foreground`           | `string`  | [color][colors]                                                                                                                                |
| `foreground_templates` | `array`   | [color templates][color-templates]                                                                                                             |
| `background`           | `string`  | [color][colors]                                                                                                                                |
| `background_templates` | `array`   | [color templates][color-templates]                                                                                                             |
| `template`             | `string`  | a go [text/template][go-text-template] template extended with [sprig][sprig] utilizing the properties below - defaults to `{{ .Shell }}> `     |
| `filler`               | `string`  | when you want to create a line with a repeated set of characters spanning the width of the terminal. Will be added _after_ the `template` text |
| `newline`              | `boolean` | add a newline before the prompt                                                                                                                |

## Enable the feature

Oh My posh handles enabling the feature automatically for all shells except `cmd` when the config contains a
transient prompt configuration. For `cmd`, you can run the command below once to enable the feature permanently:

```shell
clink set prompt.transient always
```

[ble.sh]: https://github.com/akinomyoga/ble.sh
[colors]: /docs/configuration/colors
[go-text-template]: https://golang.org/pkg/text/template/
[console-title]: /docs/configuration/title#console-title-template
[sprig]: https://masterminds.github.io/sprig/
[clink]: https://chrisant996.github.io/clink/
[templates]: /docs/configuration/templates
[color-templates]: /docs/configuration/colors#color-templates
[cstp]: /docs/configuration/templates#cross-segment-template-properties



================================================
FILE: website/docs/contributing/git.mdx
================================================
---
id: git
title: Git commands for contributors
sidebar_label: Git Commands
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

While we're mostly used to working with source control, working with a fork and making sure
we can merge swiftly brings some additional challenges. This page aims to help you out with the things you might
get asked to do, but which may be outside of your comfort zone.

Sit back, relax and bring your towel.

If you're not comfortable using git from the CLI, we recommend [GitKraken][kraken]. It's the best cross platform git tool and
we've added instructions on how to use it below as well.

## I didn't stick to the conventional commit guidelines

<Tabs
  defaultValue="kraken"
  groupId="git"
  values={[
    { label: 'GitKraken', value: 'kraken', },
    { label: 'CLI', value: 'cli', },
  ]
}>
<TabItem value="kraken">

Open your oh-my-posh repo inside GitKraken and right click the commit you want to reword in the graph overview.
Select `Edit commit message`, reword it to respect the conventional commit guidelines and press `Update message`.

Click Push on the top of the screen and select `Force Push` to bring the changes to the Pull Request.

</TabItem>
<TabItem value="cli">

**I only have 1 commit**

To reword the last commit, we can make use of git's `--amend` switch to add something to our latest commit (code, changes, rewording).
Use the following commands to rephrase the last commit and get that change merged!

```bash
git commit --amend -m "feat: better worded feature"`
git push --force
```

**I added more than commit**

If all of your commits need to go to main because it makes sense to treat these as atomic units, you can use git's interactive rebase
functionality to reword any commit between `main` and your `HEAD`. To start an interactive rebase, type `git rebase -i main`.

This will open your `$EDITOR` and you can mark the commits you want to reword with `reword` (or `r`) rather than `pick`.
Exiting that file will start the rebase and spawn your `$EDITOR` to alter the commit message for each commit you marked as `reword`.

Once done, use `git push --force` to bring the changes to the pull request.

:::tip vscode
The latest version of vscode has a built-in gui to help you select `reword` or any other action on a commit. Select the right ones and press
Start Rebase to continue.
:::

</TabItem>
</Tabs>

## My branch is out of date with the remote

This means the main branch of oh-my-posh contains commits your branch does not (could be your main branch, or the branch you created to work on).
To remedy this, we need to rebase (add the new commits of oh-my-posh's main branch underneath your new commits) so the pull request can get merged.

The first thing to do is to add the oh-my-posh codebase as a remote to your local git repository. By default, your fork is a standalone copy
of oh-my-posh with its own remote on GitHub that's not connected to the oh-my-posh codebase. Forks and Pull Requests are a feature GitHub introduced
on top of git functionality, so we need to mimic that situation ourselves.


### Add the remote to your local git repository

<Tabs
  defaultValue="kraken"
  groupId="git"
  values={[
    { label: 'GitKraken', value: 'kraken', },
    { label: 'CLI', value: 'cli', },
  ]
}>
<TabItem value="kraken">

Hover over `Remote` on the left-hand side, this will show a `+` button. Click it and select GitHub. There you have the ability to select
`jandedobbeleer/oh-my-posh` and name it `upstream`. GitKraken will fetch the remote and you will see all branches underneath `upstream` as
you do for your own branches. Right click `upstream`'s `main` branch and select `Rebase <branch> onto upstream/main`.

Click Push on the top of the screen and select `Force Push` to bring the changes to the Pull Request.

</TabItem>
<TabItem value="cli">

```bash
git remote add upstream git@github.com:JanDeDobbeleer/oh-my-posh.git
git fetch upstream
```

</TabItem>
</Tabs>

### Rebase your branch onto upstream/main

<Tabs
  defaultValue="kraken"
  groupId="git"
  values={[
    { label: 'GitKraken', value: 'kraken', },
    { label: 'CLI', value: 'cli', },
  ]
}>
<TabItem value="kraken">

Right click `upstream`'s `main` branch and select `Rebase <branch> onto upstream/main`. Click Push on the top of the screen and select
`Force Push` to bring the changes to the Pull Request.

</TabItem>
<TabItem value="cli">

```bash
git rebase upstream/main
git push --force
```

</TabItem>
</Tabs>

[kraken]: https://www.gitkraken.com/invite/nQmDPR9D



================================================
FILE: website/docs/contributing/plastic.mdx
================================================
---
id: plastic
title: Setup for Plastic SCM testing
sidebar_label: Plastic SCM testing
---

When changing the `segment_plastic.go` file, you may need to test your changes against an actual instance of
[Plastic SCM][plastic]. This doc should bring you up to speed with Plastic SCM.

In the [contributing doc][contributing] there is a section about [dev containers & codespaces][devcontainer].
You can set up Plastic SCM inside these as well.

## Server Setup

Here you can find the [official setup instructions][setup-instructions]. I'll describe it in short:

### Installation on Debian or in dev-container

First add the repo:

```bash
sudo apt-get update
sudo apt-get install -y apt-transport-https
echo "deb https://www.plasticscm.com/plasticrepo/stable/debian/ ./" | sudo tee /etc/apt/sources.list.d/plasticscm-stable.list
wget https://www.plasticscm.com/plasticrepo/stable/debian/Release.key -O - | sudo apt-key add -
sudo apt-get update
```

Then install the server: *this might throw an error at the end of the setup **see below***

```bash
sudo apt-get install plasticscm-server-core
```

This might show an error while configuring the installed package. In that case the server was nod registered as a service.
**Ignore it!**

### Server configuration

Configuring the server is done via:

```bash
cd /opt/plasticscm5/server/
sudo ./plasticd configure
```

You are asked 5 questions. Choose these options:

1. **1**: English
2. 8087 (default port, **just hit return**)
3. 8088 (default ssl port, **just hit return**)
4. **1**: NameWorkingMode (use local users and groups)
5. skip license token (**just hit return**)

**Congrats!** Your server is configured. You can find out more in the [official configuration instructions][server-config].

### Run Server

If your server installed without an error, it was correctly registered as a server and can be started via:

```bash
sudo service plasticd start
```

If not, you need to start it manually (for example inside the dev-container):

```bash
cd /opt/plasticscm5/server/
sudo ./plasticd start
```

This will lock the current shell until the server process finishes. You might need to open another terminal to continue.

Your Plastic SCM server should be started now.

## Client Setup

Plastic SCM comes, much like git, with a CLI (+ client UI \[optional\])

### Installation on Debian or in dev-container

These are the steps to install the **Plastic SCM CLI** on Debian or in the dev-container:

```bash
sudo apt-get install plasticscm-client-core
```

### Client configuration

To connect the client to the server and set up an account run:

```bash
clconfigureclient
```

You are asked a few questions. Choose these options:

1. **1**: English
2. localhost (**just hit return**)
3. default port 8087 (**just hit return**)
4. No SSL (**just hit return**)
5. No Proxy (**just hit return**)

**Congrats!** Your client should now be connected to your server.

You can test if it worked and display some license info via:

```bash
cm li
```

## Testing stuff

Now to the fun part! The server is automatically set up to host a `default` repo with the branch `/main`.

The Plastic SCM CLI command is: `cm`

If you ever wonder what you can do with it call:

```bash
cm showcommands --all`
```

### Creating a local workspace

You need a local workspace to work with plastic:

```bash
cd ~
mkdir dev
cd dev
cm wk create workspace workspace rep:default
cd workspace
cm status
```

### Adding files

Start by creating local, private files

```bash
echo "test" > myfile.txt
cm status --all
```

Add the file to your local changes

```bash
cm add myfile.txt
cm status
```

**Test hint:** Both `Private` and `Added` files should be counted towards the `Added` property of the `plastic` segment.

### Committing changes

After locally adding, changing, moving or deleting files you want to commit them to create a new changeset.
Run this command to commit all local changes:

```bash
cm status | cm ci . -c "my first commit"
```

### Undoing local changes

Just in case you don't want or can't commit your local changes, there is an undo command.
This will undo all local changes:

```bash
cm status | cm undo .
```

### Changing, moving or deleting files

All these actions are done on the file level. You can run `cm status` to see your actions beeing tracked by plastic.
Use the commit method described above to commit your changes.

**Test hint:** All these changes should be counted by the designated property (`Modified`, `Moved`, `Deleted`)
of the `plastic` segment.

### Branching

Above the basics of handling the Plastic SCM client are described.
But you would want to dive deeper and use branches or labels and merge them.

#### Create a new branch

To create a new branch based on the latest changeset on branch `/main` call

```bash
cm br /main/new-branch
```

Hint: To list all branches use

```bash
cm find branches
```

#### Set a label to the current changeset

Your workspace will always reflect one specific changeset (see `cm status`). You can set a label on that changeset for
fast navigation or documentation purposes

```bash
cm label mk "BL0001"
```

Hint: To list all labels use

```bash
cm find labels
```

#### Switch your local workspace to a branch

To switch to a branch use

```bash
cm switch /main/new-branch
cm status
```

**Test Hint:** the branch name should be reflected in the `Selector` property of the `plastic` segment

#### Switch to a changeset

Each commit gets a unique changeset number. You can switch to these via

```bash
cm switch cs:1
```

**Test Hint:** the changeset should be reflected in the `Selector` property of the `plastic` segment

#### Switch to a label

You can also switch to a label via

```bash
cm switch BL00001
```

**Test Hint:** the label should be reflected in the `Selector` property of the `plastic` segment

#### Merge a branch

To merge a branch you have to switch to the *destination* branch of the merge. After that you can merge another branch via

```bash
cm switch /main
cm merge /main/new-branch --merge
cm status
```

Hint: This will only prepare the merge locally. You will have to commit the changes to complete the merge!

**Test Hint:** A pending merge should be reflected in the `MergePending` property of the `plastic` segment

#### Cherry-pick merge

While the merge above will merge all changes from a branch (and his parents), there is a cherry-pick merge,
which will merge only the changes of one single changeset

```bach
cm merge cs:8 --merge --cherrypicking
```

Hint: This will only prepare the merge locally. You will have to commit the changes to complete the merge!

**Test Hint:** A pending cherry-pick merge should be reflected in the `MergePending` property of the `plastic` segment

#### Merge conflicts

There are multiple causes for conflicts while merging

##### Evil Twin

This happens when a merge is performed where two files with the same name were added on both the source and destination branch.

```bash
cm br mk /main/sub-branch
cm switch /main/sub-branch
echo "1" > twin.txt
cm add twin.txt
cm ci twin.txt

cm switch /main
echo "2" > twin.txt
cm add twin.txt
cm ci twin.txt

cm merge /main/sub-branch --merge
```

Hint: this will prompt you to directly resolve the conflict

##### Changed on both sides

This happens when a merge is performed where a file was changed on both sides: source and destination

```bash
cm switch /main
echo "base" > file.txt
cm add file.txt
cm ci file.txt

cm br mk /main/test

echo "on main" > file.txt
cm ci file.txt

cm switch /main/test
echo "on test" > file.txt
cm ci file.txt

cm switch /main
cm merge /main/test --merge
```

Hint: this will try to open `gtkmergetool` which will fail inside the dev-container!

##### Changed vs. deleted file

This happens when a merge is performed where a file was modified on one side and deleted on the other side of the merge

```bash
cm switch /main
echo "base" > deleteme.txt
cm add deleteme.txt
cm ci deleteme.txt

cm br mk /main/del

rm deleteme.txt
cm ci --all

cm switch /main/del
echo "on del" > deleteme.txt
cm ci deleteme.txt

cm switch /main
cm merge /main/del --merge
```

Hint: This will prompt you to directly resolve the merge conflict

[plastic]: https://www.plasticscm.com/
[setup-instructions]: https://www.plasticscm.com/documentation/administration/plastic-scm-version-control-administrator-guide#Chapter3:PlasticSCMinstallation
[server-config]: https://www.plasticscm.com/documentation/administration/plastic-scm-version-control-administrator-guide#Serverconfiguration
[contributing]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md
[devcontainer]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md#codespaces--devcontainer-development-environment



================================================
FILE: website/docs/contributing/segment.mdx
================================================
---
id: segment
title: Add Segment
sidebar_label: Add Segment
---

## Create the logic (Writer)

Add a new file in the `./src/segments` folder: `new.go`.
Ensure `New` is a single verb indicating the context the segment renders.

You can use the following template as a guide.

```go
package segments

import (
	"github.com/jandedobbeleer/oh-my-posh/src/properties"
	"github.com/jandedobbeleer/oh-my-posh/src/runtime"
)

type New struct {
    props   properties.Properties
    env     runtime.Environment

    Text string
}

const (
    //NewProp enables something
    NewProp properties.Property = "newprop"
)

func (n *New) Enabled() bool {
    return true
}

func (n *New) Template() string {
    return " {{.Text}} world "
}

func (n *New) Init(props properties.Properties, env runtime.Environment) {
    n.props = props
    n.env = env

    n.Text = n.props.GetString(NewProp, "Hello")
}
```

When it comes to icon Properties, make sure to use the UTF32 representation (e.g. "\uEFF1") rather than the icon itself.
This will facilitate the review process as not all environments display the icons based on the font being used.
You can find these values and query for icons easily at [Nerd Fonts][nf-icons].

For each segment, there's a single test file ensuring the functionality going forward. The convention
is `new_test.go`, have a look at [existing segment tests][tests] for inspiration. Oh My Posh makes
use of the test tables pattern for all newly added tests. See [this][tables] blog post for more information.

## Create a name for your Segment

[`segment_types.go`][segment-go] contains the list of available `SegmentType`'s, which gives them a name we can map from the
`.json` [themes][themes].

Add your segment.

```go
// NEW is brand new
NEW SegmentType = "new"
```

## Add the SegmentType mapping

Add your `SegmentType` and `Writer` to the `Segments` map (respect the alphabetical order).

```go
NEW: func() SegmentWriter { return &segments.New{} },
```

## Test your functionality

Even with unit tests, it's a good idea to build and validate the changes:

```shell
go build -o $GOPATH/bin/oh-my-posh
```

## Add the documentation

Create a new `markdown` file underneath the [`website/docs/segments`][docs] folder called `new.md`.
Use the following template as a guide.

````markdown
---
id: new
title: New
sidebar_label: New
---

## What

Display something new.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "new",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#193549",
  "background": "#ffeb3b",
  "properties": {
    "newprop": "\uEFF1"
  }
}}/>

## Properties

| Name      | Type     | Description                                 |
| --------- | -------- | ------------------------------------------- |
| `newprop` | `string` | the new text to show - defaults to `\uEFF1` |
````

## Map the new documentation in the sidebar

Open [`sidebars.js`][sidebars] and add your document id (`new`) to the items of the Segments category.

## Add the JSON schema

Edit the `themes/schema.json` file to add your segment.

At `$.definitions.segment.properties.type.enum`, add your `SegmentType` to the array:

```json
new,
```

At `$.definitions.segment.allOf`, add your segment details:

```json
{
  "if": {
    "properties": {
      "type": { "const": "new" }
    }
  },
  "then": {
    "title": "Display something new",
    "description": "https://ohmyposh.dev/docs/new",
    "properties": {
      "properties": {
        "properties": {
          "newprop": {
            "type": "string",
            "title": "New Property",
            "description": "the default text to display",
            "default": "Hello"
          }
        }
      }
    }
  }
}
```

## Create a pull request

And be patient, I'm going as fast as I can 🏎

[segment-go]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/src/config/segment_types.go
[themes]: https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes
[docs]: https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/website/docs/segments
[sidebars]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/website/sidebars.js
[nf-icons]: https://www.nerdfonts.com/cheat-sheet
[tests]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/src/segments/az_test.go
[tables]: https://blog.alexellis.io/golang-writing-unit-tests/



================================================
FILE: website/docs/contributing/started.mdx
================================================
---
id: started
title: Get Started
sidebar_label: Get Started
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

## Get the source code

The source is hosted on [Github][omp]. When you want to contribute, create a [fork][gh-fork] so you can make changes in
your repository and create a pull request in the official Oh My Posh repository.

To clone your fork of Oh My Posh locally, open the terminal and replace `<user>` with your Github username.

```powershell
git clone git@github.com:<user>/oh-my-posh.git
```

## Install dependencies

<Tabs
  defaultValue="manual"
  groupId="git"
  values={[
    { label: 'Manual', value: 'manual', },
    { label: 'Winget', value: 'winget', },
  ]
}>
<TabItem value="manual">

### go

The codebase is in [go][go], meaning we need a working go setup before we can do anything else.
Have a look at the [go guide][go-started] to get up and running with go in no time!

:::caution
Oh My Posh needs at least go 1.24.4
:::

### golangci-lint

To make sure we keep on writing quality code, [golang-ci lint][golang-ci-lint] is used to validate the changes.
Have a look at the [local installation guide][golang-ci-lint-local] to make sure you can validate this yourself as well.

### nodejs

The documentation is written in markdown and uses [Docusaurus][docusaurus] to generate the website. To validate your
changes, you'll need to have [nodejs] installed so you can run the website locally.

### Visual Studio Code

If you're not using Visual Studio Code yet, it's a great editor to work with go and the project has the configuration built-in.
You can download it [here][code].
</TabItem>
<TabItem value="winget">

The project has a [winget] [configuration][winget-configuration] file available to install the dependencies.
Navigate to the cloned repository and use winget to install the dependencies:

```powershell
winget configure .config/configuration.winget
```

Done! Restart the terminal and you're ready to continue below.

</TabItem>
</Tabs>

## Configure Visual Studio Code

A default config (.vscode folder) for [Visual Studio Code][code] is available in the repo:

- `golangci-lint` is configured as the default linter.
- recommended extensions available for a smooth bootstrap.
- default run and debug configurations available.

Once the extensions are installed:

- debug can be started by hitting F5.
- all tests can be run using the Test explorer.

## Running tests

The go source code can be found in the `src/` directory, make sure to navigate to that one before continuing.

### Unit tests

```powershell
go test -v ./...
```

### golangci-lint

```powershell
golangci-lint run
```

## Building the app

The easiest way to validate your changes is to write tests. Unfortunately, as it's a visual tool, you'll want to validate
the changes by running the prompt in your shell as well.

If you already have Oh My Posh in your `PATH`, you'll need to either use that one as an output parameter, or make sure
that the `$GOPATH/bin/` folder precedes the Oh My Posh binary in your `PATH`.

```powershell
go build -o (Get-Command oh-my-posh.exe).Source
```

Alternatively:

```powershell
$env:PATH = "$env:GOPATH\bin;$env:PATH"
go build -o $GOPATH/bin/oh-my-posh
```

## Run the website locally

Open your terminal and navigate to the `website` folder in the repository. Install the dependencies and start the website:

```powershell
npm install
npm start
```

This will start a local server on `http://localhost:3000` where you can see your changes.

### Extra tips

#### Configure Delve in VS Code

[Delve][delve] config is restrictive by default(string limit especially). You can expand some limits in VS Code(`settings.json` or directly in `launch.json`):
```
"go.delveConfig": {

  "dlvLoadConfig": {
    "followPointers": true,
    "maxVariableRecurse": 3,
    "maxStringLen": 400,
    "maxArrayValues": 400,
    "maxStructFields": -1
  },
  "apiVersion": 2,
  "showGlobalVariables": false
}
```

## Up Next

With everything set up, you're ready to start making changes and create your first [PR][gh-pr]!

[go]: https://go.dev/
[go-started]: https://go.dev/doc/
[golang-ci-lint]: https://golangci-lint.run
[golang-ci-lint-local]: https://golangci-lint.run/welcome/install/#local-installation
[go-bindata]: https://github.com/kevinburke/go-bindata/
[go-global]: https://github.com/golang/go/issues/40276
[pr-go-mod]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/.github/workflows/gomod.yml
[gh-pr]: https://github.com/JanDeDobbeleer/oh-my-posh/pulls
[omp]: https://github.com/JanDeDobbeleer/oh-my-posh
[gh-fork]: https://guides.github.com/activities/forking/
[code]: https://code.visualstudio.com
[delve]: https://github.com/go-delve/delve
[docusaurus]: https://docusaurus.io
[winget-configuration]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/.config/configuration.winget
[winget]: https://learn.microsoft.com/en-us/windows/package-manager/winget/
[nodejs]: https://nodejs.org/en/download/



================================================
FILE: website/docs/installation/customize.mdx
================================================
---
id: customize
title: Customize
sidebar_label: 🧩 Customize
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

The standard initialization sets Oh My Posh' default, built-in theme.

To set a new configugration or theme you need to change the `--config` option of the `oh-my-posh init <shell>`
line in your `profile` or `.<shell>rc` script (see [prompt][prompt]) and point it to the location of a
predefined [theme][themes] or custom configuration.

There are two possible values the `--config` flag can handle:

- a path to a local configuration file

  ```powershell
  --config 'C:/Users/Posh/jandedobbeleer.omp.json'
  ```

- a URL pointing to a remote config

  ```powershell
  --config 'https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/jandedobbeleer.omp.json'
  ```

### Set the configuration

The example below use a local path to the [jandedobbeleer][jandedobbeleer] theme, adjust the `--config` value
to reflect your configuration file, local or remote.

<Tabs
  defaultValue="powershell"
  groupId="shell"
  values={[
    { label: 'bash', value: 'bash', },
    { label: 'cmd', value: 'cmd', },
    { label: 'elvish', value: 'elvish', },
    { label: 'fish', value: 'fish', },
    { label: 'nu', value: 'nu', },
    { label: 'powershell', value: 'powershell', },
    { label: 'xonsh', value: 'xonsh', },
    { label: 'zsh', value: 'zsh', },
  ]
}>
<TabItem value="bash">

:::caution Git bash
Use the full path to the config file, not the relative path or `~` as a shorthand for `$HOME`.
:::

Adjust the Oh My Posh init line in `~/.bashrc` (could be `~/.profile` or `~/.bash_profile` depending
on your environment) by adding the `--config` flag with the location of your configuration.

```bash
eval "$(oh-my-posh init bash --config ~/jandedobbeleer.omp.json)"
```

Once altered, reload your profile for the changes to take effect.

```bash
exec bash
```

</TabItem>
<TabItem value="cmd">

Adjust the Oh My Posh init line in `oh-my-posh.lua` by adding the `--config` flag with the location
of your configuration.

```lua title="oh-my-posh.lua"
load(io.popen('oh-my-posh init cmd --config C:/Users/Posh/jandedobbeleer.omp.json'):read("*a"))()
```

:::caution
Use the full path to the config file, not the relative path. You can make use of **forward slashes** to
avoid having to use double backslashes.
:::

Once altered, restart cmd for the changes to take effect.

</TabItem>
<TabItem value="elvish">

Adjust the Oh My Posh init line in `~/.elvish/rc.elv` by adding the `--config` flag with the location
of your configuration.

```bash
eval (oh-my-posh init elvish --config ~/jandedobbeleer.omp.json)
```

Once added, reload your profile for the changes to take effect.

```bash
exec elvish
```

</TabItem>
<TabItem value="fish">

:::caution
It is recommended to use the latest version of Fish. Versions below 3.1.2 have issues displaying the prompt.
:::

Adjust the Oh My Posh init line in `~/.config/fish/config.fish` by adding the `--config` flag with
the location of your configuration.

```bash
oh-my-posh init fish --config ~/jandedobbeleer.omp.json | source
```

Once altered, reload your config for the changes to take effect.

```bash
. ~/.config/fish/config.fish
```

</TabItem>
<TabItem value="nu">

:::caution
Oh My Posh requires Nushell `v0.104.0` or higher.
:::

Adjust the Oh My Posh init line in the Nushell config file (`$nu.config-path`) by adding the `--config` flag
with the location of your configuration.

```bash
oh-my-posh init nu --config ~/jandedobbeleer.omp.json
```

</TabItem>
<TabItem value="powershell">

Adjust the Oh My Posh init line in your `$PROFILE` by adding the `--config` flag with the location
of your configuration.

```powershell
oh-my-posh init pwsh --config ~/jandedobbeleer.omp.json | Invoke-Expression
```

Once altered, reload your profile for the changes to take effect.

```powershell
. $PROFILE
```

:::info
When the above command gives an error, make sure to create the profile first and add the `oh-my-posh init` above.

```powershell
New-Item -Path $PROFILE -Type File -Force
```

In this scenario, it can also be that PowerShell blocks running local scripts. To solve that, set PowerShell
to only require remote scripts to be signed using `Set-ExecutionPolicy RemoteSigned`, or [sign the profile][sign].
:::

</TabItem>
<TabItem value="xonsh">

Adjust the Oh My Posh init line in `~/.xonshrc` by adding the `--config` flag with the location of your configuration.

```bash
execx($(oh-my-posh init xonsh --config ~/jandedobbeleer.omp.json))
```

Once added, reload your profile for the changes to take effect.

```bash
exec xonsh
```

</TabItem>
<TabItem value="zsh">

Adjust the Oh My Posh init line in `~/.zshrc` by adding the `--config` flag with the location of your configuration.

```bash
eval "$(oh-my-posh init zsh --config ~/jandedobbeleer.omp.json)"
```

Once altered, reload your profile for the changes to take effect.

```bash
exec zsh
```

</TabItem>
</Tabs>

:::tip wsl
When using oh-my-posh in Windows and the WSL, know that you can **share your theme with the WSL** by pointing to a theme in your
Windows user's home folder.

Inside the WSL, you can find your Windows user's home folder here: `/mnt/c/Users/<WINDOWSUSERNAME>`.
:::

### Themes

The Windows and homebrew installers also bundle the **predefined configurations** ([themes][themes]). You can use the
following way to reference them directly. This will keep them up-to-date and compatible with future updates.

<Tabs
  defaultValue="windows"
  groupId="shell"
  values={[
    { label: 'windows', value: 'windows', },
    { label: 'homebrew', value: 'homebrew', },
  ]
}>
<TabItem value="windows">

For example, to use the [jandedobbeleer][jandedobbeleer] theme, alter the init line like this (`powershell`):

```powershell
oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH/jandedobbeleer.omp.json" | Invoke-Expression
```

</TabItem>
<TabItem value="homebrew">

When using homebrew, all themes are installed alongside Oh My Posh in `$(brew --prefix oh-my-posh)/themes`.
To use any of the themes, use the following syntax (`zsh`):

```bash
eval "$(oh-my-posh init zsh --config $(brew --prefix oh-my-posh)/themes/jandedobbeleer.omp.json)"
```

</TabItem>
</Tabs>

### Custom configuration

Maybe there's a theme you like, but you don't fancy the colors. Or, maybe there's a segment you
want to tweak/add, or replace some of the icons with a different one. Whatever the case, **read through
available options first**, by starting with the [configuration][configuration].

You can export the current theme (default, or set via `--config`) to the format you like (`json`, `yaml`, or `toml`)
which can be used to tweak and store as your own custom configuration.

```bash
oh-my-posh config export --output ~/.mytheme.omp.json
```

:::caution
Do not adjust the theme files in their original location as they're updated together with Oh My Posh
which will remove your customizations. Always copy, or export them and save the new configuration outside of the
Oh My Posh internal themes folder.
:::

#### Previewing changes

If you want to preview your changes, you can use the following command to render every configured prompt.

```bash
oh-my-posh print preview
```

Use the `--force` flag in case you want to render all segments, regardless of the current context.

```bash
oh-my-posh print preview --force
```

### Read the docs

To fully understand how to customize a theme, read through the documentation in the configuration and segments sections.
The [configuration][configuration] section covers the basic building blocks and concepts of Oh My Posh themes, while the
segments section covers how to configure each available segment.

[themes]: themes.md
[configuration]: configuration/general.mdx
[prompt]: prompt.mdx
[jandedobbeleer]: /docs/themes#jandedobbeleer
[json-schema]: https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json
[homebrew-problem]: https://github.com/JanDeDobbeleer/oh-my-posh/discussions/2644
[sign]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_signing?view=powershell-7.3#methods-of-signing-scripts



================================================
FILE: website/docs/installation/fonts.mdx
================================================
---
id: fonts
title: Fonts
sidebar_label: 🔤 Fonts
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

### Nerd Fonts

Oh My Posh was designed to use [Nerd Fonts][nerdfonts]. Nerd Fonts are popular fonts that are patched to include icons.
To see the icons displayed in Oh My Posh, **install** a [Nerd Font][nerdfonts], and **configure** your terminal to use it.

:::info
Fonts need to be installed on the host system as this is a UI setting, not a command line, or shell configuration.
This means **when running inside a container or WSL**, you need to install the font on the host system and configure
your terminal emulator to use it.
:::

### Installation

<Tabs
    defaultValue="oh-my-posh"
    values={[
        { label: 'Oh My Posh', value: 'oh-my-posh' },
        { label: 'homebrew', value: 'homebrew' }
    ]
}>
<TabItem value="oh-my-posh">

Oh My Posh has a CLI to help you select and install a [Nerd Font][nerdfonts]:

:::info
When running as root/administrator, the fonts will be installed system-wide.
When running as a regular user, the fonts will be installed in the user's font directory.
By default, Oh My Posh installs the `.ttf` version of the font in case multiple versions are available.
:::

```bash
oh-my-posh font install
```

This will present a list of Nerd Font libraries, from which you can  select `Meslo`, which includes the `Meslo LGM NF` font we recommend. Note that you can also  install it directly via:

```bash
oh-my-posh font install meslo
```

</TabItem>
<TabItem value="homebrew">

If you're using Homebrew, you can search for and install Nerd Fonts directly:

```bash
brew search nerd-font

brew install --cask font-fira-code-nerd-font
```

</TabItem>
</Tabs>

### Configuration

Make sure to **configure your terminal** to use the font you have installed. The following sections will show you how to do this for the most popular terminals.

<Tabs
    defaultValue="wt"
    values={[
        { label: 'Windows Terminal', value: 'wt' },
        { label: 'Visual Studio Code', value: 'code' },
        { label: 'Visual Studio', value: 'vs' }
    ]
}>
<TabItem value="wt">

Once you have installed a Nerd Font, you will need to configure the Windows Terminal to use it. This can be easily done
by modifying the Windows Terminal settings (default shortcut: `CTRL + SHIFT + ,`). In your `settings.json` file, add the
`font.face` attribute under the `defaults` attribute in `profiles`:

```json
{
    "profiles":
    {
        "defaults":
        {
            "font":
            {
                "face": "MesloLGM Nerd Font"
            }
        }
    }
}
```

</TabItem>
<TabItem value="code">

When using Visual Studio Code, you will need to configure the integrated Terminal to make use of the Nerd Font as well. This can be done by changing the `Integrated: Font Family` value in the Terminal settings (default shortcut: `CTRL + ,` and search for `Integrated: Font Family` or via `Users` -> `Features` -> `Terminal`).

If you are using the JSON based settings, you will need to update the `terminal.integrated.fontFamily` value. Example in case of `MesloLGM Nerd Font` Nerd Font:

```json
"terminal.integrated.fontFamily": "MesloLGM Nerd Font"
```

</TabItem>
<TabItem value="vs">

When using Visual Studio, you will need to configure the integrated Terminal to make use of the Nerd Font as well. This can be done by opening the settings
in `Tools > Options > Fonts and Colors > Terminal` and selecting a font like `MesloLGM Nerd Font`.

:::warning
OTF fonts do not appear in Visual Studio's Terminal settings, only TTF fonts. See [here][vs-otf] for more information.
:::

</TabItem>
</Tabs>

### Other Fonts

If you are not interested in using a Nerd Font, you will want to use a theme which doesn't include any Nerd Font icons.
The `minimal` themes do not make use of Nerd Font icons.

[Creating your own theme][configuration] is always an option too 😊

[nerdfonts]: https://www.nerdfonts.com/
[configuration]: /docs/installation/customize
[wt-issue-8993]: https://github.com/microsoft/terminal/issues/8993
[vs-otf]: https://stackoverflow.com/questions/75252606/is-it-possible-to-use-nerd-fonts-as-the-font-for-terminals-in-visual-studio



================================================
FILE: website/docs/installation/homebrew.mdx
================================================
A [Homebrew][brew] Formula and Cask (macOS only) are available for easy installation.

```bash
brew install jandedobbeleer/oh-my-posh/oh-my-posh
```

This installs two things:

- `oh-my-posh` - Executable, added to `$(brew --prefix)/bin`
- `themes` - The latest Oh My Posh [themes][themes]

If you want to use a predefined theme, you can find them in `$(brew --prefix oh-my-posh)/themes`, referencing them as such
will always keep them compatible when updating Oh My Posh.

## Updating

```bash
brew update && brew upgrade oh-my-posh
```

:::tip
In case you see [strange behaviour][strange] in your shell, reload it after upgrading Oh My Posh.
For example in zsh:

```bash
brew update && brew upgrade && exec zsh
```
:::

[brew]: https://brew.sh
[themes]: https://ohmyposh.dev/docs/themes
[strange]: https://github.com/JanDeDobbeleer/oh-my-posh/issues/1287



================================================
FILE: website/docs/installation/linux.mdx
================================================
---
id: linux
title: Linux
sidebar_label: 🐧 Linux
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import InstallHomebrew from "./homebrew.mdx";
import Next from "./next.mdx";

## Set up your terminal

Oh My Posh uses ANSI color codes under the hood, these should work in every terminal,
but you may have to set the environment variable `$TERM` to `xterm-256color` for it to work.

:::info
To display all icons, we recommend the use of a [Nerd Font][fonts].
:::

## Installation

<Tabs
  defaultValue="homebrew"
  groupId="install"
  values={[
    { label: 'manual', value: 'manual', },
    { label: 'homebrew', value: 'homebrew', }
  ]
}>
<TabItem value="manual">

:::info
Before running the below commands, make sure that you have updated `curl` and the
client certificate store on the target machine.
:::

Install the latest version for your system by running the following command:

```bash
curl -s https://ohmyposh.dev/install.sh | bash -s
```

By default the script will install to `~/bin` or `~/.local/bin` depending on which one exists,
or the existing Oh My Posh executable's installation folder.
If you want to install to a different location you can specify it using the `-d` flag:

```bash
curl -s https://ohmyposh.dev/install.sh | bash -s -- -d ~/bin
```

</TabItem>
<TabItem value="homebrew">

:::warning
When installing Homebrew for Linux,
be sure to follow *[Next steps][nextsteps]* instructions to add Homebrew to your PATH and to your
bash shell profile script, and *[Requirements][requirements]* to build Oh My Posh.
:::

<InstallHomebrew />

</TabItem>
</Tabs>

<Next />

[requirements]: https://docs.brew.sh/Homebrew-on-Linux#requirements
[nextsteps]: https://docs.brew.sh/Homebrew-on-Linux#install
[fonts]: /docs/installation/fonts



================================================
FILE: website/docs/installation/macos.mdx
================================================
---
id: macos
title: macOS
sidebar_label: 🍏 macOS
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import InstallHomebrew from "./homebrew.mdx";
import Next from "./next.mdx";

## Set up your terminal

As the standard terminal only supports [256 colors][256-colors], we advise using
[iTerm2][iterm2] or any other modern day macOS terminal that supports ANSI characters.

:::info
To display all icons, we recommend the use of a [Nerd Font][fonts].
:::

<Tabs
  defaultValue="homebrew"
  groupId="install"
  values={[
    { label: 'homebrew', value: 'homebrew', },
    { label: 'MacPorts', value: 'macports', }
  ]
}>
<TabItem value="homebrew">

<InstallHomebrew />

</TabItem>
<TabItem value="macports">

You can install Oh My Posh via [MacPorts] which is maintained by the [community].

```bash
sudo port selfupdate
sudo port install oh-my-posh
```

Oh My Posh will be installed at `/opt/local/bin/oh-my-posh`.

## Updating

```bash
sudo port selfupdate
sudo port upgrade oh-my-posh
```

More details on the [ports page] for Oh My Posh.

</TabItem>
</Tabs>

<Next />

[256-colors]: /docs/configuration/colors#standard-colors
[iterm2]: https://iterm2.com
[fonts]: /docs/installation/fonts
[MacPorts]: https://www.macports.org
[ports page]: https://ports.macports.org/port/oh-my-posh
[community]: https://ports.macports.org/port/oh-my-posh/



================================================
FILE: website/docs/installation/next.mdx
================================================
## Next

Now that Oh My Posh is installed, you can go ahead and configure your terminal and shell to
get the prompt to look exactly like you want.

- install a [font][fonts]
- configure your terminal/editor to use the installed font
- configure your shell to [use Oh My Posh][prompt]
- (optional) configure a theme or [custom prompt configuration][customize]

[fonts]: fonts.mdx
[prompt]: prompt.mdx
[customize]: customize.mdx


================================================
FILE: website/docs/installation/prompt.mdx
================================================
---
id: prompt
title: Change your prompt
sidebar_label: ✨ Prompt
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

:::tip
If you have no idea which shell you're currently using, Oh My Posh has a utility switch that can tell that to you.
:::

```bash
oh-my-posh get shell
```

<Tabs
  defaultValue="powershell"
  groupId="shell"
  values={[
    { label: 'bash', value: 'bash', },
    { label: 'cmd', value: 'cmd', },
    { label: 'elvish', value: 'elvish', },
    { label: 'fish', value: 'fish', },
    { label: 'nu', value: 'nu', },
    { label: 'powershell', value: 'powershell', },
    { label: 'xonsh', value: 'xonsh', },
    { label: 'zsh', value: 'zsh', },
  ]
}>
<TabItem value="bash">

Add the following snippet as the last line to `~/.bashrc` (could be `~/.profile` or `~/.bash_profile` depending on your environment):

```bash
eval "$(oh-my-posh init bash)"
```

Once added, reload your profile for the changes to take effect.

```bash
exec bash
```

Or, when using `~/.profile`.

```bash
. ~/.profile
```

</TabItem>
<TabItem value="cmd">

There's no out-of-the-box support for Windows CMD when it comes to custom prompts.
There is however a way to do it using [Clink][clink], which at the same time supercharges
your cmd experience. Follow the installation instructions and make sure you select autostart.

Integrating Oh My Posh with Clink is easy: create a new file called oh-my-posh.lua in your Clink
scripts directory (run `clink info` inside cmd to find that file's location).

```lua title="oh-my-posh.lua"
load(io.popen('oh-my-posh init cmd'):read("*a"))()
```

Once added, restart cmd for the changes to take effect.

:::info
Clink has builtin support for Oh My Posh. It allows you to set the prompt using the `clink` command.

```bash
clink config prompt use oh-my-posh
```

To set the configuration file, use the following command:

```bash
clink set ohmyposh.theme <path>
```
:::

</TabItem>
<TabItem value="elvish">

Add the following snippet as the last line to `~/.elvish/rc.elv`:

```bash
eval (oh-my-posh init elvish)
```

Once added, reload your profile for the changes to take effect.

```bash
exec elvish
```

</TabItem>
<TabItem value="fish">

:::caution
It is recommended to use the latest version of Fish. Versions below 3.1.2 have issues displaying the prompt.
:::

Add the following snippet as the last line to `~/.config/fish/config.fish`:

```bash
oh-my-posh init fish | source
```

Once added, reload your config for the changes to take effect.

```bash
exec fish
```

</TabItem>
<TabItem value="nu">

:::caution
Oh My Posh requires Nushell `v0.104.0` or higher.
:::

Add the following snippet as the last line to the Nushell config file (`$nu.config-path`):

```bash
oh-my-posh init nu
```

Once added, restart Nushell for the changes to take effect.

</TabItem>
<TabItem value="powershell">

Edit your PowerShell profile script, you can find its location under the `$PROFILE` variable in your preferred PowerShell version. For example, using notepad:

```powershell
notepad $PROFILE
```

:::info
When the above command gives an error, make sure to create the profile first.

```powershell
New-Item -Path $PROFILE -Type File -Force
```

In this scenario, it can also be that PowerShell blocks running local scripts. To solve that, set PowerShell
to only require remote scripts to be signed using `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine`, or [sign the profile][sign].
:::

Add the following snippet as the last line to your PowerShell profile script:

```powershell
oh-my-posh init pwsh | Invoke-Expression
```

:::tip Execution policy
In case the execution policy disables executing unsigned scripts on your system, you can fallback to evaluating
the script instead. Use the `--eval` flag to do so:

```powershell
oh-my-posh init pwsh --eval | Invoke-Expression
```

Be aware this will make initializing the shell slower.
:::

Once added, reload your profile for the changes to take effect.

```powershell
. $PROFILE
```

</TabItem>
<TabItem value="xonsh">

Add the following snippet as the last line to `~/.xonshrc`:

```bash
execx($(oh-my-posh init xonsh))
```

Once added, reload your profile for the changes to take effect.

```bash
exec xonsh
```

</TabItem>
<TabItem value="zsh">

Add the following snippet as the last line to `~/.zshrc`:

```bash
eval "$(oh-my-posh init zsh)"
```

:::tip
As the standard terminal has issues displaying the ANSI characters correctly, you might want to skip loading just for that terminal and instead of the line above, place this in your `~/.zshrc`:

```bash
if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh)"
fi
```

Note this will still load Oh My Posh for [iTerm2][iterm2] or any other modern day macOS terminal that supports ANSI characters.
:::

Once added, reload your profile for the changes to take effect.

```bash
exec zsh
```

</TabItem>
</Tabs>

[clink]: https://chrisant996.github.io/clink/
[iterm2]: https://www.iterm2.com/
[homebrew-problem]: https://github.com/JanDeDobbeleer/oh-my-posh/discussions/2644
[sign]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_signing?view=powershell-7.3#methods-of-signing-scripts



================================================
FILE: website/docs/installation/upgrade.mdx
================================================
---
id: upgrade
title: Upgrade
sidebar_label: ♻️ Upgrade
---

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import Config from "@site/src/components/Config.js";

## Configuration

Oh My Posh can display the availability of an update, or auto update itself when
enabled by adding the following to your configuration.

<Config
  data={{
    upgrade: {
      notice: true,
      interval: "168h",
      auto: false,
      source: "cdn",
    },
  }}
/>

:::info
Auto upgrade will never upgrade major versions. This is to avoid introducing breaking changes
without explicit user acknowledgement.
:::

:::warning
Upgrade features are never enabled when you have `async` loading enabled in your configuration
and the shell you're using supports it.
:::

| Name       |   Type    | Default | Description                                                                                                                                                                                                                |
| ---------- | :-------: | :-----: | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `notice`   | `boolean` | `false` | enable displaying the upgrade notice on shell start, only checks based on `interval`                                                                                                                                       |
| `auto`     | `boolean` | `false` | automatically update Oh My Posh when an update is found, only checks based on `interval`                                                                                                                                   |
| `interval` | `string`  |  `24h`  | the duration for which not to check for an update. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library                                      |
| `source`   | `string`  |  `cdn`  | where to fetch the information from. Accepted values are `cdn` (`https://cdn.ohmyposh.dev/releases/latest/version.txt`) and `github` (`https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/version.txt`) |

## Upgrade

### Manual

While you can always follow the upgrade steps listed under the installation section,
you can also use the `upgrade` command to update Oh My Posh to the latest version.

```powershell
oh-my-posh upgrade
```

### Automated

<Tabs
  defaultValue="cli"
  groupId="sample"
  values={[
    { label: 'CLI', value: 'cli', },
    { label: 'Configuration', value: 'config', },
  ]
}>
<TabItem value="cli">

```powershell
oh-my-posh enable upgrade
```

</TabItem>
<TabItem value="config">

<Config
  data={{
    upgrade: {
      interval: "168h",
      auto: true,
      source: "cdn",
    },
  }}
/>

</TabItem>
</Tabs>

[customize]: /docs/installation/customize#custom-configuration



================================================
FILE: website/docs/installation/windows.mdx
================================================
---
id: windows
title: Windows
sidebar_label:  🪟  Windows
---

import ThemedImage from '@theme/ThemedImage';
import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import Next from "./next.mdx";

## Set up your terminal

While Oh My Posh works on the standard terminal, we advise using the [Windows Terminal][wt].

:::info
To display all icons, we recommend the use of a [Nerd Font][fonts].
:::

:::caution
When using oh-my-posh inside the WSL, make sure to follow the [Linux][linux] installation guide.
:::

<a href="https://apps.microsoft.com/detail/xp8k0hkjfrxgck?mode=mini" target="_blank">
  <ThemedImage
    alt="msstore"
    width="232"
    height="68"
    sources={{
      light: '/img/msstore-dark.svg',
      dark: '/img/msstore-light.svg',
    }}
  />
</a>

## Installation

<Tabs
  defaultValue="winget"
  groupId="install"
  values={[
    { label: 'winget', value: 'winget', },
    { label: 'manual', value: 'manual', },
    { label: 'chocolatey', value: 'chocolatey'},
  ]
}>
<TabItem value="winget">

Open a PowerShell prompt and run the following command:

```powershell
winget install JanDeDobbeleer.OhMyPosh -s winget
```

</TabItem>
<TabItem value="manual">

Open a PowerShell prompt and run the following command:

```powershell
Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))
```

</TabItem>
<TabItem value="chocolatey">

:::info
The chocolatey package is maintained by the community and might not be up to date.
In case of issues, please contact the [maintainer][choco-maintainer].
:::

Open a PowerShell prompt and run the following command:

```powershell
choco install oh-my-posh
```

</TabItem>
</Tabs>

This installs a couple of things:

- `oh-my-posh.exe` - Windows executable
- `themes` - The latest Oh My Posh [themes][themes]

:::info
For the `PATH` to be reloaded, a restart of your terminal is advised.
If oh-my-posh is not recognized as a command, you can run the installer again, or add it manually to your `PATH`.
For example:

```powershell
$env:Path += ";C:\Users\user\AppData\Local\Programs\oh-my-posh\bin"
```
:::

:::tip Antivirus software
Due to frequent updates of Oh My Posh, Antivirus software occasionally flags it (false positive).
To ensure Oh My Posh isn't blocked you can either report it to your favorite Antivirus software as false positive
(e.g. [Report a false positive/negative to Microsoft for analysis][report-false-positive]) or create an exclusion for it.
Exclusions should be added with the full path to the executable, you can get it with the following command from a PowerShell prompt:

```powershell
(Get-Command oh-my-posh).Source
```
:::

<Next />

## Update

<Tabs
  defaultValue="winget"
  groupId="install"
  values={[
    { label: 'winget', value: 'winget', },
    { label: 'manual', value: 'manual', },
    { label: 'chocolatey', value: 'chocolatey'},
  ]
}>
<TabItem value="winget">

Open a PowerShell prompt and run the following command:

```powershell
winget upgrade JanDeDobbeleer.OhMyPosh -s winget
```

</TabItem>
<TabItem value="manual">

Open a PowerShell prompt and run the following command:

```powershell
Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))
```

</TabItem>
<TabItem value="chocolatey">

:::info
The chocolatey package is maintained by the community and might not be up to date.
In case of issues, please contact the [maintainer][choco-maintainer].
:::

Open a PowerShell prompt and run the following command:

```powershell
choco upgrade oh-my-posh
```

</TabItem>
</Tabs>

## Default themes

You can find the themes in the folder indicated by the environment variable `POSH_THEMES_PATH`.
For example, you can use `oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\jandedobbeleer.omp.json" | Invoke-Expression`
for the prompt initialization in PowerShell.


[fonts]: /docs/installation/fonts
[wt]: https://github.com/microsoft/terminal
[linux]: /docs/installation/linux
[themes]: /docs/themes
[report-false-positive]: https://docs.microsoft.com/en-us/microsoft-365/security/defender/m365d-autoir-report-false-positives-negatives#report-a-false-positivenegative-to-microsoft-for-analysis
[choco-maintainer]: https://github.com/digitalcoyote/chocolatey-packages



================================================
FILE: website/docs/segments/cli/angular.mdx
================================================
---
id: angular
title: Angular
sidebar_label: Angular
---

## What

Display the currently active [Angular CLI][angular-cli-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "angular",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#1976d2",
    template: " \uE753 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |    Default     | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |    `false`     | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |     `true`     | fetch the angular version                                                                                                                                                                                                            |
| `cache_duration`       |  `string`  |     `24h`      | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |   `context`    | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `angular.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[angular-cli-docs]: https://angular.io/cli
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/argocd.mdx
================================================
---
id: argocd
title: ArgoCD Context
sidebar_label: ArgoCD
---

## What

Display the current ArgoCD context name, user and/or server.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "argocd",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#FFA400",
    template: " {{ .Name }}:{{ .User }}@{{ .Server }} ",
  }}
/>

## Template ([info][templates])

:::note default template

```template
{{ .Name }}
```

### Properties

| Name      | Type     | Description                       |
| --------- | -------- | --------------------------------- |
| `.Name`   | `string` | the current context name          |
| `.Server` | `string` | the server of the current context |
| `.User`   | `string` | the user of the current context   |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/aurelia.mdx
================================================
---
id: aurelia
title: Aurelia
sidebar_label: Aurelia
---

## What

Display the currently active Aurelia version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "aurelia",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#de1f84",
    template: " \u03b1 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |    Default     | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |    `false`     | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |     `true`     | fetch the aurelia version                                                                                                                                                                                                            |
| `cache_duration`       |  `string`  |     `24h`      | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |   `context`    | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `package.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[aurelia]: https://docs.aurelia.io/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/bazel.mdx
================================================
---
id: bazel
title: Bazel
sidebar_label: Bazel
---

## What

Display the currently active [Bazel][bazel-github] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "bazel",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#43a047",
  }}
/>

## Properties

| Name                   |    Type    |                           Default                           | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                           `false`                           | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                           `true`                            | display the Bazel version - defaults to                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |                            `24h`                            | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                             | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                          `context`                          | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                             | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info documentation                                                                                                                  |
| `icon`                 |  `string`  |                          `\ue63a`                           | the icon for the segment                                                                                                                                                                                                             |
| `extensions`           | `[]string` | `*.bazel, *.bzl, BUILD, WORKSPACE, .bazelrc, .bazelversion` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                             |                                                                                                                                                                                                                                      |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Icon }} {{ .Error }}{{ else }}{{ url .Icon .URL }} {{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |
| `.Icon`  | `string` | the icon representing Bazel's logo                 |

[bazel-github]: https://github.com/bazelbuild/bazel
[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/buf.mdx
================================================
---
id: buf
title: Buf
sidebar_label: Buf
---

## What

Display the currently active [Buf CLI][buf-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "buf",
    style: "plain",
    foreground: "#1000D6",
    template: " 🐃 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                 Default                 | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                 `false`                 | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                 `true`                  | fetch the active version or not; useful if all you need is an icon indicating `buf`                                                                                                                                                  |
| `cache_duration`       |  `string`  |                  `24h`                  | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                         | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                `context`                | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                         | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `buf.yaml, buf.gen.yaml, buf.work.yaml` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                         | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[buf-docs]: https://buf.build/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/bun.mdx
================================================
---
id: bun
title: Bun
sidebar_label: Bun
---

## What

Display the currently active [Bun CLI][bun-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "bun",
    style: "plain",
    foreground: "#3C82F6",
    template: " \ue76f {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |        Default        | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |        `false`        | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |         `true`        | fetch the active version or not; useful if all you need is an icon indicating `bun`                                                                                                                                                  |
| `cache_duration`       |  `string`  |         `24h`         | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                       | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |       `context`       | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                       | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `bun.lockb, bun.lock` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                       | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[bun-docs]: https://bun.sh/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/cmake.mdx
================================================
---
id: cmake
title: Cmake
sidebar_label: Cmake
---

## What

Display the currently active [Cmake][cmake-github] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "cmake",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#E8EAEE",
    background: "#1E9748",
    template: " \ue61e \ue61d cmake {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |          Default          | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |          `false`          | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |          `true`           | display the cmake version                                                                                                                                                                                                            |
| `cache_duration`       |  `string`  |           `24h`           | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |         `context`         | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.cmake, CMakeLists.txt` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[cmake-github]: https://github.com/Kitware/CMake
[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/deno.mdx
================================================
---
id: deno
title: Deno
sidebar_label: Deno
---

## What

Display the currently active [Deno CLI][deno-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "deno",
    style: "plain",
    foreground: "#3C82F6",
    template: " \ue628 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |         Default         | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |         `false`         | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |         `true`          | fetch the active version or not; useful if all you need is an icon indicating `deno`                                                                                                                                                 |
| `cache_duration`       |  `string`  |          `24h`          | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                         | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |        `context`        | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                         | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.ts, *.js, deno.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                         | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[deno-docs]: https://deno.land/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/docker.mdx
================================================
---
id: docker
title: Docker
sidebar_label: Docker
---

## What

Display the current Docker context. Will not be active when using the default context.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "docker",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#0B59E7",
    template: " \uf308 {{ .Context }} ",
  }}
/>

## Properties

| Name            |    Type    |                                      Default                                     | Description                                                                                                                                                              |
| --------------- | :--------: | :------------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `display_mode`  |  `string`  |                                     `context`                                    | <ul><li>`files`: the segment is only displayed when a file `extensions` listed is present</li><li>`context`: displays the segment when a Docker context active</li></ul> |
| `fetch_context` | `boolean`  |                                      `true`                                      | also fetch the current active Docker context when in the `files` display mode                                                                                            |
| `extensions`    | `[]string` | `compose.yml, compose.yaml, docker-compose.yml, docker-compose.yaml, Dockerfile` | allows to override the default list of file extensions to validate                                                                                                       |

## Template ([info][templates])

:::note default template

```template
\uf308 {{ .Context }}
```

:::

### Properties

| Name       | Type     | Description                |
| ---------- | -------- | -------------------------- |
| `.Context` | `string` | the current active context |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/firebase.mdx
================================================
---
id: firebase
title: Firebase
sidebar_label: Firebase
---

## What

Display the current active Firebase project.

This segment leverages the `firebase-tools.json` file generated by the [Firebase CLI][firebase-cli-docs].
The active files listed there are used to determine the current project against the current directory.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "firebase",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#ffffff",
  "background": "#FFA000",
  "template": " \udb82\udd67 {{ .Project }}"
}}/>

## Template ([info][templates])

:::note default template

```template
{{ .Project }}
```

:::

### Properties

| Name       | Type     | Description                                                              |
| ---------- | -------- | ------------------------------------------------------------------------ |
| `.Project` | `string` | the currently active project                                             |

[templates]: /docs/configuration/templates
[firebase-cli-docs]: https://firebase.google.com/docs/cli



================================================
FILE: website/docs/segments/cli/flutter.mdx
================================================
---
id: flutter
title: Flutter
sidebar_label: Flutter
---

## What

Display the currently active [flutter] version. Supports [fvm].

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "flutter",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#06A4CE",
    template: " \ue28e {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                      Default                      | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                      `false`                      | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                      `true`                       | fetch the flutter version                                                                                                                                                                                                            |
| `cache_duration`       |  `string`  |                       `24h`                       | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                   | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                     `context`                     | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.dart, pubspec.yaml, pubspec.yml, pubspec.lock` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                   `.dart_tool`                    | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[fvm]: https://fvm.app/
[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[flutter]: https://flutter.dev/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/gitversion.mdx
================================================
---
id: gitversion
title: GitVersion
sidebar_label: GitVersion
---

## What

Display the [GitVersion][gitversion] version.
We _strongly_ recommend using [GitVersion Portable][gitversion-portable] for this.

:::caution
The GitVersion CLI can be a bit slow, causing the prompt to feel slow. This is why we cache
the value for 30 minutes by default.
:::

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "gitversion",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#ffffff",
  "background": "#3a579b",
  "template": " \uF1D2 {{ .MajorMinorPatch }} "
}}/>

## Template ([info][templates])

:::note default template

```template
{{ .MajorMinorPatch }}
```

:::

### Properties

You can leverage all variables from the [GitVersion][gitversion] CLI. Have a look at their [documentation][docs] for more information.

[gitversion]: https://github.com/GitTools/GitVersion
[gitversion-portable]: http://chocolatey.org/packages/GitVersion.Portable
[templates]: /docs/configuration/templates
[docs]: https://gitversion.net/docs/reference/variables



================================================
FILE: website/docs/segments/cli/helm.mdx
================================================
---
id: helm
title: Helm
sidebar_label: Helm
---

## What

Display the version of helm

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "background": "#a7cae1",
  "foreground": "#100e23",
  "powerline_symbol": "\ue0b0",
  "template": " Helm {{ .Version }}",
  "style": "powerline",
  "type": "helm"
}}/>

## Properties

| Name           | Type     | Default  | Description                                                                                                                                                      |
| -------------- | :------: | :------: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `display_mode` | `string` | `always` | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when a chart source file `Chart.yaml` (or `Chart.yml`) or helmfile `helmfile.yaml` (or `helmfile.yml`) is present </li></ul> |

## Template ([info][templates])

:::note default template

```template
 Helm {{ .Version }}
```

:::

### Properties

| Name         | Type     | Description                |
| ------------ | -------- | -------------------------- |
| `.Version`   | `string` | Helm cli version           |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/kubectl.mdx
================================================
---
id: kubectl
title: Kubernetes
sidebar_label: Kubernetes
---

## What

Display the currently active Kubernetes context name and namespace name.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "kubectl",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#ebcc34",
    template: " \uFD31 {{.Context}}{{if .Namespace}} :: {{.Namespace}}{{end}} ",
    properties: {
      context_aliases: {
        "arn:aws:eks:eu-west-1:1234567890:cluster/posh": "posh",
      },
    },
  }}
/>

## Properties

| Name               |   Type    | Default | Description                                                                     |
| ------------------ | :-------: | :-----: | ------------------------------------------------------------------------------- |
| `display_error`    | `boolean` | `false` | show the error context when failing to retrieve the kubectl information         |
| `parse_kubeconfig` | `boolean` | `true`  | parse kubeconfig files instead of calling out to kubectl to improve performance |
| `context_aliases`  | `object`  |         | custom context namespace                                                        |

## Template ([info][templates])

:::note default template

```template
{{ .Context }}{{ if .Namespace }} :: {{ .Namespace }}{{ end }}
```

:::

### Properties

| Name         | Type     | Description                           |
| ------------ | -------- | ------------------------------------- |
| `.Context`   | `string` | the current kubectl context           |
| `.Namespace` | `string` | the current kubectl context namespace |
| `.User`      | `string` | the current kubectl context user      |
| `.Cluster`   | `string` | the current kubectl context cluster   |

:::tip

It is common for the Kubernetes "default" namespace to be used when no namespace is provided. If you want your prompt to
render an empty current namespace using the word "default", you can use something like this for the template:

```
{{.Context}} :: {{if .Namespace}}{{.Namespace}}{{else}}default{{end}}
```

:::

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/mvn.mdx
================================================
---
id: mvn
title: Maven
sidebar_label: Maven
---

## What

Display the currently active [Maven][maven-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "mvn",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#FFFFFF",
    background: "#2E2A65",
    template: " Maven {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |  Default  | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |  `false`  | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |  `true`   | fetch the Maven version                                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |   `24h`   | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  | `context` | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `pom.xml` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{.Full}}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[maven-docs]: https://maven.apache.org
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/nbgv.mdx
================================================
---
id: nbgv
title: Nerdbank.GitVersioning
sidebar_label: Nbgv
---

## What

Display the [Nerdbank.GitVersioning][nbgv] version.

:::caution
The Nerdbank.GitVersioning CLI can be a bit slow causing the prompt to feel slow.
:::

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "nbgv",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#ffffff",
  "background": "#3a579a",
  "template": " \uF1D2 {{ .Version }} "
}}/>

## Template ([info][templates])

:::note default template

```template
{{ .Version }}
```

:::

### Properties

| Name                            | Type     | Description                                |
| ------------------------------- | -------- | ------------------------------------------ |
| `.Version`                      | `string` | the current version                        |
| `.AssemblyVersion`              | `string` | the current assembly version               |
| `.AssemblyInformationalVersion` | `string` | the current assembly informational version |
| `.NuGetPackageVersion`          | `string` | the current nuget package version          |
| `.ChocolateyPackageVersion`     | `string` | the current chocolatey package version     |
| `.NpmPackageVersion`            | `string` | the current npm package version            |
| `.SimpleVersion`                | `string` | the current simple version                 |

[nbgv]: https://github.com/dotnet/Nerdbank.GitVersioning
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/nix-shell.mdx
================================================
---
id: nix-shell
title: Nix Shell
sidebar_label: Nix Shell
---

## What

Displays the [nix shell] status if inside a nix-shell environment.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "nix-shell",
    style: "powerline",
    foreground: "blue",
    background: "transparent",
    template: "(nix-{{ .Type }})",
  }}
/>

## Template ([info][templates])

:::note default template

```template
via {{ .Type }}-shell"
```

:::

### Properties

| Name    | Type     | Description                                                 |
| ------- | -------- | ----------------------------------------------------------- |
| `.Type` | `string` | the type of nix shell, can be `pure`, `impure` or `unknown` |

[nix shell]: https://nixos.org/guides/nix-pills/developing-with-nix-shell.html
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/npm.mdx
================================================
---
id: npm
title: NPM
sidebar_label: NPM
---

## What

Display the currently active [npm][npm-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "npm",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    template: "\ue71e {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |              Default              | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |              `false`              | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |              `true`               | fetch the NPM version                                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |               `24h`               | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                   | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |             `context`             | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `package.json, package-lock.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                   | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
\ue71e {{.Full}}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[npm-docs]: https://docs.npmjs.com/about-npm
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/nx.mdx
================================================
---
id: nx
title: Nx
sidebar_label: Nx
---

## What

Display the currently active [Nx][nx-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "nx",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#1976d2",
    template: " \uE753 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |          Default          | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |          `false`          | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |          `true`           | fetch the active version or not                                                                                                                                                                                                      |
| `cache_duration`       |  `string`  |           `24h`           | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |         `context`         | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `workspace.json, nx.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[nx-docs]: https://nx.dev
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/pnpm.mdx
================================================
---
id: pnpm
title: PNPM
sidebar_label: PNPM
---

## What

Display the currently active [pnpm][pnpm-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "pnpm",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#F9AD00",
    template: " \uDB80\uDEC1 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |            Default             | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |            `false`             | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |             `true`             | fetch the PNPM version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |             `24h`              | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |           `context`            | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `package.json, pnpm-lock.yaml` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
\uDB80\uDEC1 {{.Full}}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[pnpm-docs]: https://pnpm.io
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/quasar.mdx
================================================
---
id: quasar
title: Quasar
sidebar_label: Quasar
---

## What

Display the currently active [Quasar CLI][quasar-cli] version. Only rendered when the current or
parent folder contains a `quasar.config` or `quasar.config.js` file.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "quasar",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#00B4FF",
    template:
      " \uea6a {{.Full}}{{ if .HasVite }} \ueb29 {{ .Vite.Version }}{{ end }} ",
  }}
/>

## Properties

| Name                   |    Type    |              Default              | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |              `false`              | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `missing_command_text` |  `string`  |                                   | text to display when the command is missing                                                                                                                                                                                          |
| `fetch_version`        | `boolean`  |              `true`               | fetch the NPM version                                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |               `24h`               | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `display_mode`         |  `string`  |             `context`             | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `fetch_dependencies`   | `boolean`  |              `false`              | fetch the version number of the `vite` and `@quasar/app-vite` dependencies if present                                                                                                                                                |
| `extensions`           | `[]string` | `quasar.config, quasar.config.js` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                   | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
\uea6a {{.Full}}{{ if .HasVite }} \ueb29 {{ .Vite.Version }}{{ end }}
```

:::

### Properties

| Name       | Type         | Description                                        |
| ---------- | ------------ | -------------------------------------------------- |
| `.Full`    | `string`     | the full version                                   |
| `.Major`   | `string`     | major number                                       |
| `.Minor`   | `string`     | minor number                                       |
| `.Patch`   | `string`     | patch number                                       |
| `.URL`     | `string`     | URL of the version info / release notes            |
| `.Error`   | `string`     | error encountered when fetching the version string |
| `.Vite`    | `Dependency` | the `vite` dependency, if found                    |
| `.AppVite` | `Dependency` | the `@quasar/app-vite` dependency, if found        |

#### Dependency

| Name       | Type      | Description                   |
| ---------- | --------- | ----------------------------- |
| `.Version` | `string`  | the full version              |
| `.Dev`     | `boolean` | development dependency or not |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[quasar-cli]: https://quasar.dev/start/quasar-cli
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/react.mdx
================================================
---
id: react
title: React
sidebar_label: React
---

## What

Display the currently active React version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "react",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#81a1c1",
    template: " \uE7ba {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |    Default     | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |    `false`     | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |     `true`     | fetch the react version                                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |     `24h`      | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |   `context`    | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `package.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[react]: https://react.dev/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/svelte.mdx
================================================
---
id: svelte
title: Svelte
sidebar_label: Svelte
---

## What

Display the currently active Svelte version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "svelte",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#1976d2",
    template: " \ue697 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |      Default       | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |      `false`       | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |       `true`       | fetch the svelte version                                                                                                                                                                                                             |
| `cache_duration`       |  `string`  |       `none`       | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                    | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |      `files`       | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                    | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `svelte.config.js` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                    | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[svelte-docs]: https://svelte.dev/docs/svelte/overview
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/talosctl.mdx
================================================
---
id: talosctl
title: Talosctl Context
sidebar_label: Talosctl
---

## What

Displays the currently active Talosctl context name.

This segment leverages the `.talos/config` file generated by the [Talosctl CLI][talosctl].
The CLI docs can be found by going to Documentation > Reference > CLI.
For example, [v1.7 CLI][CLI].

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "talosctl",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#FFFFFF",
  "background": "#FF6C00",
  "template": " \udb84\udcfe {{ .Context }}"
}}/>

## Template ([info][templates])

:::note default template

```template
{{ .Context }}
```

:::

### Properties

| Name         | Type     | Description                           |
| ------------ | -------- | ------------------------------------- |
| `.Context`   | `string` | the current talosctl context           |


[templates]: /docs/configuration/templates
[talosctl]: https://www.talos.dev/
[CLI]: https://www.talos.dev/v1.7/reference/cli/



================================================
FILE: website/docs/segments/cli/tauri.mdx
================================================
---
id: tauri
title: Tauri
sidebar_label: Tauri
---

## What

Display the currently active Tauri version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "tauri",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#1976d2",
    template: " \ue8bb {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |      Default      | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |      `false`      | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |      `true`       | fetch the tauri version                                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |      `none`       | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                   | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |      `files`      | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `tauri.conf.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |    `src-tauri`    | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[tauri-docs]: https://v2.tauri.app/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/terraform.mdx
================================================
---
id: terraform
title: Terraform Context
sidebar_label: Terraform
---

## What

Display the currently active Terraform Workspace name.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "terraform",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#000000",
  "background": "#ebcc34",
  "template": "{{.WorkspaceName}}"
}}/>

## Properties

| Name            | Type      | Default | Description                                                                        |
| --------------- | :-------: | :-----: | ---------------------------------------------------------------------------------- |
| `fetch_version` | `boolean` | `false` | fetch the version information from `versions.tf`, `main.tf` or `terraform.tfstate` |

## Template ([info][templates])

:::note default template

```template
{{ .WorkspaceName }}{{ if .Version }} {{ .Version }}{{ end }}
```

:::

### Properties

| Name             | Type     | Description                                       |
| ---------------- | -------- | ------------------------------------------------- |
| `.WorkspaceName` | `string` | is the current workspace name                     |
| `.Version`       | `string` | terraform version (set `fetch_version` to `true`) |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cli/ui5tooling.mdx
================================================
---
id: ui5tooling
title: UI5 Tooling
sidebar_label: UI5 Tooling
---

## What

Display the active [UI5 tooling][ui5-homepage] version (global or local if present -
see [the documentation][ui5-version-help]).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    background: "#f5a834",
    foreground: "#100e23",
    powerline_symbol: "\ue0b0",
    template: " \uf0adui5 {{ .Full }} ",
    style: "powerline",
    type: "ui5tooling",
  }}
/>

## Properties

| Name                   |    Type    |   Default    | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |   `false`    | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |    `true`    | fetch the ui5tooling version                                                                                                                                                                                                         |
| `cache_duration`       |  `string`  |    `24h`     | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |              | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |  `context`   | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |              | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*ui5*.y*ml` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |              | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[ui5-homepage]: https://sap.github.io/ui5-tooling
[ui5-version-help]: https://sap.github.io/ui5-tooling/pages/CLI/#ui5-versions
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/umbraco.mdx
================================================
---
id: umbraco
title: Umbraco
sidebar_label: Umbraco
---

## What

Display current [Umbraco] Version if found inside the current working directory.
The segment will only show based on the following logic

* The current folder contains the folder named umbraco
* Modern Umbraco (.NET Core)
    * Check to see if current folder contains one or more .csproj files
    * Open .csproj XML files and check to see if Umbraco is installed as a PackageReference
    * Read the installed version
* Legacy Umbraco (.NET Framework)
    * Check to see if the current folder contains a web.config
    * Open the XML and look for AppSettings keys
    * If umbraco is installed it has a setting called umbraco.core.configurationstatus OR umbracoConfigurationStatus
    * Read the value inside this AppSetting to get its version

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "umbraco",
  "background": "#ffffff",
  "foreground": "#d886f1",
  "style": "diamond",
  "leading_diamond": "\ue0b6",
  "trailing_diamond": "\ue0b4",
  "template": "\udb81\udd49 {{ .Version }}",
  "background_templates": [
    "{{ if (.Modern) }}#3544B1{{ end }}",
    "{{ if not (.Modern) }}#F79C37{{ end }}"
  ]
}}/>

## Template ([info][templates])

:::note default template

```template
{{ .Version }}
```

:::

## Properties

| Name           | Type      | Description                                                                                                         |
| -------------- | --------- | ------------------------------------------------------------------------------------------------------------------- |
| `.Modern`      | `boolean` | a boolean to detemine if this is modern Umbraco V9+ using modern .NET or if its legacy Umbraco using .NET Framework |
| `.Version`     | `string`  | the version of umbraco found                                                                                       |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[Umbraco]: https://umbraco.com/



================================================
FILE: website/docs/segments/cli/unity.mdx
================================================
---
id: unity
title: Unity
sidebar_label: Unity
---

## What

Display the currently active [Unity][unity] and C# versions.

The Unity version is displayed regardless of whether or not the corrsponding C# version can be found.
The C# version is determined by first checking a static table.
If the Unity version isn't found, a web request is made to [the Unity docs][unity-csharp-page] to
try extracting it from there. A web request only occurs the first time a given `major.minor`
Unity version is encountered. Subsequent invocations return the cached C# version.

C# version display is only supported from Unity 2017.1.

Unity 2017.1 - 2019.1 support two C# versions, depending on which scripting runtime is selected in Player Settings.
This segment always chooses the higher version.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "unity",
  "style": "powerline",
  "powerline_symbol": "\ue0b0",
  "foreground": "#111111",
  "background": "#ffffff",
  "properties": {
    "http_timeout": 2000
  }
}}/>

## Properties

| Name           | Type  | Default | Description                                    |
| -------------- | :---: | :-----: | ---------------------------------------------- |
| `http_timeout` | `int` | `2000`  | in milliseconds - the timeout for http request |

## Template ([info][templates])

:::note default template

```template
\ue721 {{ .UnityVersion }}{{ if .CSharpVersion }} {{ .CSharpVersion }}{{ end }}
```

:::

### Properties

| Name             | Type     | Description                              |
| ---------------- | -------- | ---------------------------------------- |
| `.UnityVersion`  | `string` | the Unity version                        |
| `.CSharpVersion` | `string` | the C# version                           |

[unity]: https://unity.com/
[templates]: /docs/configuration/templates
[unity-csharp-page]: https://docs.unity3d.com/Manual/CSharpCompiler.html



================================================
FILE: website/docs/segments/cli/xmake.mdx
================================================
---
id: xmake
title: XMake
sidebar_label: XMake
---

## What

Display the currently active [xmake] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "xmake",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#e0f2f1",
    background: "#22a079",
    template: " xmake v{{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |   Default   | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |   `false`   | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |   `true`    | fetch the xmake version                                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |    `24h`    | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |             | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |  `context`  | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |             | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `xmake.lua` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |             | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([into][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: configuration/templates.mdx
[xmake]: https://xmake.io/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cli/yarn.mdx
================================================
---
id: yarn
title: Yarn
sidebar_label: Yarn
---

## What

Display the currently active [yarn][yarn-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "yarn",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#FFFFFF",
    background: "#2E2A65",
    template: " \uDB80\uDD1B {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |          Default          | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |          `false`          | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |          `true`           | fetch the Yarn version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |           `24h`           | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |         `context`         | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `package.json, yarn.lock` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
\uDB80\uDD1B {{.Full}}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[yarn-docs]: https://yarnpkg.com
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cloud/aws.mdx
================================================
---
id: aws
title: AWS Context
sidebar_label: AWS
---

## What

Display the currently active AWS profile and region.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "aws",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#FFA400",
    template: " \uE7AD {{.Profile}}{{if .Region}}@{{.Region}}{{end}}",
  }}
/>

## Properties

| Name              | Type      | Default | Description                                  |
| ----------------- | :-------: | :-----: | -------------------------------------------- |
| `display_default` | `boolean` | `true`  | display the segment when default user or not |

## Template ([info][templates])

:::note default template

```template
{{ .Profile }}{{ if .Region }}@{{ .Region }}{{ end }}
```

:::

### Properties

| Name            | Type     | Description                                 |
| --------------- | -------- | ------------------------------------------- |
| `.Profile`      | `string` | the currently active profile                |
| `.Region`       | `string` | the currently active region                 |
| `.RegionAlias`  | `string` | short alias for the currently active region |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cloud/az.mdx
================================================
---
id: az
title: Azure Subscription
sidebar_label: Azure
---

## What

Display the currently active Azure subscription information.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "az",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#9ec3f0",
    template: " \uebd8 {{ .EnvironmentName }}",
    properties: {
      source: "pwsh",
    },
  }}
/>

## Properties

| Name     |   Type   |          Default           | Description                                                                                                                                                                                                                                                                                      |
| -------- | :------: | :------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `source` | `string` | <code>cli&#124;pwsh</code> | sources to get subscription information from. Can be any of the following values, joined by <code>&#124;</code> to loop multiple sources for context. <ul><li>`cli`: fetch the information from the CLI config</li><li>`pwsh`: fetch the information from the PowerShell Module config</li></ul> |

## Template ([info][templates])

:::note default template

```template
{{ .Name }}
```

:::

### Properties

| Name                 | Type      | Description                                                    |
| -------------------- | --------- | -------------------------------------------------------------- |
| `.EnvironmentName`   | `string`  | Azure environment name                                         |
| `.HomeTenantID`      | `string`  | home tenant id                                                 |
| `.ID`                | `string`  | subscription id                                                |
| `.IsDefault`         | `boolean` | is the default subscription or not                             |
| `.Name`              | `string`  | subscription name                                              |
| `.State`             | `string`  | subscription state                                             |
| `.TenantID`          | `string`  | tenant id                                                      |
| `.TenantDisplayName` | `string`  | tenant name                                                    |
| `.User.Name`         | `string`  | user name                                                      |
| `.User.Type`         | `string`  | user type                                                      |
| `.Origin`            | `string`  | where we received the information from, can be `CLI` or `PWSH` |

[templates]: /docs/configuration/templates
[az]: https://www.powershellgallery.com/packages/Az



================================================
FILE: website/docs/segments/cloud/azd.mdx
================================================
---
id: azd
title: Azure Developer CLI
sidebar_label: Azure Dev CLI
---

## What

Display the currently active environment in the Azure Developer CLI.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "azd",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#9ec3f0",
    template: " \uebd8 {{ .DefaultEnvironment }} ",
  }}
/>

## Template ([info][templates])

:::note default template

```template
 \uebd8 {{ .DefaultEnvironment }}
```

:::

### Properties

| Name                  | Type     | Description                          |
| --------------------- | -------- | ------------------------------------ |
| `.DefaultEnvironment` | `string` | Azure Developer CLI environment name |
| `.Version`            | `number` | Config version number                |

[templates]: /docs/configuration/templates
[azd]: https://aka.ms/azd



================================================
FILE: website/docs/segments/cloud/azfunc.mdx
================================================
---
id: azfunc
title: Azure Functions
sidebar_label: Azure Functions
---

## What

Display the currently active [Azure Functions CLI][az-func-core-tools] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "azfunc",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#FEAC19",
    template: " \uf0e7 {{ .Full }} ",
    properties: {
      fetch_version: true,
      display_mode: "files",
    },
  }}
/>

## Properties

| Name                   |    Type    |                     Default                     | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                     `false`                     | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                     `true`                      | fetch the Azure Functions CLI version                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |                      `24h`                      | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                 | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                    `context`                    | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                 | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `host.json, local.settings.json, function.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                 | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: configuration/templates.mdx
[az-func-core-tools]: https://github.com/Azure/azure-functions-core-tools
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cloud/cds.mdx
================================================
---
id: cds
title: CDS (SAP CAP)
sidebar_label: CDS
---

## What

Display the active [CDS CLI][sap-cap-cds] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    background: "#a7cae1",
    foreground: "#100e23",
    powerline_symbol: "\ue0b0",
    template: " \ue311 cds {{ .Full }} ",
    style: "powerline",
    type: "cds",
  }}
/>

## Properties

| Name                   |    Type    |                  Default                  | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                  `false`                  | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                  `true`                   | fetch the CDS version                                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |                   `24h`                   | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                   `""`                    | text to display when the cds command is missing                                                                                                                                                                                      |
| `display_mode`         |  `string`  |                 `context`                 | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `.cdsrc.json, .cdsrc-private.json, *.cds` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name             | Type     | Description                                        |
| ---------------- | -------- | -------------------------------------------------- |
| `.Full`          | `string` | the full version                                   |
| `.Major`         | `string` | major number                                       |
| `.Minor`         | `string` | minor number                                       |
| `.Patch`         | `string` | patch number                                       |
| `.Error`         | `string` | error encountered when fetching the version string |
| `.HasDependency` | `bool`   | a flag if `@sap/cds` was found in `package.json`   |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: configuration/templates.mdx
[sap-cap-cds]: https://cap.cloud.sap/docs/tools/#command-line-interface-cli
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cloud/cf.mdx
================================================
---
id: cf
title: Cloud Foundry
sidebar_label: Cloud Foundry
---

## What

Display the active [Cloud Foundry CLI][cloud-foundry] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    background: "#a7cae1",
    foreground: "#100e23",
    powerline_symbol: "\ue0b0",
    template: " \uf40a cf {{ .Full }} ",
    style: "powerline",
    type: "cf",
  }}
/>

## Properties

| Name                   |    Type    |         Default          | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |         `false`          | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |          `true`          | display the Cloud Foundry CLI version                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |          `24h`           | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                          | text to display when the java command is missing                                                                                                                                                                                     |
| `display_mode`         |  `string`  |        `context`         | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                          | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `manifest.yml, mta.yaml` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                          | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[cloud-foundry]: https://github.com/cloudfoundry/cli
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/cloud/cftarget.mdx
================================================
---
id: cftarget
title: Cloud Foundry Target
sidebar_label: Cloud Foundry Target
---

## What

Display the details of the logged [Cloud Foundry endpoint][cf-target] (`cf target` details).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    background: "#a7cae1",
    foreground: "#100e23",
    powerline_symbol: "\ue0b0",
    template: " \uf40a {{ .Org }}/{{ .Space }} ",
    style: "powerline",
    type: "cftarget",
  }}
/>

## Properties

| Name           |    Type    |      Default       | Description                                                                                                                                                                            |
| -------------- | :--------: | :----------------: | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `display_mode` |  `string`  |      `always`      | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when a `manifest.yml` file is present (or defined otherwise using `files`) </li></ul> |
| `files`        | `[]string` | `["manifest.yml"]` | on which files to display the segment on. Will look in parent folders as well                                                                                                          |

## Template ([info][templates])

:::note default template

```template
{{if .Org }}{{ .Org }}{{ end }}{{ if .Space }}/{{ .Space }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                |
| -------- | -------- | -------------------------- |
| `.Org`   | `string` | Cloud Foundry organization |
| `.Space` | `string` | Cloud Foundry space        |
| `.URL`   | `string` | Cloud Foundry API URL      |
| `.User`  | `string` | logged in user             |

[templates]: /docs/configuration/templates
[cf-target]: https://cli.cloudfoundry.org/en-US/v8/target.html



================================================
FILE: website/docs/segments/cloud/gcp.mdx
================================================
---
id: gcp
title: GCP Context
sidebar_label: GCP
---

## What

Display the currently active GCP project, region and account

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "gcp",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#47888d",
    template: " \uE7B2 {{.Project}} :: {{.Account}} ",
  }}
/>

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Project }}{{ end }}
```

:::

### Properties

| Name            | Type     | Description                                                              |
| --------------- | -------- | ------------------------------------------------------------------------ |
| `.Project`      | `string` | the currently active project                                             |
| `.Account`      | `string` | the currently active account                                             |
| `.Region`       | `string` | default region for the active context                                    |
| `.ActiveConfig` | `string` | the active configuration name                                            |
| `.Error`        | `string` | contains any error messages generated when trying to load the GCP config |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cloud/pulumi.mdx
================================================
---
id: pulumi
title: Pulumi
sidebar_label: Pulumi
---

## What

Display the currently active pulumi logged-in user, url and stack.

:::caution
This requires a pulumi binary in your PATH and will only show in directories that contain a `Pulumi.yaml` file.
:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "pulumi",
    style: "diamond",
    powerline_symbol: "\uE0CF",
    foreground: "#ffffff",
    background: "#662d91",
    template:
      "{{ .Stack }}{{if .User }} :: {{ .User }}@{{ end }}{{ if .URL }}{{ .URL }}{{ end }}",
  }}
/>

## Properties

| Name          | Type      | Default | Description                                                                        |
| ------------- | :-------: | :-----: | ---------------------------------------------------------------------------------- |
| `fetch_stack` | `boolean` | `false` | fetch the current stack name                                                       |
| `fetch_about` | `boolean` | `false` | fetch the URL and user for the current stask. Requires `fetch_stack` set to `true` |

## Template ([info][templates])

:::note default template

```template
{{ .Stack }}{{if .User }} :: {{ .User }}@{{ end }}{{ if .URL }}{{ .URL }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Stack` | `string` | the current stack name                             |
| `.User`  | `string` | is the current logged in user                      |
| `.Url`   | `string` | the URL of the state where pulumi stores resources |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/cloud/sitecore.mdx
================================================
---
id: sitecore
title: Sitecore
sidebar_label: Sitecore
---

import Config from "@site/src/components/Config.js";

## What

Display current [Sitecore] environment. Will not be active when sitecore.json and user.json don't exist.

## Sample Configuration

<Config
  data={{
    type: "sitecore",
    style: "plain",
    foreground: "#000000",
    background: "#FFFFFF",
    template:
      "Env: {{ .EndpointName }}{{ if .CmHost }} CM: {{ .CmHost }}{{ end }}",
  }}
/>

## Properties

| Name              |   Type    | Default | Description                                                                     |
| ----------------- | :-------: | :-----: | ------------------------------------------------------------------------------- |
| `display_default` | `boolean` | `true`  | display the segment or not when the Sitecore environment name matches `default` |

## Template ([info][templates])

:::note default template

```template
{{ .EndpointName }} {{ if .CmHost }}({{ .CmHost }}){{ end }}
```

:::

## Properties

| Name           | Type     | Description                              |
| -------------- | -------- | ---------------------------------------- |
| `EndpointName` | `string` | name of the current Sitecore environment |
| `CmHost`       | `string` | host of the current Sitecore environment |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[Sitecore]: https://www.sitecore.com/



================================================
FILE: website/docs/segments/health/nightscout.mdx
================================================
---
id: nightscout
title: Nightscout
sidebar_label: Nightscout
---

## What

[Nightscout][nightscout] (CGM in the Cloud) is an open source,
DIY project that allows real time access to a CGM data via an HTTP REST API. It
is used for secure remote viewing of blood sugar data from anywhere...including
Oh My Posh segments on the command line!

## Sample Configuration

This example is using mg/dl by default because the Nightscout API sends the sugar
glucose value (.Sgv) in mg/dl format. Below is also a template for displaying the
glucose value in mmol/L. When using different color ranges you should multiply your
high and low range glucose values by 18 and use these values in the templates.
You'll also want to think about your background and foreground colors. Don't use
white text on a yellow background, for example.

The `foreground_templates` example below could be set to just a single color,
if that color is visible against any of your backgrounds.

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "nightscout",
    style: "diamond",
    foreground: "#ffffff",
    background: "#ff0000",
    background_templates: [
      "{{ if gt .Sgv 150 }}#FFFF00{{ end }}",
      "{{ if lt .Sgv 60 }}#FF0000{{ end }}",
      "#00FF00",
    ],
    foreground_templates: [
      "{{ if gt .Sgv 150 }}#000000{{ end }}",
      "{{ if lt .Sgv 60 }}#000000{{ end }}",
      "#000000",
    ],
    leading_diamond: "\ue0b6",
    trailing_diamond: "\uE0B0",
    template: "\ue2a1 {{ .Sgv }}{{ .TrendIcon }}",
    properties: {
      url: "https://YOURNIGHTSCOUTAPP.herokuapp.com/api/v1/entries.json?count=1&token=APITOKENFROMYOURADMIN",
      http_timeout: 1500,
    },
  }}
/>

Or display in mmol/l (instead of the default mg/dl) with the following template:

<Config
  data={{
    template:
      "\ue2a1 {{ if eq (mod .Sgv 18) 0 }}{{divf .Sgv 18}}.0{{ else }} {{ round (divf .Sgv 18) 1 }}{{ end }}{{ .TrendIcon }}",
  }}
/>

## Properties

| Name           |        Type         | Default | Description                                                                                                                                                                  |
| -------------- | :-----------------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `url`          |      `string`       |         | Your Nightscout URL, including the full path to entries.json AND count=1 AND token. Example above. You'll know this works if you can curl it yourself and get a single value |
| `headers`      | `map[string]string` |         | A key, value map of Headers to send with the request                                                                                                                         |
| `http_timeout` |        `int`        |  `500`  | in milliseconds - how long do you want to wait before you want to see your prompt more than your sugar? I figure a half second is a good default                             |

:::info
You can change the icons for trend, put the trend elsewhere, add text, however you like!
Make sure your NerdFont has the glyph you want or [search for one][nf-search].

| Icon                | Description      |
| ------------------- | ---------------- |
| `DoubleUpIcon`      | defaults to `↑↑` |
| `SingleUpIcon`      | defaults to `↑`  |
| `FortyFiveUpIcon`   | defaults to `↗`  |
| `FlatIcon`          | defaults to `→`  |
| `FortyFiveDownIcon` | defaults to `↘`  |
| `SingleDownIcon`    | defaults to `↓`  |
| `DoubleDownIcon`    | defaults to `↓↓` |

:::

## Template ([info][templates])

:::note default template

```template
{{ .Sgv }}
```

:::

### Properties

| Name        | Type     | Description                                                                                                |
| ----------- | -------- | ---------------------------------------------------------------------------------------------------------- |
| .ID         | `string` | The internal ID of the object                                                                              |
| .Sgv        | `int`    | Your Serum Glucose Value (your sugar)                                                                      |
| .Date       | `int`    | The unix timestamp of the entry                                                                            |
| .DateString | `time`   | The timestamp of the entry                                                                                 |
| .Trend      | `int`    | The trend of the entry                                                                                     |
| .Device     | `string` | The device linked to the entry                                                                             |
| .Type       | `string` | The type of the entry                                                                                      |
| .UtcOffset  | `int`    | The UTC offset                                                                                             |
| .SysTime    | `time`   | The time on the system                                                                                     |
| .Mills      | `int`    | The amount of mills                                                                                        |
| .TrendIcon  | `string` | By default, this will be something like ↑↑ or ↘ etc but you can override them with any glpyh as seen above |

[templates]: /docs/configuration/templates
[nightscout]: http://www.nightscout.info/
[nf-search]: https://www.nerdfonts.com/cheat-sheet



================================================
FILE: website/docs/segments/health/strava.mdx
================================================
---
id: strava
title: Strava
sidebar_label: Strava
---

import StravaConnect from "/img/strava_connect.svg";

## What

[Strava][strava] is a popular activity tracker for bike, run or any other training.
To keep up with your training goals it is important to be reminded about it.
An Oh My Posh Strava segment shows your last activity,
and can also indicate by a color if it is time to get away from your computer and get active.

## Accessing your Strava data

To allow Oh My Posh access your Strava data you need to grant access to read your public activities.
This will give you an access and a refresh token. Paste the tokens into your Strava segment configuration.

Click the following link to connect with Strava:

<a href="https://www.strava.com/oauth/authorize?client_id=76033&response_type=code&redirect_uri=https://ohmyposh.dev/api/auth&approval_prompt=force&scope=read,activity:read&state=strava">
  <StravaConnect />
</a>

## Sample Configuration

This configuration sets the background green if you have an activity the last two days,
orange if you have one last 5 days, and red otherwise. The `foreground_templates` example below could be set to just a single color,
if that color is visible against any of your backgrounds.

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "strava",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#000000",
    background_templates: [
      "{{ if gt .Hours 100 }}#dc3545{{ end }}",
      "{{ if and (lt .Hours 100) (gt .Hours 50) }}#ffc107{{ end }}",
      "{{ if lt .Hours 50 }}#28a745{{ end }}",
    ],
    foreground_templates: [
      "{{ if gt .Hours 100 }}#FFFFFF{{ end }}",
      "{{ if and (lt .Hours 100) (gt .Hours 50) }}#343a40{{ end }}",
      "{{ if lt .Hours 50 }}#FFFFFF{{ end }}",
    ],
    template: " {{.Name}} {{.Ago}} {{.Icon}} ",
    properties: {
      access_token: "11111111111111111",
      refresh_token: "1111111111111111",
      http_timeout: 1500,
    },
  }}
/>

## Properties

| Name                    |   Type   | Default  | Description                                                                                                   |
| ----------------------- | :------: | :------: | ------------------------------------------------------------------------------------------------------------- |
| `access_token`          | `string` |          | token from Strava login, see login link in section above.                                                     |
| `refresh_token`         | `string` |          | token from Strava login, see login link in section above.                                                     |
| `expires_in`            |  `int`   |   `0`    | the default timeout of the token from the Strava login                                                        |
| `http_timeout`          |  `int`   |  `500`   | in milliseconds - how long do you want to wait before you want to see your prompt more than your strava data? |
| `ride_icon`             | `string` | `\uf206` |                                                                                                               |
| `run_icon`              | `string` | `\ue213` |                                                                                                               |
| `skiing_icon`           | `string` | `\ue213` |                                                                                                               |
| `workout_icon`          | `string` | `\ue213` |                                                                                                               |
| `unknown_activity_icon` | `string` | `\ue213` |                                                                                                               |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Ago }}{{ end }}
```

:::

### Properties

The properties below are available for use in your template

| Name                    | Type      | Description                         |
| ----------------------- | --------- | ----------------------------------- |
| `.ID`                   | `time`    | The id of the entry                 |
| `.DateString`           | `time`    | The timestamp of the entry          |
| `.Type`                 | `string`  | Activity types as used in strava    |
| `.UtcOffset`            | `int`     | The UTC offset                      |
| `.Hours`                | `int`     | Number of hours since last activity |
| `.Name`                 | `string`  | The name of the activity            |
| `.Duration`             | `float64` | Total duration in seconds           |
| `.Distance`             | `float64` | Total distance in meters            |
| `.DeviceWatts`          | `bool`    | Device has watts                    |
| `.AverageWatts`         | `float64` | Average watts                       |
| `.WeightedAverageWatts` | `float64` | Weighted average watts              |
| `.AverageHeartRate`     | `float64` | Average heart rate                  |
| `.MaxHeartRate`         | `float64` | Max heart rate                      |
| `.KudosCount`           | `int`     | Kudos count                         |
| `.Icon`                 | `string`  | Activity based icon                 |

Now, go out and have a fun ride or run!

[templates]: /docs/configuration/templates
[strava]: http://www.strava.com/
[strava-connect]: https://www.strava.com/oauth/authorize?client_id=76033&response_type=code&redirect_uri=https://ohmyposh.dev/api/auth&approval_prompt=force&scope=read,activity:read



================================================
FILE: website/docs/segments/health/withings.mdx
================================================
---
id: withings
title: Withings
sidebar_label: Withings
---

import WithingsConnect from "/img/withings.svg";

## What

The [Withings][withings] health ecosystem of connected devices & apps is designed to improve daily wellbeing
and long-term health.

## Accessing your Withings data

To allow Oh My Posh access your Withings data you need to grant access to read your public activities.
This will give you an access and a refresh token. Paste the tokens into your Withings segment configuration.

Click the following link to connect with Withings:

<div className="withings">
  <a href="https://account.withings.com/oauth2_user/authorize2?client_id=93675962e88ddfe53f83c0c900558f72174e0ac70ccfb57e48053530c7e6e494&response_type=code&redirect_uri=https://ohmyposh.dev/api/auth&scope=user.activity,user.metrics&state=withings">
    <WithingsConnect className="withings" />
  </a>
</div>

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "withings",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#000000",
    template: "{{ if gt .Weight 0.0 }} {{ round .Weight 2 }}kg {{ end }}",
    properties: {
      access_token: "11111111111111111",
      refresh_token: "1111111111111111",
      http_timeout: 1500,
    },
  }}
/>

## Properties

| Name            |   Type   | Default | Description                                                                                   |
| --------------- | :------: | :-----: | --------------------------------------------------------------------------------------------- |
| `access_token`  | `string` |         | token from Withings login, see login link in section above.                                   |
| `refresh_token` | `string` |         | token from Withings login, see login link in section above.                                   |
| `expires_in`    |  `int`   |   `0`   | the default timeout of the token from the Withings login                                      |
| `http_timeout`  |  `int`   |  `500`  | how long do you want to wait before you want to see your prompt more than your Withings data? |

## Template ([info][templates])

:::note default template

```template
{{ if gt .Weight 0.0 }} {{ round .Weight 2 }}kg {{ end }}
```

:::

### Properties

The properties below are available for use in your template

| Name          | Type     | Description                         |
| ------------- | -------- | ----------------------------------- |
| `.Weight`     | `float`  | your last measured weight           |
| `.SleepHours` | `string` | your last measured sleep SleepHours |
| `.Steps`      | `int`    | your last measured steps            |

Now, go out and be active!

[templates]: /docs/configuration/templates
[withings]: https://www.withings.com/



================================================
FILE: website/docs/segments/languages/crystal.mdx
================================================
---
id: crystal
title: Crystal
sidebar_label: Crystal
---

## What

Display the currently active [crystal] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "crystal",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#4063D8",
    template: " \uE370 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |      Default      | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |      `false`      | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |      `true`       | fetch the crystal version                                                                                                                                                                                                            |
| `cache_duration`       |  `string`  |      `none`       | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                   | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |     `context`     | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.cr, shard.yml` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                   | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[crystal]: https://crystal-lang.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/dart.mdx
================================================
---
id: dart
title: Dart
sidebar_label: Dart
---

## What

Display the currently active dart version. Supports [fvm].

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "dart",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#06A4CE",
    template: " \uE798 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                      Default                      | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                      `false`                      | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                      `true`                       | fetch the dart version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |                       `none`                       | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                   | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                     `context`                     | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.dart, pubspec.yaml, pubspec.yml, pubspec.lock` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                   `.dart_tool`                    | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[fvm]: https://fvm.app/
[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/dotnet.mdx
================================================
---
id: dotnet
title: Dotnet
sidebar_label: Dotnet
---

## What

Display the currently active [.NET SDK][net-sdk-docs] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "dotnet",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#00ffff",
    template: " \uE77F {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                                          Default                                           | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                                          `false`                                           | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                                           `true`                                           | fetch the active version or not; useful if all you need is an icon indicating `dotnet`                                                                                                                                               |
| `cache_duration`       |  `string`  |                                           `none`                                           | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                                                            | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                                         `context`                                          | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                                                            | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.cs, *.csx, *.vb, *.fs, *.fsx, *.sln, *.slnf, *.csproj, *.fsproj, *.vbproj, global.json` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                                                            | allows to override the list of folder names to validate                                                                                                                                                                              |
| `fetch_sdk_version`    | `boolean`  |                                          `false`                                           | fetch the SDK version in `global.json` when present                                                                                                                                                                                  |

## Template ([info][templates])

:::note default template

```template
{{ if .Unsupported }}\uf071{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name             | Type     | Description                                                         |
| ---------------- | -------- | ------------------------------------------------------------------- |
| `.Full`          | `string` | the full version                                                    |
| `.Major`         | `string` | major number                                                        |
| `.Minor`         | `string` | minor number                                                        |
| `.Patch`         | `string` | patch number                                                        |
| `.Prerelease`    | `string` | prerelease info text                                                |
| `.BuildMetadata` | `string` | build metadata                                                      |
| `.URL`           | `string` | URL of the version info / release notes                             |
| `.SDKVersion`    | `string` | the SDK version in `global.json` when `fetch_sdk_version` is `true` |
| `.Error`         | `string` | error encountered when fetching the version string                  |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[net-sdk-docs]: https://docs.microsoft.com/en-us/dotnet/core/tools
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/elixir.mdx
================================================
---
id: elixir
title: Elixir
sidebar_label: Elixir
---

## What

Display the currently active [elixir] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "elixir",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#422251",
    template: " \ue62d {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |    Default    | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |    `false`    | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |    `true`     | fetch the elixir version                                                                                                                                                                                                             |
| `cache_duration`       |  `string`  |    `none`     | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |               | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |   `context`   | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |               | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.ex, *.exs` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |               | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[elixir]: https://elixir-lang.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/fortran.mdx
================================================
---
id: fortran
title: Fortran
sidebar_label: Fortran
---

## What

Display the currently active [fortran] compiler version.

:::warning Compiler support

This only works with the [gfortran] compiler.

:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "fortran",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#422251",
    template: " \udb84\ude1a {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                                                 Default                                                 | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------------------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                                                 `false`                                                 | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                                                 `true`                                                  | fetch the gfortran version                                                                                                                                                                                                           |
| `cache_duration`       |  `string`  |                                                 `none`                                                  | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                                                                         | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                                                `context`                                                | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                                                                         | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `fpm.toml, *.f, *.for, *.fpp, *.f77, *.f90, *.f95, *.f03, *.f08` + uppercase equivalents (`*.F` etc...) | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                                                                         | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[fortran]: https://fortran-lang.org/
[gfortran]: https://fortranwiki.org/fortran/show/GFortran
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/golang.mdx
================================================
---
id: golang
title: Golang
sidebar_label: Golang
---

## What

Display the currently active golang version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "go",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#7FD5EA",
    template: " \ue627 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                   Default                    | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                   `false`                    | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                    `true`                    | fetch the golang version                                                                                                                                                                                                             |
| `cache_duration`       |  `string`  |                    `none`                    | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                              | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                  `context`                   | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                              | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `parse_mod_file`       | `boolean`  |                   `false`                    | parse the go.mod file instead of calling `go version`                                                                                                                                                                                |
| `parse_go_work_file`   | `boolean`  |                   `false`                    | parse the go.work file instead of calling `go version`                                                                                                                                                                               |
| `extensions`           | `[]string` | `*.go, go.mod, go.work, go.sum, go.work.sum` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                              | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/haskell.mdx
================================================
---
id: haskell
title: Haskell
sidebar_label: Haskell
---

## What

Display the currently active Glasgow Haskell Compiler (GHC) version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "haskell",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#906cff",
    background: "#100e23",
    template: " \ue61f {{ .Full }}",
  }}
/>

## Properties

| Name                   |    Type    |                             Default                             | Description                                                                                                                                                                                                                                                                                    |
| ---------------------- | :--------: | :-------------------------------------------------------------: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `home_enabled`         | `boolean`  |                             `false`                             | display the segment in the HOME folder or not                                                                                                                                                                                                                                                  |
| `fetch_version`        | `boolean`  |                             `true`                              | fetch the GHC version                                                                                                                                                                                                                                                                          |
| `cache_duration`       |  `string`  |                             `none`                              | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`                                                                        |
| `missing_command_text` |  `string`  |                                                                 | text to display when the command is missing                                                                                                                                                                                                                                                    |
| `display_mode`         |  `string`  |                            `context`                            | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul>                                                           |
| `version_url_template` |  `string`  |                                                                 | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                                                                          |
| `stack_ghc_mode`       |  `string`  |                             `never`                             | determines when to use `stack ghc` to retrieve the version information. Using `stack ghc` will decrease performance.<ul><li>`never`: never use `stack ghc`</li><li>`package`: only use `stack ghc` when `stack.yaml` is in the root of the </li><li>`always`: always use `stack ghc`</li></ul> |
| `extensions`           | `[]string` | `*.hs, *.lhs, stack.yaml, package.yaml, *.cabal, cabal.project` | allows to override the default list of file extensions to validate                                                                                                                                                                                                                             |
| `folders`              | `[]string` |                                                                 | allows to override the list of folder names to validate                                                                                                                                                                                                                                        |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name        | Type      | Description                                        |
| ----------- | --------- | -------------------------------------------------- |
| `.Full`     | `string`  | the full version                                   |
| `.Major`    | `string`  | major number                                       |
| `.Minor`    | `string`  | minor number                                       |
| `.Patch`    | `string`  | patch number                                       |
| `.URL`      | `string`  | URL of the version info / release notes            |
| `.Error`    | `string`  | error encountered when fetching the version string |
| `.StackGhc` | `boolean` | `true` if `stack ghc` was used, otherwise `false`  |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/java.mdx
================================================
---
id: java
title: Java
sidebar_label: Java
---

## What

Display the currently active java version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "java",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#4063D8",
    template: " \uE738 {{ .Full }}",
  }}
/>

## Properties

| Name                   |    Type    |                                                                  Default                                                                   | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------------------------------------------------------------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                                                                  `false`                                                                   | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                                                                   `true`                                                                   | fetch the java version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |                                                                   `none`                                                                   | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                                                                                                            | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                                                                 `context`                                                                  | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                                                                                                            | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.java, *.class, *.gradle, *.jar, *.clj, *.cljr, pom.xml, build.gradle.kts, build.sbt, .java-version, .deps.edn, project.clj, build.boot` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                                                                                                            | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: configuration/templates.mdx
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/julia.mdx
================================================
---
id: julia
title: Julia
sidebar_label: Julia
---

## What

Display the currently active julia version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "julia",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#4063D8",
    template: " \uE624 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |  Default  | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |  `false`  | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |  `true`   | fetch the julia version                                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |  `none`   | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  | `context` | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` |  `*.jl`   | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/kotlin.mdx
================================================
---
id: kotlin
title: Kotlin
sidebar_label: Kotlin
---

## What

Display the currently active [Kotlin][kotlin] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "kotlin",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#906cff",
    template: " <b>K</b> {{ .Full }} ",
  }}
/>

## Properties

## Properties

| Name                   |    Type    |       Default        | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |       `false`        | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |        `true`        | fetch the kotlin version                                                                                                                                                                                                             |
| `cache_duration`       |  `string`  |        `none`        | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                      | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |      `context`       | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                      | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.kt, *.kts, *.ktm` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                      | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[kotlin]: https://kotlinlang.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/lua.mdx
================================================
---
id: lua
title: Lua
sidebar_label: Lua
---

## What

Display the currently active [Lua][lua] or [LuaJIT][luajit] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "lua",
    style: "powerline",
    powerline_symbol: "\ue0b0",
    foreground: "white",
    background: "blue",
    template: " \ue620 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |       Default       | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |       `false`       | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |       `true`        | fetch the lua version                                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |       `none`        | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                     | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |      `context`      | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                     | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `preferred_executable` |  `string`  |        `lua`        | the preferred executable to use when fetching the version<ul><li>`lua`: the Lua executable (**default**)</li><li>`luajit`: the LuaJIT executable</li></ul>                                                                           |
| `extensions`           | `[]string` | `*.lua, *.rockspec` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                     | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name          | Type     | Description                                        |
| ------------- | -------- | -------------------------------------------------- |
| `.Full`       | `string` | the full version                                   |
| `.Major`      | `string` | major number                                       |
| `.Minor`      | `string` | minor number                                       |
| `.Patch`      | `string` | patch number                                       |
| `.URL`        | `string` | URL of the version info / release notes            |
| `.Error`      | `string` | error encountered when fetching the version string |
| `.Executable` | `string` | the executable used to fetch the version           |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[lua]: https://www.lua.org/
[luajit]: https://luajit.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/mojo.mdx
================================================
---
id: mojo
title: Mojo
sidebar_label: Mojo
---

## What

Display the currently active version of [Mojo][mojo] and the name of the [Magic][magic] virtual environment.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "mojo",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#100e23",
    background: "#906cff",
    template: " 🔥 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |             Default             | Description                                                                                                                                                                                                                                                                                                             |
| ---------------------- | :--------: | :-----------------------------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `home_enabled`         | `boolean`  |             `false`             | display the segment in the HOME folder or not                                                                                                                                                                                                                                                                           |
| `fetch_virtual_env`    | `boolean`  |             `true`              | fetch the name of the virtualenv or not                                                                                                                                                                                                                                                                                 |
| `display_default`      | `boolean`  |             `true`              | show the name of the virtualenv when it's equal to `default` or not                                                                                                                                                                                                                                                     |
| `fetch_version`        | `boolean`  |             `true`              | fetch the Mojo version or not                                                                                                                                                                                                                                                                                           |
| `cache_duration`       |  `string`  |             `none`              | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`                                                                                                 |
| `missing_command_text` |  `string`  |                                 | text to display when the command is missing                                                                                                                                                                                                                                                                             |
| `display_mode`         |  `string`  |          `environment`          | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`environment`: the segment is only displayed when in a virtual environment</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                 | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                                                                                                   |
| `extensions`           | `[]string` | `*.🔥, *.mojo, mojoproject.toml` | allows to override the default list of file extensions to validate                                                                                                                                                                                                                                                      |
| `folders`              | `[]string` |                                 | allows to override the list of folder names to validate                                                                                                                                                                                                                                                                 |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Venv`  | `string` | the virtual environment name (if present)          |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[mojo]: https://docs.modular.com/mojo
[magic]: https://docs.modular.com/magic
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/nim.mdx
================================================
---
id: nim
title: Nim 
sidebar_label: Nim
---

## What

Display the currently active Nim version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "nim",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#f3d400",
    template: " \ue841 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |               Default               | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |               `false`               | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |               `true`                | fetch the Nim version (`nim --version`)                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |               `none`                | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                     | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |              `context`              | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                     | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.nim, *.nims`                     | allows to override the default list of file extensions to validate                                                                                                                                                                  |
| `folders`              | `[]string` |                                     | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name          | Type     | Description                                        |
| ------------- | -------- | -------------------------------------------------- |
| `.Full`       | `string` | the full version                                   |
| `.Major`      | `string` | major number                                       |
| `.Minor`      | `string` | minor number                                       |
| `.Patch`      | `string` | patch number                                       |
| `.Error`      | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration


================================================
FILE: website/docs/segments/languages/node.mdx
================================================
---
id: node
title: Node
sidebar_label: Node
---

## What

Display the currently active [Node.js][node-js] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "node",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#6CA35E",
    template: " \uE718 {{ .Full }} ",
  }}
/>

## Properties

| Name                    |    Type    |                                   Default                                    | Description                                                                                                                                                                                                                          |
| ----------------------- | :--------: | :--------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`          | `boolean`  |                                   `false`                                    | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`         | `boolean`  |                                    `true`                                    | fetch the Node.js version                                                                                                                                                                                                            |
| `cache_duration`        |  `string`  |                                    `none`                                    | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text`  |  `string`  |                                                                              | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`          |  `string`  |                                  `context`                                   | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template`  |  `string`  |                                                                              | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `fetch_package_manager` | `boolean`  |                                   `false`                                    | define if the current project uses PNPM, Yarn, or NPM                                                                                                                                                                                |
| `pnpm_icon`             |  `string`  |                                  `\uF02C1`                                   | the icon/text to display when using PNPM                                                                                                                                                                                             |
| `yarn_icon`             |  `string`  |                                  `\uF011B`                                   | the icon/text to display when using Yarn                                                                                                                                                                                             |
| `npm_icon`              |  `string`  |                                   `\uE71E`                                   | the icon/text to display when using NPM                                                                                                                                                                                              |
| `bun_icon`              |  `string`  |                                   `\ue76f`                                   | the icon/text to display when using Bun                                                                                                                                                                                              |
| `extensions`            | `[]string` | `*.js, *.ts, package.json, .nvmrc, pnpm-workspace.yaml, .pnpmfile.cjs, .vue` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`               | `[]string` |                                                                              | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .PackageManagerIcon }}{{ .PackageManagerIcon }} {{ end }}{{ .Full }}
```

:::

### Properties

| Name                  | Type      | Description                                                                                              |
| --------------------- | --------- | -------------------------------------------------------------------------------------------------------- |
| `.Full`               | `string`  | the full version                                                                                         |
| `.Major`              | `string`  | major number                                                                                             |
| `.Minor`              | `string`  | minor number                                                                                             |
| `.Patch`              | `string`  | patch number                                                                                             |
| `.URL`                | `string`  | URL of the version info / release notes                                                                  |
| `.Error`              | `string`  | error encountered when fetching the version string                                                       |
| `.PackageManagerName` | `string`  | the package manager name (`bun`, `npm`, `yarn` or `pnpm`) when setting `fetch_package_manager` to `true` |
| `.PackageManagerIcon` | `string`  | the PNPM, Yarn, Bun, or NPM icon when setting `fetch_package_manager` to `true`                          |
| `.Mismatch`           | `boolean` | true if the version in `.nvmrc` is not equal to `.Full`                                                  |
| `.Expected`           | `string`  | the expected version set in `.nvmrc`                                                                     |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[node-js]: https://nodejs.org
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/ocaml.mdx
================================================
---
id: ocaml
title: Ocaml
sidebar_label: Ocaml
---

## What

Display the currently active [OCaml] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "ocaml",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#d08770",
    template: " \ue67a {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                      Default                      | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                      `false`                      | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                      `true`                       | display the ocaml version (`ocaml -version`)                                                                                                                                                                                         |
| `cache_duration`       |  `string`  |                      `none`                       | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                   | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                     `context`                     | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                   | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.ml, *.mli, dune, dune-project, dune-workspace` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                   | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name          | Type     | Description                                        |
| ------------- | -------- | -------------------------------------------------- |
| `.Full`       | `string` | the full version                                   |
| `.Major`      | `string` | major number                                       |
| `.Minor`      | `string` | minor number                                       |
| `.Patch`      | `string` | patch number                                       |
| `.Prerelease` | `string` | channel name                                       |
| `.Error`      | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[OCaml]: https://ocaml.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/perl.mdx
================================================
---
id: perl
title: Perl
sidebar_label: Perl
---

## What

Display the currently active perl version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "perl",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#4063D8",
    template: " \ue769 {{ .Full }}",
  }}
/>

## Properties

| Name                   |    Type    |             Default              | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |             `false`              | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |              `true`              | fetch the perl version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |              `none`              | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                  | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |            `context`             | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                  | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.pl, *.pm, *.t, .perl-version` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                  | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.Error` | `string` | error encountered when fetching the version string |

[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/php.mdx
================================================
---
id: php
title: PHP
sidebar_label: PHP
---

## What

Display the currently active php version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "php",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#4063D8",
    template: " \ue73d {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                       Default                       | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                       `false`                       | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                       `true`                        | fetch the php version                                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |                       `none`                        | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                     | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                      `context`                      | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                     | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.php, .php-version, composer.json, composer.lock` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                     | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/python.mdx
================================================
---
id: python
title: Python
sidebar_label: Python
---

## What

Display the currently active python version and virtualenv.
Supports conda, virtualenv and pyenv (if python points to pyenv shim).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "python",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#100e23",
    background: "#906cff",
    template: " \uE235 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                  Default                  | Description                                                                                                                                                                                                                                                                                                             |
| ---------------------- | :--------: | :---------------------------------------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `home_enabled`         | `boolean`  |                  `false`                  | display the segment in the HOME folder or not                                                                                                                                                                                                                                                                           |
| `fetch_virtual_env`    | `boolean`  |                  `true`                   | fetch the name of the virtualenv or not                                                                                                                                                                                                                                                                                 |
| `display_default`      | `boolean`  |                  `true`                   | show the name of the virtualenv when it's default (`system`, `base`) or not                                                                                                                                                                                                                                             |
| `fetch_version`        | `boolean`  |                  `true`                   | fetch the python version                                                                                                                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |                  `none`                   | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`                                                                                                 |
| `missing_command_text` |  `string`  |                                           | text to display when the command is missing                                                                                                                                                                                                                                                                             |
| `display_mode`         |  `string`  |               `environment`               | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`environment`: the segment is only displayed when in a virtual environment</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                                                                                                   |
| `extensions`           | `[]string` | `*.py, *.ipynb, pyproject.toml, venv.bak` | allows to override the default list of file extensions to validate                                                                                                                                                                                                                                                      |
| `folders`              | `[]string` |                                           | allows to override the list of folder names to validate                                                                                                                                                                                                                                                                 |
| `folder_name_fallback` | `boolean`  |                  `true`                   | instead of `default_venv_names` (case sensitive), use the parent folder name as the virtual environment's name or not                                                                                                                                                                                                   |
| `default_venv_names`   | `[]string` |               `.venv, venv`               | allows to override the list of environment's name replaced when `folder_name_fallback` is `true`                                                                                                                                                                                                                        |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ if .Venv }}{{ .Venv }} {{ end }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Venv`  | `string` | the virtual environment name (if present)          |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/r.mdx
================================================
---
id: r
title: R
sidebar_label: R
---

## What

Display the currently active [R][r-homepage] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "r",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "blue",
    background: "lightWhite",
    template: " R {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |                        Default                         | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |                        `false`                         | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |                         `true`                         | fetch the R version or not                                                                                                                                                                                                           |
| `cache_duration`       |  `string`  |                         `none`                         | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                                        | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |                       `context`                        | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                                        | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.R, *.Rmd, *.Rsx, *.Rda, *.Rd, *.Rproj, .Rproj.user` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                                        | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[r-homepage]: https://www.r-project.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/ruby.mdx
================================================
---
id: ruby
title: Ruby
sidebar_label: Ruby
---

## What

Display the currently active ruby version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "ruby",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#4063D8",
    template: " \uE791 {{ .Full }}",
  }}
/>

## Properties

| Name                   |    Type    |          Default          | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-----------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |          `false`          | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |          `true`           | fetch the ruby version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |          `none`           | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |         `context`         | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.rb, Rakefile, Gemfile` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/rust.mdx
================================================
---
id: rust
title: Rust
sidebar_label: Rust
---

## What

Display the currently active rust version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "rust",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#99908a",
    template: " \uE7a8 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |            Default             | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :----------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |            `false`             | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |             `true`             | fetch the rust version (`rustc --version`)                                                                                                                                                                                           |
| `cache_duration`       |  `string`  |             `none`             | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |           `context`            | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.rs, Cargo.toml, Cargo.lock` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                                | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name          | Type     | Description                                        |
| ------------- | -------- | -------------------------------------------------- |
| `.Full`       | `string` | the full version                                   |
| `.Major`      | `string` | major number                                       |
| `.Minor`      | `string` | minor number                                       |
| `.Patch`      | `string` | patch number                                       |
| `.Prerelease` | `string` | channel name                                       |
| `.Error`      | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/swift.mdx
================================================
---
id: swift
title: Swift
sidebar_label: Swift
---

## What

Display the currently active [Swift][swift] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "swift",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#f6553c",
    template: " \ue755 {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |           Default           | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |           `false`           | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |           `true`            | fetch the swift version                                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |           `none`            | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                             | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |          `context`          | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                             | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.swift, *.SWIFT, Podfile` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                             | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.Patch` | `string` | patch number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[swift]: https://www.swift.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/v.mdx
================================================
---
id: v
title: V
sidebar_label: V
---

## What

Display the currently active V version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "vlang",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#4F87FF",
    template: " \ue6ac {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |               Default               | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :---------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |               `false`               | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |               `true`                | fetch the V version (`v --version`)                                                                                                                                                                                              |
| `cache_duration`       |  `string`  |               `none`                | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                                     | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |              `context`              | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                                     | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.v`                               | allows to override the default list of file extensions to validate                                                                                                                                                                  |
| `folders`              | `[]string` |                                     | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name          | Type     | Description                                        |
| ------------- | -------- | -------------------------------------------------- |
| `.Full`       | `string` | the full version (e.g., "0.4.9")                  |
| `.Major`      | `string` | major number (e.g., "0")                          |
| `.Minor`      | `string` | minor number (e.g., "4")                          |
| `.Patch`      | `string` | patch number (e.g., "9")                          |
| `.Commit`     | `string` | commit hash (e.g., "b487986")                     |
| `.Error`      | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration


================================================
FILE: website/docs/segments/languages/vala.mdx
================================================
---
id: vala
title: Vala
sidebar_label: Vala
---

## What

Display the currently active [vala] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "vala",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#5E20A4",
    template: " \ue69e {{ .Full }} ",
  }}
/>

## Properties

| Name                   |    Type    |  Default  | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :-------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |  `false`  | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |  `true`   | fetch the vala version                                                                                                                                                                                                               |
| `cache_duration`       |  `string`  |  `none`   | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |           | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  | `context` | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |           | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.vala`  | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |           | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name     | Type     | Description                                        |
| -------- | -------- | -------------------------------------------------- |
| `.Full`  | `string` | the full version                                   |
| `.Major` | `string` | major number                                       |
| `.Minor` | `string` | minor number                                       |
| `.URL`   | `string` | URL of the version info / release notes            |
| `.Error` | `string` | error encountered when fetching the version string |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[vala]: https://vala.dev/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/languages/zig.mdx
================================================
---
id: zig
title: Zig
sidebar_label: Zig
---

## What

Display the currently active [zig][zig] version.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "zig",
    style: "powerline",
    powerline_symbol: "\ue0b0",
    foreground: "#342311",
    background: "#ffad55",
    template:
      " \ue6a9 {{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }} ",
  }}
/>

## Properties

| Name                   |    Type    |    Default     | Description                                                                                                                                                                                                                          |
| ---------------------- | :--------: | :------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `home_enabled`         | `boolean`  |    `false`     | display the segment in the HOME folder or not                                                                                                                                                                                        |
| `fetch_version`        | `boolean`  |     `true`     | fetch the zig version (`zig version`)                                                                                                                                                                                                |
| `cache_duration`       |  `string`  |     `none`     | the duration for which the version will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none`              |
| `missing_command_text` |  `string`  |                | text to display when the command is missing                                                                                                                                                                                          |
| `display_mode`         |  `string`  |   `context`    | <ul><li>`always`: the segment is always displayed</li><li>`files`: the segment is only displayed when file `extensions` listed are present</li><li>`context`: displays the segment when the environment or files is active</li></ul> |
| `version_url_template` |  `string`  |                | a go [text/template][go-text-template] [template][templates] that creates the URL of the version info / release notes                                                                                                                |
| `extensions`           | `[]string` | `*.zig, *.zon` | allows to override the default list of file extensions to validate                                                                                                                                                                   |
| `folders`              | `[]string` |                | allows to override the list of folder names to validate                                                                                                                                                                              |

## Template ([info][templates])

:::note default template

```template
{{ if .Error }}{{ .Error }}{{ else }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name             | Type     | Description                                           |
| ---------------- | -------- | ----------------------------------------------------- |
| `.Full`          | `string` | the full version                                      |
| `.Major`         | `string` | major number                                          |
| `.Minor`         | `string` | minor number                                          |
| `.Patch`         | `string` | patch number                                          |
| `.Prerelease`    | `string` | prerelease identifier                                 |
| `.BuildMetadata` | `string` | build identifier                                      |
| `.URL`           | `string` | URL of the version info / release notes               |
| `.InProjectDir`  | `bool`   | whether the working directory is within a Zig project |
| `.Error`         | `string` | error encountered when fetching the version string    |

[go-text-template]: https://golang.org/pkg/text/template/
[templates]: /docs/configuration/templates
[zig]: https://ziglang.org/
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/music/lastfm.mdx
================================================
---
id: lastfm
title: LastFM
sidebar_label: LastFM
---

## What

Show the currently playing song from a [LastFM][lastfm] user.

:::caution
Be aware that LastFM updates may be severely delayed when paused and songs may linger in the "now playing" state for a prolonged time.

Additionally, we are using HTTP requests to get the data,
so you may need to adjust the `http_timeout` to your liking to get better results.

You **must** request an [API key][api-key] at the LastFM website.
:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    background: "p:sky",
    foreground: "p:white",
    powerline_symbol: "\ue0b0",
    properties: {
      api_key: "<YOUR_API_KEY>",
      username: "<LASTFM_USERNAME>",
      http_timeout: 20000,
    },
    style: "powerline",
    template: ' {{ .Icon }}{{ if ne .Status "stopped" }}{{ .Full }}{{ end }} ',
    type: "lastfm",
  }}
/>

## Properties

| Name           |   Type   |  Default  | Description                    |
| -------------- | :------: | :-------: | ------------------------------ |
| `playing_icon` | `string` | `\uE602 ` | text/icon to show when playing |
| `stopped_icon` | `string` | `\uF04D ` | text/icon to show when stopped |
| `api_key`      | `string` |           | your LastFM [API key][api-key] |
| `username`     | `string` |           | your LastFM username           |

## Template ([info][templates])

:::note default template

```template
{{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Full }}{{ end }}
```

:::

### Properties

| Name      | Type     | Description                                    |
| --------- | -------- | ---------------------------------------------- |
| `.Status` | `string` | player status (`playing`, `paused`, `stopped`) |
| `.Artist` | `string` | current artist                                 |
| `.Track`  | `string` | current track                                  |
| `.Full`   | `string` | will output `Artist - Track`                   |
| `.Icon`   | `string` | icon (based on `.Status`)                      |

[templates]: configuration/templates.mdx
[lastfm]: https://www.last.fm
[api-key]: https://www.last.fm/api/account/create



================================================
FILE: website/docs/segments/music/spotify.mdx
================================================
---
id: spotify
title: Spotify
sidebar_label: Spotify
---

## What

Show the currently playing song in the [Spotify][spotify] client.

:::caution
Be aware this can make the prompt a tad bit slower as it needs to get a response from the Spotify player.

On _macOS & Linux_, all states are supported (playing/paused/stopped).

On _Windows/WSL_, **only the playing state is supported** (no information when paused/stopped). It supports
fetching information from the native Spotify application and Edge PWA.
:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "spotify",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#1BD760",
    properties: {
      playing_icon: "\uE602 ",
      paused_icon: "\uF8E3 ",
      stopped_icon: "\uF04D ",
    },
  }}
/>

## Properties

| Name           |   Type   |  Default  | Description                    |
| -------------- | :------: | :-------: | ------------------------------ |
| `playing_icon` | `string` | `\uE602 ` | text/icon to show when playing |
| `paused_icon`  | `string` | `\uF8E3 ` | text/icon to show when paused  |
| `stopped_icon` | `string` | `\uF04D`  | text/icon to show when stopped |

## Template ([info][templates])

:::note default template

```template
{{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }}
```

:::

### Properties

| Name      | Type     | Description                                    |
| --------- | -------- | ---------------------------------------------- |
| `.Status` | `string` | player status (`playing`, `paused`, `stopped`) |
| `.Artist` | `string` | current artist                                 |
| `.Track`  | `string` | current track                                  |
| `.Icon`   | `string` | icon (based on `.Status`)                      |

[templates]: /docs/configuration/templates
[spotify]: https://www.spotify.com



================================================
FILE: website/docs/segments/music/ytm.mdx
================================================
---
id: ytm
title: YouTube Music
sidebar_label: YouTube Music
---

## What

Shows the currently playing song in the [YouTube Music Desktop App](https://github.com/ytmdesktop/ytmdesktop).

## Setup

You need to enable the Companion API in the YouTube Music Desktop App settings.
To do this, open the app, go to `Settings > Integration` and enable the following:

- Companion server
- Enable companion authentication

From the CLI, run the following command to set the authentication token:

```bash
oh-my-posh auth ytmda
```

If done correctly, you should now be able to add the `ytm` segment to your prompt.

:::warning rate limiting
The YouTube Music Desktop App has a pretty strict rate limit. Therefore it is recommended
to set the `cache` property in your configuration. If you don't, the segment will not be able
to display correctly.
:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "ytm",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#FF0000",
    properties: {
      playing_icon: "\uf04b ",
      paused_icon: "\uf04c ",
      stopped_icon: "\uf04d ",
    },
    cache: {
      duration: "5s",
      strategy: "session",
    },
  }}
/>

## Properties

| Name           |   Type   |  Default  | Description                                    |
| -------------- | :------: | :-------: | ---------------------------------------------- |
| `playing_icon` | `string` | `\uE602 ` | text/icon to show when playing                 |
| `paused_icon`  | `string` | `\uF8E3 ` | text/icon to show when paused                  |
| `stopped_icon` | `string` | `\uF04D ` | text/icon to show when stopped                 |
| `http_timeout` |  `int`   |  `5000`   | in milliseconds - the timeout for http request |

## Template ([info][templates])

:::note default template

```template
{{ .Icon }}{{ if ne .Status \"stopped\" }}{{ .Artist }} - {{ .Track }}{{ end }}
```

:::

### Properties

| Name      | Type     | Description                                    |
| --------- | -------- | ---------------------------------------------- |
| `.Status` | `string` | player status (`playing`, `paused`, `stopped`) |
| `.Artist` | `string` | current artist                                 |
| `.Track`  | `string` | current track                                  |
| `.Icon`   | `string` | icon (based on `.Status`)                      |

[templates]: /docs/configuration/templates
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/scm/fossil.mdx
================================================
---
id: fossil
title: Fossil
sidebar_label: Fossil
---

## What

Display [fossil][fossil] information when in a fossil repository.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "fossil",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#193549",
  "background": "#ffeb3b"
}}/>

## Properties

| Name              |   Type    | Default | Description                                                                                                                                                                                                       |
| ----------------- | :-------: | :-----: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `native_fallback` | `boolean` | `false` | when set to `true` and `fossil.exe` is not available when inside a WSL2 shared Windows drive, we will fallback to the native `fossil` executable to fetch data. Not all information can be displayed in this case |

## Template ([info][templates])

:::note default template

```template
 \ue725 {{.Branch}} {{.Status.String}}
```

:::

### Properties

| Name      | Type           | Description                         |
| --------- | -------------- | ----------------------------------- |
| `.Status` | `FossilStatus` | changes in the worktree (see below) |
| `.Branch` | `string`       | current branch                      |

### FossilStatus

| Name            | Type      | Description                                  |
| --------------- | --------- | -------------------------------------------- |
| `.Modified`     | `int`     | number of edited, updated and changed files  |
| `.Deleted`      | `int`     | number of deleted files                      |
| `.Added`        | `int`     | number of added files                        |
| `.Moved`        | `int`     | number of renamed files                      |
| `.Conflicted`   | `int`     | number of conflicting files                  |
| `.Changed`      | `boolean` | if the status contains changes or not        |
| `.HasConflicts` | `boolean` | if the status contains conflicts or not      |
| `.String`       | `string`  | a string representation of the changes above |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `+`  | added       |
| `!`  | conflicted  |
| `-`  | deleted     |
| `~`  | modified    |
| `>`  | moved       |

[fossil]: https://fossil-scm.org
[templates]: /docs/config-templates
[hyperlinks]: /docs/config-templates#custom



================================================
FILE: website/docs/segments/scm/git.mdx
================================================
---
id: git
title: Git
sidebar_label: Git
---

## What

Display git information when in a git repository. Also works for subfolders. For maximum compatibility,
make sure your `git` executable is up-to-date (when branch or status information is incorrect for example).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "git",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    background_templates: [
      "{{ if or (.Working.Changed) (.Staging.Changed) }}#FFEB3B{{ end }}",
      "{{ if and (gt .Ahead 0) (gt .Behind 0) }}#FFCC80{{ end }}",
      "{{ if gt .Ahead 0 }}#B388FF{{ end }}",
      "{{ if gt .Behind 0 }}#B388FB{{ end }}",
    ],
    template:
      "{{ .UpstreamIcon }}{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} \uf0c7 {{ .StashCount }}{{ end }}",
    properties: {
      fetch_status: true,
      fetch_upstream_icon: true,
      untracked_modes: {
        "/Users/user/Projects/oh-my-posh/": "no",
      },
      source: "cli",
      mapped_branches: {
        "feat/*": "🚀 ",
        "bug/*": "🐛 ",
      },
    },
  }}
/>

## Properties

### Fetching information

As doing multiple git calls can slow down the prompt experience, we do not fetch information by default.
You can set the following properties to `true` to enable fetching additional information (and populate the template).

| Name                  |        Type         | Default | Description                                                                                                                                                                                                                                                                                                                           |
| --------------------- | :-----------------: | :-----: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `fetch_status`        |      `boolean`      | `false` | fetch the local changes                                                                                                                                                                                                                                                                                                               |
| `ignore_status`       |     `[]string`      |         | do not fetch status for these repo's. Uses the repo's root folder and same logic as the [exclude_folders][exclude_folders] property                                                                                                                                                                                                   |
| `fetch_upstream_icon` |      `boolean`      | `false` | fetch upstream icon                                                                                                                                                                                                                                                                                                                   |
| `fetch_bare_info`     |      `boolean`      | `false` | fetch bare repo info                                                                                                                                                                                                                                                                                                                  |
| `untracked_modes`     | `map[string]string` |         | map of repo's where to override the default [untracked files mode][untracked]:<ul><li>`no`</li><li>`normal`</li><li>`all`</li></ul>For example `"untracked_modes": { "/Users/me/repos/repo1": "no" }` - defaults to `normal` for all repo's. If you want to override for all repo's, use `*` to set the mode instead of the repo path |
| `ignore_submodules`   | `map[string]string` |         | map of repo's where to change the [--ignore-submodules][submodules] flag (`none`, `untracked`, `dirty` or `all`). For example `"ignore_submodules": { "/Users/me/repos/repo1": "all" }`. If you want to override for all repo's, use `*` to set the mode instead of the repo path                                                     |
| `native_fallback`     |      `boolean`      | `false` | when set to `true` and `git.exe` is not available when inside a WSL2 shared Windows drive, we will fallback to the native `git` executable to fetch data. Not all information can be displayed in this case                                                                                                                           |
| `fetch_user`          |   [`User`](#user)   | `false` | fetch the current configured user for the repository                                                                                                                                                                                                                                                                                  |
| `status_formats`      | `map[string]string` |         | a key, value map allowing to override how individual status items are displayed. For example, `"status_formats": { "Added": "Added: %d" }` will display the added count as `Added: 1` instead of `+1`. See the [Status](#status) section for available overrides.                                                                     |
| `source`              |      `string`       |  `cli`  | <ul><li>`cli`: fetch the information using the git CLI</li><li>`pwsh`: fetch the information from the [posh-git][poshgit] PowerShell Module</li></ul>                                                                                                                                                                                 |
| `mapped_branches`     |      `object`       |         | custom glyph/text for specific branches. You can use `*` at the end as a wildcard character for matching                                                                                                                                                                                                                              |
| `branch_template`     |      `string`       |         | a [template][templates] to format that branch name. You can use `{{ .Branch }}` as reference to the original branch name                                                                                                                                                                                                              |

### Icons

#### Branch

| Name                    |   Type   | Default  | Description                                                      |
| ----------------------- | :------: | :------: | ---------------------------------------------------------------- |
| `branch_icon`           | `string` | `\uE0A0` | the icon to use in front of the git branch name                  |
| `branch_identical_icon` | `string` | `\u2261` | the icon to display when remote and local are identical          |
| `branch_ahead_icon`     | `string` | `\u2191` | the icon to display when the local branch is ahead of its remote |
| `branch_behind_icon`    | `string` | `\u2193` | the icon to display when the local branch is behind its remote   |
| `branch_gone_icon`      | `string` | `\u2262` | the icon to display when there's no remote branch                |

#### HEAD

| Name               |   Type   | Default  | Description                                                      |
| ------------------ | :------: | :------: | ---------------------------------------------------------------- |
| `commit_icon`      | `string` | `\uF417` | icon/text to display before the commit context (detached HEAD)   |
| `tag_icon`         | `string` | `\uF412` | icon/text to display before the tag context                      |
| `rebase_icon`      | `string` | `\uE728` | icon/text to display before the context when in a rebase         |
| `cherry_pick_icon` | `string` | `\uE29B` | icon/text to display before the context when doing a cherry-pick |
| `revert_icon`      | `string` | `\uF0E2` | icon/text to display before the context when doing a revert      |
| `merge_icon`       | `string` | `\uE727` | icon/text to display before the merge context                    |
| `no_commits_icon`  | `string` | `\uF594` | icon/text to display when there are no commits in the repo       |

#### Upstream

| Name                |        Type         | Default  | Description                                                                                                                                                                  |
| ------------------- | :-----------------: | :------: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `github_icon`       |      `string`       | `\uF408` | icon/text to display when the upstream is Github                                                                                                                             |
| `gitlab_icon`       |      `string`       | `\uF296` | icon/text to display when the upstream is Gitlab                                                                                                                             |
| `bitbucket_icon`    |      `string`       | `\uF171` | icon/text to display when the upstream is Bitbucket                                                                                                                          |
| `azure_devops_icon` |      `string`       | `\uEBE8` | icon/text to display when the upstream is Azure DevOps                                                                                                                       |
| `codecommit_icon`   |      `string`       | `\uF270` | icon/text to display when the upstream is AWS CodeCommit                                                                                                                     |
| `codeberg_icon`     |      `string`       | `\uF330` | icon/text to display when the upstream is Codeberg                                                                                                                           |
| `git_icon`          |      `string`       | `\uE5FB` | icon/text to display when the upstream is not known/mapped                                                                                                                   |
| `upstream_icons`    | `map[string]string` |          | a key, value map representing the remote URL (or a part of that URL) and icon to use in case the upstream URL contains the key. These get precedence over the standard icons |

## Template ([info][templates])

:::note default template

```template
{{ .HEAD }}{{if .BranchStatus }} {{ .BranchStatus }}{{ end }}{{ if .Working.Changed }} \uF044 {{ .Working.String }}{{ end }}{{ if and (.Staging.Changed) (.Working.Changed) }} |{{ end }}{{ if .Staging.Changed }} \uF046 {{ .Staging.String }}{{ end }}
```

:::

### Properties

| Name             | Type      | Description                                                                                                                      |
| ---------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------- |
| `.RepoName`      | `string`  | the repo folder name                                                                                                             |
| `.Working`       | `Status`  | changes in the worktree (see below)                                                                                              |
| `.Staging`       | `Status`  | staged changes in the work tree (see below)                                                                                      |
| `.HEAD`          | `string`  | the current HEAD context (branch/rebase/merge/...)                                                                               |
| `.Ref`           | `string`  | the current HEAD reference (branch/tag/...)                                                                                      |
| `.Behind`        | `int`     | commits behind of upstream                                                                                                       |
| `.Ahead`         | `int`     | commits ahead of upstream                                                                                                        |
| `.BranchStatus`  | `string`  | the current branch context (ahead/behind string representation)                                                                  |
| `.Upstream`      | `string`  | the upstream name (remote)                                                                                                       |
| `.UpstreamGone`  | `boolean` | whether the upstream is gone (no remote)                                                                                         |
| `.UpstreamIcon`  | `string`  | the upst ream icon (based on the icons above)                                                                                    |
| `.UpstreamURL`   | `string`  | the upstream URL for use in [hyperlinks][hyperlinks] in templates: `{{ url .UpstreamIcon .UpstreamURL }}`                        |
| `.StashCount`    | `int`     | the stash count                                                                                                                  |
| `.WorktreeCount` | `int`     | the worktree count                                                                                                               |
| `.IsWorkTree`    | `boolean` | if in a worktree repo or not                                                                                                     |
| `.IsBare`        | `boolean` | if in a bare repo or not, only set when `fetch_bare_info` is set to `true`                                                       |
| `.Dir`           | `string`  | the repository's root directory                                                                                                  |
| `.RelativeDir`   | `string`  | the current directory relative to the root directory                                                                             |
| `.Kraken`        | `string`  | a link to the current HEAD in [GitKraken][kraken-ref] for use in [hyperlinks][hyperlinks] in templates `{{ url .HEAD .Kraken }}` |
| `.Commit`        | `Commit`  | HEAD commit information (see below)                                                                                              |
| `.Detached`      | `boolean` | true when the head is detached                                                                                                   |
| `.Merge`         | `boolean` | true when in a merge                                                                                                             |
| `.Rebase`        | `Rebase`  | contains the relevant information when in a rebase                                                                               |
| `.CherryPick`    | `boolean` | true when in a cherry pick                                                                                                       |
| `.Revert`        | `boolean` | true when in a revert                                                                                                            |
| `.LatestTag`     | `string`  | the latest tag name                                                                                                              |

#### Status

| Name         | Type      | Description                                  |
| ------------ | --------- | -------------------------------------------- |
| `.Unmerged`  | `int`     | number of unmerged changes                   |
| `.Deleted`   | `int`     | number of deleted changes                    |
| `.Added`     | `int`     | number of added changes                      |
| `.Modified`  | `int`     | number of modified changes                   |
| `.Untracked` | `int`     | number of untracked changes                  |
| `.Changed`   | `boolean` | if the status contains changes or not        |
| `.String`    | `string`  | a string representation of the changes above |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `x`  | Unmerged    |
| `-`  | Deleted     |
| `+`  | Added       |
| `~`  | Modified    |
| `?`  | Untracked   |

#### Commit

| Name         | Type        | Description                             |
| ------------ | ----------- | --------------------------------------- |
| `.Author`    | `User`      | the author of the commit (see below)    |
| `.Committer` | `User`      | the committer of the commit (see below) |
| `.Subject`   | `string`    | the commit subject                      |
| `.Timestamp` | `time.Time` | the commit timestamp                    |
| `.Sha`       | `string`    | the commit SHA1                         |
| `.Refs`      | `Refs`      | the commit references                   |

##### User

| Name     | Type     | Description      |
| -------- | -------- | ---------------- |
| `.Name`  | `string` | the user's name  |
| `.Email` | `string` | the user's email |

##### Refs

| Name       | Type       | Description       |
| ---------- | ---------- | ----------------- |
| `.Heads`   | `[]string` | branches          |
| `.Tags`    | `[]string` | commit's tags     |
| `.Remotes` | `[]string` | remote references |

As these are arrays of strings, you can join them using the `join` function:

```template
{{ join ", " .Commit.Refs.Tags }}
```

#### Rebase

| Name       | Type     | Description                      |
| ---------- | -------- | -------------------------------- |
| `.Current` | `int`    | the current rebase step          |
| `.Total`   | `int`    | the total number of rebase steps |
| `.HEAD`    | `string` | the current HEAD                 |
| `.Onto`    | `string` | the branch we're rebasing onto   |

## posh-git

If you want to display the default [posh-git][poshgit] output, **do not** use this segment
but add the following snippet after initializing Oh My Posh in your `$PROFILE`:

```powershell
function Set-PoshGitStatus {
    $global:GitStatus = Get-GitStatus
    $env:POSH_GIT_STRING = Write-GitStatus -Status $global:GitStatus
}
New-Alias -Name 'Set-PoshContext' -Value 'Set-PoshGitStatus' -Scope Global -Force
```

You can then use the `POSH_GIT_STRING` environment variable in a [text segment][text]:

<Config
  data={{
    template:
      "{{ if .Env.POSH_GIT_STRING }} {{ .Env.POSH_GIT_STRING }} {{ end }}",
  }}
/>

[poshgit]: https://github.com/dahlbyk/posh-git
[templates]: /docs/configuration/templates
[hyperlinks]: /docs/configuration/templates#custom
[untracked]: https://git-scm.com/docs/git-status#Documentation/git-status.txt---untracked-filesltmodegt
[submodules]: https://git-scm.com/docs/git-status#Documentation/git-status.txt---ignore-submodulesltwhengt
[kraken-ref]: https://www.gitkraken.com/invite/nQmDPR9D
[text]: /docs/segments/system/text
[exclude_folders]: /docs/configuration/segment#include--exclude-folders



================================================
FILE: website/docs/segments/scm/jujutsu.mdx
================================================
---
id: jujutsu
title: Jujutsu
sidebar_label: Jujutsu
---

## What

Display Jujutsu information when in a Jujutsu repository.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "jujutsu",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    properties: {
      fetch_status: true,
      ignore_working_copy: false,
    },
  }}
/>

## Properties

### Fetching information

As doing Jujutsu (jj) calls can slow down the prompt experience, we do not fetch information by default.
Set `status_formats` to `true` to enable fetching additional information (and populate the template).

| Name                  |        Type         | Default | Description                                                                                                                                                                                                                                                      |
| --------------------- | :-----------------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `fetch_status`        |      `boolean`      | `false` | fetch the local changes                                                                                                                                                                                                                                          |
| `ignore_working_copy` |      `boolean`      | `true`  | don't snapshot the working copy, and don't update it                                                                                                                                                                                                             |
| `native_fallback`     |      `boolean`      | `false` | when set to `true` and `jj.exe` is not available when inside a WSL2 shared Windows drive, we will fallback to the native `jj` executable to fetch data. Not all information can be displayed in this case                                                        |
| `status_formats`      | `map[string]string` |         | a key, value map allowing to override how individual status items are displayed. For example, `"status_formats": { "Added": "Added: %d" }` will display the added count as `Added: 1` instead of `+1`. See the [Status](#status) section for available overrides |

## Template ([info][templates])

:::note default template

```template
jj {{.ChangeID}}{{if .Working.Changed}} \uf044 {{ .Working.String }}{{ end }}
```

:::

### Properties

| Name        | Type     | Description                                           |
| ----------- | -------- | ----------------------------------------------------- |
| `.Working`  | `Status` | changes in the working copy (see below)               |
| `.ChangeID` | `string` | The shortest unique prefix of the working copy change |

### Status

| Name        | Type      | Description                                  |
| ----------- | --------- | -------------------------------------------- |
| `.Modified` | `int`     | number of modified files                     |
| `.Deleted`  | `int`     | number of deleted files                      |
| `.Added`    | `int`     | number of added files                        |
| `.Moved`    | `int`     | number of renamed files                      |
| `.Changed`  | `boolean` | if the status contains changes or not        |
| `.String`   | `string`  | a string representation of the changes above |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `~`  | Modified    |
| `-`  | Deleted     |
| `+`  | Added       |
| `>`  | Moved       |

[templates]: /docs/config-templates



================================================
FILE: website/docs/segments/scm/mercurial.mdx
================================================
---
id: mercurial
title: Mercurial
sidebar_label: Mercurial
---

## What

Display Mercurial information when in a Mercurial repository. For maximum compatibility,
make sure your `hg` executable is up-to-date (when branch or status information is incorrect for example).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "mercurial",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    properties: {
      newprop: "\uEFF1",
    },
  }}
/>

## Properties

### Fetching information

As doing Mercurial (hg) calls can slow down the prompt experience, we do not fetch information by default.
You can set `fetch_status` to `true` to enable fetching additional information (and populate the template).

| Name              |        Type         | Default | Description                                                                                                                                                                                                                                                      |
| ----------------- | :-----------------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `fetch_status`    |      `boolean`      | `false` | fetch the local changes                                                                                                                                                                                                                                          |
| `native_fallback` |      `boolean`      | `false` | when set to `true` and `hg.exe` is not available when inside a WSL2 shared Windows drive, we will fallback to the native `hg` executable to fetch data. Not all information can be displayed in this case                                                      |
| `status_formats`  | `map[string]string` |         | a key, value map allowing to override how individual status items are displayed. For example, `"status_formats": { "Added": "Added: %d" }` will display the added count as `Added: 1` instead of `+1`. See the [Status](#status) section for available overrides |

## Template ([info][templates])

:::note default template

```template
hg {{.Branch}} {{if .LocalCommitNumber}}({{.LocalCommitNumber}}:{{.ChangeSetIDShort}}){{end}}{{range .Bookmarks }} \uf02e {{.}}{{end}}{{range .Tags}} \uf02b {{.}}{{end}}{{if .Working.Changed}} \uf044 {{ .Working.String }}{{ end }}
```

:::

### Properties

| Name                | Type       | Description                                           |
| ------------------- | ---------- | ----------------------------------------------------- |
| `.Working`          | `Status`   | changes in the worktree (see below)                   |
| `.IsTip`            | `boolean`  | Current commit is the tip commit                      |
| `.ChangeSetID`      | `string`   | The current local commit number                       |
| `.ChangeSetIDShort` | `string`   | The current local commit number                       |
| `.Branch`           | `string`   | current branch (releative URL reported by `svn info`) |
| `.Bookmarks`        | `[]string` | the currently checked out revision number             |
| `.Tags`             | `[]string` | the currently checked out revision number             |

### Status

| Name         | Type      | Description                                  |
| ------------ | --------- | -------------------------------------------- |
| `.Untracked` | `int`     | number of files not under version control    |
| `.Modified`  | `int`     | number of modified files                     |
| `.Deleted`   | `int`     | number of deleted files                      |
| `.Added`     | `int`     | number of added files                        |
| `.Changed`   | `boolean` | if the status contains changes or not        |
| `.String`    | `string`  | a string representation of the changes above |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `?`  | Untracked   |
| `~`  | Modified    |
| `-`  | Deleted     |
| `+`  | Added       |

[templates]: /docs/config-templates



================================================
FILE: website/docs/segments/scm/plastic.mdx
================================================
---
id: plastic
title: Plastic SCM
sidebar_label: Plastic SCM
---

## What

Display Plastic SCM information when in a plastic repository. Also works for subfolders.
For maximum compatibility, make sure your `cm` executable is up-to-date
(when branch or status information is incorrect for example).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "plastic",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    background_templates: [
      "{{ if .MergePending }}#006060{{ end }}",
      "{{ if .Changed }}#FF9248{{ end }}",
      "{{ if and .Changed .Behind }}#ff4500{{ end }}",
      "{{ if .Behind }}#B388FF{{ end }}",
    ],
    template:
      "{{ .Selector }}{{ if .Status.Changed }} \uF044 {{ end }}{{ .Status.String }}",
    properties: {
      fetch_status: true,
    },
  }}
/>

## Plastic SCM Icon

If you want to use the icon of Plastic SCM in the segment, then please help me push the icon in this [issue][fa-issue]
by leaving a like!
![icon](https://www.plasticscm.com/images/icon-logo-plasticscm.svg)

## Properties

### Fetching information

As doing multiple `cm` calls can slow down the prompt experience, we do not fetch information by default.
You can set the following property to `true` to enable fetching additional information (and populate the template).

| Name             |        Type         | Default | Description                                                                                                                                                                                                                                                      |
| ---------------- | :-----------------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `fetch_status`   |      `boolean`      | `false` | fetch the local changes                                                                                                                                                                                                                                          |
| `status_formats` | `map[string]string` |         | a key, value map allowing to override how individual status items are displayed. For example, `"status_formats": { "Added": "Added: %d" }` will display the added count as `Added: 1` instead of `+1`. See the [Status](#status) section for available overrides |

### Icons

#### Branch

| Name              |   Type   | Default  | Description                                                                                                              |
| ----------------- | :------: | :------: | ------------------------------------------------------------------------------------------------------------------------ |
| `branch_icon`     | `string` | `\uE0A0` | the icon to use in front of the git branch name                                                                          |
| `mapped_branches` | `object` |          | custom glyph/text for specific branches. You can use `*` at the end as a wildcard character for matching                 |
| `branch_template` | `string` |          | a [template][templates] to format that branch name. You can use `{{ .Branch }}` as reference to the original branch name |

#### Selector

| Name          |   Type   | Default  | Description                                                    |
| ------------- | :------: | :------: | -------------------------------------------------------------- |
| `commit_icon` | `string` | `\uF417` | icon/text to display before the commit context (detached HEAD) |
| `tag_icon`    | `string` | `\uF412` | icon/text to display before the tag context                    |

## Template ([info][templates])

:::note default template

```template
{{ .Selector }}
```

:::

### Properties

| Name            | Type     | Description                                                                                                                                                        |
| --------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `.Selector`     | `string` | the current selector context (branch/changeset/label)                                                                                                              |
| `.Behind`       | `bool`   | the current workspace is behind and changes are incoming                                                                                                           |
| `.Status`       | `Status` | changes in the workspace (see below)                                                                                                                               |
| `.MergePending` | `bool`   | if a merge is pending and needs to be committed (known issue: when no file is left after a _Change/Delete conflict_ merge, the `MergePending` property is not set) |

### Status

| Name        | Type      | Description                                  |
| ----------- | --------- | -------------------------------------------- |
| `.Unmerged` | `int`     | number of unmerged changes                   |
| `.Deleted`  | `int`     | number of deleted changes                    |
| `.Added`    | `int`     | number of added changes                      |
| `.Modified` | `int`     | number of modified changes                   |
| `.Moved`    | `int`     | number of moved changes                      |
| `.Changed`  | `boolean` | if the status contains changes or not        |
| `.String`   | `string`  | a string representation of the changes above |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `x`  | Unmerged    |
| `-`  | Deleted     |
| `+`  | Added       |
| `~`  | Modified    |
| `v`  | Moved       |

[templates]: /docs/configuration/templates
[fa-issue]: https://github.com/FortAwesome/Font-Awesome/issues/18504



================================================
FILE: website/docs/segments/scm/sapling.mdx
================================================
---
id: sapling
title: Sapling
sidebar_label: Sapling
---

## What

Display [sapling][sapling] information when in a sapling repository.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "sapling",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#4C9642",
    background_templates: ["{{ if .Bookmark }}#4C9642{{ end }}"],
    properties: {
      fetch_status: true,
    },
  }}
/>

## Properties

### Fetching information

| Name              |        Type         | Default | Description                                                                                                                                                                                                                                                      |
| ----------------- | :-----------------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `fetch_status`    |      `boolean`      | `true`  | fetch the local changes - defaults to                                                                                                                                                                                                                            |
| `native_fallback` |      `boolean`      | `false` | when set to `true` and `sl.exe` is not available when inside a WSL2 shared Windows drive, we will fallback to the native `sl` executable to fetch data. Not all information can be displayed in this case                                                        |
| `status_formats`  | `map[string]string` |         | a key, value map allowing to override how individual status items are displayed. For example, `"status_formats": { "Added": "Added: %d" }` will display the added count as `Added: 1` instead of `+1`. See the [Status](#status) section for available overrides |

## Template ([info][templates])

:::note default template

```template
{{ if .Bookmark }}\uf097 {{ .Bookmark }}*{{ else }}\ue729 {{ .ShortHash }}{{ end }}{{ if .Working.Changed }} \uf044 {{ .Working.String }}{{ end }}
```

:::

### Properties

| Name           | Type      | Description                                          |
| -------------- | --------- | ---------------------------------------------------- |
| `.RepoName`    | `string`  | the repo folder name                                 |
| `.Working`     | `Status`  | changes in the worktree (see below)                  |
| `.Description` | `string`  | the first line of the commit's description           |
| `.Author`      | `string`  | the author of the commit                             |
| `.Hash`        | `string`  | the full hash of the commit                          |
| `.ShortHash`   | `string`  | the short hash of the commit                         |
| `.When`        | `string`  | the commit's relative time indication                |
| `.Bookmark`    | `string`  | the commit's bookmark (if any)                       |
| `.Dir`         | `string`  | the repository's root directory                      |
| `.RelativeDir` | `string`  | the current directory relative to the root directory |
| `.New`         | `boolean` | true when there are no commits in the repo           |

### Status

| Name         | Type      | Description                                  |
| ------------ | --------- | -------------------------------------------- |
| `.Modified`  | `int`     | number of modified changes                   |
| `.Added`     | `int`     | number of added changes                      |
| `.Deleted`   | `int`     | number of removed changes                    |
| `.Untracked` | `boolean` | number of untracked changes                  |
| `.Clean`     | `int`     | number of clean changes                      |
| `.Missing`   | `int`     | number of missing changes                    |
| `.Ignored`   | `boolean` | number of ignored changes                    |
| `.String`    | `string`  | a string representation of the changes above |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `~`  | Modified    |
| `+`  | Added       |
| `-`  | Deleted     |
| `?`  | Untracked   |
| `=`  | Clean       |
| `!`  | Missing     |
| `Ø`  | Ignored     |

[sapling]: https://sapling-scm.com/
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/scm/svn.mdx
================================================
---
id: svn
title: Subversion
sidebar_label: Subversion
---

## What

Display subversion information when in a subversion repository. Also works for subfolders. For maximum compatibility,
make sure your `svn` executable is up-to-date (when branch or status information is incorrect for example).

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "svn",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    properties: {
      fetch_status: true,
    },
  }}
/>

## Properties

### Fetching information

As doing multiple [subversion][svn] calls can slow down the prompt experience, we do not fetch information by default.
You can set the following properties to `true` to enable fetching additional information (and populate the template).

| Name              |        Type         | Default | Description                                                                                                                                                                                                                                                      |
| ----------------- | :-----------------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `fetch_status`    |      `boolean`      | `false` | fetch the local changes                                                                                                                                                                                                                                          |
| `native_fallback` |      `boolean`      | `false` | when set to `true` and `svn.exe` is not available when inside a WSL2 shared Windows drive, we will fallback to the native `svn` executable to fetch data. Not all information can be displayed in this case                                                      |
| `status_formats`  | `map[string]string` |         | a key, value map allowing to override how individual status items are displayed. For example, `"status_formats": { "Added": "Added: %d" }` will display the added count as `Added: 1` instead of `+1`. See the [Status](#status) section for available overrides |

:::info
The fields `Repo`, `Branch` and `BaseRev` will still work with `fetch_status` set to `false`.
:::

## Template ([info][templates])

:::note default template

```template
 \ue0a0{{.Branch}} r{{.BaseRev}} {{.Working.String}}
```

:::

### Properties

| Name       | Type     | Description                                                |
| ---------- | -------- | ---------------------------------------------------------- |
| `.Working` | `Status` | changes in the worktree (see below)                        |
| `.Branch`  | `string` | current branch (relative URL reported by `svn info`)       |
| `.BaseRev` | `int`    | the currently checked out revision number                  |
| `.Repo`    | `string` | current repository (repos root URL reported by `svn info`) |

### Status

| Name            | Type      | Description                                    |
| --------------- | --------- | ---------------------------------------------- |
| `.Untracked`    | `int`     | number of files not under version control      |
| `.Modified`     | `int`     | number of modified files                       |
| `.Deleted`      | `int`     | number of deleted files                        |
| `.Added`        | `int`     | number of added files                          |
| `.Moved`        | `int`     | number of changed moved files                  |
| `.Conflicted`   | `int`     | number of changed tracked files with conflicts |
| `.Changed`      | `boolean` | if the status contains changes or not          |
| `.HasConflicts` | `boolean` | if the status contains conflicts or not        |
| `.String`       | `string`  | a string representation of the changes above   |

Local changes use the following syntax:

| Icon | Description |
| ---- | ----------- |
| `?`  | Untracked   |
| `~`  | Modified    |
| `-`  | Deleted     |
| `+`  | Added       |
| `>`  | Moved       |
| `!`  | Conflicted  |

[svn]: https://subversion.apache.org
[templates]: /configuration/templates.mdx



================================================
FILE: website/docs/segments/system/battery.mdx
================================================
---
id: battery
title: Battery
sidebar_label: Battery
---

## What

:::caution
The segment is not supported and automatically disabled on Windows when WSL 1 is detected. Works fine with WSL 2.
:::

Battery displays the remaining power percentage for your battery.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "battery",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#193549",
  "background": "#ffeb3b",
  "background_templates": [
    "{{if eq \"Charging\" .State.String}}#40c4ff{{end}}",
    "{{if eq \"Discharging\" .State.String}}#ff5722{{end}}",
    "{{if eq \"Full\" .State.String}}#4caf50{{end}}"
  ],
  "template": " {{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}\uF295 ",
  "properties": {
    "discharging_icon": "\uE231 ",
    "charging_icon": "\uE234 ",
    "charged_icon": "\uE22F "
  }
}}/>

## Properties

| Name                | Type      | Default | Description                                                             |
| ------------------- | :-------: | :-----: | ----------------------------------------------------------------------- |
| `display_error`     | `boolean` | `false` | show the error context when failing to retrieve the battery information |
| `charging_icon`     | `string`  |         | icon to display when charging                                           |
| `discharging_icon`  | `string`  |         | icon to display when discharging                                        |
| `charged_icon`      | `string`  |         | icon to display when fully charged                                      |
| `not_charging_icon` | `string`  |         | icon to display when fully charged                                      |

## Template ([info][templates])

:::note default template

```template
{{ if not .Error }}{{ .Icon }}{{ .Percentage }}{{ end }}{{ .Error }}
```

:::

### Properties

| Name             | Type      | Description                                                                                                                                                                                                                           |
| ---------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `.State`         | `struct`  | the battery state, has a `.String` function                                                                                                                                                                                           |
| `.Current`       | `float64` | Current (momentary) charge rate (in mW).                                                                                                                                                                                              |
| `.Full`          | `float64` | Last known full capacity (in mWh)                                                                                                                                                                                                     |
| `.Design`        | `float64` | Reported design capacity (in mWh)                                                                                                                                                                                                     |
| `.ChargeRate`    | `float64` | Current (momentary) charge rate (in mW). It is always non-negative, consult .State field to check whether it means charging or discharging (on some systems this might be always `0` if the battery doesn't support it)               |
| `.Voltage`       | `float64` | Current voltage (in V)                                                                                                                                                                                                                |
| `.DesignVoltage` | `float64` | Design voltage (in V). Some systems (e.g. macOS) do not provide a separate value for this. In such cases, or if getting this fails, but getting `Voltage` succeeds, this field will have the same value as `Voltage`, for convenience |
| `.Percentage`    | `float64` | the current battery percentage                                                                                                                                                                                                        |
| `.Error`         | `string`  | the error in case fetching the battery information failed                                                                                                                                                                             |
| `.Icon`          | `string`  | the icon based on the battery state                                                                                                                                                                                                   |

[colors]: /docs/configuration/colors
[battery]: https://github.com/distatus/battery/blob/master/battery.go#L78
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/command.mdx
================================================
---
id: command
title: Command
sidebar_label: Command
---

## What

:::caution powershell
While powerful, it tends to take a lot of time executing the command on **PowerShell**.
Even with `–noprofile` it's noticeably slower compared to `sh`. It's advised to look at using
[environment variables][env] when using PowerShell.
:::

Command allows you run an arbitrary shell command. Be aware it spawn a new process to fetch the result, meaning
it will not be able to fetch session based context (look at abusing [environment variables][env] for that).
When the command errors or returns an empty string, this segment isn't rendered.

You have the ability to use `||` or `&&` to stitch commands together and achieve complex results. When using `||`
the first command that returns a string will be used (or none when they all fail to produce output that's not an
error). The `&&` functionality will join the output of the commands when successful. If you want to run the command
as is, you can set `interpret` to `false`.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "prompt",
    alignment: "right",
    segments: [
      {
        type: "command",
        style: "plain",
        foreground: "#ffffff",
        properties: {
          shell: "bash",
          command: "git log --pretty=format:%cr -1 || date +%H:%M:%S",
        },
      },
    ],
  }}
/>

## Properties

| Name        |   Type    | Default | Description                                                                      |
| ----------- | :-------: | :-----: | -------------------------------------------------------------------------------- |
| `shell`     | `string`  | `bash`  | the shell in which to run the command in. Uses `shell -c command` under the hood |
| `interpret` | `boolean` | `true`  | interpret the command or run as is                                               |
| `command`   | `string`  |         | the command(s) to run                                                            |
| `script`    | `string`  |         | the path to a script to run                                                      |

## Template ([info][templates])

:::note default template

```template
{{ .Output }}
```

:::

### Properties

| Name      | Type     | Description                          |
| --------- | -------- | ------------------------------------ |
| `.Output` | `string` | the output of the command or script. |

[env]: /docs/configuration/templates#environment-variables
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/connection.mdx
================================================
---
id: connection
title: Connection
sidebar_label: Connection
---

## Connection

Show details about the currently connected network.

:::info
Currently only supports Windows. Pull requests for Darwin and Linux support are welcome :)
:::

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "connection",
  "style": "powerline",
  "background": "#8822ee",
  "foreground": "#222222",
  "powerline_symbol": "\uE0B0"
}}/>

## Properties

| Name   | Type     | Default          | Description                                                                                                                                                                                                                                           |
| ------ | :------: | :--------------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `type` | `string` | `wifi\|ethernet` | the type of connection to display. Can be a single value or multiple joined by a pipe <inlineCode>\|</inlineCode> . The first to resolve is shown. Possible values:<ul><li>`wifi`</li><li>`ethernet`</li><li>`bluetooth`</li><li>`cellular`</li></ul> |

## Template ([info][templates])

:::note default template

```template
{{ if eq .Type \"wifi\"}}\uf1eb{{ else if eq .Type \"ethernet\"}}\ueba9{{ end }}
```

:::

### Properties

| Name    | Type     | Description                                             |
| ------- | -------- | ------------------------------------------------------- |
| `.Type` | `string` | the connection type type. Single values of `type` above |
| `.Name` | `string` | the name of the connection                              |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/executiontime.mdx
================================================
---
id: executiontime
title: Execution Time
sidebar_label: Execution Time
---

## What

Displays the execution time of the previously executed command.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "executiontime",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#ffffff",
  "background": "#8800dd",
  "template": " <#fefefe>\ueba2</> {{ .FormattedMs }} ",
  "properties": {
    "threshold": 500,
    "style": "austin",
    "always_enabled": true
  }
}}/>

## Properties

| Name             | Type      | Default  | Description                                                               |
| ---------------- | :-------: | :------: | ------------------------------------------------------------------------- |
| `always_enabled` | `boolean` | `false`  | always show the duration                                                  |
| `threshold`      | `number`  | `500`    | minimum duration (milliseconds) required to enable this segment           |
| `style`          | `enum`    | `austin` | one of the available format options                                       |

### Style

Style specifies the format in which the time will be displayed. The table below shows some example times in each option.

| format        | 0.001s         | 2.1s           | 3m2.1s         | 4h3m2.1s         |
| ------------- | -------------- | -------------- | -------------- | ---------------- |
| `austin`      | `1ms`          | `2.1s`         | `3m 2.1s`      | `4h 3m 2.1s`     |
| `roundrock`   | `1ms`          | `2s 100ms`     | `3m 2s 100ms`  | `4h 3m 2s 100ms` |
| `dallas`      | `0.001`        | `2.1`          | `3:2.1`        | `4:3:2.1`        |
| `galveston`   | `00:00:00`     | `00:00:02`     | `00:03:02`     | `04:03:02`       |
| `galvestonms` | `00:00:00:001` | `00:00:02:100` | `00:03:02:100` | `04:03:02:100`   |
| `houston`     | `00:00:00.001` | `00:00:02.1`   | `00:03:02.1`   | `04:03:02.1`     |
| `amarillo`    | `0.001s`       | `2.1s`         | `182.1s`       | `14,582.1s`      |
| `round`       | `1ms`          | `2s`           | `3m 2s`        | `4h 3m`          |
| `lucky7`      | `    1ms`      | ` 2.00s `      | ` 3m  2s`      | ` 4h  3m`        |

## Template ([info][templates])

:::note default template

```template
{{ .FormattedMs }}
```

:::

### Properties

| Name           | Type     | Description                                    |
| -------------- | -------- | ---------------------------------------------- |
| `.Ms`          | `number` | the execution time in milliseconds             |
| `.FormattedMs` | `string` | the formatted value based on the `style` above |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/os.mdx
================================================
---
id: os
title: OS
sidebar_label: OS
---

## What

Display OS specific info - defaults to Icon.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "os",
  "style": "plain",
  "foreground": "#26C6DA",
  "background": "#546E7A",
  "template": " {{ if .WSL }}WSL at {{ end }}{{.Icon}}\uE0B1",
  "properties": {
    "macos": "mac"
  }
}}/>

## Properties

| Name                  | Type      | Default  | Description                                              |
| --------------------- | :-------: | :------: | -------------------------------------------------------- |
| `macos`               | `string`  | `\uF179` | the string to use for macOS                              |
| `linux`               | `string`  | `\uF17C` | the icon to use for Linux                                |
| `windows`             | `string`  | `\uE62A` | the icon to use for Windows                              |
| `display_distro_name` | `boolean` | `false`  | display the distro name instead of icon for Linux or WSL |
| `alma`                | `string`  | `\uF31D` | the icon to use for AlmaLinux OS                         |
| `almalinux`           | `string`  | `\uF31D` | the icon to use for AlmaLinux OS                         |
| `almalinux9`          | `string`  | `\uF31D` | the icon to use for AlmaLinux OS 9                       |
| `alpine`              | `string`  | `\uF300` | the icon to use for Alpine Linux                         |
| `android`             | `string`  | `\uF17b` | the icon to use for Android                              |
| `aosc`                | `string`  | `\uF301` | the icon to use for AOSC OS                              |
| `arch`                | `string`  | `\uF303` | the icon to use for Arch Linux                           |
| `centos`              | `string`  | `\uF304` | the icon to use for CentOS                               |
| `coreos`              | `string`  | `\uF305` | the icon to use for CoreOS Container Linux               |
| `debian`              | `string`  | `\uF306` | the icon to use for Debian                               |
| `deepin`              | `string`  | `\uF321` | the icon to use for deepin                               |
| `devuan`              | `string`  | `\uF307` | the icon to use for Devuan GNU+Linux                     |
| `elementary`          | `string`  | `\uF309` | the icon to use for elementary OS                        |
| `endeavouros`         | `string`  | `\uF322` | the icon to use for EndeavourOS                          |
| `fedora`              | `string`  | `\uF30a` | the icon to use for Fedora                               |
| `gentoo`              | `string`  | `\uF30d` | the icon to use for Gentoo Linux                         |
| `mageia`              | `string`  | `\uF310` | the icon to use for Mageia                               |
| `manjaro`             | `string`  | `\uF312` | the icon to use for Manjaro Linux                        |
| `mint`                | `string`  | `\uF30e` | the icon to use for Linux Mint                           |
| `nixos`               | `string`  | `\uF313` | the icon to use for NixOS                                |
| `opensuse`            | `string`  | `\uF314` | the icon to use for openSUSE                             |
| `opensuse-tumbleweed` | `string`  | `\uF314` | the icon to use for openSUSE Tumbleweed                  |
| `raspbian`            | `string`  | `\uF315` | the icon to use for Raspberry Pi OS (Raspbian)           |
| `redhat`              | `string`  | `\uF316` | the icon to use for Red Hat Enterprise Linux (RHEL)      |
| `rocky`               | `string`  | `\uF32B` | the icon to use for Rocky Linux                          |
| `sabayon`             | `string`  | `\uF317` | the icon to use for Sabayon                              |
| `slackware`           | `string`  | `\uF319` | the icon to use for Slackware Linux                      |
| `ubuntu`              | `string`  | `\uF31b` | the icon to use for Ubuntu                               |

## Template ([info][templates])

:::note default template

```template
{{ if .WSL }}WSL at {{ end }}{{.Icon}}
```

:::

### Properties

| Name    | Type     | Description |
| ------- | -------- | ----------- |
| `.Icon` | `string` | the OS icon |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/path.mdx
================================================
---
id: path
title: Path
sidebar_label: Path
---

## What

Display the current path.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "path",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#61AFEF",
    properties: {
      style: "folder",
      mapped_locations: {
        "C:\\temp": "\ue799",
      },
    },
  }}
/>

## Properties

| Name                        |    Type    |  Default   | Description                                                                                                      |
| --------------------------- | :--------: | :--------: | ---------------------------------------------------------------------------------------------------------------- |
| `folder_separator_icon`     |  `string`  |    `/`     | the symbol to use as a separator between folders                                                                 |
| `folder_separator_template` |  `string`  |            | the [template][templates] to use as a separator between folders                                                  |
| `home_icon`                 |  `string`  |    `~`     | the icon to display when at `$HOME`                                                                              |
| `folder_icon`               |  `string`  |    `..`    | the icon to use as a folder indication                                                                           |
| `windows_registry_icon`     |  `string`  |  `\uF013`  | the icon to display when in the Windows registry                                                                 |
| `style`                     |   `enum`   | `agnoster` | how to display the current path                                                                                  |
| `mixed_threshold`           |  `number`  |    `4`     | the maximum length of a path segment that will be displayed when using `Mixed`                                   |
| `max_depth`                 |  `number`  |    `1`     | maximum path depth to display before shortening when using `agnoster_short`                                      |
| `max_width`                 |   `any`    |    `0`     | maximum path length to display when using `powerlevel` or `agnoster`, can leverage [templates]                   |
| `hide_root_location`        | `boolean`  |  `false`   | hides the root location if it doesn't fit in the last `max_depth` folders when using `agnoster_short`            |
| `cycle`                     | `[]string` |            | a list of color overrides to cycle through to colorize the individual path folders, e.g. `[ "#ffffff,#111111" ]` |
| `cycle_folder_separator`    | `boolean`  |  `false`   | colorize the `folder_separator_icon` as well when using a cycle                                                  |
| `folder_format`             |  `string`  |    `%s`    | format to use on individual path folders                                                                         |
| `edge_format`               |  `string`  |    `%s`    | format to use on the first and last folder of the path                                                           |
| `left_format`               |  `string`  |    `%s`    | format to use on the first folder of the path - defaults to `edge_format`                                        |
| `right_format`              |  `string`  |    `%s`    | format to use on the last folder of the path - defaults to `edge_format`                                         |
| `gitdir_format`             |  `string`  |            | format to use for a git root directory                                                                           |
| `display_cygpath`           | `boolean`  |  `false`   | display the Cygwin style path using `cygpath -u $PWD`                                                            |
| `display_root`              | `boolean`  |  `false`   | display the root `/` on Unix systems                                                                             |
| `dir_length`                |  `number`  |    `1`     | the length of the directory name to display when using `fish`                                                    |
| `full_length_dirs`          |  `number`  |    `1`     | indicates how many full length directory names should be displayed when using `fish`                             |

## Mapped Locations

Allows you to override a location with an icon/string.
It validates if the current path **starts with the specific elements** and replaces it with the icon/string if there's a match.
To avoid issues with nested overrides, Oh My Posh will sort the list of mapped locations before doing a replacement.

| Name                       |   Type    | Default | Description                                                                              |
| -------------------------- | :-------: | :-----: | ---------------------------------------------------------------------------------------- |
| `mapped_locations_enabled` | `boolean` | `true`  | replace known locations in the path with the replacements before applying the style      |
| `mapped_locations`         | `object`  |         | custom glyph/text for specific paths. Works regardless of the `mapped_locations_enabled` |

setting.

For example, to swap out `C:\Users\Leet\GitHub` with a GitHub icon, you can do the following:

<Config
  data={{
    mapped_locations: {
      "C:\\Users\\Leet\\GitHub": "\uF09B",
    },
  }}
/>

### How it works

- To make mapped locations work cross-platform, use `/` as the path separator, Oh My Posh will
  automatically match effective separators based on the running operating system.
- If you want to match all child directories, you can use `*` as a wildcard, for example:
  `"C:/Users/Bill/*": "$"` will turn `C:/Users/Bill/Downloads` into `$/Downloads` but leave `C:/Users/Bill` unchanged.
- The character `~` at the start of a mapped location will match the user's home directory.
- The match is _case-insensitive on Windows and macOS_, but case-sensitive on other operating systems. This means that for
  user Bill, who has a user account `Bill` on Windows and `bill` on Linux, `~/Foo` might match
  `C:\Users\Bill\Foo` or `C:\Users\Bill\foo` on Windows but only `/home/bill/Foo` on Linux.

:::warning
To prevent mangling path elements, if you use any text style tags (e.g., `<lightGreen>...</>`) in replacement values,
you should avoid using a chevron character (`<`/`>`) in the `folder_separator_icon` property, and vice versa.
:::

### Using regular expressions

For more complicated cases, you can use the `re:` prefix to use a regular expression with a capture group for matching.
This uses Golang's [regexp] package, so you can use any of the [supported syntax][regexp]. The replacement value will be the first capture group,
subsequent groups will be ignored.

For example, `"re:(C:/[0-9]+/Foo)": "#"` will match `C:\123\Foo\Bar` and replace it with `#\Bar`. The path used for matching
will always use `/`, regardless of the operating system, allowing cross platform matching.

Same as for standard replacements, the match is case insensitive on Windows and WSL mounted drives, but case-sensitive on
other operating systems.

## Style

Style sets the way the path is displayed. Based on previous experience and popular themes, there are 10 flavors.

- `agnoster`
- `agnoster_full`
- `agnoster_short`
- `agnoster_left`
- `full`
- `folder`
- `mixed`
- `letter`
- `unique`
- `powerlevel`
- `fish`

### Agnoster

Renders each intermediate folder as the `folder_icon` separated by the `folder_separator_icon`.
The first and the last (current) folder name are always displayed as-is.

### Agnoster Full

Renders each folder name separated by the `folder_separator_icon`.

### Agnoster Short

When more than `max_depth` levels deep, it renders one `folder_icon` (if `hide_root_location` is `false`,
which means the root folder does not count for depth) followed by the names of the last `max_depth` folders,
separated by the `folder_separator_icon`.

### Agnoster Left

Renders each folder as the `folder_icon` separated by the `folder_separator_icon`.
Only the first folder name and its child are displayed in full.

### Full

Display the current working directory as a full string with each folder separated by the `folder_separator_icon`.

### Folder

Display the name of the current folder.

### Mixed

Works like `agnoster`, but for any intermediate folder name that is short enough, it will be displayed as-is.
The maximum length for the folders to display is governed by the `mixed_threshold` property.

### Letter

Works like `agnoster_full`, but will write every folder name using the first letter only, except when the folder name
starts with a symbol or icon. Specially, the last (current) folder name is always displayed in full.

- `folder` will be shortened to `f`
- `.config` will be shortened to `.c`
- `__pycache__` will be shortened to `__p`
- `➼ folder` will be shortened to `➼ f`

### Unique

Works like `letter`, but will make sure every folder name is the shortest unique value.

The uniqueness refers to the displayed path, so `C:\dev\dev\dev\development` will be displayed as
`C\d\de\dev\development` (instead of `C\d\d\d\development` for `Letter`). Uniqueness does **not** refer to other
folders at the same level, so if `C:\projectA\dev` and `C:\projectB\dev` exist, then both will be displayed as
`C\p\dev`.

### Powerlevel

Works like `unique`, but will stop shortening when `max_width` is reached.

### Fish

Works like `letter`, but will display the first `dir_length` characters of each folder name, except for the last
number of folders specified by `full_length_dirs`, which will be displayed in full. Inspired by the Fish shell PWD.

## Template ([info][templates])

:::note default template

```template
{{ .Path }}
```

:::

### Properties

| Name          | Type       | Description                                                                                                                                                            |
| ------------- | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `.Path`       | `string`   | the current directory (based on the `style` property)                                                                                                                  |
| `.Parent`     | `string`   | the current directory's parent folder which ends with a path separator (designed for use with style `folder`, it is empty if `.Path` contains only one single element) |
| `.RootDir`    | `boolean`  | true if we're at the root directory (no parent)                                                                                                                        |
| `.Location`   | `string`   | the current directory (raw value)                                                                                                                                      |
| `.StackCount` | `int`      | the stack count                                                                                                                                                        |
| `.Writable`   | `boolean`  | is the current directory writable by the user or not                                                                                                                   |
| `.Format`     | `function` | format any path based on the segment's settings (e.g. `{{ .Format .Segments.Git.RelativeDir }}`)                                                                       |

[templates]: /docs/configuration/templates
[regexp]: https://pkg.go.dev/regexp/syntax



================================================
FILE: website/docs/segments/system/project.mdx
================================================
---
id: project
title: Project
sidebar_label: Project
---

## What

Display the current version of your project defined in the package file.

Supports:

- Node.js project (`package.json`)
- Cargo project (`Cargo.toml`)
- Python project (`pyproject.toml`, supports metadata defined according to [PEP 621][pep621-standard] or [Poetry][poetry-standard])
- Mojo project (`mojoproject.toml`)
- PHP project (`composer.json`)
- Dart project (`pubspec.yaml`)
- Any nuspec based project (`*.nuspec`, first file match info is displayed)
- .NET project (`*.sln`, `*.slnf`, `*.csproj`, `*.vbproj` or `*.fsproj`, first file match info is displayed)
- Julia project (`JuliaProject.toml`, `Project.toml`)
- PowerShell project (`*.psd1`, first file match info is displayed)

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "project",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#193549",
    background: "#ffeb3b",
    template:
      " {{ if .Error }}{{ .Error }}{{ else }}{{ if .Version }}\uf487 {{.Version}}{{ end }} {{ if .Name }}{{ .Name }}{{ end }}{{ end }} ",
  }}
/>

## Properties

| Name             |   Type    | Default | Description                                                                                                         |
| ---------------- | :-------: | :-----: | ------------------------------------------------------------------------------------------------------------------- |
| `always_enabled` | `boolean` | `false` | always show the segment                                                                                             |
| `<type>_files`   |  `array`  |  `[]`   | override the project's files to validate for. Use the `.Type` values listed below to override (e.g. `dotnet_files`) |

## Template ([info][templates])

:::note default template

```template
 {{ if .Error }}{{ .Error }}{{ else }}{{ if .Version }}\uf487 {{.Version}}{{ end }} {{ if .Name }}{{ .Name }}{{ end }}{{ end }}
```

:::

### Properties

| Name       | Type     | Description                                                                                                                                                                                      |
| ---------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `.Type`    | `string` | The type of project:<ul><li>`node`</li><li>`cargo`</li><li>`python`</li><li>`mojo`</li><li>`php`</li><li>`dart`</li><li>`nuspec`</li><li>`dotnet`</li><li>`julia`</li><li>`powershell`</li></ul> |
| `.Version` | `string` | The version of your project                                                                                                                                                                      |
| `.Target`  | `string` | The target framework/language version of your project                                                                                                                                            |
| `.Name`    | `string` | The name of your project                                                                                                                                                                         |
| `.Error`   | `string` | The error context when we can't fetch the project info                                                                                                                                           |

[templates]: /docs/configuration/templates
[pep621-standard]: https://peps.python.org/pep-0621/
[poetry-standard]: https://python-poetry.org/docs/pyproject/



================================================
FILE: website/docs/segments/system/root.mdx
================================================
---
id: root
title: Root
sidebar_label: Root
---

## What

Show when the current user is root or when in an elevated shell (Windows).

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "root",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#111111",
  "background": "#ffff66",
  "template": "\uF0E7"
}}/>

## Template ([info][templates])

:::note default template

``` template
\uF0E7
```

:::

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/session.mdx
================================================
---
id: session
title: Session
sidebar_label: Session
---

## What

Show the current user and host name.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "session",
  "style": "diamond",
  "foreground": "#ffffff",
  "background": "#c386f1",
  "leading_diamond": "\uE0B6",
  "trailing_diamond": "\uE0B0",
  "template": "{{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}"
}}/>

## Template ([info][templates])

:::note default template

```template
{{ if .SSHSession }}\ueba9 {{ end }}{{ .UserName }}@{{ .HostName }}
```

:::

### Properties

| Name          | Type      | Description                      |
| ------------- | --------- | -------------------------------- |
| `.UserName`   | `string`  | the current user's name          |
| `.HostName`   | `string`  | the current computer's name      |
| `.SSHSession` | `boolean` | active SSH session or not        |
| `.Root`       | `boolean` | are you a root/admin user or not |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/shell.mdx
================================================
---
id: shell
title: Shell
sidebar_label: Shell
---

## What

Show the current shell name (zsh, PowerShell, bash, ...).

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "shell",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#ffffff",
  "background": "#0077c2",
  "properties": {
    "mapped_shell_names": {
      "pwsh": "PS"
    }
  }
}}/>

## Properties

| Name                 | Type     | Default | Description                                                                   |
| -------------------- | :------: | :-----: | ----------------------------------------------------------------------------- |
| `mapped_shell_names` | `object` |         | custom glyph/text to use in place of specified shell names (case-insensitive) |

## Template ([info][templates])

:::note default template

```template
{{ .Name }}
```

:::

### Properties

| Name       | Type     | Description       |
| ---------- | -------- | ----------------- |
| `.Name`    | `string` | the shell name    |
| `.Version` | `string` | the shell version |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/status.mdx
================================================
---
id: status
title: Status Code
sidebar_label: Status Code
---

## What

Displays the last known status code and/or the reason that the last command failed.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "status",
    style: "diamond",
    foreground: "#ffffff",
    background: "#00897b",
    background_templates: ["{{ if .Error }}#e91e63{{ end }}"],
    trailing_diamond: "\uE0B4",
    template: "<#193549>\uE0B0</> \uE23A ",
    properties: {
      always_enabled: true,
    },
  }}
/>

## Properties

| Name               | Type      | Default       | Description                                                          |
| ------------------ | :-------: | :-----------: | -------------------------------------------------------------------- |
| `always_enabled`   | `boolean` | `false`       | always show the status                                               |
| `status_template`  | `string`  | `{{ .Code }}` | [template][status-template] used to render an individual status code |
| `status_separator` | `string`  | `\|`          | used to separate multiple statuses when `$PIPESTATUS` is available   |

[colors]: /docs/configuration/colors

## Template ([info][templates])

:::note default template

```template
{{ .String }}
```

:::

### Properties

| Name      | Type      | Description                                                                           |
| --------- | --------- | ------------------------------------------------------------------------------------- |
| `.Code`   | `number`  | the last known exit code (command or pipestatus)                                      |
| `.String` | `string`  | the formatted status codes using `status_template` and `status_separator`             |
| `.Error`  | `boolean` | true if one of the commands has an error (validates on command status and pipestatus) |

### Status Template

When using `status_template`, use `if eq .Code 0` to check for a successful exit code. The `.Error` property
is used on a global context and will not necessarily indicate that the current validated code is a non-zero value.

```template
{{ if eq .Code 0 }}\uf00c{{ else }}\uf071{{ end }}
```

In case you want the reason for the exit code instead of code itself, you can use the `reason` function:

```template
{{ if eq .Code 0 }}\uf00c{{ else }}\uf071 {{ reason .Code }}{{ end }}
```

[templates]: /docs/configuration/templates
[status-template]: #status-template



================================================
FILE: website/docs/segments/system/sysinfo.mdx
================================================
---
id: sysinfo
title: System Info
sidebar_label: System Info
---

## SysInfo

Display SysInfo.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type":"sysinfo",
  "powerline_symbol": "\ue0b0",
  "foreground": "#ffffff",
  "background": "#8f43f3",
  "template":" \ue266 {{ round .PhysicalPercentUsed .Precision }}% ",
  "properties": {
    "precision": 2
  },
  "style":"powerline"
}}/>

## Properties

| Name        | Type  | Default | Description                             |
| ----------- | :---: | :-----: | --------------------------------------- |
| `Precision` | `int` | `2`     | The precision used for any float values |

## Template ([info][templates])

:::note default template

```template
{{ round .PhysicalPercentUsed .Precision }}
```

:::

### Properties

| Name                       | Type       | Description                                                                                                               |
| -------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------- |
| `.PhysicalTotalMemory`     | `int`      | is the total of used physical memory                                                                                      |
| `.PhysicalAvailableMemory` | `int`      | is the total available physical memory (i.e. the amount immediately available to processes)                               |
| `.PhysicalFreeMemory`      | `int`      | is the total of free physical memory (i.e. considers memory used by the system for any reason [e.g. caching] as occupied) |
| `.PhysicalPercentUsed`     | `float64`  | is the percentage of physical memory in usage                                                                             |
| `.SwapTotalMemory`         | `int`      | is the total of used swap memory                                                                                          |
| `.SwapFreeMemory`          | `int`      | is the total of free swap memory                                                                                          |
| `.SwapPercentUsed`         | `float64`  | is the percentage of swap memory in usage                                                                                 |
| `.Load1`                   | `float64`  | is the current load1 (can be empty on windows)                                                                            |
| `.Load5`                   | `float64`  | is the current load5 (can be empty on windows)                                                                            |
| `.Load15`                  | `float64`  | is the current load15 (can be empty on windows)                                                                           |
| `.Disks`                   | `[]struct` | an array of [IOCountersStat][ioinfo] object, you can use any property it has e.g. `.Disks.disk0.IoTime`                   |

[cpuinfo]: https://github.com/shirou/gopsutil/blob/78065a7ce2021f6a78c8d6f586a2683ba501dcec/cpu/cpu.go#L32
[ioinfo]: https://github.com/shirou/gopsutil/blob/e0ec1b9cda4470db704a862282a396986d7e930c/disk/disk.go#L32
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/text.mdx
================================================
---
id: text
title: Text
sidebar_label: Text
---

## What

Display text.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "text",
  "style": "plain",
  "foreground": "#E06C75",
  "template": "\u276F"
}}/>

## Template ([info][templates])

### Properties

Text segments have no special properties. See ([info][templates]) for globally available properties.

[coloring]: /docs/configuration/colors
[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/system/time.mdx
================================================
---
id: time
title: Time
sidebar_label: Time
---

## What

Show the current timestamp.

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "time",
  "style": "plain",
  "foreground": "#007ACC",
  "properties": {
    "time_format": "15:04:05"
  }
}}/>

## Properties

| Name          | Type     | Default    | Description   |
| ------------- | :------: | :--------: | ------------- |
| `time_format` | `string` | `15:04:05` | Format to use |

## Template ([info][templates])

:::note default template

```template
{{ .CurrentDate | date .Format }}
```

:::

### Properties

| Name           | Type     | Description                             |
| -------------- | -------- | --------------------------------------- |
| `.Format`      | `string` | The time format (set via `time_format`) |
| `.CurrentDate` | `time`   | The time to display (testing purpose)   |

## Syntax

### Formats

Follows the [golang datetime standard][format]:

| DateTime                                         | Format                                                  |
| ------------------------------------------------ | ------------------------------------------------------- |
| **Year**                                         | `06`, `2006`                                            |
| **Month**                                        | `01`, `1`, `Jan`, `January`                             |
| **Day**                                          | `02`, `2`, `_2` <sub>(width two, right justified)</sub> |
| **Weekday**                                      | `Mon`, `Monday`                                         |
| **Hours**                                        | `03`, `3`, `15`                                         |
| **Minutes**                                      | `04`, `4`                                               |
| **Seconds**                                      | `05`, `5`                                               |
| **ms μs ns**                                     | `.000`, `.000000`, `.000000000`                         |
| **ms μs ns** <sub>(trailing zeros removed)</sub> | `.999`, `.999999`, `.999999999`                         |
| **am/pm**                                        | `PM`, `pm`                                              |
| **Timezone**                                     | `MST`                                                   |
| **Offset**                                       | `-0700`, `-07`, `-07:00`, `Z0700`, `Z07:00`             |



### Predefined formats

The following predefined date and timestamp [format constants][format-constants] are also available:

| Name            | Format                                |
| --------------- | ------------------------------------- |
| **ANSIC**       | `Mon Jan _2 15:04:05 2006`            |
| **UnixDate**    | `Mon Jan _2 15:04:05 MST 2006`        |
| **RubyDate**    | `Mon Jan 02 15:04:05 -0700 2006`      |
| **RFC822**      | `02 Jan 06 15:04 MST`                 |
| **RFC822Z**     | `02 Jan 06 15:04 -0700`               |
| **RFC850**      | `Monday, 02-Jan-06 15:04:05 MST`      |
| **RFC1123**     | `Mon, 02 Jan 2006 15:04:05 MST`       |
| **RFC1123Z**    | `Mon, 02 Jan 2006 15:04:05 -0700`     |
| **RFC3339**     | `2006-01-02T15:04:05Z07:00`           |
| **RFC3339Nano** | `2006-01-02T15:04:05.999999999Z07:00` |
| **Kitchen**     | `3:04PM`                              |
| **Stamp**       | `Jan _2 15:04:05`                     |
| **StampMilli**  | `Jan _2 15:04:05.000`                 |
| **StampMicro**  | `Jan _2 15:04:05.000000`              |
| **StampNano**   | `Jan _2 15:04:05.000000000`           |


## Examples

To display the time in multiple time zones, using [Sprig's Date Functions][sprig-date]:

```text
{{ .CurrentDate | date .Format }} {{ dateInZone "15:04Z" .CurrentDate "UTC" }}
```

[templates]: /docs/configuration/templates
[format]: https://yourbasic.org/golang/format-parse-string-time-date-example/
[format-constants]: https://golang.org/pkg/time/#pkg-constants
[sprig-date]: https://masterminds.github.io/sprig/date.html



================================================
FILE: website/docs/segments/system/upgrade.mdx
================================================
---
id: upgrade
title: Upgrade notice
sidebar_label: Upgrade
---

## What

Displays when there's an update available for Oh My Posh.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "upgrade",
    style: "plain",
    foreground: "#111111",
    background: "#FFD664",
    properties: {
      cache_duration: "168h",
    },
  }}
/>

## Properties

| Name             |   Type   | Default | Description                                                                                                                                                                                                             |
| ---------------- | :------: | :-----: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `cache_duration` | `string` | `168h`  | the duration for which the segment will be cached. The duration is a string in the format `1h2m3s` and is parsed using the [time.ParseDuration] function from the Go standard library. To disable the cache, use `none` |

## Template ([info][templates])

:::note default template

```template
 \uf019
```

:::

### Properties

| Name       | Type     | Description                         |
| ---------- | -------- | ----------------------------------- |
| `.Current` | `string` | the current version number          |
| `.Latest`  | `string` | the latest available version number |

[templates]: /docs/configuration/templates
[time.ParseDuration]: https://golang.org/pkg/time/#ParseDuration



================================================
FILE: website/docs/segments/system/winreg.mdx
================================================
---
id: winreg
title: Windows Registry Key Query
sidebar_label: Windows Registry Key Query
---

## What

Display the content of the requested Windows registry key.

Supported registry key types:

- `SZ` (displayed as string value)
- `EXPAND_SZ` (displayed as string value)
- `BINARY` (displayed as string value)
- `DWORD` (displayed in upper-case 0x hex)
- `QWORD` (displayed in upper-case 0x hex)

## Sample Configuration

import Config from '@site/src/components/Config.js';

<Config data={{
  "type": "winreg",
  "style": "powerline",
  "powerline_symbol": "\uE0B0",
  "foreground": "#ffffff",
  "background": "#444444",
  "template":" \uE62A {{ .Value }}",
  "properties": {
    "path": "HKLM\\software\\microsoft\\windows nt\\currentversion\\buildlab",
    "fallback":"unknown"
  }
}}/>

## Properties

| Name       | Type     | Default | Description                                                                                                                                      |
| ---------- | :------: | :-----: | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| `path`     | `string` |         | registry path to the desired key using backslashes and with a valid root HKEY name. Ending path with \ will get the (Default) key from that path |
| `fallback` | `string` |         | the value to fall back to if no entry is found                                                                                                   |

## Template ([info][templates])

:::note default template

```template
{{ .Value }}
```

:::

### Properties

| Name   | Type     | Description                                         |
| ------ | -------- | --------------------------------------------------- |
| .Value | `string` | The result of your query, or fallback if not found. |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/web/brewfather.mdx
================================================
---
id: brewfather
title: Brewfather
sidebar_label: Brewfather
---

## What

Calling all brewers! Keep up-to-date with the status of your [Brewfather][brewfather] batch directly in your
commandline prompt using the brewfather segment!

You will need your User ID and API Key as generated in
Brewfather's Settings screen, enabled with **batches.read** and **recipes.read** scopes.

## Sample Configuration

This example uses the default segment template to show a rendition of detail appropriate to the status of the batch

Additionally, the background of the segment will turn red if the latest reading is over 4 hours old - possibly helping indicate
an issue if, for example there is a Tilt or similar device that is supposed to be logging to Brewfather every 15 minutes.

:::info
Temperature units are in degrees C and specific gravity is expressed as `X.XXX` values.
:::

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "brewfather",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#33158A",
    background_templates: [
      '{{ if and (.Reading) (eq .Status "Fermenting") (gt .ReadingAge 4) }}#cc1515{{end}}',
    ],
    properties: {
      user_id: "abcdefg123456",
      api_key: "qrstuvw78910",
      batch_id: "hijklmno098765",
    },
  }}
/>

## Properties

| Name           |   Type   | Default | Description                                                                                                                     |
| -------------- | :------: | :-----: | ------------------------------------------------------------------------------------------------------------------------------- |
| `user_id`      | `string` |         | as provided by Brewfather's Generate API Key screen                                                                             |
| `api_key`      | `string` |         | as provided by Brewfather's Generate API Key screen                                                                             |
| `batch_id`     | `string` |         | Get this by navigating to the desired batch on the brewfather website, the batch id is at the end of the URL in the address bar |
| `http_timeout` |  `int`   |   `2`   | in milliseconds - How long to wait for the Brewfather service to answer the request                                             |
| `day_icon`     | `string` |   `d`   | icon or letter to use to indicate days                                                                                          |

## Icons

You can override the icons for temperature trend as used by template property `.TemperatureTrendIcon` with:

| Name                 | Description                                     |
| -------------------- | ----------------------------------------------- |
| `doubleup_icon`      | for increases of more than 4°C, default is `↑↑` |
| `singleup_icon`      | increase 2-4°C, default is `↑`                  |
| `fortyfiveup_icon`   | increase 0.5-2°C, default is `↗`                |
| `flat_icon`          | change less than 0.5°C, default is `→`          |
| `fortyfivedown_icon` | decrease 0.5-2°C, default is `↘`                |
| `singledown_icon`    | decrease 2-4°C, default is `↓`                  |
| `doubledown_icon`    | decrease more than 4°C, default is `↓↓`         |

You can override the default icons for batch status as used by template property `.StatusIcon` with:

| Name                       |
| -------------------------- |
| `planning_status_icon`     |
| `brewing_status_icon`      |
| `fermenting_status_icon`   |
| `conditioning_status_icon` |
| `completed_status_icon`    |
| `archived_status_icon`     |

## Template ([info][templates])

:::note default template

```template
{{ .StatusIcon }} {{ if .DaysBottledOrFermented }}{{ .DaysBottledOrFermented }}{{ .DayIcon }} {{ end }}{{ url .Recipe.Name .URL }} {{ printf \"%.1f\" .MeasuredAbv }}%{{ if and (.Reading) (eq .Status \"Fermenting\") }} {{ printf \"%.3f\" .Reading.Gravity }} {{ .Reading.Temperature }}\u00b0 {{ .TemperatureTrendIcon }}{{ end }}
```

:::

### Properties

| Name                    | Type     | Description                                                                                      |
| ----------------------- | -------- | ------------------------------------------------------------------------------------------------ |
| .Status                 | `string` | One of "Planning", "Brewing", "Fermenting", "Conditioning", "Completed" or "Archived"            |
| .StatusIcon             | `string` | Icon representing above stats. Can be overridden with properties shown above                     |
| .TemperatureTrendIcon   | `string` | Icon showing temperature trend based on latest and previous reading                              |
| .DaysFermenting         | `int`    | days since start of fermentation                                                                 |
| .DaysBottled            | `int`    | days since bottled/kegged                                                                        |
| .DaysBottledOrFermented | `int`    | one of the above, chosen automatically based on batch status                                     |
| .Recipe.Name            | `string` | The recipe being brewed in this batch                                                            |
| .BatchName              | `string` | The name of this batch                                                                           |
| .BatchNumer             | `int`    | The number of this batch                                                                         |
| .MeasuredAbv            | `float`  | The ABV for the batch - either estimated from recipe or calculated from entered OG and FG values |
| .ReadingAge             | `int`    | age in hours of most recent reading or -1 if there are no readings available                     |

#### Reading

`.Reading` contains the most recent data from devices or manual entry as visible on the Brewfather's batch Readings graph.
If there are no readings available, `.Reading` will be null.

| Name                 | Type     | Description                                |
| -------------------- | -------- | ------------------------------------------ |
| .Reading.Gravity     | `float`  | specific gravity (in decimal point format) |
| .Reading.Temperature | `float`  | temperature in °C                          |
| .Reading.Time        | `int`    | unix timestamp of reading                  |
| .Reading.Comment     | `string` | comment attached to this reading           |
| .Reading.DeviceType  | `string` | source of the reading, e.g. "Tilt"         |
| .Reading.DeviceID    | `string` | id of the device, e.g. "PINK"              |

#### Additional properties

| Name              | Type     | Description                                                           |
| ----------------- | -------- | --------------------------------------------------------------------- |
| .MeasuredOg       | `float`  | The OG for the batch as manually entered into Brewfather              |
| .MeasuredFg       | `float`  | The FG for the batch as manually entered into Brewfather              |
| .BrewDate         | `int`    | The unix timestamp of the brew day                                    |
| .FermentStartDate | `int`    | The unix timestamp when fermentation was started                      |
| .BottlingDate     | `time`   | The unix timestamp when bottled/kegged                                |
| .TemperatureTrend | `float`  | The difference between the most recent and previous temperature in °C |
| .DayIcon          | `string` | given by "day_icon", or "d" by default                                |

#### Hyperlink support

| Name   | Type     | Description                                                                                                                                                                        |
| ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `.URL` | `string` | the URL for the batch in the Brewfather app. You can use this to add a hyperlink to the segment if you are using a terminal that supports it. The default template implements this |

### Advanced Templating

The built in template will provides key useful information. However, you can use the properties about the batch
to build your own. For reference, the built-in template looks like this:

<Config
  data={{
    template:
      '{{.StatusIcon}} {{if .DaysBottledOrFermented}}{{.DaysBottledOrFermented}}{{.DayIcon}} {{end}}[{{.Recipe.Name}}]({{.URL}}) {{printf "%.1f" .MeasuredAbv}}%{{ if and (.Reading) (eq .Status "Fermenting")}}: {{printf "%.3f" .Reading.Gravity}} {{.Reading.Temperature}}\u00b0 {{.TemperatureTrendIcon}}{{end}}',
  }}
/>

### Unit conversion

By default temperature readings are provided in degrees C, gravity readings in decimal Specific Gravity unts (X.XXX).

The following conversion functions are available to the template to convert to other units:

#### Temperature

| Name           | Description                                                                |
| -------------- | -------------------------------------------------------------------------- |
| `DegCToF`      | input: `float` degrees in C; output `float` degrees in F (1 decimal place) |
| `DegCToKelvin` | input: `float` degrees in C; output `float` Kelvin (1 decimal place)       |

#### Gravity

| Name      | Description                                                                |
| --------- | -------------------------------------------------------------------------- |
| SGToBrix  | input `float` SG in x.xxx decimal; output `float` Brix (2 decimal places)  |
| SGToPlato | input `float` SG in x.xxx decimal; output `float` Plato (2 decimal places) |

_(These use the polynomial conversions from [Wikipedia][wikipedia_gravity_page])_

#### Example

<Config
  data={{
    template:
      "{{if .Reading}}{{.SGToBrix .Reading.Gravity}}°Bx, {{.DegCToF .Reading.Temperature}}°F{{end}}",
  }}
/>

To display gravity as SG in XXXX format (e.g. "1020" instead of "1.020"), use the `mulf` template function

<Config
  data={{
    template:
      "{{if .Reading}}{{.mulf 1000 .Reading.Gravity}}, {{.DegCToF .Reading.Temperature}}°F{{end}}",
  }}
/>

[templates]: /docs/configuration/templates
[brewfather]: http://brewfather.app
[wikipedia_gravity_page]: https://en.wikipedia.org/wiki/Brix#Specific_gravity_2



================================================
FILE: website/docs/segments/web/carbonintensity.mdx
================================================
---
id: carbonintensity
title: Carbon Intensity
sidebar_label: Carbon Intensity
---

## What

Shows the actual and forecast carbon intensity in gCO2/kWh using data from the [Carbon Intensity API][carbonintensity-api].

:::note
Note that this segment only provides data for Great Britain at the moment. Support for other countries may become available in the future.
:::

## Sample Configuration

:::caution
The API can be slow. It's recommended to set the `http_timeout` property to a large value (e.g. `5000`).
:::

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "carbonintensity",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#000000",
    background: "#ffffff",
    background_templates: [
      '{{if eq "very low" .Index}}#a3e635{{end}}',
      '{{if eq "low" .Index}}#bef264{{end}}',
      '{{if eq "moderate" .Index}}#fbbf24{{end}}',
      '{{if eq "high" .Index}}#ef4444{{end}}',
      '{{if eq "very high" .Index}}#dc2626{{end}}',
    ],
    template:
      " CO₂ {{ .Index.Icon }}{{ .Actual.String }} {{ .TrendIcon }} {{ .Forecast.String }} ",
    properties: {
      http_timeout: 5000,
    },
  }}
/>

## Properties

| Name           | Type  | Default | Description                                                                                                                                      |
| -------------- | :---: | :-----: | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| `http_timeout` | `int` |  `20`   | Timeout (in milliseconds) for HTTP requests. The default is 20ms, but you may need to set this to as high as 5000ms to handle slow API requests. |

## Template ([info][templates])

:::note default template

```template
CO₂ {{ .Index.Icon }}{{ .Actual.String }} {{ .TrendIcon }} {{ .Forecast.String }}
```

:::

### Properties

| Name         | Type     | Description                                                                                                                                                             |
| ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `.Forecast`  | `Number` | The forecast carbon intensity in gCO2/kWh. Equal to `0` if no data is available.                                                                                        |
| `.Actual`    | `Number` | The actual carbon intensity in gCO2/kWh. Equal to `0` if no data is available.                                                                                          |
| `.Index`     | `Index`  | A rating of the current carbon intensity. Possible values are `"very low"`, `"low"`, `"moderate"`, `"high"`, or `"very high"`. Equal to `"??"` if no data is available. |
| `.TrendIcon` | `string` | An icon representation of the predicted trend in carbon intensity based on the Actual and Forecast values. Possible values are `"↗"`, `"↘"`, or `"→"`.                  |

#### Number

| Name      | Type     | Description                        |
| --------- | -------- | ---------------------------------- |
| `.String` | `string` | string representation of the value |

#### Index

| Name    | Type     | Description                      |
| ------- | -------- | -------------------------------- |
| `.Icon` | `string` | icon representation of the value |

[templates]: /docs/configuration/templates
[carbonintensity-api]: https://carbon-intensity.github.io/api-definitions



================================================
FILE: website/docs/segments/web/http.mdx
================================================
---
id: http
title: HTTP
sidebar_label: HTTP
---

## What

HTTP Request is a simple segment to return any json data from any HTTP call.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "http",
    style: "diamond",
    foreground: "#ffffff",
    background: "#c386f1",
    leading_diamond: "\ue0b6",
    trailing_diamond: "\uE0B0",
    template: "{{ .Result }}",
    properties: {
      url: "https://jsonplaceholder.typicode.com/posts/1",
      method: "GET",
    },
  }}
/>

## Properties

| Name     |   Type   | Default | Description                                         |
| -------- | :------: | :-----: | --------------------------------------------------- |
| `url`    | `string` |   ``    | The HTTP URL you want to call, supports [templates] |
| `method` | `string` |  `GET`  | The HTTP method to use                              |

## Template ([info][templates])

:::note default template

```template
{{ .Body }}
```

:::

### Properties

| Name             | Type     | Description                                               |
| ---------------- | -------- | --------------------------------------------------------- |
| `.Body.property` | `string` | Replace `.property` with the property you want to display |

[templates]: /docs/configuration/templates



================================================
FILE: website/docs/segments/web/ipify.mdx
================================================
---
id: ipify
title: Ipify
sidebar_label: Ipify
---

## What

[Ipify][ipify] is a simple Public IP Address API, it returns your public IP Address in plain text.

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "ipify",
    style: "diamond",
    foreground: "#ffffff",
    background: "#c386f1",
    leading_diamond: "\ue0b6",
    trailing_diamond: "\uE0B0",
    template: "{{ .IP }}",
    properties: {
      http_timeout: 1000,
    },
  }}
/>

## Properties

| Name           |   Type   |         Default         | Description                                                                     |
| -------------- | :------: | :---------------------: | ------------------------------------------------------------------------------- |
| `url`          | `string` | `https://api.ipify.org` | The Ipify URL, by default IPv4 is used, use `https://api64.ipify.org` for IPv6  |
| `http_timeout` |  `int`   |          `20`           | in milliseconds - how long may the segment wait for a response of the ipify API |

## Template ([info][templates])

:::note default template

```template
{{ .IP }}
```

:::

### Properties

| Name | Type     | Description              |
| ---- | -------- | ------------------------ |
| .IP  | `string` | Your external IP address |

[templates]: /docs/configuration/templates
[ipify]: https://www.ipify.org/



================================================
FILE: website/docs/segments/web/nba.mdx
================================================
---
id: nba
title: NBA
sidebar_label: NBA
---

## What

The NBA segment allows you to display the scheduling and score information for your
favorite NBA team!

## Sample Configuration

In order to use the NBA segment, you need to provide a valid team
[tri-code](https://liaison.reuters.com/tools/sports-team-codes) that you'd
like to get data for inside of the configuration. For example, if you'd like
to get information for the Los Angeles Lakers, you'd need to use the "LAL"
tri-code.

This example uses "LAL" to get information for the Los Angeles Lakers. It also
sets the foreground and background colors to match the theming for the team.
If you are interested in getting information about specific foreground and
background colors you could use for other teams, you can explore some of
the color schemes [here](https://teamcolorcodes.com/nba-team-color-codes/).

It is recommended that you set the HTTP timeout to a higher value than the
normal default in case it takes some time to gather the scoreboard information.
In this case we have the http_timeout set to 1500.

import Config from "@site/src/components/Config.js";

<Config
  data={{
    background: "#e9ac2f",
    foreground: "#8748dc",
    leading_diamond: "\ue0b6",
    style: "diamond",
    trailing_diamond: "\ue0b0",
    type: "nba",
    properties: {
      team: "LAL",
      http_timeout: 1500,
    },
  }}
/>

## Properties

| Name           | Type     | Description                                                                                                                                        |
| -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| `team`         | `string` | tri-code for the NBA team you want to get data for                                                                                                 |
| `days_offset`  | `int`    | how many days in advance you wish to see that information for, defaults to 8                                                                       |
| `http_timeout` | `int`    | How long do you want to wait before you want to see your prompt more than your sugar? I figure a half second is a good default - defaults to 500ms |

## Template ([info][templates])

:::note default template

```template
\U000F0806 {{ .HomeTeam}}{{ if .HasStats }} ({{.HomeTeamWins}}-{{.HomeTeamLosses}}){{ end }}{{ if .Started }}:{{.HomeScore}}{{ end }} vs {{ .AwayTeam}}{{ if .HasStats }} ({{.AwayTeamWins}}-{{.AwayTeamLosses}}){{ end }}{{ if .Started }}:{{.AwayScore}}{{ end }} | {{ if not .Started }}{{.GameDate}} | {{ end }}{{.Time}}
```

:::

### Properties

| Name            | Type      | Description                                                 |
| --------------- | --------- | ----------------------------------------------------------- |
| .HomeTeam       | `string`  | home team for the upcoming game                             |
| .AwayTeam       | `string`  | away team for the upcoming game                             |
| .Time           | `string`  | time (EST) that the upcoming game will start                |
| .GameDate       | `string`  | date the game will happen                                   |
| .StartTimeUTC   | `string`  | time (UTC) the game will start                              |
| .GameStatus     | `integer` | integer, 1 = scheduled, 2 = in progress, 3 = finished       |
| .HomeScore      | `int`     | score of the home team                                      |
| .AwayScore      | `int`     | score of the away team                                      |
| .HomeTeamWins   | `int`     | number of wins the home team currently has for the season   |
| .HomeTeamLosses | `int`     | number of losses the home team currently has for the season |
| .AwayTeamWins   | `int`     | number of wins the away team currently has for the season   |
| .AwayTeamLosses | `int`     | number of losses the away team currently has for the season |
| .Started        | `boolean` | if the game was started or not                              |
| .HasStats       | `boolean` | if the game has game stats or not                           |

[templates]: /docs/configuration/templates
[nf-search]: https://www.nerdfonts.com/cheat-sheet



================================================
FILE: website/docs/segments/web/owm.mdx
================================================
---
id: owm
title: Open Weather Map
sidebar_label: Open Weather Map
---

## What

Shows the current weather of a given location with [Open Weather Map][owm].

:::caution
You **must** request an API key at the [Open Weather Map][owm-price] website.
The free tier for _Current weather and forecasts collection_ is sufficient.
:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "owm",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#FF0000",
    template: "{{.Weather}} ({{.Temperature}}{{.UnitIcon}})",
    properties: {
      api_key: "<YOUR_API_KEY>",
      location: "AMSTERDAM,NL",
      units: "metric",
      http_timeout: 20,
    },
  }}
/>

## Properties

| Name           |   Type   |   Default    | Description                                                                                                                                                                                                                                                                                                       |
| -------------- | :------: | :----------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `api_key`      | `string` |     `.`      | Your API key from [Open Weather Map][owm]. Can also be set using the `POSH_OWM_API_KEY` environment variable                                                                                                                                                                                                      |
| `location`     | `string` | `De Bilt,NL` | The requested location interpreted only if valid coordinates aren't given. Formatted as \<City,STATE,COUNTRY_CODE\>. City name, state code and country code divided by comma. Please, refer to ISO 3166 for the state codes or country codes . Can also be set using the `POSH_OWM_LOCATION` environment variable |
| `units`        | `string` |  `standard`  | Units of measurement. Available values are standard (kelvin), metric (celsius), and imperial (fahrenheit)                                                                                                                                                                                                         |
| `http_timeout` |  `int`   |     `20`     | in milliseconds, the timeout for http request                                                                                                                                                                                                                                                                     |

## Template ([info][templates])

:::note default template

```template
{{ .Weather }} ({{ .Temperature }}{{ .UnitIcon }})
```

:::

### Properties

| Name           | Type     | Description                                    |
| -------------- | -------- | ---------------------------------------------- |
| `.Weather`     | `string` | the current weather icon                       |
| `.Temperature` | `int`    | the current temperature                        |
| `.UnitIcon`    | `string` | the current unit icon(based on units property) |
| `.URL`         | `string` | the url of the current api call                |

[go-text-template]: https://golang.org/pkg/text/template/
[sprig]: http://masterminds.github.io/sprig/
[templates]: /docs/configuration/templates
[owm]: https://openweathermap.org
[owm-price]: https://openweathermap.org/price



================================================
FILE: website/docs/segments/web/wakatime.mdx
================================================
---
id: wakatime
title: Wakatime
sidebar_label: Wakatime
---

## What

Shows the tracked time on [wakatime][wt] of the current day

:::caution
You **must** request an API key at the [wakatime][wt] website.
The free tier for is sufficient. You'll find the API key in your profile settings page.
:::

## Sample Configuration

import Config from "@site/src/components/Config.js";

<Config
  data={{
    type: "wakatime",
    style: "powerline",
    powerline_symbol: "\uE0B0",
    foreground: "#ffffff",
    background: "#007acc",
    properties: {
      url: "https://wakatime.com/api/v1/users/current/summaries?start=today&end=today&api_key=API_KEY",
      http_timeout: 500,
    },
  }}
/>

## Properties

| Name           |   Type   | Default | Description                                                                                                                                    |
| -------------- | :------: | :-----: | ---------------------------------------------------------------------------------------------------------------------------------------------- |
| `url`          | `string` |         | The Wakatime [summaries][wk-summaries] URL, including the API key. Example above.                                                              |
| `http_timeout` |  `int`   |  `20`   | The time (_in milliseconds_, `ms`) it takes to consider an http request as **timed-out**. If no segment is shown, try increasing this timeout. |

### Dynamic API Key

If you don't want to include the API key into your configuration, the following modification can be done.

<Config
  data={{
    properties: {
      url: "https://wakatime.com/api/v1/users/current/summaries?start=today&end=today&api_key={{ .Env.WAKATIME_API_KEY }}",
      http_timeout: 500,
    },
  }}
/>

:::note

`WAKATIME_API_KEY` is an example, **any name is possible and acceptable** as long as the environment variable exists and contains the API key value.

Please refer to the [Environment Variable][templates-environment-variables] page for more information.

:::

## Template ([info][templates])

:::note default template

```template
{{ secondsRound .CumulativeTotal.Seconds }}
```

:::

### Properties

| Name               | Type       | Description                              |
| ------------------ | ---------- | ---------------------------------------- |
| `.CumulativeTotal` | `wtTotals` | object holding total tracked time values |

### wtTotals Properties

| Name       | Type      | Description                                                     |
| ---------- | --------- | --------------------------------------------------------------- |
| `.Seconds` | `float64` | a number representing the total tracked time in seconds         |
| `.Text`    | `string`  | a string with human readable tracked time (eg: "2 hrs 30 mins") |

[wt]: https://wakatime.com
[wk-summaries]: https://wakatime.com/developers#summaries
[templates]: /docs/configuration/templates
[templates-environment-variables]: /docs/configuration/templates#environment-variables



================================================
FILE: website/plugins/appinsights/analytics.js
================================================
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import ExecutionEnvironment from '@docusaurus/ExecutionEnvironment';

export default (function () {
  if (!ExecutionEnvironment.canUseDOM) {
    return null;
  }

  return {
    onRouteUpdate({ location }) {
      window.setTimeout(() => {
        if (window.appInsights) {
          window.appInsights.trackPageView({name: location.pathname});
        }
      }, 0);
    },
  };
})();



================================================
FILE: website/plugins/appinsights/index.js
================================================
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const { Console } = require('console');
const path = require('path');

module.exports = function (context) {
  const { siteConfig } = context;
  const { themeConfig } = siteConfig;
  const { appInsights } = themeConfig || {};

  if (!appInsights) {
    throw new Error(
      `You need to specify "appInsights" object in "themeConfig" with "instrumentationKey" field in it to use appinsights.`,
    );
  }

  const { instrumentationKey } = appInsights;

  if (!instrumentationKey) {
    throw new Error(
      'You specified the "appInsights" object in "themeConfig" but the "trackingID" field was missing. ' +
      'Please ensure this is not a mistake.',
    );
  }

  const isProd = process.env.NODE_ENV !== 'development';

  return {
    name: 'docusaurus-plugin-app-insights',

    getClientModules() {
      return isProd ? [path.resolve(__dirname, './analytics')] : [];
    },

    injectHtmlTags() {
      if (!isProd) {
        return {};
      }
      return {
        headTags: [
          {
            tagName: 'script',
            attributes: {
              type: 'text/javascript'
            },
            innerHTML: `
!function(T,l,y){var S=T.location,k="script",D="instrumentationKey",C="ingestionendpoint",I="disableExceptionTracking",E="ai.device.",b="toLowerCase",w="crossOrigin",N="POST",e="appInsightsSDK",t=y.name||"appInsights";(y.name||T[e])&&(T[e]=t);var n=T[t]||function(d){var g=!1,f=!1,m={initialize:!0,queue:[],sv:"5",version:2,config:d};function v(e,t){var n={},a="Browser";return n[E+"id"]=a[b](),n[E+"type"]=a,n["ai.operation.name"]=S&&S.pathname||"_unknown_",n["ai.internal.sdkVersion"]="javascript:snippet_"+(m.sv||m.version),{time:function(){var e=new Date;function t(e){var t=""+e;return 1===t.length&&(t="0"+t),t}return e.getUTCFullYear()+"-"+t(1+e.getUTCMonth())+"-"+t(e.getUTCDate())+"T"+t(e.getUTCHours())+":"+t(e.getUTCMinutes())+":"+t(e.getUTCSeconds())+"."+((e.getUTCMilliseconds()/1e3).toFixed(3)+"").slice(2,5)+"Z"}(),iKey:e,name:"Microsoft.ApplicationInsights."+e.replace(/-/g,"")+"."+t,sampleRate:100,tags:n,data:{baseData:{ver:2}}}}var h=d.url||y.src;if(h){function a(e){var t,n,a,i,r,o,s,c,u,p,l;g=!0,m.queue=[],f||(f=!0,t=h,s=function(){var e={},t=d.connectionString;if(t)for(var n=t.split(";"),a=0;a<n.length;a++){var i=n[a].split("=");2===i.length&&(e[i[0][b]()]=i[1])}if(!e[C]){var r=e.endpointsuffix,o=r?e.location:null;e[C]="https://"+(o?o+".":"")+"dc."+(r||"services.visualstudio.com")}return e}(),c=s[D]||d[D]||"",u=s[C],p=u?u+"/v2/track":d.endpointUrl,(l=[]).push((n="SDK LOAD Failure: Failed to load Application Insights SDK script (See stack for details)",a=t,i=p,(o=(r=v(c,"Exception")).data).baseType="ExceptionData",o.baseData.exceptions=[{typeName:"SDKLoadFailed",message:n.replace(/\./g,"-"),hasFullStack:!1,stack:n+"Snippet failed to load ["+a+"] -- Telemetry is disabled Help Link: https://go.microsoft.com/fwlink/?linkid=2128109 Host: "+(S&&S.pathname||"_unknown_")+" Endpoint: "+i,parsedStack:[]}],r)),l.push(function(e,t,n,a){var i=v(c,"Message"),r=i.data;r.baseType="MessageData";var o=r.baseData;return o.message='AI (Internal): 99 message:"'+("SDK LOAD Failure: Failed to load Application Insights SDK script (See stack for details) ("+n+")").replace(/\"/g,"")+'"',o.properties={endpoint:a},i}(0,0,t,p)),function(e,t){if(JSON){var n=T.fetch;if(n&&!y.useXhr)n(t,{method:N,body:JSON.stringify(e),mode:"cors"});else if(XMLHttpRequest){var a=new XMLHttpRequest;a.open(N,t),a.setRequestHeader("Content-type","application/json"),a.send(JSON.stringify(e))}}}(l,p))}function i(e,t){f||setTimeout(function(){!t&&m.core||a()},500)}var e=function(){var n=l.createElement(k);n.src=h;var e=y[w];return!e&&""!==e||"undefined"==n[w]||(n[w]=e),n.onload=i,n.onerror=a,n.onreadystatechange=function(e,t){"loaded"!==n.readyState&&"complete"!==n.readyState||i(0,t)},n}();y.ld<0?l.getElementsByTagName("head")[0].appendChild(e):setTimeout(function(){l.getElementsByTagName(k)[0].parentNode.appendChild(e)},y.ld||0)}try{m.cookie=l.cookie}catch(p){}function t(e){for(;e.length;)!function(t){m[t]=function(){var e=arguments;g||m.queue.push(function(){m[t].apply(m,e)})}}(e.pop())}var n="track",r="TrackPage",o="TrackEvent";t([n+"Event",n+"PageView",n+"Exception",n+"Trace",n+"DependencyData",n+"Metric",n+"PageViewPerformance","start"+r,"stop"+r,"start"+o,"stop"+o,"addTelemetryInitializer","setAuthenticatedUserContext","clearAuthenticatedUserContext","flush"]),m.SeverityLevel={Verbose:0,Information:1,Warning:2,Error:3,Critical:4};var s=(d.extensionConfig||{}).ApplicationInsightsAnalytics||{};if(!0!==d[I]&&!0!==s[I]){var c="onerror";t(["_"+c]);var u=T[c];T[c]=function(e,t,n,a,i){var r=u&&u(e,t,n,a,i);return!0!==r&&m["_"+c]({message:e,url:t,lineNumber:n,columnNumber:a,error:i}),r},d.autoExceptionInstrumented=!0}return m}(y.cfg);function a(){y.onInit&&y.onInit(n)}(T[t]=n).queue&&0===n.queue.length?(n.queue.push(a),n.trackPageView({})):a()}(window,document,{
src: "https://js.monitor.azure.com/scripts/b/ai.2.min.js", // The SDK URL Source
// name: "appInsights", // Global SDK Instance name defaults to "appInsights" when not supplied
// ld: 0, // Defines the load delay (in ms) before attempting to load the sdk. -1 = block page load and add to head. (default) = 0ms load after timeout,
// useXhr: 1, // Use XHR instead of fetch to report failures (if available),
crossOrigin: "anonymous", // When supplied this will add the provided value as the cross origin attribute on the script tag
// onInit: null, // Once the application insights instance has loaded and initialized this callback function will be called with 1 argument -- the sdk instance (DO NOT ADD anything to the sdk.queue -- As they won't get called)
cfg: { // Application Insights Configuration
    instrumentationKey: "${instrumentationKey}"
}});
             `,
          },
        ],
      };
    },
  };
};



================================================
FILE: website/src/components/Auth.js
================================================
import React from 'react';
import {useLocation} from "react-router";
import CodeBlock from '@theme/CodeBlock';
import queryString from 'query-string';

function Auth() {
  const search = useLocation().search;
  const params = queryString.parse(search);

  if (params.error) {
    let buff = Buffer.from(params.error, 'base64');
    let text = buff.toString('ascii');
    return (
      <div>
        <p>
          Error on authenticating with the <code>{params.segment}</code> API, please provide the following error message
          in a <a href='https://github.com/JanDeDobbeleer/oh-my-posh/issues/new/choose'>ticket</a> in
          case this was unexpected.
        </p>
        <CodeBlock className="language-jsstacktrace">
          {text}
        </CodeBlock>
      </div>
    );
  }

  const config = `
  {
    "type": "${params.segment}",
    ...
    "properties": {
      // highlight-start
      "access_token": "${params.access_token}",
      "refresh_token": "${params.refresh_token}",
      "expires_in": ${params.expires_in}
      // highlight-end
    }
  }
  `;

  return (
    <div>
        <p>
          Use the following snippet to adjust your segment and enable the authentication.
        </p>
      <CodeBlock className="language-json" title="config.omp.json">
        {config}
      </CodeBlock>
    </div>
  );
}

export default Auth;



================================================
FILE: website/src/components/Config.js
================================================
import React from 'react';
import CodeBlock from '@theme/CodeBlock';
import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";
import YAML from 'yaml';
import TOML from '@iarna/toml';

function Config(props) {

  const {data} = props;

  const patchTomlData = () => {
    if (data?.properties) {
      const properties = data.properties;
      delete data.properties;

      return {
        ...data,
        blocks: {
          segments: {
            properties: properties
          }
        }
      };
    }

    return data;
  };

  return (
    <Tabs
        defaultValue="json"
        groupId="sample"
        values={[
          { label: 'json', value: 'json', },
          { label: 'yaml', value: 'yaml', },
          { label: 'toml', value: 'toml', },
        ]
      }>
      <TabItem value="json">
        <CodeBlock className="language-json">
          {JSON.stringify(data, null, 2)}
        </CodeBlock>
      </TabItem>
      <TabItem value="yaml">
        <CodeBlock className="language-yaml">
          {YAML.stringify(data)}
        </CodeBlock>
      </TabItem>
      <TabItem value="toml">
        <CodeBlock className="language-toml">
          {TOML.stringify(patchTomlData())}
        </CodeBlock>
      </TabItem>
    </Tabs>
  );
}

export default Config;



================================================
FILE: website/src/css/custom.css
================================================
/* stylelint-disable docusaurus/copyright-header */
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #2c7ae0;
  --ifm-color-primary-dark: rgb(38, 103, 189);
  --ifm-color-primary-darker: rgb(28, 75, 138);
  --ifm-color-primary-darkest: rgb(19, 51, 94);
  --ifm-color-primary-light: rgb(74, 143, 232);
  --ifm-color-primary-lighter: rgb(95, 157, 237);
  --ifm-color-primary-lightest: rgb(8, 9, 10);
  --ifm-code-font-size: 95%;
  --ifm-pre-background: #232136;
}

.docusaurus-highlight-code-line {
  background-color: rgb(72, 77, 91);
  display: block;
  margin: 0 calc(-1 * var(--ifm-pre-padding));
  padding: 0 var(--ifm-pre-padding);
}

.badge {
  display: none !important;
}

.hero {
  background-color: #173448;
}

.hero--image {
  margin-top: 4rem;
}

.header-github-link:hover {
  opacity: 0.6;
}

.header-github-link:before {
  content: "";
  width: 24px;
  height: 24px;
  display: flex;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
}

html[data-theme="dark"] .header-github-link:before {
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='white' d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
}

.header-bluesky-link {
  padding-top: 0px;
}

.header-bluesky-link:hover {
  opacity: 0.6;
}

.header-bluesky-link:before {
  content: "@";
  color: #4163EB;
  font-style: bold;
  font-size: 24px;
  padding-right: 10px;
}

.header-affiliate-link:hover {
  opacity: 0.6;
}

.header-affiliate-link:before {
  content: "";
  width: 24px;
  height: 24px;
  display: flex;
  background: url("data:image/svg+xml,%3Csvg fill='black' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' class='css-1hsn8wk'%3E%3Cpath d='M51.0696 4.92194H88.7341C94.8309 4.92194 99.7736 10.0293 99.7736 16.3295V60.6175C99.7736 66.9179 94.8309 72.0252 88.7341 72.0252H34.835L51.0696 4.92194Z' fill='currentColor'%3E%3C/path%3E%3Cpath d='M41.2866 17.6346H10.9455C4.90046 17.6346 0 22.7419 0 29.0421V73.3302C0 79.6305 4.90046 84.7378 10.9455 84.7378H48.2888L49.7863 78.495H26.6878L41.2866 17.6346Z' %3E%3C/path%3E%3C/svg%3E")
    no-repeat;
}

html[data-theme="dark"] .header-affiliate-link:before {
  background: url("data:image/svg+xml,%3Csvg fill='white' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' class='css-1hsn8wk'%3E%3Cpath d='M51.0696 4.92194H88.7341C94.8309 4.92194 99.7736 10.0293 99.7736 16.3295V60.6175C99.7736 66.9179 94.8309 72.0252 88.7341 72.0252H34.835L51.0696 4.92194Z' %3E%3C/path%3E%3Cpath d='M41.2866 17.6346H10.9455C4.90046 17.6346 0 22.7419 0 29.0421V73.3302C0 79.6305 4.90046 84.7378 10.9455 84.7378H48.2888L49.7863 78.495H26.6878L41.2866 17.6346Z' %3E%3C/path%3E%3C/svg%3E")
    no-repeat;
}

.header-discord-link {
  height: 28px;
}

.header-discord-link:hover {
  opacity: 0.6;
}

.header-discord-link:before {
  content: "";
  width: 24px;
  height: 24px;
  display: flex;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 127.14 96.36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill%3D%22%235865F2%22 d='M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z'/%3E%3C/svg%3E")
    no-repeat;
}

html[data-theme="dark"] .header-discord-link:before {
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 127.14 96.36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill%3D%22%235865F2%22 d='M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z'/%3E%3C/svg%3E")
    no-repeat;
}

/* Admonition */

div.theme-admonition.theme-admonition-tip.alert.alert--success {
  background-color: #9ccfd8;
  border-color: #56949f;
}

html[data-theme="dark"] div.theme-admonition.theme-admonition-tip {
  color: #102445;
}

html[data-theme="dark"] div.theme-admonition.theme-admonition-tip svg {
  fill: #102445;
}

html[data-theme="dark"] div.theme-admonition.theme-admonition-tip a {
  color: #102445;
}

iframe.youtube {
  width: 100%;
  margin-bottom: 15px;
}

@media screen and (max-width: 350px) {
  iframe.youtube {
    height: 200px;
  }
}

@media screen and (min-width: 350px) {
  iframe.youtube {
    height: 300px;
  }
}

@media screen and (min-width: 600px) {
  iframe.youtube {
    height: 400px;
  }
}

.winstore {
  width: 200px;
  border-radius: 8px;
  margin-top: 25px;
}

.withings {
  width: 150px;
}

[data-theme="light"] .withings path {
  fill: white;
}

[data-theme="dark"] .withings path {
  fill: black;
}

[data-theme="dark"] div.withings {
  background: white;
  padding: 17px 10px 10px 10px;
  display: inline;
  border-radius: 10px;
}

[data-theme="light"] div.withings {
  background: black;
  padding: 17px 10px 10px 10px;
  display: inline;
  border-radius: 10px;
}

h1.hero__title {
  color: white;
}

p.hero__subtitle {
  color: white;
}

a.getStarted_Sjon {
  color: white;
}

[data-theme="light"] .themedImage_ToTc {
  filter: invert(0%) sepia(8%) saturate(2885%) hue-rotate(67deg) brightness(84%)
    contrast(87%);
}

[data-theme="dark"] .themedImage_ToTc {
  filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(226deg)
    brightness(102%) contrast(101%);
}

/* Fonts */

@font-face {
  font-family: "Victor Mono";
  src: url('/static/fonts/VictorMono.ttf') format("truetype");
}

:root {
  --ifm-font-family-monospace: "Inter";
  --ifm-font-family-base: "Inter";
}

code {
  font-family: "Victor Mono", monospace;
}

code[class*="language-"],
pre[class*="language-"] {
  font-family: "Victor Mono", monospace;
}

/* Dev settings */

[data-theme="dark"]
  .themedImage_node_modules-\@docusaurus-theme-classic-lib-theme-ThemedImage-styles-module {
  filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(226deg)
    brightness(102%) contrast(101%);
}

[data-theme="light"]
  .themedImage_node_modules-\@docusaurus-theme-classic-lib-theme-ThemedImage-styles-module {
  filter: invert(0%) sepia(8%) saturate(2885%) hue-rotate(67deg) brightness(84%)
    contrast(87%);
}

a.getStarted_src-pages-styles-module {
  color: white;
}

table {
  /* We need this to be able to use border-radius. */
  border-collapse: separate;

  /* Add a 1px border spacing for out box-shadow to fit into. Increase this if you want to increase the border width. */
  border-spacing: 1px;
}

table th,
table td {
  /* Remove any borders from our stylesheet. */
  border: 0;

  /* Use the spread value on the box-shadow to set the border width. */
  box-shadow: 0 0 0 1px #c8c9cc;
}

table th:first-child {
  border-top-left-radius: 6.4px;
}

table th:last-child {
  border-top-right-radius: 6.4px;
}

table tr:last-child td:first-child {
  border-bottom-left-radius: 6.4px;
}

table tr:last-child td:last-child {
  border-bottom-right-radius: 6.4px;
}



================================================
FILE: website/src/css/prism-rose-pine-moon.css
================================================
/**
 * MIT License
 * Rosé Pine Theme
 * https://github.com/rose-pine
 * Ported for PrismJS by fvrests [@fvrests]
 */

 code[class*="language-"],
 pre[class*="language-"] {
   color: #e0def4;
   background: #232136;
   font-family: "Cartograph CF", ui-monospace, SFMono-Regular, Menlo, Monaco,
     Consolas, "Liberation Mono", "Courier New", monospace;
   text-align: left;
   white-space: pre;
   word-spacing: normal;
   word-break: normal;
   word-wrap: normal;
   line-height: 1.5;

   -moz-tab-size: 4;
   -o-tab-size: 4;
   tab-size: 4;

   -webkit-hyphens: none;
   -moz-hyphens: none;
   -ms-hyphens: none;
   hyphens: none;

   @media print {
     text-shadow: none;
   }
 }

 /* Selection */
 code[class*="language-"]::-moz-selection,
 pre[class*="language-"]::-moz-selection,
 code[class*="language-"] ::-moz-selection,
 pre[class*="language-"] ::-moz-selection {
   background: #44415a;
 }

 code[class*="language-"]::selection,
 pre[class*="language-"]::selection,
 code[class*="language-"] ::selection,
 pre[class*="language-"] ::selection {
   background: #44415a;
 }

 /* Code (block & inline) */
 :not(pre) > code[class*="language-"],
 pre[class*="language-"] {
   color: #e0def4;
   background: #232136;
 }

 /* Code blocks */
 pre[class*="language-"] {
   padding: 1em;
   margin: 0.5em 0;
   overflow: auto;
 }

 /* Inline code */
 :not(pre) > code[class*="language-"] {
   padding: 0.1em;
   border-radius: 0.3em;
   white-space: normal;
   color: #e0def4;
   background: #232136;
 }

 /* Text style & opacity */
 .token.entity {
   cursor: help;
 }

 .token.important,
 .token.bold {
   font-weight: bold;
 }

 .token.italic,
 .token.selector,
 .token.doctype,
 .token.attr-name,
 .token.inserted,
 .token.deleted,
 .token.comment,
 .token.prolog,
 .token.cdata,
 .token.constant,
 .token.parameter,
 .token.url {
   font-style: italic;
 }

 .token.url {
   text-decoration: underline;
 }

 .namespace {
   opacity: 0.7;
 }

 /* Syntax highlighting */
 .token.constant {
   color: #e0def4;
 }

 .token.comment,
 .token.prolog,
 .token.cdata,
 .token.punctuation {
   color: #908caa;
 }

 .token.delimiter,
 .token.important,
 .token.atrule,
 .token.operator,
 .token.keyword {
   color: #3e8fb0;
 }

 .token.tag,
 .token.tag .punctuation,
 .token.doctype,
 .token.variable,
 .token.regex,
 .token.class-name,
 .token.selector,
 .token.inserted {
   color: #9ccfd8;
 }

 .token.boolean,
 .token.entity,
 .token.number,
 .token.symbol,
 .token.function {
   color: #ea9a97;
 }

 .token.string,
 .token.char,
 .token.property,
 .token.attr-value,
 .token.attr-value .punctuation {
   color: #f6c177;
 }

 .token.parameter,
 .token.url,
 .token.name,
 .token.attr-name,
 .token.builtin {
   color: #c4a7e7;
 }

 .token.deleted {
   color: #eb6f92;
 }

 /* Insertions & deletions */
 .token.inserted {
   background: rgba(156 207 216 0.12);
 }

 .token.deleted {
   background: rgba(235 111 146 0.12);
 }

 /* Line highlighting */
 pre[data-line] {
   position: relative;
 }

 pre[class*="language-"] > code[class*="language-"] {
   position: relative;
   z-index: 1;
 }

 .line-highlight,
 .highlight-lines .highlighted {
   position: absolute;
   left: 0;
   right: 0;
   padding: inherit 0;
   margin-top: 1em;

   background: #44415a;
   box-shadow: inset 5px 0 0 #e0def4;

   z-index: 0;

   pointer-events: none;

   line-height: inherit;
   white-space: pre;
 }



================================================
FILE: website/src/pages/index.js
================================================
import Link from "@docusaurus/Link";
import useBaseUrl from "@docusaurus/useBaseUrl";
import useDocusaurusContext from "@docusaurus/useDocusaurusContext";
import Layout from "@theme/Layout";
import classnames from "classnames";
import React from "react";
import styles from "./styles.module.css";

const features = [
  {
    title: <>Colors</>,
    description: (
      <>
        Oh My Posh enables you to use the full color set of your terminal
        by using colors to define and render the prompt.
      </>
    ),
  },
  {
    title: <>Customizable</>,
    description:
      <>
        Easily adjust existing themes or create your own. From standard segments
        all the way to custom implementations.
      </>,
  },
  {
    title: <>Portable</>,
    description: (
      <>
        No matter which shell you're using, or even how many, you can
        carry the configuration from one shell and/or machine to another
        for the same prompt everywhere you work.
      </>
    ),
  },
];

function Feature({ imageUrl, title, description }) {
  const imgUrl = useBaseUrl(imageUrl);
  return (
    <div className={classnames("col col--4", styles.feature)}>
      {imgUrl && (
        <div className="text--center">
          <img className={styles.featureImage} src={imgUrl} alt={title} />
        </div>
      )}
      <h3>{title}</h3>
      <p>{description}</p>
    </div>
  );
}

function Home() {
  const context = useDocusaurusContext();
  const { siteConfig = {} } = context;
  return (
    <Layout title="Home" description={`${siteConfig.tagline}`}>
      <header className={classnames("hero hero--primary", styles.heroBanner)}>
        <div className="container">
          <h1 className="hero__title">{siteConfig.title}</h1>
          <p className="hero__subtitle">{siteConfig.tagline}</p>
          <div className={styles.buttons}>
            <Link
              className={classnames(
                "button button--primary button--lg",
                styles.getStarted
              )}
              to={useBaseUrl("docs/")}
            >
              Get Started &rarr;
            </Link>
            <Link
              className={classnames(
                "button button--outline button--lg",
                styles.getStarted
              )}
              to={useBaseUrl("docs/themes")}
            >
              See themes &rarr;
            </Link>
          </div>
          <img class="hero--image" src="/img/hero.png" alt="Oh My Posh prompt"></img>
        </div>
      </header>
      <main>
        {features && features.length > 0 && (
          <section className={styles.features}>
            <div className="container">
              <div className="row">
                {features.map((props, idx) => (
                  <Feature key={idx} {...props} />
                ))}
              </div>
            </div>
          </section>
        )}
      </main>
    </Layout>
  );
}

export default Home;



================================================
FILE: website/src/pages/privacy.mdx
================================================
---
title: Privacy
description: the privacy page
hide_table_of_contents: true
---

# Privacy

## What information does Oh My Posh collect?

Oh My Posh and its developer take your privacy very seriously.
Beyond the information installer methods provides to developers that covered
provided by the package manager privacy policies,
we use _no third-party analytics or advertising frameworks inside the executable_.
Oh My Posh logs no information on you and has no interest in doing so.

## What information does the Oh My Posh website collect?

The Oh My Posh website uses Application Insights [custom events][ai] to log anonymous usage data.
We do not collect any personally identifiable information.

Oh My Posh does not collect, transmit, distribute or sell your data.

[ai]: https://learn.microsoft.com/en-us/azure/azure-monitor/app/api-custom-events-metrics#trackevent






================================================
FILE: website/src/pages/styles.module.css
================================================
/* stylelint-disable docusaurus/copyright-header */

/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.heroBanner {
  padding: 4rem 0;
  min-height: 60vh;
  text-align: center;
  position: relative;
  overflow: hidden;
}

@media screen and (max-width: 966px) {
  .heroBanner {
    padding: 2rem 0;
  }
}

.buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem 1.5rem;
  align-items: center;
  justify-content: center;
}

.features {
  display: flex;
  align-items: center;
  padding: 2rem 0;
  width: 100%;
}

.featureImage {
  height: 200px;
  width: 200px;
}

.getStarted {
  border-style: solid;
  border-width: 1px;
}



================================================
FILE: website/static/codepoints.csv
================================================
f500,f0001,vector_square
f501,f0003,access_point
f502,f0002,access_point_network
f503,f0004,account
f504,f0005,account_alert
f505,f0006,account_box
f506,f0007,account_box_outline
f507,f0008,account_check
f508,f0009,account_circle
f509,f000a,account_convert
f50a,f000b,account_key
f50c,f000d,account_minus
f50d,f000e,account_multiple
f50e,f000f,account_multiple_outline
f50f,f0010,account_multiple_plus
f510,f0011,account_network
f511,f0012,account_off
f512,f0013,account_outline
f513,f0014,account_plus
f514,f0015,account_remove
f515,f0016,account_search
f516,f0017,account_star
f517,f0018,orbit
f518,f0019,account_switch
f519,f001a,adjust
f51a,f001b,air_conditioner
f51b,f001c,airballoon
f51c,f001d,airplane
f51d,f001e,airplane_off
f51f,f0020,alarm
f520,f0021,alarm_check
f521,f0022,alarm_multiple
f522,f0023,alarm_off
f523,f0024,alarm_plus
f524,f0025,album
f525,f0026,alert
f526,f0027,alert_box
f527,f0028,alert_circle
f528,f0029,alert_octagon
f529,f002a,alert_outline
f52a,f002b,alpha
f52b,f002c,alphabetical
f52e,f002f,ambulance
f52f,f0030,amplifier
f530,f0031,anchor
f531,f0032,android
f533,f0034,android_studio
f534,f0035,apple
f535,f0036,apple_finder
f536,f0037,apple_ios
f538,f0039,apple_safari
f539,f003a,font_awesome
f53a,f003b,apps
f53b,f003c,archive
f53c,f003d,arrange_bring_forward
f53d,f003e,arrange_bring_to_front
f53e,f003f,arrange_send_backward
f53f,f0040,arrange_send_to_back
f540,f0041,arrow_all
f541,f0042,arrow_bottom_left
f542,f0043,arrow_bottom_right
f543,f0044,arrow_collapse_all
f544,f0045,arrow_down
f545,f0046,arrow_down_thick
f546,f0047,arrow_down_bold_circle
f547,f0048,arrow_down_bold_circle_outline
f548,f0049,arrow_down_bold_hexagon_outline
f549,f004a,arrow_down_drop_circle
f54a,f004b,arrow_down_drop_circle_outline
f54b,f004c,arrow_expand_all
f54c,f004d,arrow_left
f54d,f004e,arrow_left_thick
f54e,f004f,arrow_left_bold_circle
f54f,f0050,arrow_left_bold_circle_outline
f550,f0051,arrow_left_bold_hexagon_outline
f551,f0052,arrow_left_drop_circle
f552,f0053,arrow_left_drop_circle_outline
f553,f0054,arrow_right
f554,f0055,arrow_right_thick
f555,f0056,arrow_right_bold_circle
f556,f0057,arrow_right_bold_circle_outline
f557,f0058,arrow_right_bold_hexagon_outline
f558,f0059,arrow_right_drop_circle
f559,f005a,arrow_right_drop_circle_outline
f55a,f005b,arrow_top_left
f55b,f005c,arrow_top_right
f55c,f005d,arrow_up
f55d,f005e,arrow_up_thick
f55e,f005f,arrow_up_bold_circle
f55f,f0060,arrow_up_bold_circle_outline
f560,f0061,arrow_up_bold_hexagon_outline
f561,f0062,arrow_up_drop_circle
f562,f0063,arrow_up_drop_circle_outline
f563,f0064,assistant
f564,f0065,at
f565,f0066,attachment
f567,f0068,auto_fix
f568,f0069,auto_upload
f569,f006a,autorenew
f56a,f006b,av_timer
f56b,f006c,baby
f56c,f006d,backburger
f56d,f006e,backspace
f56e,f006f,backup_restore
f56f,f0070,bank
f570,f0071,barcode
f571,f0072,barcode_scan
f572,f0073,barley
f573,f0074,barrel
f575,f0076,basket
f576,f0077,basket_fill
f577,f0078,basket_unfill
f578,f0079,battery
f579,f007a,battery_10
f57a,f007b,battery_20
f57b,f007c,battery_30
f57c,f007d,battery_40
f57d,f007e,battery_50
f57e,f007f,battery_60
f57f,f0080,battery_70
f580,f0081,battery_80
f581,f0082,battery_90
f582,f0083,battery_alert
f583,f0084,battery_charging
f584,f0085,battery_charging_100
f585,f0086,battery_charging_20
f586,f0087,battery_charging_30
f587,f0088,battery_charging_40
f588,f0089,battery_charging_60
f589,f008a,battery_charging_80
f58a,f008b,battery_charging_90
f58b,f17e4,battery_minus
f58c,f008d,battery_negative
f58d,f008e,battery_outline
f58e,f17e6,battery_plus
f58f,f0090,battery_positive
f590,f0091,battery_unknown
f591,f0092,beach
f592,f0093,flask
f593,f0094,flask_empty
f594,f0095,flask_empty_outline
f595,f0096,flask_outline
f597,f0098,beer
f599,f009a,bell
f59a,f009b,bell_off
f59b,f009c,bell_outline
f59c,f009d,bell_plus
f59d,f009e,bell_ring
f59e,f009f,bell_ring_outline
f59f,f00a0,bell_sleep
f5a0,f00a1,beta
f5a2,f00a3,bike
f5a4,f00a5,binoculars
f5a5,f00a6,bio
f5a6,f00a7,biohazard
f5a7,f00a8,bitbucket
f5a8,f00a9,black_mesa
f5aa,f0ceb,blender
f5ab,f00ac,blinds
f5ac,f00ad,block_helper
f5ae,f00af,bluetooth
f5af,f00b0,bluetooth_audio
f5b0,f00b1,bluetooth_connect
f5b1,f00b2,bluetooth_off
f5b2,f00b3,bluetooth_settings
f5b3,f00b4,bluetooth_transfer
f5b4,f00b5,blur
f5b5,f00b6,blur_linear
f5b6,f00b7,blur_off
f5b7,f00b8,blur_radial
f5b8,f00b9,bone
f5b9,f00ba,book
f5ba,f00bb,book_multiple
f5bc,f00bd,book_open
f5bd,f14f7,book_open_variant
f5be,f00bf,book_variant
f5bf,f00c0,bookmark
f5c0,f00c1,bookmark_check
f5c1,f00c2,bookmark_music
f5c2,f00c3,bookmark_outline
f5c3,f00c4,bookmark_plus_outline
f5c4,f00c5,bookmark_plus
f5c5,f00c6,bookmark_remove
f5c6,f00c7,border_all
f5c7,f00c8,border_bottom
f5c8,f00c9,border_color
f5c9,f00ca,border_horizontal
f5ca,f00cb,border_inside
f5cb,f00cc,border_left
f5cc,f00cd,border_none
f5cd,f00ce,border_outside
f5ce,f00cf,border_right
f5cf,f00d0,border_style
f5d0,f00d1,border_top
f5d1,f00d2,border_vertical
f5d2,f00d3,bowling
f5d3,f00d4,box
f5d4,f00d5,box_cutter
f5d5,f00d6,briefcase
f5d6,f00d7,briefcase_check
f5d7,f00d8,briefcase_download
f5d8,f00d9,briefcase_upload
f5d9,f00da,brightness_1
f5da,f00db,brightness_2
f5db,f00dc,brightness_3
f5dc,f00dd,brightness_4
f5dd,f00de,brightness_5
f5de,f00df,brightness_6
f5df,f00e0,brightness_7
f5e0,f00e1,brightness_auto
f5e1,f00e2,broom
f5e2,f00e3,brush
f5e3,f00e4,bug
f5e4,f00e5,bulletin_board
f5e5,f00e6,bullhorn
f5e6,f00e7,bus
f5e7,f00e8,cached
f5e8,f00e9,cake
f5e9,f00ea,cake_layered
f5ea,f00eb,cake_variant
f5eb,f00ec,calculator
f5ec,f00ed,calendar
f5ed,f00ee,calendar_blank
f5ee,f00ef,calendar_check
f5ef,f00f0,calendar_clock
f5f0,f00f1,calendar_multiple
f5f1,f00f2,calendar_multiple_check
f5f2,f00f3,calendar_plus
f5f3,f00f4,calendar_remove
f5f4,f00f5,calendar_text
f5f5,f00f6,calendar_today
f5f6,f00f7,call_made
f5f7,f00f8,call_merge
f5f8,f00f9,call_missed
f5f9,f00fa,call_received
f5fa,f00fb,call_split
f5fb,f00fc,camcorder
f5fe,f00ff,camcorder_off
f5ff,f0100,camera
f600,f0101,camera_enhance
f601,f0102,camera_front
f602,f0103,camera_front_variant
f603,f0104,camera_iris
f604,f0105,camera_party_mode
f605,f0106,camera_rear
f606,f0107,camera_rear_variant
f607,f0108,camera_switch
f608,f0109,camera_timer
f609,f010a,candycane
f60a,f010b,car
f60b,f010c,car_battery
f60c,f010d,car_connected
f60d,f010e,car_wash
f60e,f010f,carrot
f60f,f0110,cart
f610,f0111,cart_outline
f611,f0112,cart_plus
f612,f0113,case_sensitive_alt
f613,f0114,cash
f614,f0115,cash_100
f615,f0116,cash_multiple
f617,f0118,cast
f618,f0119,cast_connected
f619,f011a,castle
f61a,f011b,cat
f61b,f011c,cellphone
f61d,f011e,cellphone_basic
f61e,f011f,cellphone_dock
f620,f0121,cellphone_link
f621,f0122,cellphone_link_off
f622,f0123,cellphone_settings
f623,f0124,certificate
f624,f0125,chair_school
f625,f0126,chart_arc
f626,f0127,chart_areaspline
f627,f0128,chart_bar
f628,f0129,chart_histogram
f629,f012a,chart_line
f62a,f012b,chart_pie
f62b,f012c,check
f62c,f012d,check_all
f62d,f012e,checkbox_blank
f62e,f0765,checkbox_blank_circle
f62f,f0766,checkbox_blank_circle_outline
f630,f0131,checkbox_blank_outline
f631,f0132,checkbox_marked
f632,f0133,checkbox_marked_circle
f633,f0134,checkbox_marked_circle_outline
f634,f0135,checkbox_marked_outline
f635,f0136,checkbox_multiple_blank
f636,f0137,checkbox_multiple_blank_outline
f637,f0138,checkbox_multiple_marked
f638,f0139,checkbox_multiple_marked_outline
f639,f013a,checkerboard
f63a,f013b,chemical_weapon
f63b,f013c,chevron_double_down
f63c,f013d,chevron_double_left
f63d,f013e,chevron_double_right
f63e,f013f,chevron_double_up
f63f,f0140,chevron_down
f640,f0141,chevron_left
f641,f0142,chevron_right
f642,f0143,chevron_up
f643,f0144,church
f645,f0146,city
f646,f0147,clipboard
f647,f0148,clipboard_account
f648,f0149,clipboard_alert
f649,f014a,clipboard_arrow_down
f64a,f014b,clipboard_arrow_left
f64b,f014e,clipboard_check
f64c,f014c,clipboard_outline
f64d,f014d,clipboard_text
f64e,f014f,clippy
f64f,f0954,clock
f650,f0151,clock_end
f651,f0152,clock_fast
f652,f0153,clock_in
f653,f0154,clock_out
f654,f0155,clock_start
f655,f0156,close
f656,f0157,close_box
f657,f0158,close_box_outline
f658,f0159,close_circle
f659,f015a,close_circle_outline
f65a,f015b,close_network
f65b,f015c,close_octagon
f65c,f015d,close_octagon_outline
f65d,f015e,closed_caption
f65e,f015f,cloud
f65f,f0160,cloud_check
f660,f0161,cloud_circle
f661,f0162,cloud_download
f662,f0163,cloud_outline
f663,f0164,cloud_off_outline
f664,f0165,cloud_print
f665,f0166,cloud_print_outline
f666,f0167,cloud_upload
f667,f0168,code_array
f668,f0169,code_braces
f669,f016a,code_brackets
f66a,f016b,code_equal
f66b,f016c,code_greater_than
f66c,f016d,code_greater_than_or_equal
f66d,f016e,code_less_than
f66e,f016f,code_less_than_or_equal
f66f,f0170,code_not_equal
f670,f0171,code_not_equal_variant
f671,f0172,code_parentheses
f672,f0173,code_string
f673,f0174,code_tags
f674,f0175,codepen
f675,f0176,coffee
f676,f0177,coffee_to_go
f678,f0179,color_helper
f679,f017a,comment
f67a,f017b,comment_account
f67b,f017c,comment_account_outline
f67c,f017d,comment_alert
f67d,f017e,comment_alert_outline
f67e,f017f,comment_check
f67f,f0180,comment_check_outline
f680,f0181,comment_multiple_outline
f681,f0182,comment_outline
f682,f0183,comment_plus_outline
f683,f0184,comment_processing
f684,f0185,comment_processing_outline
f685,f0186,comment_question_outline
f686,f0187,comment_remove_outline
f687,f0188,comment_text
f688,f0189,comment_text_outline
f689,f018a,compare
f68a,f018b,compass
f68b,f018c,compass_outline
f68c,f018d,console
f68e,f018f,content_copy
f68f,f0190,content_cut
f690,f0191,content_duplicate
f691,f0192,content_paste
f692,f0193,content_save
f693,f0194,content_save_all
f694,f0195,contrast
f695,f0196,contrast_box
f696,f0197,contrast_circle
f697,f0198,cookie
f698,f0199,counter
f699,f019a,cow
f69a,f0fef,credit_card
f69b,f0ff0,credit_card_multiple
f69c,f0ff4,credit_card_scan
f69d,f019e,crop
f69e,f019f,crop_free
f69f,f01a0,crop_landscape
f6a0,f01a1,crop_portrait
f6a1,f01a2,crop_square
f6a2,f01a3,crosshairs
f6a3,f01a4,crosshairs_gps
f6a4,f01a5,crown
f6a5,f01a6,cube
f6a6,f01a7,cube_outline
f6a7,f01a8,cube_send
f6a8,f01a9,cube_unfolded
f6a9,f01aa,cup
f6aa,f01ab,cup_water
f6ab,f01ac,currency_btc
f6ac,f01ad,currency_eur
f6ad,f01ae,currency_gbp
f6ae,f01af,currency_inr
f6af,f01b0,currency_ngn
f6b0,f01b1,currency_rub
f6b1,f01b2,currency_try
f6b2,f01c1,currency_usd
f6b3,f01c0,cursor_default
f6b4,f01bf,cursor_default_outline
f6b5,f01be,cursor_move
f6b6,f01bd,cursor_pointer
f6b7,f01bc,database
f6b8,f01bb,database_minus
f6b9,f01ba,database_plus
f6ba,f01b9,debug_step_into
f6bb,f01b8,debug_step_out
f6bc,f01b7,debug_step_over
f6bd,f01b6,decimal_decrease
f6be,f01b5,decimal_increase
f6bf,f01b4,delete
f6c0,f01b3,delete_variant
f6c1,f01c2,delta
f6c2,f01c3,deskphone
f6c3,f01c4,desktop_mac
f6c4,f01c5,desktop_tower
f6c5,f01c6,details
f6c6,f01c7,deviantart
f6c7,f0b8a,diamond
f6c8,f0674,creation
f6c9,f01ca,dice_1
f6ca,f01cb,dice_2
f6cb,f01cc,dice_3
f6cc,f01cd,dice_4
f6cd,f01ce,dice_5
f6ce,f01cf,dice_6
f6cf,f01d0,directions
f6d1,f01d2,disqus
f6d3,f01d4,division
f6d4,f01d5,division_box
f6d5,f01d6,dns
f6d6,f01d7,domain
f6d7,f01d8,dots_horizontal
f6d8,f01d9,dots_vertical
f6d9,f01da,download
f6da,f01db,drag
f6db,f01dc,drag_horizontal
f6dc,f01dd,drag_vertical
f6dd,f01de,drawing
f6de,f01df,drawing_box
f6e1,f01e2,drone
f6e2,f01e3,dropbox
f6e3,f01e4,drupal
f6e4,f01e5,duck
f6e5,f01e6,dumbbell
f6e6,f01e7,earth
f6e7,f01e8,earth_off
f6e9,f01ea,eject
f6ea,f01eb,elevation_decline
f6eb,f01ec,elevation_rise
f6ec,f01ed,elevator
f6ed,f01ee,email
f6ee,f01ef,email_open
f6ef,f01f0,email_outline
f6f1,f0c68,emoticon
f6f2,f0c6b,emoticon_cool
f6f3,f0c6f,emoticon_devil
f6f4,f0c71,emoticon_happy
f6f5,f0c74,emoticon_neutral
f6f6,f01f7,emoticon_poop
f6f7,f0c76,emoticon_sad
f6f8,f01f9,emoticon_tongue
f6f9,f01fa,engine
f6fa,f01fb,engine_outline
f6fb,f01fc,equal
f6fc,f01fd,equal_box
f6fd,f01fe,eraser
f6fe,f01ff,escalator
f6ff,f0200,ethernet
f700,f0201,ethernet_cable
f701,f0202,ethernet_cable_off
f703,f0204,evernote
f704,f0205,exclamation
f705,f05fc,exit_to_app
f706,f0207,export
f707,f0208,eye
f708,f0209,eye_off
f709,f020a,eyedropper
f70a,f020b,eyedropper_variant
f70b,f020c,facebook
f70d,f020e,facebook_messenger
f70e,f020f,factory
f70f,f0210,fan
f710,f0211,fast_forward
f711,f0212,fax
f712,f0213,ferry
f713,f0214,file
f714,f0215,file_chart
f715,f0216,file_check
f716,f0217,file_cloud
f717,f0218,file_delimited
f718,f0219,file_document
f71a,f021b,file_excel
f71b,f021c,file_excel_box
f71c,f021d,file_export
f71d,f021e,file_find
f71e,f021f,file_image
f71f,f0220,file_import
f720,f0221,file_lock
f721,f0222,file_multiple
f722,f0223,file_music
f723,f0224,file_outline
f725,f0226,file_pdf_box
f726,f0227,file_powerpoint
f727,f0228,file_powerpoint_box
f728,f0229,file_presentation_box
f729,f022a,file_send
f72a,f022b,file_video
f72b,f022c,file_word
f72c,f022d,file_word_box
f72e,f022f,film
f72f,f0230,filmstrip
f730,f0231,filmstrip_off
f731,f0232,filter
f732,f0233,filter_outline
f733,f0234,filter_remove
f734,f0235,filter_remove_outline
f735,f0236,filter_variant
f736,f0237,fingerprint
f737,f0238,fire
f738,f0239,firefox
f739,f023a,fish
f73a,f023b,flag
f73b,f023c,flag_checkered
f73c,f023d,flag_outline
f73d,f023e,flag_variant_outline
f73e,f023f,flag_triangle
f73f,f0240,flag_variant
f740,f0241,flash
f741,f0242,flash_auto
f742,f0243,flash_off
f743,f0244,flashlight
f744,f0245,flashlight_off
f746,f0247,flip_to_back
f747,f0248,flip_to_front
f748,f0249,floppy
f749,f024a,flower
f74a,f024b,folder
f74b,f024c,folder_account
f74c,f024d,folder_download
f74d,f024e,folder_google_drive
f74e,f024f,folder_image
f74f,f0250,folder_lock
f750,f0251,folder_lock_open
f751,f0252,folder_move
f752,f0253,folder_multiple
f753,f0254,folder_multiple_image
f754,f0255,folder_multiple_outline
f755,f0256,folder_outline
f756,f0257,folder_plus
f757,f0258,folder_remove
f758,f0259,folder_upload
f759,f025a,food
f75a,f025b,food_apple
f75b,f025c,food_variant
f75c,f025d,football
f75d,f025e,football_australian
f75e,f025f,football_helmet
f75f,f0260,format_align_center
f760,f0261,format_align_justify
f761,f0262,format_align_left
f762,f0263,format_align_right
f763,f0264,format_bold
f764,f0265,format_clear
f765,f0266,format_color_fill
f766,f0267,format_float_center
f767,f0268,format_float_left
f768,f0269,format_float_none
f769,f026a,format_float_right
f76a,f026b,format_header_1
f76b,f026c,format_header_2
f76c,f026d,format_header_3
f76d,f026e,format_header_4
f76e,f026f,format_header_5
f76f,f0270,format_header_6
f770,f0271,format_header_decrease
f771,f0272,format_header_equal
f772,f0273,format_header_increase
f773,f0274,format_header_pound
f774,f0275,format_indent_decrease
f775,f0276,format_indent_increase
f776,f0277,format_italic
f777,f0278,format_line_spacing
f778,f0279,format_list_bulleted
f779,f027a,format_list_bulleted_type
f77b,f027c,format_paint
f77c,f027d,format_paragraph
f77d,f027e,format_quote_close
f77e,f027f,format_size
f77f,f0280,format_strikethrough
f780,f0281,format_strikethrough_variant
f781,f0282,format_subscript
f782,f0283,format_superscript
f783,f0284,format_text
f784,f0285,format_textdirection_l_to_r
f785,f0286,format_textdirection_r_to_l
f786,f0287,format_underline
f787,f0288,format_wrap_inline
f788,f0289,format_wrap_square
f789,f028a,format_wrap_tight
f78a,f028b,format_wrap_top_bottom
f78b,f028c,forum
f78c,f028d,forward
f78e,f0290,fridge
f792,f0293,fullscreen
f793,f0294,fullscreen_exit
f794,f0295,function
f795,f0296,gamepad
f796,f0297,gamepad_variant
f797,f0298,gas_station
f798,f0299,gate
f799,f029a,gauge
f79a,f029b,gavel
f79b,f029c,gender_female
f79c,f029d,gender_male
f79d,f029e,gender_male_female
f79e,f029f,gender_transgender
f79f,f02a0,ghost
f7a0,f0e44,gift
f7a1,f02a2,git
f7a4,f02a5,glass_flute
f7a5,f02a6,glass_mug
f7a6,f02a7,glass_stange
f7a7,f02a8,glass_tulip
f7a9,f02aa,glasses
f7aa,f02ab,gmail
f7ab,f02ac,gnome
f7ac,f02ad,google
f7ad,f02ae,google_cardboard
f7ae,f02af,google_chrome
f7af,f02b0,google_circles
f7b0,f02b1,google_circles_communities
f7b1,f02b2,google_circles_extended
f7b2,f02b3,google_circles_group
f7b3,f02b4,google_controller
f7b4,f02b5,google_controller_off
f7b5,f02b6,google_drive
f7b6,f02b7,google_earth
f7b7,f02b8,google_glass
f7b8,f02b9,google_nearby
f7bb,f02bc,google_play
f7bc,f02bd,google_plus
f7be,f02bf,google_translate
f7c0,f02c1,grid
f7c1,f02c2,grid_off
f7c2,f02c3,group
f7c3,f02c4,guitar_electric
f7c4,f02c5,guitar_pick
f7c5,f02c6,guitar_pick_outline
f7c6,f02c7,hand_pointing_right
f7c7,f02c8,hanger
f7c9,f02ca,harddisk
f7ca,f02cb,headphones
f7cb,f02cc,headphones_box
f7cc,f02cd,headphones_settings
f7cd,f02ce,headset
f7ce,f02cf,headset_dock
f7cf,f02d0,headset_off
f7d0,f08d0,heart
f7d1,f02d2,heart_box
f7d2,f02d3,heart_box_outline
f7d3,f02d4,heart_broken
f7d4,f18a0,heart_outline
f7d5,f02d6,help
f7d6,f02d7,help_circle
f7d7,f02d8,hexagon
f7d8,f02d9,hexagon_outline
f7d9,f02da,history
f7da,f02db,hololens
f7db,f02dc,home
f7dc,f02dd,home_modern
f7dd,f02de,home_variant
f7de,f02df,hops
f7df,f0ff6,hospital
f7e0,f02e1,hospital_building
f7e1,f02e2,hospital_marker
f7e5,f02e6,human
f7e6,f02e7,human_child
f7e7,f02e8,human_male_female
f7e8,f02e9,image
f7e9,f02ea,image_album
f7ea,f02eb,image_area
f7eb,f02ec,image_area_close
f7ec,f02ed,image_broken
f7ed,f02ee,image_broken_variant
f7ef,f02f0,image_filter_black_white
f7f0,f02f1,image_filter_center_focus
f7f1,f02f2,image_filter_center_focus_weak
f7f2,f02f3,image_filter_drama
f7f3,f02f4,image_filter_frames
f7f4,f0509,image_filter_hdr
f7f5,f02f6,image_filter_none
f7f6,f02f7,image_filter_tilt_shift
f7f7,f02f8,image_filter_vintage
f7f8,f02f9,image_multiple
f7f9,f02fa,import
f7fa,f02fb,inbox_arrow_down
f7fb,f02fc,information
f7fc,f02fd,information_outline
f7fd,f02fe,instagram
f800,f0301,invert_colors
f801,f0302,jeepney
f802,f0303,jira
f803,f0304,jsfiddle
f804,f0305,keg
f805,f0306,key
f806,f0307,key_change
f807,f0308,key_minus
f808,f0309,key_plus
f809,f030a,key_remove
f80a,f030b,key_variant
f80b,f030c,keyboard
f80c,f030d,keyboard_backspace
f80d,f030e,keyboard_caps
f80e,f030f,keyboard_close
f80f,f0310,keyboard_off
f810,f0311,keyboard_return
f811,f0312,keyboard_tab
f812,f0313,keyboard_variant
f813,f0314,kodi
f814,f0315,label
f815,f0316,label_outline
f816,f0317,lan
f817,f0318,lan_connect
f818,f0319,lan_disconnect
f819,f031a,lan_pending
f81a,f031b,language_csharp
f81b,f031c,language_css3
f81c,f031d,language_html5
f81d,f031e,language_javascript
f81e,f031f,language_php
f81f,f0320,language_python
f821,f0322,laptop
f826,f0327,launch
f827,f0328,layers
f828,f0329,layers_off
f829,f032a,leaf
f82a,f032b,led_off
f82b,f032c,led_on
f82c,f032d,led_outline
f82d,f032e,led_variant_off
f82e,f032f,led_variant_on
f82f,f0330,led_variant_outline
f830,f0331,library
f834,f0335,lightbulb
f835,f0336,lightbulb_outline
f836,f0337,link
f837,f0338,link_off
f838,f0339,link_variant
f839,f033a,link_variant_off
f83a,f033b,linkedin
f83c,f033d,linux
f83d,f033e,lock
f83e,f033f,lock_open
f83f,f0340,lock_open_outline
f840,f0341,lock_outline
f841,f0342,login
f842,f0343,logout
f843,f0344,looks
f844,f0345,loupe
f845,f0346,lumx
f846,f0347,magnet
f847,f0348,magnet_on
f848,f0349,magnify
f849,f034a,magnify_minus
f84a,f034b,magnify_plus
f84c,f034d,map
f84d,f034e,map_marker
f84e,f034f,map_marker_circle
f84f,f0350,map_marker_multiple
f850,f0351,map_marker_off
f851,f0352,map_marker_radius
f852,f0353,margin
f854,f0355,marker_check
f856,f0357,material_ui
f857,f0358,math_compass
f85a,f035b,memory
f85b,f035c,menu
f85c,f035d,menu_down
f85d,f035e,menu_left
f85e,f035f,menu_right
f85f,f0360,menu_up
f860,f0361,message
f861,f0362,message_alert
f862,f0363,message_draw
f863,f0364,message_image
f864,f0365,message_outline
f865,f0366,message_processing
f866,f0367,message_reply
f867,f0368,message_reply_text
f868,f0369,message_text
f869,f036a,message_text_outline
f86a,f036b,message_video
f86b,f036c,microphone
f86c,f036d,microphone_off
f86d,f036e,microphone_outline
f86e,f036f,microphone_settings
f86f,f0370,microphone_variant
f870,f0371,microphone_variant_off
f871,f0372,microsoft
f872,f0373,minecraft
f873,f0374,minus
f874,f0375,minus_box
f875,f0376,minus_circle
f876,f0377,minus_circle_outline
f877,f0378,minus_network
f878,f0379,monitor
f879,f037a,monitor_multiple
f87a,f037b,more
f87b,f037c,motorbike
f87c,f037d,mouse
f87d,f037e,mouse_off
f87e,f037f,mouse_variant
f87f,f0380,mouse_variant_off
f880,f0381,movie
f881,f0382,multiplication
f882,f0383,multiplication_box
f883,f0384,music_box
f884,f0385,music_box_outline
f885,f0386,music_circle
f886,f0388,music_note
f888,f0389,music_note_half
f889,f038a,music_note_off
f88a,f038b,music_note_quarter
f88b,f038c,music_note_sixteenth
f88c,f038d,music_note_whole
f88d,f038e,nature
f88e,f038f,nature_people
f88f,f0390,navigation
f890,f0391,needle
f893,f0394,new_box
f894,f0395,newspaper
f895,f0396,nfc
f896,f0397,nfc_tap
f897,f0398,nfc_variant
f898,f0399,nodejs
f899,f039a,note
f89a,f039b,note_outline
f89b,f039c,note_plus
f89c,f039d,note_plus_outline
f89d,f039e,note_text
f89e,f039f,notification_clear_all
f89f,f03a0,numeric
f8a0,f03a1,numeric_0_box
f8a1,f03a2,numeric_0_box_multiple_outline
f8a2,f03a3,numeric_0_box_outline
f8a3,f03a4,numeric_1_box
f8a4,f03a5,numeric_1_box_multiple_outline
f8a5,f03a6,numeric_1_box_outline
f8a6,f03a7,numeric_2_box
f8a7,f03a8,numeric_2_box_multiple_outline
f8a8,f03a9,numeric_2_box_outline
f8a9,f03aa,numeric_3_box
f8aa,f03ab,numeric_3_box_multiple_outline
f8ab,f03ac,numeric_3_box_outline
f8ac,f03ad,numeric_4_box
f8ad,f03b2,numeric_4_box_multiple_outline
f8ae,f03ae,numeric_4_box_outline
f8af,f03b1,numeric_5_box
f8b0,f03af,numeric_5_box_multiple_outline
f8b1,f03b0,numeric_5_box_outline
f8b2,f03b3,numeric_6_box
f8b3,f03b4,numeric_6_box_multiple_outline
f8b4,f03b5,numeric_6_box_outline
f8b5,f03b6,numeric_7_box
f8b6,f03b7,numeric_7_box_multiple_outline
f8b7,f03b8,numeric_7_box_outline
f8b8,f03b9,numeric_8_box
f8b9,f03ba,numeric_8_box_multiple_outline
f8ba,f03bb,numeric_8_box_outline
f8bb,f03bc,numeric_9_box
f8bc,f03bd,numeric_9_box_multiple_outline
f8bd,f03be,numeric_9_box_outline
f8be,f03bf,numeric_9_plus_box
f8bf,f03c0,numeric_9_plus_box_multiple_outline
f8c0,f03c1,numeric_9_plus_box_outline
f8c1,f03c2,nutrition
f8c2,f03c3,octagon
f8c3,f03c4,octagon_outline
f8c4,f03c5,odnoklassniki
f8c6,f03c7,oil
f8c7,f0ff8,oil_temperature
f8c8,f03c9,omega
f8ca,f03cb,open_in_app
f8cb,f03cc,open_in_new
f8cc,f03cd,openid
f8cd,f03ce,opera
f8ce,f03cf,ornament
f8cf,f03d0,ornament_variant
f8d0,f03d1,inbox_arrow_up
f8d1,f03d2,owl
f8d2,f03d3,package
f8d3,f03d4,package_down
f8d4,f03d5,package_up
f8d5,f03d6,package_variant
f8d6,f03d7,package_variant_closed
f8d7,f03d8,palette
f8d8,f03d9,palette_advanced
f8d9,f03da,panda
f8da,f03db,pandora
f8db,f03dc,panorama
f8dc,f03dd,panorama_fisheye
f8dd,f1928,panorama_horizontal
f8de,f1929,panorama_vertical
f8df,f195f,panorama_wide_angle
f8e0,f03e1,paper_cut_vertical
f8e1,f03e2,paperclip
f8e2,f03e3,parking
f8e3,f03e4,pause
f8e4,f03e5,pause_circle
f8e5,f03e6,pause_circle_outline
f8e6,f03e7,pause_octagon
f8e7,f03e8,pause_octagon_outline
f8e8,f03e9,paw
f8e9,f03ea,pen
f8ea,f03eb,pencil
f8eb,f03ec,pencil_box
f8ec,f03ed,pencil_box_outline
f8ed,f03ee,pencil_lock
f8ee,f03ef,pencil_off
f8ef,f03f0,percent
f8f1,f03f2,phone
f8f2,f03f3,phone_bluetooth
f8f3,f03f4,phone_forward
f8f4,f03f5,phone_hangup
f8f5,f03f6,phone_in_talk
f8f6,f03f7,phone_incoming
f8f8,f03f9,phone_log
f8f9,f03fa,phone_missed
f8fa,f03fb,phone_outgoing
f8fb,f03fc,phone_paused
f8fc,f03fd,phone_settings
f8fd,f03fe,phone_voip
f8fe,f03ff,pi
f8ff,f0400,pi_box
f900,f0401,pig
f901,f0402,pill
f902,f0403,pin
f903,f0404,pin_off
f904,f0405,pine_tree
f905,f0406,pine_tree_box
f906,f0407,pinterest
f908,f0409,pizza
f909,f040a,play
f90a,f040b,play_box_outline
f90b,f040c,play_circle
f90c,f040d,play_circle_outline
f90d,f040e,play_pause
f90e,f040f,play_protected_content
f90f,f0410,playlist_minus
f910,f0411,playlist_play
f911,f0412,playlist_plus
f912,f0413,playlist_remove
f914,f0415,plus
f915,f0416,plus_box
f916,f0417,plus_circle
f917,f0418,plus_circle_multiple_outline
f918,f0419,plus_circle_outline
f919,f041a,plus_network
f91c,f041d,pokeball
f91d,f041e,polaroid
f91e,f041f,poll
f920,f0421,polymer
f921,f0422,popcorn
f922,f0423,pound
f923,f0424,pound_box
f924,f0425,power
f925,f0426,power_settings
f926,f0427,power_socket
f927,f0428,presentation
f928,f0429,presentation_play
f929,f042a,printer
f92a,f042b,printer_3d
f92b,f042c,printer_alert
f92c,f042d,professional_hexagon
f92d,f042e,projector
f92e,f042f,projector_screen
f92f,f0430,pulse
f930,f0431,puzzle
f931,f0432,qrcode
f932,f0433,qrcode_scan
f933,f0434,quadcopter
f934,f0435,quality_high
f936,f0437,radar
f937,f0438,radiator
f938,f0439,radio
f939,f043a,radio_handheld
f93a,f043b,radio_tower
f93b,f043c,radioactive
f93d,f043e,radiobox_marked
f93f,f0440,ray_end
f940,f0441,ray_end_arrow
f941,f0442,ray_start
f942,f0443,ray_start_arrow
f943,f0444,ray_start_end
f944,f0445,ray_vertex
f945,f0446,lastpass
f946,f0447,read
f947,f0448,youtube_tv
f948,f0449,receipt
f949,f044a,record
f94a,f044b,record_rec
f94b,f044c,recycle
f94c,f044d,reddit
f94d,f044e,redo
f94e,f044f,redo_variant
f94f,f0450,refresh
f950,f0451,regex
f951,f0452,relative_scale
f952,f0453,reload
f953,f0454,remote
f954,f0455,rename_box
f955,f0456,repeat
f956,f0457,repeat_off
f957,f0458,repeat_once
f958,f0459,replay
f959,f045a,reply
f95a,f045b,reply_all
f95b,f045c,reproduction
f95c,f045d,resize_bottom_right
f95d,f045e,responsive
f95e,f045f,rewind
f95f,f0460,ribbon
f960,f0461,road
f961,f0462,road_variant
f962,f0463,rocket
f963,f0ec7,rotate_3d
f964,f0465,rotate_left
f965,f0466,rotate_left_variant
f966,f0467,rotate_right
f967,f0468,rotate_right_variant
f968,f0469,router_wireless
f969,f046a,routes
f96a,f046b,rss
f96b,f046c,rss_box
f96c,f046d,ruler
f96d,f046e,run_fast
f96e,f046f,sale
f96f,f0470,satellite
f970,f0471,satellite_variant
f971,f0472,scale
f972,f0473,scale_bathroom
f973,f0474,school
f974,f0475,screen_rotation
f975,f0478,screen_rotation_lock
f976,f0476,screwdriver
f977,f0bc1,script
f978,f0479,sd
f979,f047a,seal
f97a,f047b,seat_flat
f97b,f047c,seat_flat_angled
f97c,f047d,seat_individual_suite
f97d,f047e,seat_legroom_extra
f97e,f047f,seat_legroom_normal
f97f,f0480,seat_legroom_reduced
f980,f0481,seat_recline_extra
f981,f0482,seat_recline_normal
f982,f0483,security
f983,f0484,security_network
f984,f0485,select
f985,f0486,select_all
f986,f0487,select_inverse
f987,f0488,select_off
f988,f0489,selection
f989,f048a,send
f98a,f048b,server
f98b,f048c,server_minus
f98c,f048d,server_network
f98d,f048e,server_network_off
f98e,f048f,server_off
f98f,f0490,server_plus
f990,f0491,server_remove
f991,f0492,server_security
f994,f0495,shape_plus
f995,f0496,share
f996,f0497,share_variant
f997,f0498,shield
f998,f0499,shield_outline
f999,f049a,shopping
f99a,f049b,shopping_music
f99b,f049c,shredder
f99c,f049d,shuffle
f99d,f049e,shuffle_disabled
f99e,f049f,shuffle_variant
f99f,f04a0,sigma
f9a0,f04a1,sign_caution
f9a1,f04a2,signal
f9a2,f04a3,silverware
f9a3,f04a4,silverware_fork
f9a4,f04a5,silverware_spoon
f9a5,f04a6,silverware_variant
f9a6,f04a7,sim
f9a7,f04a8,sim_alert
f9a8,f04a9,sim_off
f9a9,f04aa,sitemap
f9aa,f04ab,skip_backward
f9ab,f04ac,skip_forward
f9ac,f04ad,skip_next
f9ad,f04ae,skip_previous
f9ae,f04af,skype
f9af,f04b0,skype_business
f9b0,f04b1,slack
f9b1,f04b2,sleep
f9b2,f04b3,sleep_off
f9b3,f04b4,smoking
f9b4,f04b5,smoking_off
f9b5,f04b6,snapchat
f9b6,f04b7,snowman
f9b7,f04b8,soccer
f9b8,f04b9,sofa
f9b9,f04ba,sort
f9bb,f04bc,sort_ascending
f9bc,f04bd,sort_descending
f9be,f04bf,sort_variant
f9bf,f04c0,soundcloud
f9c0,f04c1,source_fork
f9c1,f04c2,source_pull
f9c2,f04c3,speaker
f9c3,f04c4,speaker_off
f9c4,f04c5,speedometer
f9c5,f04c6,spellcheck
f9c6,f04c7,spotify
f9c7,f04c8,spotlight
f9c8,f04c9,spotlight_beam
f9cb,f04cc,stack_overflow
f9cc,f04cd,stairs
f9cd,f04ce,star
f9ce,f04cf,star_circle
f9cf,f0246,star_half
f9d0,f04d1,star_off
f9d1,f04d2,star_outline
f9d2,f04d3,steam
f9d3,f04d4,steering
f9d4,f04d5,step_backward
f9d5,f04d6,step_backward_2
f9d6,f04d7,step_forward
f9d7,f04d8,step_forward_2
f9d8,f04d9,stethoscope
f9d9,f04da,stocking
f9da,f04db,stop
f9db,f04dc,store
f9dc,f04dd,store_24_hour
f9dd,f04de,stove
f9de,f04df,subway_variant
f9df,f04e0,sunglasses
f9e0,f04e1,swap_horizontal
f9e1,f04e2,swap_vertical
f9e2,f04e3,swim
f9e3,f04e4,switch
f9e4,f04e5,sword
f9e5,f04e6,sync
f9e6,f04e7,sync_alert
f9e7,f04e8,sync_off
f9e8,f04e9,tab
f9e9,f04ea,tab_unselected
f9ea,f04eb,table
f9eb,f04ec,table_column_plus_after
f9ec,f04ed,table_column_plus_before
f9ed,f04ee,table_column_remove
f9ee,f04ef,table_column_width
f9ef,f04f0,table_edit
f9f0,f04f1,table_large
f9f1,f04f2,table_row_height
f9f2,f04f3,table_row_plus_after
f9f3,f04f4,table_row_plus_before
f9f4,f04f5,table_row_remove
f9f5,f04f6,tablet
f9f6,f04f7,tablet_android
f9f8,f04f9,tag
f9f9,f04fa,tag_faces
f9fa,f04fb,tag_multiple
f9fb,f04fc,tag_outline
f9fc,f04fd,tag_text_outline
f9fd,f04fe,target
f9fe,f04ff,taxi
f9ff,f0500,teamviewer
fa01,f0502,television
fa02,f0503,television_guide
fa03,f0504,temperature_celsius
fa04,f0505,temperature_fahrenheit
fa05,f0506,temperature_kelvin
fa06,f0da0,tennis
fa07,f0508,tent
fa09,f050a,text_to_speech
fa0a,f050b,text_to_speech_off
fa0b,f050c,texture
fa0c,f050d,theater
fa0d,f050e,theme_light_dark
fa0e,f050f,thermometer
fa0f,f0510,thermometer_lines
fa10,f0511,thumb_down
fa11,f0512,thumb_down_outline
fa12,f0513,thumb_up
fa13,f0514,thumb_up_outline
fa14,f0515,thumbs_up_down
fa15,f0516,ticket
fa16,f0517,ticket_account
fa17,f0518,ticket_confirmation
fa18,f0519,tie
fa19,f051a,timelapse
fa1a,f13ab,timer
fa1b,f051c,timer_10
fa1c,f051d,timer_3
fa1d,f13ac,timer_off
fa1e,f051f,timer_sand
fa1f,f0520,timetable
fa20,f0521,toggle_switch
fa21,f0522,toggle_switch_off
fa22,f0523,tooltip
fa23,f0524,tooltip_edit
fa24,f0525,tooltip_image
fa25,f0526,tooltip_outline
fa27,f0528,tooltip_text
fa28,f08c3,tooth
fa2a,f052b,traffic_light
fa2b,f052c,train
fa2c,f052d,tram
fa2d,f052e,transcribe
fa2e,f052f,transcribe_close
fa2f,f1065,transfer
fa30,f0531,tree
fa31,f0532,trello
fa32,f0533,trending_down
fa33,f0534,trending_neutral
fa34,f0535,trending_up
fa35,f0536,triangle
fa36,f0537,triangle_outline
fa37,f0538,trophy
fa38,f0539,trophy_award
fa39,f053a,trophy_outline
fa3a,f053b,trophy_variant
fa3b,f053c,trophy_variant_outline
fa3c,f053d,truck
fa3d,f053e,truck_delivery
fa3e,f0a7b,tshirt_crew
fa3f,f0a7c,tshirt_v
fa42,f0543,twitch
fa43,f0544,twitter
fa47,f0548,ubuntu
fa48,f0549,umbraco
fa49,f054a,umbrella
fa4a,f054b,umbrella_outline
fa4b,f054c,undo
fa4c,f054d,undo_variant
fa4d,f054e,unfold_less_horizontal
fa4e,f054f,unfold_more_horizontal
fa4f,f0550,ungroup
fa51,f0552,upload
fa52,f0553,usb
fa53,f0554,vector_arrange_above
fa54,f0555,vector_arrange_below
fa55,f0556,vector_circle
fa56,f0557,vector_circle_variant
fa57,f0558,vector_combine
fa58,f0559,vector_curve
fa59,f055a,vector_difference
fa5a,f055b,vector_difference_ab
fa5b,f055c,vector_difference_ba
fa5c,f055d,vector_intersection
fa5d,f055e,vector_line
fa5e,f055f,vector_point
fa5f,f0560,vector_polygon
fa60,f0561,vector_polyline
fa61,f0562,vector_selection
fa62,f0563,vector_triangle
fa63,f0564,vector_union
fa65,f0566,vibrate
fa66,f0567,video
fa67,f0568,video_off
fa68,f0569,video_switch
fa69,f056a,view_agenda
fa6a,f056b,view_array
fa6b,f056c,view_carousel
fa6c,f056d,view_column
fa6d,f056e,view_dashboard
fa6e,f056f,view_day
fa6f,f0570,view_grid
fa70,f0571,view_headline
fa71,f0572,view_list
fa72,f0573,view_module
fa73,f0574,view_quilt
fa74,f0575,view_stream
fa75,f0576,view_week
fa76,f0577,vimeo
fa7b,f057c,vlc
fa7c,f057d,voicemail
fa7d,f057e,volume_high
fa7e,f057f,volume_low
fa7f,f0580,volume_medium
fa80,f0581,volume_off
fa81,f0582,vpn
fa82,f0583,walk
fa83,f0584,wallet
fa84,f0585,wallet_giftcard
fa85,f0586,wallet_membership
fa86,f0587,wallet_travel
fa87,f0588,wan
fa88,f0589,watch
fa89,f058a,watch_export
fa8a,f058b,watch_import
fa8b,f058c,water
fa8c,f058d,water_off
fa8d,f058e,water_percent
fa8e,f058f,water_pump
fa8f,f0590,weather_cloudy
fa90,f0591,weather_fog
fa91,f0592,weather_hail
fa92,f0593,weather_lightning
fa93,f0594,weather_night
fa95,f0596,weather_pouring
fa96,f0597,weather_rainy
fa97,f0598,weather_snowy
fa98,f0599,weather_sunny
fa99,f059a,weather_sunset
fa9a,f059b,weather_sunset_down
fa9b,f059c,weather_sunset_up
fa9c,f059d,weather_windy
fa9d,f059e,weather_windy_variant
fa9e,f059f,web
fa9f,f05a0,webcam
faa0,f05a1,weight
faa1,f05a2,weight_kilogram
faa2,f05a3,whatsapp
faa3,f05a4,wheelchair_accessibility
faa4,f05a5,white_balance_auto
faa5,f05a6,white_balance_incandescent
faa6,f05a7,white_balance_iridescent
faa7,f05a8,white_balance_sunny
faa8,f05a9,wifi
faa9,f05aa,wifi_off
faab,f05ac,wikipedia
faac,f05ad,window_close
faad,f05ae,window_closed
faae,f05af,window_maximize
faaf,f05b0,window_minimize
fab0,f05b1,window_open
fab1,f05b2,window_restore
fab3,f05b4,wordpress
fab5,f05b6,wrap
fab6,f05b7,wrench
fabf,f05c0,xml
fac0,f05c1,yeast
fac3,f05c4,zip_box
fac4,f05c5,surround_sound
fac5,f05c6,vector_rectangle
fac6,f05c7,playlist_check
fac7,f05c8,format_line_style
fac8,f05c9,format_line_weight
fac9,f05ca,translate
facb,f05cc,opacity
facc,f18f0,near_me
facd,f0955,clock_alert
face,f05cf,human_pregnant
facf,f1364,sticker
fad0,f05d1,scale_balance
fad2,f05d3,account_multiple_minus
fad3,f05d4,airplane_landing
fad4,f05d5,airplane_takeoff
fad5,f05d6,alert_circle_outline
fad6,f05d7,altimeter
fad7,f05d8,animation
fad8,f05d9,book_minus
fad9,f05da,book_open_page_variant
fada,f05db,book_plus
fadb,f05dc,boombox
fadc,f05dd,bullseye
fadd,f05de,comment_remove
fade,f05df,camera_off
fadf,f05e0,check_circle
fae0,f05e1,check_circle_outline
fae1,f05e2,candle
fae2,f05e3,chart_bubble
fae3,f0ff1,credit_card_off
fae4,f05e5,cup_off
fae5,f05e6,copyright
fae6,f05e7,cursor_text
fae7,f05e8,delete_forever
fae8,f05e9,delete_sweep
fae9,f1155,dice_d20
faea,f1150,dice_d4
faeb,f1151,dice_d6
faec,f1152,dice_d8
faee,f05ef,email_open_outline
faef,f05f0,email_variant
faf0,f05f1,ev_station
faf1,f05f2,food_fork_drink
faf2,f05f3,food_off
faf3,f05f4,format_title
faf4,f05f5,google_maps
faf5,f05f6,heart_pulse
faf6,f05f7,highway
faf7,f05f8,home_map_marker
faf8,f05f9,incognito
faf9,f05fa,kettle
fafa,f05fb,lock_plus
fafc,f05fd,logout_variant
fafd,f05fe,music_note_bluetooth
fafe,f05ff,music_note_bluetooth_off
faff,f0600,page_first
fb00,f0601,page_last
fb01,f0602,phone_classic
fb02,f0603,priority_high
fb03,f0604,priority_low
fb04,f0605,qqchat
fb05,f0606,pool
fb06,f0607,rounded_corner
fb07,f0608,rowing
fb08,f0609,saxophone
fb09,f060a,signal_variant
fb0b,f060c,subdirectory_arrow_left
fb0c,f060d,subdirectory_arrow_right
fb0e,f060f,violin
fb10,f0611,wechat
fb11,f0612,watermark
fb12,f0613,file_hidden
fb13,f08c6,application
fb14,f0615,arrow_collapse
fb15,f0616,arrow_expand
fb16,f028e,bowl
fb17,f0618,bridge
fb19,f061a,chip
fb1a,f061b,content_save_settings
fb1b,f061c,dialpad
fb1d,f061e,format_horizontal_align_center
fb1e,f061f,format_horizontal_align_left
fb1f,f0620,format_horizontal_align_right
fb20,f0621,format_vertical_align_bottom
fb21,f0622,format_vertical_align_center
fb22,f0623,format_vertical_align_top
fb24,f0625,help_circle_outline
fb26,f0627,lambda
fb27,f0628,matrix
fb28,f0629,meteor
fb2a,f062b,sigma_lower
fb2b,f062c,source_branch
fb2c,f062d,source_merge
fb2d,f062e,tune
fb2e,f062f,webhook
fb2f,f0630,account_settings
fb31,f0632,apple_keyboard_caps
fb32,f0633,apple_keyboard_command
fb33,f0634,apple_keyboard_control
fb34,f0635,apple_keyboard_option
fb35,f0636,apple_keyboard_shift
fb36,f0637,box_shadow
fb37,f0638,cards
fb38,f0639,cards_outline
fb39,f063a,cards_playing_outline
fb3a,f063b,checkbox_multiple_blank_circle
fb3b,f063c,checkbox_multiple_blank_circle_outline
fb3c,f063d,checkbox_multiple_marked_circle
fb3d,f063e,checkbox_multiple_marked_circle_outline
fb3e,f063f,cloud_sync
fb3f,f0640,collage
fb40,f0641,directions_fork
fb41,f0642,eraser_variant
fb44,f0645,file_tree
fb45,f0646,format_annotation_plus
fb46,f0647,gas_cylinder
fb47,f0648,grease_pencil
fb48,f0649,human_female
fb49,f17c4,human_greeting
fb4a,f064b,human_handsdown
fb4b,f064c,human_handsup
fb4c,f064d,human_male
fb4d,f064e,information_variant
fb4e,f064f,lead_pencil
fb4f,f0650,map_marker_minus
fb50,f0651,map_marker_plus
fb51,f0652,marker
fb52,f0653,message_plus
fb53,f0654,microscope
fb54,f0655,move_resize
fb55,f0656,move_resize_variant
fb56,f0657,paw_off
fb57,f0658,phone_minus
fb58,f0659,phone_plus
fb59,f02e5,pot
fb5a,f065b,pot_mix
fb5b,f065c,serial_port
fb5c,f065d,shape_circle_plus
fb5d,f065e,shape_polygon_plus
fb5e,f065f,shape_rectangle_plus
fb5f,f0660,shape_square_plus
fb60,f0661,skip_next_circle
fb61,f0662,skip_next_circle_outline
fb62,f0663,skip_previous_circle
fb63,f0664,skip_previous_circle_outline
fb64,f0665,spray
fb65,f0666,stop_circle
fb66,f0667,stop_circle_outline
fb67,f0668,test_tube
fb68,f0669,text_shadow
fb69,f066a,tune_vertical
fb6a,f066b,cart_off
fb6b,f066c,chart_gantt
fb6d,f066e,chart_timeline
fb6e,f066f,discord
fb6f,f0670,file_restore
fb70,f0671,language_c
fb71,f0672,language_cpp
fb74,f0ff2,credit_card_plus
fb76,f0678,bow_tie
fb77,f0679,calendar_range
fb78,f067a,currency_usd_off
fb79,f067b,flash_red_eye
fb7a,f067c,oar
fb7b,f067d,piano
fb7c,f067e,weather_lightning_rainy
fb7d,f067f,weather_snowy_rainy
fb7e,f0680,yin_yang
fb7f,f0681,tower_beach
fb80,f0682,tower_fire
fb81,f0683,delete_circle
fb82,f0684,dna
fb83,f0685,hamburger
fb84,f0686,gondola
fb85,f0687,inbox
fb86,f0688,reorder_horizontal
fb87,f0689,reorder_vertical
fb89,f068b,tag_heart
fb8a,f068c,skull
fb8b,f068d,solid
fb8c,f068e,alarm_snooze
fb8d,f13e0,baby_buggy
fb8e,f0cea,beaker
fb8f,f0691,bomb
fb90,f0692,calendar_question
fb91,f0693,camera_burst
fb92,f0694,code_tags_check
fb94,f0696,crop_rotate
fb95,f0697,developer_board
fb99,f0c6e,emoticon_dead
fb9a,f0c70,emoticon_excited
fb9b,f069d,folder_star
fb9c,f069e,format_color_text
fb9d,f069f,format_section
fb9f,f06a1,home_outline
fba0,f06a2,message_bulleted
fba1,f06a3,message_bulleted_off
fba2,f06a4,nuke
fba3,f06a5,power_plug
fba4,f06a6,power_plug_off
fba5,f06a7,publish
fba6,f099b,restore
fba7,f06a9,robot
fba8,f06aa,format_rotate_90
fba9,f06ab,scanner
fbaa,f06ac,subway
fbab,f06ad,timer_sand_empty
fbac,f06ae,transit_transfer
fbad,f06af,unity
fbae,f06b0,update
fbaf,f06b1,watch_vibrate
fbb0,f06b2,angular
fbb1,f06b3,dolby
fbb2,f06b4,emby
fbb3,f06b5,lamp
fbb4,f06b6,menu_down_outline
fbb5,f06b7,menu_up_outline
fbb6,f06b8,note_multiple
fbb7,f06b9,note_multiple_outline
fbb8,f06ba,plex
fbba,f06bc,account_edit
fbbb,f06bd,alert_decagram
fbbc,f06be,all_inclusive
fbbd,f06bf,angularjs
fbbe,f06c0,arrow_down_box
fbbf,f06c1,arrow_left_box
fbc0,f06c2,arrow_right_box
fbc1,f06c3,arrow_up_box
fbc2,f06c4,asterisk
fbc3,f06c5,bomb_off
fbc4,f06c6,bootstrap
fbc5,f06c7,cards_variant
fbc6,f06c8,clipboard_flow
fbc7,f06c9,close_outline
fbc8,f06ca,coffee_outline
fbc9,f06cb,contacts
fbca,f06cc,delete_empty
fbcb,f06cd,earth_box
fbcc,f06ce,earth_box_off
fbcd,f06cf,email_alert
fbce,f06d0,eye_outline
fbcf,f06d1,eye_off_outline
fbd0,f06d2,fast_forward_outline
fbd1,f06d3,feather
fbd2,f06d4,find_replace
fbd3,f06d5,flash_outline
fbd4,f06d6,format_font
fbd5,f06d7,format_page_break
fbd6,f06d8,format_pilcrow
fbd7,f06d9,garage
fbd8,f06da,garage_open
fbda,f06dc,google_keep
fbdc,f06de,heart_half_full
fbdd,f06df,heart_half
fbde,f06e0,heart_half_outline
fbdf,f06e1,hexagon_multiple
fbe0,f06e2,hook
fbe1,f06e3,hook_off
fbe2,f06e4,infinity
fbe3,f06e5,language_swift
fbe4,f06e6,language_typescript
fbe5,f06e7,laptop_off
fbe6,f06e8,lightbulb_on
fbe7,f06e9,lightbulb_on_outline
fbe8,f06ea,lock_pattern
fbea,f06ec,magnify_minus_outline
fbeb,f06ed,magnify_plus_outline
fbec,f06ee,mailbox
fbed,f06ef,medical_bag
fbee,f06f0,message_settings
fbf0,f06f2,minus_box_outline
fbf1,f06f3,network
fbf2,f06f4,download_network
fbf3,f06f5,help_network
fbf4,f06f6,upload_network
fbf5,f06f7,npm
fbf6,f06f8,nut
fbf7,f06f9,octagram
fbf8,f06fa,page_layout_body
fbf9,f06fb,page_layout_footer
fbfa,f06fc,page_layout_header
fbfb,f06fd,page_layout_sidebar_left
fbfc,f06fe,page_layout_sidebar_right
fbfd,f06ff,pencil_circle
fbfe,f0701,pentagon
fbff,f0700,pentagon_outline
fc00,f0702,pillar
fc01,f0703,pistol
fc02,f0704,plus_box_outline
fc03,f0705,plus_outline
fc04,f0706,prescription
fc05,f0707,printer_settings
fc06,f0708,react
fc07,f0709,restart
fc08,f070a,rewind_outline
fc09,f070b,rhombus
fc0a,f070c,rhombus_outline
fc0c,f070e,run
fc0d,f070f,search_web
fc0e,f0710,shovel
fc0f,f0711,shovel_off
fc10,f0712,signal_2g
fc11,f0713,signal_3g
fc12,f0714,signal_4g
fc13,f0715,signal_hspa
fc14,f0716,signal_hspa_plus
fc15,f0717,snowflake
fc16,f0718,source_commit
fc17,f0719,source_commit_end
fc18,f071a,source_commit_end_local
fc19,f071b,source_commit_local
fc1a,f071c,source_commit_next_local
fc1b,f071d,source_commit_start
fc1c,f071e,source_commit_start_next_local
fc1d,f071f,speaker_wireless
fc1e,f0ff9,stadium
fc1f,f0721,svg
fc20,f0722,tag_plus
fc21,f0723,tag_remove
fc22,f0724,ticket_percent
fc23,f0725,tilde
fc24,f0726,treasure_chest
fc25,f0727,truck_trailer
fc26,f0728,view_parallel
fc27,f0729,view_sequential
fc28,f072a,washing_machine
fc29,f072b,webpack
fc2a,f072c,widgets
fc2c,f072e,arrow_down_bold
fc2d,f072f,arrow_down_bold_box
fc2e,f0730,arrow_down_bold_box_outline
fc2f,f0731,arrow_left_bold
fc30,f0732,arrow_left_bold_box
fc31,f0733,arrow_left_bold_box_outline
fc32,f0734,arrow_right_bold
fc33,f0735,arrow_right_bold_box
fc34,f0736,arrow_right_bold_box_outline
fc35,f0737,arrow_up_bold
fc36,f0738,arrow_up_bold_box
fc37,f0739,arrow_up_bold_box_outline
fc38,f073a,cancel
fc39,f073b,file_account
fc3a,f073c,gesture_double_tap
fc3b,f073d,gesture_swipe_down
fc3c,f073e,gesture_swipe_left
fc3d,f073f,gesture_swipe_right
fc3e,f0740,gesture_swipe_up
fc3f,f0741,gesture_tap
fc40,f0742,gesture_two_double_tap
fc41,f0743,gesture_two_tap
fc42,f0744,humble_bundle
fc43,f0745,kickstarter
fc44,f0746,netflix
fc48,f074a,vector_radius
fc4f,f0751,clipboard_plus
fc50,f0752,file_plus
fc51,f0753,format_align_bottom
fc52,f0754,format_align_middle
fc53,f0755,format_align_top
fc54,f0756,format_list_checks
fc55,f0757,format_quote_open
fc56,f0758,grid_large
fc57,f0759,heart_off
fc58,f075a,music
fc59,f075b,music_off
fc5a,f075c,tab_plus
fc5b,f075d,volume_plus
fc5c,f075e,volume_minus
fc5d,f075f,volume_mute
fc5e,f0760,unfold_less_vertical
fc5f,f0761,unfold_more_vertical
fc60,f0762,taco
fc61,f0763,square_outline
fc62,f0764,square
fc65,f0767,alert_octagram
fc66,f0768,atom
fc67,f0769,ceiling_light
fc68,f076a,chart_bar_stacked
fc69,f076b,chart_line_stacked
fc6a,f076c,decagram
fc6b,f076d,decagram_outline
fc6c,f076e,dice_multiple
fc6d,f1153,dice_d10
fc6e,f0770,folder_open
fc6f,f0771,guitar_acoustic
fc70,f0772,loading
fc71,f0773,lock_reset
fc72,f0774,ninja
fc73,f0775,octagram_outline
fc74,f0776,pencil_circle_outline
fc75,f0777,selection_off
fc76,f0778,set_all
fc77,f0779,set_center
fc78,f077a,set_center_right
fc79,f077b,set_left
fc7a,f077c,set_left_center
fc7b,f077d,set_left_right
fc7c,f077e,set_none
fc7d,f077f,set_right
fc7e,f0780,shield_half_full
fc7f,f0781,sign_direction
fc80,f0782,sign_text
fc81,f0783,signal_off
fc82,f0784,square_root
fc83,f0785,sticker_emoji
fc84,f0786,summit
fc85,f0787,sword_cross
fc86,f0788,truck_fast
fc88,f078a,cast_off
fc89,f078b,help_box
fc8a,f078c,timer_sand_full
fc8b,f078d,waves
fc8c,f078e,alarm_bell
fc8d,f078f,alarm_light
fc90,f0792,arrow_collapse_down
fc91,f0793,arrow_collapse_left
fc92,f0794,arrow_collapse_right
fc93,f0795,arrow_collapse_up
fc94,f0796,arrow_expand_down
fc95,f0797,arrow_expand_left
fc96,f0798,arrow_expand_right
fc97,f0799,arrow_expand_up
fc9a,f079c,bus_articulated_end
fc9b,f079d,bus_articulated_front
fc9c,f079e,bus_double_decker
fc9d,f079f,bus_school
fc9e,f07a0,bus_side
fc9f,f07a1,camera_gopro
fca0,f07a2,camera_metering_center
fca1,f07a3,camera_metering_matrix
fca2,f07a4,camera_metering_partial
fca3,f07a5,camera_metering_spot
fca4,f07a6,cannabis
fca5,f07a7,car_convertible
fca6,f07a8,car_estate
fca7,f07a9,car_hatchback
fca8,f07aa,car_pickup
fca9,f07ab,car_side
fcaa,f07ac,car_sports
fcab,f07ad,caravan
fcac,f07ae,cctv
fcad,f07af,chart_donut
fcae,f07b0,chart_donut_variant
fcaf,f07b1,chart_line_variant
fcb0,f07b2,chili_hot
fcb1,f07b3,chili_medium
fcb2,f07b4,chili_mild
fcb3,f07b5,cloud_braces
fcb4,f07b6,cloud_tags
fcb5,f07b7,console_line
fcb6,f07b8,corn
fcb8,f07ba,currency_cny
fcb9,f07bb,currency_eth
fcba,f07bc,currency_jpy
fcbb,f07bd,currency_krw
fcbc,f07be,currency_sign
fcbd,f07bf,currency_twd
fcbe,f07c0,desktop_classic
fcbf,f07c1,dip_switch
fcc0,f07c2,donkey
fcc1,f07c3,dots_horizontal_circle
fcc2,f07c4,dots_vertical_circle
fcc3,f07c5,ear_hearing
fcc4,f07c6,elephant
fcc6,f07c8,food_croissant
fcc7,f07c9,forklift
fcc8,f07ca,fuel
fcc9,f07cb,gesture
fcca,f07cc,google_analytics
fccb,f07cd,google_assistant
fccc,f07ce,headphones_off
fccd,f07cf,high_definition
fcce,f07d0,home_assistant
fccf,f07d1,home_automation
fcd0,f07d2,home_circle
fcd1,f07d3,language_go
fcd2,f07d4,language_r
fcd3,f07d5,lava_lamp
fcd4,f07d6,led_strip
fcd5,f07d7,locker
fcd6,f07d8,locker_multiple
fcd7,f07d9,map_marker_outline
fcd8,f07da,metronome
fcd9,f07db,metronome_tick
fcda,f07dc,micro_sd
fcdc,f07de,movie_roll
fcdd,f07df,mushroom
fcde,f07e0,mushroom_outline
fcdf,f07e1,nintendo_switch
fce0,f07e2,null
fce1,f07e3,passport
fce3,f07e5,pipe
fce4,f07e6,pipe_disconnected
fce5,f07e7,power_socket_eu
fce6,f07e8,power_socket_uk
fce7,f07e9,power_socket_us
fce8,f07ea,rice
fce9,f07eb,ring
fcea,f07ec,sass
fcec,f07ee,soy_sauce
fced,f07ef,standard_definition
fcee,f07f0,surround_sound_2_0
fcef,f07f1,surround_sound_3_1
fcf0,f07f2,surround_sound_5_1
fcf1,f07f3,surround_sound_7_1
fcf2,f07f4,television_classic
fcf4,f07f6,thought_bubble
fcf5,f07f7,thought_bubble_outline
fcf6,f07f8,trackpad
fcf7,f07f9,ultra_high_definition
fcf8,f07fa,van_passenger
fcf9,f07fb,van_utility
fcfa,f07fc,vanish
fcfb,f07fd,video_3d
fcfc,f07fe,wall
fcfd,f07ff,xmpp
fcfe,f0800,account_multiple_plus_outline
fcff,f0801,account_plus_outline
fd02,f0804,atlassian
fd04,f0806,basketball
fd05,f0807,battery_charging_wireless
fd06,f0808,battery_charging_wireless_10
fd07,f0809,battery_charging_wireless_20
fd08,f080a,battery_charging_wireless_30
fd09,f080b,battery_charging_wireless_40
fd0a,f080c,battery_charging_wireless_50
fd0b,f080d,battery_charging_wireless_60
fd0c,f080e,battery_charging_wireless_70
fd0d,f080f,battery_charging_wireless_80
fd0e,f0810,battery_charging_wireless_90
fd0f,f0811,battery_charging_wireless_alert
fd10,f0812,battery_charging_wireless_outline
fd11,f0813,bitcoin
fd12,f0814,briefcase_outline
fd13,f0815,cellphone_wireless
fd14,f0816,clover
fd15,f0817,comment_question
fd16,f0818,content_save_outline
fd17,f0819,delete_restore
fd18,f081a,door
fd19,f081b,door_closed
fd1a,f081c,door_open
fd1b,f081d,fan_off
fd1c,f081e,file_percent
fd1d,f081f,finance
fd1f,f0821,floor_plan
fd20,f0822,forum_outline
fd21,f0823,golf
fd22,f0824,google_home
fd23,f0825,guy_fawkes_mask
fd24,f0826,home_account
fd25,f0827,home_heart
fd26,f0828,hot_tub
fd27,f0829,hulu
fd28,f082a,ice_cream
fd29,f082b,image_off
fd2a,f082c,karate
fd2b,f082d,ladybug
fd2c,f082e,notebook
fd2d,f082f,phone_return
fd2e,f0830,poker_chip
fd2f,f0831,shape
fd30,f0832,shape_outline
fd31,f0833,ship_wheel
fd32,f0834,soccer_field
fd33,f0835,table_column
fd34,f0836,table_of_contents
fd35,f0837,table_row
fd36,f0838,table_settings
fd37,f0839,television_box
fd38,f083a,television_classic_off
fd39,f083b,television_off
fd3b,f083d,upload_multiple
fd3c,f083e,video_4k_box
fd3d,f083f,video_input_antenna
fd3e,f0840,video_input_component
fd3f,f0841,video_input_hdmi
fd40,f0842,video_input_svideo
fd41,f0843,view_dashboard_variant
fd42,f0844,vuejs
fd43,f0845,xamarin
fd46,f0848,youtube_gaming



================================================
FILE: website/static/install.ps1
================================================
param(
    [switch]
    $AllUsers
)

$installInstructions = @'
Hey friend

This installer is only available for Windows.
If you're looking for installation instructions for your operating system,
please visit the following link:
'@
if ($IsMacOS) {
    Write-Host @"
$installInstructions

https://ohmyposh.dev/docs/installation/macos
"@
    exit
}
if ($IsLinux) {
    Write-Host @"
$installInstructions

https://ohmyposh.dev/docs/installation/linux
"@
    exit
}

$installer = ''
$arch = (Get-CimInstance -Class Win32_Processor -Property Architecture).Architecture | Select-Object -First 1
switch ($arch) {
    0 { $installer = "install-x86.msi" } # x86
    5 { $installer = "install-arm64.msi" } # ARM
    9 {
        if ([Environment]::Is64BitOperatingSystem) {
            $installer = "install-x64.msi"
        }
        else {
            $installer = "install-x86.msi"
        }
    }
    12 { $installer = "install-arm64.msi" } # Surface Pro X
}

if ([string]::IsNullOrEmpty($installer)) {
    Write-Host @"
The installer for system architecture ($arch) is not available.
"@
    exit
}

Write-Host "Downloading $installer..."

# validate the availability of New-TemporaryFile
if (Get-Command -Name New-TemporaryFile -ErrorAction SilentlyContinue) {
    $tmp = New-TemporaryFile | Rename-Item -NewName { $_ -replace 'tmp$', 'msi' } -PassThru
}
else {
    $tmp = New-Item -Path $env:TEMP -Name ([System.IO.Path]::GetRandomFileName() -replace '\.\w+$', '.msi') -Force -ItemType File
}
$url = "https://cdn.ohmyposh.dev/releases/latest/$installer"

# check if we can make https requests and download the binary
try {
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest -Uri $url -Method Head | Where-Object -FilterScript { $_.StatusCode -ne 200 }  # Suppress success output
}
catch {
    Write-Host "Unable to download $installer. Please check your internet connection."
    exit
}

Invoke-WebRequest -OutFile $tmp $url
Write-Host 'Running installer...'

if ($AllUsers) {
    & "$tmp" INSTALLER=script ALLUSERS=1
} else {
    & "$tmp" /quiet INSTALLER=script
}

Write-Host @'
Done!

Restart your terminal and have a look at the
documentation on how to proceed from here.

https://ohmyposh.dev/docs/installation/prompt
'@



================================================
FILE: website/static/install.sh
================================================
#!/usr/bin/env bash

install_dir=""
themes_dir=""
executable=""
version=""

error() {
    printf "\e[31m$1\e[0m\n"
    exit 1
}

info() {
    printf "$1\n"
}

warn() {
    printf "⚠️  \e[33m$1\e[0m\n"
}

help() {
    # Display Help
    echo "Install script for Oh My Posh"
    echo
    echo "Syntax: install.sh [-h] [-d <dir>] [-t <dir>] [-v <ver>]"
    echo "options:"
    echo "-h     Print this help."
    echo "-d     Specify the installation directory. Defaults to $HOME/bin, $HOME/.local/bin or the directory where oh-my-posh is installed."
    echo "-t     Specify the themes installation directory. Defaults to the oh-my-posh cache directory."
    echo "-v     Version to download, defaults to latest"
    echo
}

while getopts ":hd:t:v:" option; do
   case $option in
      h) # display Help
         help
         exit;;
      d) # Enter a name
         install_dir=${OPTARG};;
      t) # themes directory
         themes_dir=${OPTARG};;
      v) # version
         version=${OPTARG};;
     \?) # Invalid option
         echo "Invalid option command line option. Use -h for help."
         exit 1
   esac
done

SUPPORTED_TARGETS="linux-386 linux-amd64 linux-arm linux-arm64 darwin-amd64 darwin-arm64 freebsd-386 freebsd-amd64 freebsd-arm freebsd-arm64"

validate_dependency() {
    if ! command -v $1 >/dev/null; then
        error "$1 is required to install Oh My Posh. Please install $1 and try again.\n"
    fi
}

validate_dependencies() {
    validate_dependency curl
    validate_dependency unzip
    validate_dependency realpath
    validate_dependency dirname
}

set_install_directory() {
    if [ -n "$install_dir" ]; then
        # expand directory
        install_dir="${install_dir/#\~/$HOME}"
        return 0
    fi

    # check if we have oh-my-posh installed, if so, use the executable directory
    # to install into and follow symlinks
    if command -v oh-my-posh >/dev/null; then
        posh_dir=$(command -v oh-my-posh)
        real_dir=$(realpath $posh_dir)
        install_dir=$(dirname $real_dir)
        info "Oh My Posh is already installed, updating existing installation in:"
        info "  ${install_dir}"
        return 0
    fi

    # check if $HOME/bin exists and is writable
    if [ -d "$HOME/bin" ] && [ -w "$HOME/bin" ]; then
        install_dir="$HOME/bin"
        return 0
    fi

    # check if $HOME/.local/bin exists and is writable
    if ([ -d "$HOME/.local/bin" ] && [ -w "$HOME/.local/bin" ]) || mkdir -p "$HOME/.local/bin"; then
        install_dir="$HOME/.local/bin"
        return 0
    fi

    error "Cannot determine installation directory. Please specify a directory and try again: \ncurl -s https://ohmyposh.dev/install.sh | bash -s -- -d {directory}"
}

validate_install_directory() {
    #check if installation dir exists
    if [ ! -d "$install_dir" ]; then
        error "Directory ${install_dir} does not exist, set a different directory and try again."
    fi

    # Check if regular user has write permission
    if [ ! -w "$install_dir" ]; then
        error "Cannot write to ${install_dir}. Please check write permissions or set a different directory and try again: \ncurl -s https://ohmyposh.dev/install.sh | bash -s -- -d {directory}"
    fi

    # check if the directory is in the PATH
    good=$(
        IFS=:
        for path in $PATH; do
        if [ "${path%/}" = "${install_dir}" ]; then
            printf 1
            break
        fi
        done
    )

    if [ "${good}" != "1" ]; then
        warn "Installation directory ${install_dir} is not in your \$PATH, add it using \nexport PATH=\$PATH:${install_dir}"
    fi
}

validate_themes_directory() {

    # Validate if the themes directory exists
    if ! mkdir -p "$themes_dir" > /dev/null 2>&1; then
        error "Cannot write to ${themes_dir}. Please check write permissions or set a different directory and try again: \ncurl -s https://ohmyposh.dev/install.sh | bash -s -- -t {directory}"
    fi

    #check user write permission
    if [ ! -w "$themes_dir" ]; then
        error "Cannot write to ${themes_dir}. Please check write permissions or set a different directory and try again: \ncurl -s https://ohmyposh.dev/install.sh | bash -s -- -t {directory}"
    fi
}

install_themes() {
    if [ -n "$themes_dir" ]; then
        # expand directory
        themes_dir="${themes_dir/#\~/$HOME}"
    fi

    cache_dir=$($executable cache path)

    # validate if the user set the path to the themes directory
    if [ -z "$themes_dir" ]; then
        themes_dir="${cache_dir}/themes"
    fi

    validate_themes_directory

    info "🎨 Installing oh-my-posh themes in ${themes_dir}\n"

    zip_file="${cache_dir}/themes.zip"

    url="https://cdn.ohmyposh.dev/releases/latest/themes.zip"

    http_response=$(curl -s -f -L $url -o $zip_file -w "%{http_code}")

    if [ $http_response = "200" ] && [ -f $zip_file ]; then
        unzip -o -q $zip_file -d $themes_dir
        # make sure the files are readable and writable for all users
        chmod a+rwX ${themes_dir}/*.omp.*
        rm $zip_file
    else
        warn "Unable to download themes at ${url}\nPlease validate your curl, connection and/or proxy settings"
    fi
}

install() {
    arch=$(detect_arch)
    platform=$(detect_platform)
    target="${platform}-${arch}"

    good=$(
        IFS=" "
        for t in $SUPPORTED_TARGETS; do
        if [ "${t}" = "${target}" ]; then
            printf 1
            break
        fi
        done
    )

    if [ "${good}" != "1" ]; then
        error "${arch} builds for ${platform} are not available for Oh My Posh"
    fi

    info "\nℹ️  Installing oh-my-posh for ${target} in ${install_dir}"

    executable=${install_dir}/oh-my-posh
    url=https://cdn.ohmyposh.dev/releases/latest/posh-${target}
    if [ "$version" ]; then
      url=https://cdn.ohmyposh.dev/releases/${version}/posh-${target}
    fi

    info "⬇️  Downloading oh-my-posh from ${url}"

    http_response=$(curl -s -f -L $url -o $executable -w "%{http_code}")

    if [ $http_response != "200" ] || [ ! -f $executable ]; then
        error "Unable to download executable at ${url}\nPlease validate your curl, connection and/or proxy settings"
    fi

    chmod +x $executable

    install_themes

    info "🚀 Installation complete.\n\nYou can follow the instructions at https://ohmyposh.dev/docs/installation/prompt"
    info "to setup your shell to use oh-my-posh."
    if [ $http_response = "200" ]; then
        info "\nIf you want to use a built-in theme, you can find them in the ${themes_dir} directory:"
        info "  oh-my-posh init {shell} --config ${themes_dir}/{theme}.omp.json\n"
    fi
}

detect_arch() {
  arch="$(uname -m | tr '[:upper:]' '[:lower:]')"

  case "${arch}" in
    x86_64) arch="amd64" ;;
    armv*) arch="arm" ;;
    arm64) arch="arm64" ;;
    aarch64) arch="arm64" ;;
    i686) arch="386" ;;
  esac

  if [ "${arch}" = "arm64" ] && [ "$(getconf LONG_BIT)" -eq 32 ]; then
    arch=arm
  fi

  printf '%s' "${arch}"
}


detect_platform() {
  platform="$(uname -s | awk '{print tolower($0)}')"

  case "${platform}" in
    linux) platform="linux" ;;
    darwin) platform="darwin" ;;
  esac

  printf '%s' "${platform}"
}

validate_dependencies
set_install_directory
validate_install_directory
install



================================================
FILE: website/static/.nojekyll
================================================
[Empty file]


================================================
FILE: website/static/fonts/fonts.zip
================================================
[Binary file]


================================================
FILE: website/static/fonts/VictorMono.ttf
================================================
[Binary file]


================================================
FILE: website/static/img/themes/.keep
================================================
[Empty file]


================================================
FILE: .config/configuration.winget
================================================
# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  resources:
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Visual Studio Code
      settings:
        id: Microsoft.VisualStudioCode
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: golang
      directives:
        description: Install Golang
      settings:
        id: GoLang.Go
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      dependsOn: [golang]
      directives:
        description: Install golangci-lint
      settings:
        id: GolangCI.golangci-lint
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install NodeJS
        securityContext: elevated
      settings:
        id: OpenJS.NodeJS
        source: winget
  configurationVersion: 0.2.0



================================================
FILE: .devcontainer/config.fish
================================================
# Activate oh-my-posh prompt:
oh-my-posh init fish | source



================================================
FILE: .devcontainer/devcontainer.json
================================================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/go
{
  "name": "oh-my-posh",
  "build": {
    "dockerfile": "Dockerfile",
    "args": {
      // Update the VARIANT arg to pick a version of Go: 1, 1.16, 1.17
      // Append -bullseye or -buster to pin to an OS version.
      // Use -bullseye variants on local arm64/Apple Silicon.
      "VARIANT": "1-1.24-bullseye",

      // Override me with your own timezone:
      "TZ": "UTC",
      // Use one of the "TZ database name" entries from:
      // https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

      "NODE_VERSION": "lts/*",
      //Powershell version
      "PS_VERSION": "7.2.7"
    }
  },
  "runArgs": [
    "--cap-add=SYS_PTRACE",
    "--security-opt",
    "seccomp=unconfined",
    "--security-opt",
    "label=disable"
  ],
  "containerEnv": {
    "HOME": "/home/vscode"
  },

  "customizations": {
    "vscode": {
      "settings": {
        "go.toolsManagement.checkForUpdates": "local",
        "go.useLanguageServer": true,
        "go.gopath": "/go",
        "go.goroot": "/usr/local/go",
        "terminal.integrated.profiles.linux": {
          "bash": {
            "path": "bash"
          },
          "zsh": {
            "path": "zsh"
          },
          "fish": {
            "path": "fish"
          },
          "tmux": {
            "path": "tmux",
            "icon": "terminal-tmux"
          },
          "pwsh": {
            "path": "pwsh",
            "icon": "terminal-powershell"
          }
        },
        "terminal.integrated.defaultProfile.linux": "pwsh",
        "terminal.integrated.defaultProfile.windows": "PowerShell",
        "terminal.integrated.defaultProfile.osx": "pwsh",
        "terminal.integrated.shellIntegration.enabled": false,
        "tasks.statusbar.default.hide": true
      },
      "extensions": [
        "actboy168.tasks",
        "eamodio.gitlens",
        "tamasfe.even-better-toml",
        "davidanson.vscode-markdownlint",
        "editorconfig.editorconfig",
        "esbenp.prettier-vscode",
        "github.vscode-pull-request-github",
        "golang.go",
        "ms-vscode.powershell",
        "redhat.vscode-yaml",
        "yzhang.markdown-all-in-one",
        "ms-azuretools.vscode-azurefunctions"
      ]
    }
  },
  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "vscode",
  // This is running the same command as the VSCode Task 'devcontainer: rebuild oh-my-posh'
  // It Compiles *oh-my-posh* from this repo while **overwriting** your preinstalled stable release.'
  // Ideal for getting straight into developing & testing whilst using a devcontainer
  "updateContentCommand": "cd src && go build -v -buildvcs=false -o /home/vscode/bin/oh-my-posh -ldflags \"-s -w -X 'github.com/jandedobbeleer/oh-my-posh/src/build.Version=development-$(git --no-pager log -1 --pretty=%h-%s)' -extldflags '-static'\""
}



================================================
FILE: .devcontainer/Dockerfile
================================================
# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/go/.devcontainer/base.Dockerfile

# [Choice] Go version (use -bullseye variants on local arm64/Apple Silicon): 1, 1.16, 1.17, 1-bullseye, 1.16-bullseye, 1.17-bullseye, 1-buster, 1.16-buster, 1.17-buster
ARG VARIANT=1-bullseye
FROM mcr.microsoft.com/vscode/devcontainers/go:${VARIANT}

# [Choice] Node.js version: none, lts/*, 16, 14, 12, 10
ARG NODE_VERSION="none"
RUN if [ "${NODE_VERSION}" != "none" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi

# Install powershell
ARG PS_VERSION="7.2.1"
# powershell-7.3.0-linux-x64.tar.gz
# powershell-7.3.0-linux-arm64.tar.gz
RUN ARCH="$(dpkg --print-architecture)"; \
    if [ "${ARCH}" = "amd64" ]; then \
        PS_BIN="v$PS_VERSION/powershell-$PS_VERSION-linux-x64.tar.gz"; \
    elif [ "${ARCH}" = "arm64" ]; then \
        PS_BIN="v$PS_VERSION/powershell-$PS_VERSION-linux-arm64.tar.gz"; \
    elif [ "${ARCH}" = "armhf" ]; then \
        PS_BIN="v$PS_VERSION/powershell-$PS_VERSION-linux-arm32.tar.gz"; \
    fi; \
    wget https://github.com/PowerShell/PowerShell/releases/download/$PS_BIN -O pwsh.tar.gz; \
    mkdir /usr/local/pwsh && \
    tar Cxvfz /usr/local/pwsh pwsh.tar.gz && \
    rm pwsh.tar.gz

ENV PATH=$PATH:/usr/local/pwsh

RUN echo 'deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_11/ /' | tee /etc/apt/sources.list.d/shells:fish:release:3.list; \
    curl -fsSL https://download.opensuse.org/repositories/shells:fish:release:3/Debian_11/Release.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg > /dev/null; \
    apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get install -y --no-install-recommends \
    fish \
    tmux \
    fzf \
    && apt-get clean

ARG USERNAME=vscode


# NOTE: devcontainers are Linux-only at this time but when
# Windows or Darwin is supported someone will need to improve
# the code logic above.

# Setup a neat little PowerShell experience
RUN pwsh -Command Install-Module posh-git -Scope AllUsers -Force; \
    pwsh -Command Install-Module z -Scope AllUsers -Force; \
    pwsh -Command Install-Module PSFzf -Scope AllUsers -Force; \
    pwsh -Command Install-Module Terminal-Icons -Scope AllUsers -Force;

# add the oh-my-posh path to the PATH variable
ENV PATH "$PATH:/home/${USERNAME}/bin"

# Deploy oh-my-posh prompt to Powershell:
COPY Microsoft.PowerShell_profile.ps1 /home/${USERNAME}/.config/powershell/Microsoft.PowerShell_profile.ps1

# Deploy oh-my-posh prompt to Fish:
COPY config.fish /home/${USERNAME}/.config/fish/config.fish

# Everything runs as root during build time, so we want
# to make sure the vscode user can edit these paths too:
RUN chmod 777 -R /home/${USERNAME}/.config

# Override vscode's own Bash prompt with oh-my-posh:
RUN sed -i 's/^__bash_prompt$/#&/' /home/${USERNAME}/.bashrc && \
    echo "eval \"\$(oh-my-posh init bash)\"" >> /home/${USERNAME}/.bashrc

# Override vscode's own ZSH prompt with oh-my-posh:
RUN echo "eval \"\$(oh-my-posh init zsh)\"" >> /home/${USERNAME}/.zshrc

# Set container timezone:
ARG TZ="UTC"
RUN ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime

# [Optional] Uncomment the next line to use go get to install anything else you need
# RUN go get -x github.com/JanDeDobbeleer/battery

# [Optional] Uncomment this line to install global node packages.
# RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1



================================================
FILE: .devcontainer/Microsoft.PowerShell_profile.ps1
================================================
Import-Module posh-git
Import-Module PSFzf -ArgumentList 'Ctrl+t', 'Ctrl+r'
Import-Module z
Import-Module Terminal-Icons

Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete

$env:POSH_GIT_ENABLED=$true
oh-my-posh init pwsh | Invoke-Expression



================================================
FILE: .github/copilot-instructions.md
================================================
# GitHub Copilot Instructions for oh-my-posh

## Commit and Pull Requests Guidelines

- When naming a PR or commits, always follow [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/#summary)
- All commits must follow the conventional commit format. You can find the repository speciffic rules in .commitlintrc.json.
- Use golangci-lint and gofmt before submitting
- The max length of a commit message line is 200 characters

## Go-Specific Guidelines

### Function Structure

- Keep functions focused and single-purpose
- Prefer early returns to reduce nesting
- Validate inputs at the beginning of functions
- Use guard clauses to handle edge cases early
- Do not use if/else but prefer switch statements for multiple conditions, or early returns for simple conditions

### Testing

- Follow table-driven test patterns established in the codebase
- Use `testify/assert` and `testify/require` for assertions
- Name test cases descriptively to explain what is being tested
- Include both positive and negative test cases
- Test edge cases and error conditions
- When including a standard library that conflicts with an existing import, use the lib(library name) pattern to avoid conflicts. e.g. `libtime` for `time` package.

### Coding Style

- One level of indentation per function.
- Don't use the ELSE keyword.
- Wrap all primitives and Strings in structs or types.
- First class collections.
- One dot per line.





================================================
FILE: .github/dependabot.yml
================================================
version: 2
updates:

  - package-ecosystem: "github-actions"
    directory: "/"
    target-branch: "main"
    schedule:
      interval: "daily"
    groups:
      all:
        patterns:
        - "*"
    ignore:
      - dependency-name: "softprops/action-gh-release"
        # https://github.com/softprops/action-gh-release/issues/556
        versions: ["2.2.0"]

  - package-ecosystem: "gomod"
    directory: "/src"
    target-branch: "main"
    schedule:
      interval: "daily"
    groups:
      minor-patch:
        patterns:
        - "*"
        update-types:
        - "minor"
        - "patch"

  - package-ecosystem: "npm"
    directory: "/website"
    schedule:
      interval: "daily"
    ignore:
      - dependency-name: "*"



================================================
FILE: .github/FUNDING.yml
================================================
# These are supported funding model platforms

github: jandedobbeleer
ko_fi: jandedobbeleer
polar: oh-my-posh



================================================
FILE: .github/holopin.yml
================================================
organization: ohmyposh
defaultSticker: clg0u51g681700fmfr086ofc6
stickers:
  -
    id: clg0u51g681700fmfr086ofc6
    alias: wizard
  -
    id: clu72f66x59170fjoo6t2b7zs
    alias: helping



================================================
FILE: .github/PULL_REQUEST_TEMPLATE.md
================================================
### Prerequisites

- [ ] I have read and understood the [contributing guide][CONTRIBUTING.md].
- [ ] The commit message follows the [conventional commits][cc] guidelines.
- [ ] Tests for the changes have been added (for bug fixes / features).
- [ ] Docs have been added/updated (for bug fixes / features).

### Description

<!---

Tips:

If you're not comfortable with working with Git,
we're working a guide (https://ohmyposh.dev/docs/contributing/git) to help you out.
Oh My Posh advises GitKraken (https://www.gitkraken.com/invite/nQmDPR9D) as your preferred cross platform Git GUI power tool.

-->

[CONTRIBUTING.md]: https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md
[cc]: https://www.conventionalcommits.org/en/v1.0.0/#summary



================================================
FILE: .github/stale.yml
================================================
# Configuration for probot-stale - https://github.com/probot/stale

# Number of days of inactivity before an Issue or Pull Request becomes stale
daysUntilStale: 7

# Number of days of inactivity before an Issue or Pull Request with the stale label is closed.
# Set to false to disable. If disabled, issues still need to be closed manually, but will remain marked as stale.
daysUntilClose: 7

# Only issues or pull requests with all of these labels are check if stale. Defaults to `[]` (disabled)
onlyLabels: []

# Issues or Pull Requests with these labels will never be considered stale. Set to `[]` to disable
exemptLabels:
  - "🚀 feat"
  - "🐛 bug"
  - "🤩 enhancement"
  - "😵‍💫 help wanted"

# Set to true to ignore issues in a project (defaults to false)
exemptProjects: false

# Set to true to ignore issues in a milestone (defaults to false)
exemptMilestones: false

# Set to true to ignore issues with an assignee (defaults to false)
exemptAssignees: false

# Label to use when marking as stale
staleLabel: "💤 stale"

# Comment to post when marking as stale. Set to `false` to disable
markComment: >
  This issue has been automatically marked as stale because it has not had
  recent activity. It will be closed in 7 days if no further activity occurs.
  Thank you for your contributions.

# Limit the number of actions per hour, from 1-30. Default is 30
limitPerRun: 30

# Limit to only `issues` or `pulls`
only: issues



================================================
FILE: .github/ISSUE_TEMPLATE/bug.yml
================================================
name: 🐛 Bug Report
description: File a bug report
labels: ["🐛 bug"]
assignees:
  - jandedobbeleer
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report!
  - type: checkboxes
    id: terms
    attributes:
      label: Code of Conduct
      description: By submitting this issue, you agree to follow our [Code of Conduct](https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md)
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true
  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: Also tell us, what did you expect to happen?
      placeholder: Tell us what you see!
      value: "A bug happened!"
    validations:
      required: true
  - type: textarea
    id: theme
    attributes:
      label: Theme
      description: Which theme/config are you using?
    validations:
      required: true
  - type: dropdown
    id: operating-system
    attributes:
      label: What OS are you seeing the problem on?
      multiple: true
      options:
        - Windows
        - Linux
        - macOS
  - type: dropdown
    id: shell
    attributes:
      label: Which shell are you using?
      multiple: true
      options:
        - bash
        - elvish
        - fish
        - cmd
        - nu
        - powershell
        - xonsh
        - zsh
        - other (please specify)
  - type: textarea
    id: logs
    attributes:
      label: Log output
      description: Please copy and paste the output generated by `oh-my-posh debug --plain`.
      render: Shell
    validations:
      required: true



================================================
FILE: .github/ISSUE_TEMPLATE/config.yml
================================================
blank_issues_enabled: false
contact_links:
  - name: Oh My Posh FAQ
    url: https://ohmyposh.dev/docs/faq
    about: Please find common issues here.
  - name: Oh My Posh Docs
    url: https://ohmyposh.dev/docs
    about: RTFM
  - name: Oh My Posh Q&A
    url: https://github.com/JanDeDobbeleer/oh-my-posh/discussions
    about: Please ask questions here.



================================================
FILE: .github/ISSUE_TEMPLATE/docs.yml
================================================
name: 📖 Documentation
description: Suggest a change to the documentation
labels: ["📖 docs"]
assignees:
  - jandedobbeleer
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to request this improvement!
  - type: checkboxes
    id: terms
    attributes:
      label: Code of Conduct
      description: By submitting this issue, you agree to follow our [Code of Conduct](https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md)
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true
  - type: textarea
    id: enhancement-request
    attributes:
      label: What would you like to see changed/added?
      description: Try to give some examples or text to make it really clear!
      placeholder: Tell us what you would like to see!
      value: "This could change in the documentation!"
    validations:
      required: true



================================================
FILE: .github/ISSUE_TEMPLATE/enhancement.yml
================================================
name: 🤩 Enhancement
description: Suggest a change to an existing feature
labels: ["🤩 enhancement"]
assignees:
  - jandedobbeleer
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to request this improvement!
  - type: checkboxes
    id: terms
    attributes:
      label: Code of Conduct
      description: By submitting this issue, you agree to follow our [Code of Conduct](https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md)
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true
  - type: textarea
    id: enhancement-request
    attributes:
      label: What would you like to see changed?
      description: Try to give some examples to make it really clear!
      placeholder: Tell us what you would like to see!
      value: "This feature would benefit from this!"
    validations:
      required: true



================================================
FILE: .github/ISSUE_TEMPLATE/feat.yml
================================================
name: 🚀 Feature Request
description: Request a new feature
labels: ["🚀 feat"]
assignees:
  - jandedobbeleer
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to request a new feature!
  - type: checkboxes
    id: terms
    attributes:
      label: Code of Conduct
      description: By submitting this issue, you agree to follow our [Code of Conduct](https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/CONTRIBUTING.md)
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true
  - type: textarea
    id: feature-request
    attributes:
      label: What would you like to see added?
      description: Try to give some examples to make it really clear.
      placeholder: Tell us what you would like to see!
      value: "Something new and amazing!"
    validations:
      required: true



================================================
FILE: .github/workflows/android.yml
================================================
name: Android
on:
  release:
    types: [published]

jobs:
  build-android:
    runs-on: ubuntu-latest
    container: ghcr.io/jandedobbeleer/golang-android-container:latest
    steps:
    - name: Checkout code 👋
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Build
      run: |
        VERSION=$(echo "${{ github.event.release.name }}" | cut -c2-)
        echo "Building version ${VERSION}"
        cd src
        go build -o dist/posh-android-arm -ldflags="-s -w -X 'github.com/jandedobbeleer/oh-my-posh/src/build.Version=${VERSION}' -X 'github.com/jandedobbeleer/oh-my-posh/src/build.Date=$(date)'"
    - name: Upload artifacts 🆙
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          console.log('environment', process.versions);

          const fs = require('fs').promises;

          const { repo: { owner, repo }, sha } = context;
          console.log({ owner, repo, sha });

          await github.rest.repos.uploadReleaseAsset({
            owner, repo,
            release_id: ${{ github.event.release.id }},
            name: 'posh-android-arm',
            data: await fs.readFile('./src/dist/posh-android-arm')
          });



================================================
FILE: .github/workflows/bluesky.yml
================================================
name: Bluesky
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  bluesky:
    runs-on: ubuntu-latest
    steps:
      - name: Publish
        uses: JanDeDobbeleer/bluesky-releasenotes-action@main
        with:
          title: "The best release yet 🚀"
          bluesky-identifier: ${{ secrets.BLUESKY_IDENTIFIER }}
          bluesky-password: ${{ secrets.BLUESKY_PASSWORD }}
          github-token: ${{ secrets.GH_PAT }}



================================================
FILE: .github/workflows/build_code.yml
================================================
on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'COPYING'
      - 'website/**'
      - '.github/*.md'
      - '.github/FUNDING.yml'

name: Build Code
jobs:
  build:
    runs-on: macos-latest
    defaults:
      run:
        shell: pwsh
    steps:
    - name: Checkout code 👋
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Install Go 🗳
      uses: ./.github/workflows/composite/bootstrap-go
    - name: Run GoReleaser 🚀
      uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552
      with:
        distribution: goreleaser
        version: v2.3.2
        args: build --clean --snapshot --skip=post-hooks --skip=before
        workdir: src
    - name: Archive production artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: builds
        retention-days: 1
        path: |
          src/dist



================================================
FILE: .github/workflows/close_themes_pr.yml
================================================
name: Close Themes PR
on:
  pull_request_target:
    types:
      - opened

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 👋
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Check and close 🔐
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { repo: { owner, repo } } = context;
            const pr = context.payload.pull_request;

            const response = await github.rest.pulls.listFiles({
              owner, repo,
              pull_number: pr.number
            });

            if (response.status !== 200) {
              console.log('Could not fetch files');
              return;
            }

            let hasThemeAdditions = false;
            for (const file of response.data) {
              const name = file.filename
              console.log(`File: ${name}`);
              if (file.status === 'added' && name.includes('themes/')) {
                console.log(`File: ${name} is a theme addition`);
                hasThemeAdditions = true;
                break;
              }
            }

            if (!hasThemeAdditions) {
              console.log('No theme additions found.');
              return;
            }

            const body = `👋 @${pr.user.login}, theme aditions are no longer accepted due to the ever growing set. We do however accept showcasing your custom theme in the [🎨 Themes section](https://github.com/JanDeDobbeleer/oh-my-posh/discussions/categories/themes) or [themes channel](https://discord.com/channels/1023597603331526656/1055533233309233252) on Discord.`

            console.log(`Adding comment: ${body}`);
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: pr.number,
              body,
            });

            console.log(`Closing pull request: ${pr.html_url}`);
            await github.rest.pulls.update({
              owner, repo,
              pull_number: pr.number,
              state: "closed",
            });



================================================
FILE: .github/workflows/code.yml
================================================
on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'COPYING'
      - 'website/**'
      - '.github/*.md'
      - '.github/FUNDING.yml'

name: Validate Code
jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}/src
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Install Go 🗳
      uses: ./.github/workflows/composite/bootstrap-go
    - name: Golang CI
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9
      with:
        working-directory: src
    - name: Fieldalignment
      run: |
        go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest
        fieldalignment "./..."
    - name: Modernize
      run: |
        go install golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest
        modernize "./..."
    - name: Unit Tests
      run: go test -v ./...



================================================
FILE: .github/workflows/commits.yml
================================================
name: Validate Commits

on: [pull_request]

jobs:
  commitlint:
    uses: jandedobbeleer/workflows/.github/workflows/commits.yml@main



================================================
FILE: .github/workflows/contributors.yml
================================================
name: Contributors
on:
  pull_request_target:
    types:
      - closed

jobs:
  contributors:
    uses: jandedobbeleer/workflows/.github/workflows/contributors.yml@main
    secrets:
      token: ${{ secrets.GH_PAT }}



================================================
FILE: .github/workflows/dependabot.yml
================================================
name: Dependabot auto-merge
on:
  pull_request:
    types: [opened, reopened]

permissions:
    contents: write
    pull-requests: write

jobs:
  dependabot:
    uses: jandedobbeleer/workflows/.github/workflows/dependabot.yml@main



================================================
FILE: .github/workflows/discord.yml
================================================
name: Discord
on:
  release:
    types: [published]

jobs:
  notify:
    uses: jandedobbeleer/workflows/.github/workflows/discord.yml@main
    secrets:
      webhook: ${{ secrets.CHANGELOG_WEBHOOK }}



================================================
FILE: .github/workflows/docs.yml
================================================
name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "website/**"
      - "themes/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: true
          persist-credentials: false
      - name: Install Go 🗳
        uses: ./.github/workflows/composite/bootstrap-go
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20.9.0
        # Create Kind cluster to have a Kubernetes context for cloud-native-azure theme
        # Images are defined on every Kind release
        # See https://github.com/kubernetes-sigs/kind/releases
      - name: Create k8s v1.23 Kind Cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3
        with:
          node_image: kindest/node:v1.23.4@sha256:0e34f0d0fd448aa2f2819cfd74e99fe5793a6e4938b328f657c8e3f81ee0dfb9
          cluster_name: posh
      - name: Create Kubernetes namespace
        run: |
          kubectl create ns demo
      - name: Set default Kubernetes namespace
        run: |
          kubectl config set-context posh --namespace demo
      - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build oh-my-posh 🔧
        run: |
          cd src
          go build -o ./bin/oh-my-posh
          cd ..
      - name: Render themes 🎨
        run: |
          export PATH="$PWD/src/bin:$PATH"
          cd website
          npm install
          npm run themes
          cd ..
      - name: Build Docs And Deploy 🚀
        id: builddeploy
        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_MEADOW_063E9BA03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/website" # App source code path
          api_location: "/website/api" # Api source code path - optional
          output_location: "build" # Built app content directory - optional



================================================
FILE: .github/workflows/edit_rights.yml
================================================
name: Notify When Maintainers Cannot Edit

# **What it does**: Notifies the author of a PR when their PR does not allow maintainers to edit it.
# **Why we have it**: To prevent having to do this manually.
# **Who does it impact**: Open-source.

on:
  pull_request_target:
    types:
      - opened
      - edited

permissions:
  pull-requests: write

jobs:
  notify-when-maintainers-cannot-edit:
    uses: jandedobbeleer/workflows/.github/workflows/edit_rights.yml@main
    secrets:
      token: ${{ secrets.GH_PAT }}



================================================
FILE: .github/workflows/gomod.yml
================================================
name: Go Mod

on: [pull_request]

jobs:
  go-mod:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/src
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Install Go 🗳
      uses: ./.github/workflows/composite/bootstrap-go
    - name: Check for unused dependencies
      run: |
        go mod tidy
        if [ "$(git status | grep -c "nothing to commit, working tree clean")" == "1" ]; then
          echo "Nothing to tidy"
          exit 0
        fi
        echo "Go mod tidy is needed"
        exit 1



================================================
FILE: .github/workflows/homebrew.yml
================================================
name: Homebrew
on:
  release:
    types: [published]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
    - name: Notify Homebrew Repo 🙋🏾‍♀️
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      with:
        github-token: ${{ secrets.GH_PAT }}
        script: |
          await github.request('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', {
            owner: 'jandedobbeleer',
            repo: 'homebrew-oh-my-posh',
            workflow_id: 'release.yml',
            ref: 'main',
            inputs: {"version": process.env.GITHUB_REF.replace('refs/tags/v', '')}
          })



================================================
FILE: .github/workflows/lock.yml
================================================
name: 'Lock Threads'

on:
  schedule:
    - cron: '0 0 * * 1'

permissions:
  issues: write

concurrency:
  group: lock

jobs:
  action:
    runs-on: ubuntu-latest
    steps:
      - uses: dessant/lock-threads@1bf7ec25051fe7c00bdd17e6a7cf3d7bfb7dc771
        with:
          issue-inactive-days: '90'
          issue-comment: >
            This issue has been automatically locked since there
            has not been any recent activity (i.e. last half year) after it was closed.
            It helps our maintainers focus on the active issues.

            If you have found a problem that seems similar, please open a
            [discussion](https://github.com/JanDeDobbeleer/oh-my-posh/discussions/new?category=troubleshoot)
            first, complete the body with all the details necessary to reproduce,
            and mention this issue as reference.
          process-only: 'issues'



================================================
FILE: .github/workflows/markdown.yml
================================================
name: Markdownlint

on: [pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Lint files
      uses: articulate/actions-markdownlint@17b8abe7407cd17590c006ecc837c35e1ac3ed83
      with:
          files: .
          config: .markdownlint.yaml



================================================
FILE: .github/workflows/merge_contributions_pr.yml
================================================
name: Merge contributions PR
on:
  pull_request_target:
    types:
      - opened
      - reopened

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 👋
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Check and merge ⛙
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { repo: { owner, repo } } = context;
            const pr = context.payload.pull_request;

            if (pr.user.id !== 46447321) {
              console.log('Not an all-contributors pull request');
              return;
            }

            console.log(`Merging pull request: ${pr.html_url}`);
            await github.rest.pulls.merge({
              owner, repo,
              pull_number: pr.number,
              merge_method: "rebase",
            });



================================================
FILE: .github/workflows/microsoft_store.yml
================================================
name: Windows Store
on:
  release:
    types: [published]

jobs:
  microsoft_store:
    name: Publish To Windows Store
    runs-on: ubuntu-latest
    steps:
      - name: Configure Store Credentials 🔑
        uses: jandedobbeleer/store-submission@submission-status
        with:
          command: configure
          type: win32
          seller-id: ${{ secrets.SELLER_ID }}
          product-id: ${{ secrets.PRODUCT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          only-on-ready: true
      - name: Update draft submission
        uses: jandedobbeleer/store-submission@submission-status
        with:
          command: update
          product-update: '{
            "packages":[
            {
            "packageUrl":"https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/${{ github.event.release.tag_name }}/install-x64.msi",
            "languages":["en"],
            "architectures":["X64"],
            "installerParameters":"/quiet INSTALLER=ws",
            "isSilentInstall":false
            },
            {
            "packageUrl":"https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/${{ github.event.release.tag_name }}/install-arm64.msi",
            "languages":["en"],
            "architectures":["Arm64"],
            "installerParameters":"/quiet INSTALLER=ws",
            "isSilentInstall":false
            },
            {
            "packageUrl":"https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/${{ github.event.release.tag_name }}/install-x86.msi",
            "languages":["en"],
            "architectures":["X86"],
            "installerParameters":"/quiet INSTALLER=ws",
            "isSilentInstall":false
            }
            ]
            }'
      - name: Publish Submission
        uses: jandedobbeleer/store-submission@submission-status
        with:
          command: publish



================================================
FILE: .github/workflows/release.yml
================================================
name: Release

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "packages/**"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  changelog:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changelog.outputs.version }}
      body: ${{ steps.changelog.outputs.clean_changelog }}
      tag: ${{ steps.changelog.outputs.tag }}
      skipped: ${{ steps.changelog.outputs.skipped }}
    steps:
      - name: Checkout code 👋
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Create changelog ✍️
        id: changelog
        uses: TriPSs/conventional-changelog-action@67139193614f5b9e8db87da1bd4240922b34d765
        with:
          github-token: ${{ secrets.github_token }}
          skip-version-file: "true"
          output-file: "false"
          skip-commit: "true"
          skip-on-empty: "true"
          skip-tag: "true"

  artifacts:
    needs: changelog
    if: ${{ needs.changelog.outputs.skipped == 'false' }}
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}/build
    steps:
      - name: Checkout code 👋
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Install Go 🗳
        uses: ./.github/workflows/composite/bootstrap-go
      - name: Pre Build 😸
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          ./pre.ps1 -Version ${{ needs.changelog.outputs.version }}
      - name: Run GoReleaser 🚀
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552
        with:
          distribution: goreleaser
          version: v2.3.2
          args: release --clean --skip publish
          workdir: src
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      - name: Post Build 🤐
        run: |
          ./post.ps1
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build-artifacts
          path: |
            src/dist/posh-*
            src/dist/themes.*
            src/dist/checksums.*
  msi:
    needs:
      - changelog
      - artifacts
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64, x86]
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}/packages/msi
    steps:
      - name: Checkout code 👋
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: build-artifacts
          path: dist
      - name: Install Wix Toolset 🛠
        run: dotnet tool install --global wix
      - name: Build installer 📦
        id: build
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          $version = '${{ needs.changelog.outputs.version }}'.TrimStart("v")
          ./build.ps1 -Architecture ${{ matrix.arch }}  -Version $version -Copy -Sign
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: msi-artifact-${{ matrix.arch }}
          path: |
            packages/msi/out/install-${{ matrix.arch }}.msi
            packages/msi/out/install-${{ matrix.arch }}.msi.sha256
            packages/msi/out/install-${{ matrix.arch }}.msix
            packages/msi/out/install-${{ matrix.arch }}.msix.sha256
  release:
    runs-on: ubuntu-latest
    needs:
      - changelog
      - artifacts
      - msi
    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          merge-multiple: true
      - name: Upload version file
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.CDN_CONNECTIONSTRING }}
        run: |
          echo v${{ needs.changelog.outputs.version }} > version.txt
          az storage blob upload-batch --destination v${{ needs.changelog.outputs.version }} --source .
          az storage blob upload-batch --destination latest --overwrite true --source .
      - name: Release 🎓
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          tag_name: ${{ needs.changelog.outputs.tag }}
          body: ${{ needs.changelog.outputs.body }}
          fail_on_unmatched_files: true
          token: ${{ secrets.GH_PAT }}
          files: |
            *



================================================
FILE: .github/workflows/winget.yml
================================================
name: Winget
on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}/packages/winget
    env:
      WINGETCREATE_TOKEN: ${{ secrets.WINGETCREATE_TOKEN }}
    steps:
    - name: Checkout code 👋
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Create manifest and submit PR 📦
      run: |
        ./build.ps1 -Version "${{ github.event.release.tag_name }}" -Token $env:WINGETCREATE_TOKEN



================================================
FILE: .github/workflows/composite/bootstrap-go/action.yml
================================================
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: 'Setup Go'
description: 'Install Go and override with the custom build'
branding:
  icon: download
  color: purple
runs:
  using: "composite"
  steps:
    - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
      with:
        go-version: '1.24.4'
        cache-dependency-path: src/go.sum


